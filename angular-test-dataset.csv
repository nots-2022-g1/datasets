,0,1
0,compiler fix deprecation warning jasmine log a warning when there a describe with no test these change fix one such case in the compiler that happens when the test are run against window pr close ,test
1,docsinfra upgrade cli command doc source to aaebf updating angularmaster from clibuildsmaster relevant change in commit range modified helpbuildjson helpgeneratejson pr close ,build
2,form property renaming safe code this fix property renaming related issue in advanced closure compiler optimization pr close ,fix
3,compiler specify angularcore a peer dependency the compiler generates code for the angular runtime in angularcore which ha to be the exact same version a otherwise there may be version skew between what the compiler generates and what the runtime support this would result in hard to diagnose problem at runtime by adding a peer dependency for angularcompiler on angularcore we can let the package manager report an error npm or warning npm yarn during installation to signal that the set of package is incompatible pr close ,refactor
4,core support typescript add support for typescript pr close ,feat
5,form add untypedformbuilder this wa intended to be part of but wa left out add a new class for use in migration pr close ,fix
6,router use helper function to throw nomatch this update match the other location where nomatch is thrown pr close ,refactor
7,serviceworker emit a notification when the service worker is already up to date after check when the service worker check for an update and find that the version on the server is the same a the version locally installed it currently noops this change introduces an event which it emits in this situation which notifies client a check ha occurred without error and no update wa found pr close ,feat
8,zonejs defineproperties should also set symbol prop close fix defineproperties patch not set symbol prop issue coauthoredby varomodtvaromodtusersnoreplygithubcom coauthoredby andrewkushnirandrewkushnirusersnoreplygithubcom pr close ,fix
9,router remove special logic for hybrid apps this commit remove special undocumented logic in the router code that is meant to prevent duplicate navigation that result from location syncs in angularjsangular hybrid application the duplicate navigation can occur when both the router and the angularjs sync code detect a location change via a popstatehashchange event when this happens the angular router schedule a navigation to sync itself with the browser but the hybrid listener may also schedule an additional navigation there are a few reason this logic should not be included in the router this special logic is not tree shakeable so it introduces a bundle size cost for all application most of which dont need it there have been many update to the routing pipeline to tolerate duplicate navigation that is duplicate navigation can happen and routing should still complete successfully the logic is really in the wrong place the hybrid sync code should be the location to handle this if duplicate navigation are meant to be avoided the hybrid sync code should have handling to not trigger duplicate navs this logic also used to exist because the mock location helper used for test incorrectly triggered popstate event during router navigation in order to avoid unexpected behavior in test this logic needed to be added this incorrect mocking may also have been put in place because the upgrade module would see a location change event and trigger a duplicate navigation the location mock ha since been updated to match real browser behavior so this is no longer necessary the upgrade module ha also been updated to not trigger duplicate navigation the following commits are related to this side note the settimeout in the location change listener is used to ensure the ordering of duplicate navigation wa consistent you can see that the logic being removed here expects the imperative navigation to precede the popstatehashchange with the removal of this code the settimeout no longer serf a purpose however it ha been found that test can rely on this behavior incorrectly because they expect the navigation to be complete but in reality it hasnt even started because the test ha not flushed the timeout removing the timeout would be a breaking change a a result pr close ,refactor
10,core allow for injector to be specified when creating an embedded view add support for passing in an optional injector when creating an embedded view through viewcontainerrefcreateembeddedview and templaterefcreateembeddedview the injector allows for the di behavior to be customized within the specific template this is a second stab at the change in the difference this time is that the new injector act a a node injector rather than a module injector fix pr close ,feat
11,common make nglocalization token treeshakable this commit update the nglocalization token to become treeshakable v using a direct reference to that token in the provider section of the commonmodule the nglocalization token is used for apps that use in and for other apps it would be excluded from the bundle pr close ,perf
12,form split up modelts modelts is currently extremely large this is the first step in an attempt to refactor it to be more easily navigable and reviewable this commit break up modelts into the following new file modelabstractmodelts the remainder of the model including the abstractcontrol base class and helper function which are used throughout modelformcontrolts formcontrol formcontroloptions and helper plus the constructor and untyped friend modelformarrayts formarray and untyped friend modelformgroupts formgroup and untyped friend this first phase is a purely mechanical code move there is no new code at all and no interface have been separated pr close ,refactor
13,core remove individual command for updating gold file the documented command for updating the form gold file wa outdated and didnt work since this command list can easily become outdated remove the individual command in favor of the simpler global script pr close ,fix
14,zonejs for legacy browser still use hard coding eventnames for legacy browser we still use the eventnames array to patch event instead of using objectgetownpropertynames to keep backward compatibility pr close ,refactor
15,zonejs remove onprop eventnames array to reduce the bundle size zonejs support the google closure compiler in the advance optimization mode to prevent closure compiler modify the onproperty name such a elementprototypeonclick zonejs implement the onproperty patch logic by declaring all the event name in the source code this increase the bundle size and also require updating the event name array to keep the information updated now google closure compiler ha the required event name defined in the builtin extern file so zonejs can use more simple implementation and decrease the bundle size of zonejs about k pr close ,refactor
16,router take only the first emitted value of every resolver to make it consistent with guard the router used to wait for the resolvers to complete and take the last value the change here take only the first emitted value of every resolver and proceed the navigation this match how other guard work in the router code resolve breaking change previously resolvers were waiting to be completed before proceeding with the navigation and the router would take the last value emitted from the resolver the router now take only the first emitted value by the resolvers and then proceeds with navigation this is now consistent with observables returned by other guard only the first value is used pr close ,refactor
17,form move getrawvalue into the abstractcontrol hierarchy currently there is a freestanding getrawvalue function which examines the type of the control this is an issue for refactoring modelts because it creates unnecessary dependency between the abstractcontrol class it is cleaner to simply add this method to the model hierarchy and call it directly and will ease upcoming refactoring pr close ,refactor
18,form move getrawvalue into the abstractcontrol hierarchy currently there is a freestanding getrawvalue function which examines the type of the control this is an issue for refactoring modelts because it creates unnecessary dependency between the abstractcontrol class it is cleaner to simply add this method to the model hierarchy and call it directly and will ease upcoming refactoring pr close ,refactor
19,form add untyped version of the model class for use in migration we had previously introduced an anyforuntypedforms type alias however given our updated migration plan we actually want to use alias for the model class themselves this commit introduces these alias and add them to the public api it must be merged before the type in order to migrate google pr close ,feat
20,core allow for injector to be specified when creating an embedded view add support for passing in an optional injector when creating an embedded view through viewcontainerrefcreateembeddedview and templaterefcreateembeddedview the injector allows for the di behavior to be customized within the specific template this is a second stab at the change in the difference this time is that the new injector act a a node injector rather than a module injector fix pr close ,feat
21,zonejs add promiseany implementation implement promiseany introduced in e close pr close ,feat
22,form clean up the find function move find into the abstractcontrol hierarchy and clean up a longstanding implementation todo pr close ,refactor
23,docsinfra fix the stackblitz on page inexample the previous configuration didnt allow to serve in any language fix pr close ,docs
24,core only track lviews that are referenced in ngcontext followup to where every lview that wa being created wa tracked in the trackedlviews map this isnt necessary because we only need to track the view that have been referenced by an ngcontext pr close ,perf
25,router refactor error in applyredirects to use common throwerror function the implementation of throwerror in rxjs is identical to what is done manually in the router code pr close ,refactor
26,router update match result to be more explicit the lastchild property in the match result is only used to compute the remaining segment ie the one which were not consumed the updated type here make it easier to use and more clear pr close ,refactor
27,localize update version of babel the angularlocalize package depends on a version of babel that is two year old so this commit update to the latest version some change were made to the linker and compliance test to account for slight change in source map along with a few code update because of change to the typing of babel pr close ,refactor
28,animation fix flaky animation ee test this add a m wait to the animation test to ensure they are fully done animating before asserting pr close ,test
29,router fix type of routepathmatch to be more accurate routepathmatch only allows fullprefix in reality this commit adjusts the type to be more strict and also add a migration to adjust existing code resolve breaking change the type of routepathmatch is now more strict place that use pathmatch will likely need to be updated to have an explicit routeroutes type so that typescript doe not infer the type a string pr close ,fix
30,animation add route animation delay to page test pr introduced an animation for pagestabs transition in the animation example application after such change intermittent ee failure started to occur see for example add a delay to account for such animation to all the animation pagestabs ee test so to fix the flakyness caused by the animation pr close ,test
31,change script ownerdocument in jsonp teardown handler cancel pending json handler by adopting it script element into another document this way the browser will prevent the script from being parsed and executed fix pr close ,refactor
32,common canceled jsonp request wont throw console error with missing callback function this commit fix a usecase where unsubscribing from a jsonp request will result in uncaught referenceerror ngjsonpcallbackxy is not defined thrown into console unsubscribing wont remove it associated callback function because the requested script will finish loading anyway and will try to call the handler pr close pr close ,fix
33,localize avoid import into compilercli package the compilerclis declaration file are not necessarily compatible with web environment that use angularlocalize and would inadvertently include typescript declaration file in any compilation unit that us angularlocalize which increase parsing time and memory usage during build using a default import that only typechecks when allowsyntheticdefaultimports is enabled fix pr close ,fix
34,common remove initial navigation since it may redirect to debughtml the should unregister a url change listener may fail in firefox randomly because of the initialnavigation being set to true this may navigate to debughtml and the router throw an error can not match any route debughtml pr close ,test
35,animation allow animation with unsupported cs property currently animation with unsupported cs property cause a hard error and the crash of the animation itself instead of this behaviour just ignore such property and provide a warning for the developer in the console only in dev mode this change also introduces a general way to present warning in the animation code resolve pr close ,fix
36,zonejs update electron patch to support electronremote close from electron the callbacksregistry is moved to electronremote package so all remote call between main process and renderer process is not being patched since the new version of electron released also callbacksregistry is not exported outside so this commit make a hack patch to load callbacksregistry from electronremotedistsrcrenderercallbacksregistry for patching pr close ,feat
37,docsinfra removed duplicated style in aio example removed duplicated style in aio example sc file pr close ,fix
38,animation make animationdrivergetparentelement required this change is a follow up to to make animationdrivergetparentelement a required method which allows removing the slow path for the animation namespace insertion logic breaking change the animationdrivergetparentelement method ha become required so any implementors of this interface are now required to provide an implementation for this method this breakage is unlikely to affect application developer a animationdriver is not expected to be implemented in user code pr close ,refactor
39,compiler remove usage of deprecated ast creation function proactively replaces our usage of the deprecated tscreate method in favor of using tsfactorycreate so that were not surprised when the t remove them in the future also account for some case where the signature had changed pr close ,refactor
40,compilercli support resolve animation name from the dts before this the compiler resolve the value in the dts a dynamic if the trigger is imported from angularanimations this pr will use ffr to simulate the actual implementation in j and extract the animation name pr close ,fix
41,core make localeid and other token from applicationmodule treeshakable the applicationmodule module ha a number of token declared a nontreeshakable provider this commit update them to make treeshakable pr close ,perf
42,core make compiler applicationref and applicationinitstatus treeshakable the compiler applicationref and applicationinitstatus class are registered a nontreeshakable provider in the applicationmodule this commit convert them to the treeshakable provider instead pr close ,perf
43,core drop unused scheduler provider the scheduler provider wa used previously when both viewengine and ivy code wa present after some prior refactoring all reference to the scheduler token were removed but the token itself remains present in the applicationmodule which make it nontreeshakable this commit remove the scheduler token a unused pr close ,refactor
44,docsinfra make hamburger menu non focusable when not visible the header hamburger menu get removed from the page by moving it outside the screen it can however still be accessed via keyboard navigation add a visibility hidden to the element to prevent such behavior pr close ,fix
45,animation remove query call in animation example the query call used for the transition between the home and about tab doesnt work a intented since it doesnt find any matching element remove such quering since it is not needed pr close ,docs
46,form remove type duplicate from button in reactiveforms example pr close ,docs
47,core avoid storing lview in ngcontext these change combine and currently we save a reference to an lview on most dom node created by angular either by saving the lview directly in the ngcontext or by saving the lcontext which ha a reference to the lview this can be a problem if the dom node is retained in memory because the lview ha reference to all of the child node of the view a well a other internal data structure previously we tried to resolve the issue by clearing the ngcontext when a node is removed see but we decided not to proceeed because it can slow down destruction due to a megamorphic write these change aim to address the issue while reducing the performance impact by assigning a unique id when an lview is created and adding it to ngcontext all active view are tracked in a map where their unique id is used a the key we dont need to worry about leak within that map because lviews are an internal data structure and we have complete control over when they are created and destroyed fix pr close ,perf
48,zonejs add integration test for zonejs mocha patch add integration test for mocha patch from zonejs to verify the issue is fixed pr close ,test
49,zonejs patch global instead of mocha object close in the new version fo mocha all global test function are from global object instead of mocha object adn the current zonejs mocha patch logic look like this globaldescribe mochadescribe function return originalmochadescribeapplythis argument and originalmochadescribe is the unpathced mocha implementation look like this function describe return contextdescribe and the context will finally delegate to globaldescribe so the current zonejs patch cause infinite loop this commit will not patch function of mocha object any longer pr close ,fix
50,animation improve algorithm to balance animation namespaces the prior approach would consider all existing namespaces from back to front to find the one thats the closest ancestor for a given host element an expensive contains operation wa used which needed to traverse all the way up the document root for each existing namespace this commit implement an optimization where the closest namespace is found by traversing up from the host element avoiding repeated dom traversal close pr close ,perf
51,core make iterablediffers and keyvaluediffers treeshakable this commit removed reference to the iterablediffers and keyvaluediffers class from the applicationmodule which effectively make them treeshakable both class have prov static field with the right setup so theyll be properly initialized when referenced pr close ,perf
52,localize fix angularjson syntax error about in in chapter internationlization at section deploy multiple locale the syntax for angularjson is wrong close pr close ,docs
53,animation fix ee intermittent failure this address a problem with animation ee test that were failing intermittently due to a missing timeout value pr close ,test
54,animation clarify information about query with leave add information to the query api doc clarifying that element with a trigger can be queried via leave when their parent is leaving this exception is potentially something to be changed see but for the time being the doc can be updated to make the user aware of such behavior pr close ,docs
55,core move animationmoduletype injection token into core move the animationmoduletype di token into core so that library like material dont have to introduce a dependency to animation only to figure out whether animation are disabled pr close ,feat
56,common cleanup url change listener when the root view is removed the location creates the urlchangesubscription when the onurlchange is called for the first time the subscription next function capture this and prevents the location from being garbage collected when the root view is removed pr close ,fix
57,docsinfra fix broken link in glossary fix broken link in glossary document pr close ,fix
58,animation improve aio animation guide info around enterleave improve the aio animation guide information around element entering and leaving this includes querying them their transition and also improvement to the animation guide live example pr close ,docs
59,docsinfra upgrade cli command doc source to acff updating angularmaster from clibuildsmaster relevant change in commit range modified helpextractinjson pr close ,build
60,docsinfra replace deprecated topromise usage this commit replaces deprecated observabletopromise usage with lastvaluefrom pr close ,refactor
61,docsinfra replace deprecated subscribe usage this commit replaces deprecated observablesubscribe usage pr close ,refactor
62,deprecated symbol used support for passing an error value to throwerror method will be removed in v of rxjs more info at pr close ,refactor
63,animation made error in the animation package tree shakeable this move all the error string into exported function that can be tree shaken away pr close ,perf
64,zonejs fix several test case which trigger done multiple time several test case trigger the done multiple time and cause warning from jasmine this commit fix these test case pr close ,fix
65,zonejs asynctest should only call done once asynctestzonespec trigger jasmine done function multiple time and cause warning an asynchronous function called it done callback more than once this is a bug in the spec beforeall beforeeach afterall or aftereach function in question this will be treated a an error in a future version see for more information the reproduce case will be running some zonerun inside waitforasync itmultiple done waitforasync zonecurrentrun zonecurrentrun the reason the done is called in the oninvoke hook is to handle the case that the testbody is totally sync but we should only do this check for the entry function not for all zonerun scenario another issue is if we run nested zone inside waitforasync the onhastask hook will be triggered multiple time and cause done be triggered multiple time so we need to only trigger the done when the zone is asynctestzone pr close ,fix
66,form improve email validator directive doc pr close ,docs
67,core viewcontainerrefcreatecomponent should consult module injector when custom one is provided before ivy it wa only possible to call the viewcontainerrefcreatecomponent function with the componentfactory a the first argument an instance of a componentfactory resolved via componentfactoryresolver contained a reference to an ngmodule where the component is declared a a result the component maintained a di connection with the module injector tree by retrieving an instance of ngmoduleref internally even when the custom injector wa provided we try to find a token in a custom injector first and consult module injector after that with ivy we expanded the viewcontainerrefcreatecomponent function api to support direct reference to the component class without going through the factory resolution step a a result there wa no connection to the ngmodule that declares the component thus if you provide a custom injector this is the only injector that is taken into account this commit update the logic for the factoryless case to try retrieving an instance of an ngmoduleref using the di tree which viewcontainerref belongs to the ngmoduleref instance is then used to get a hold of a module injector tree this brings the factoryless and factorybased logic to more consistent state close pr close ,fix
68,compiler chain element startend instruction in template with several level of nested node it common for several elementstartelementend instruction to show up in a row which can be optimized away these change add chaining support for elementstart elementend elementcontainerstart and elementcontainerend to shave off some byte when possible pr close ,perf
69,compiler rework instruction generation logic for improved flexibility previously the logic for generating chained instruction wa somewhat rigid because we had to collect all of the call ahead of time and then call one of the chained instruction helper this doesnt work for something like elementstart because we have to descend into other element that could add to the chain these change refactor the code so that we collect the list of instruction in a flat array and we do the chaining only once at the end when we have the entire instruction set for the code block the new approach ha the advantage of being almost entirely configurationbased via the chainableinstructions array and being more flexible in allowing u to chain instruction that span across element pr close ,refactor
70,common mark lifecycle method a nodoc pr close ,docs
71,core drop all ngfactory and ngsummary import this commit update various place in the repo mostly testsexamples to drop all ngfactory and ngsummary import a they are no longer needed in ivy pr close ,refactor
72,form incorrectly keeping track of ngmodel with ngfor inside a form when an ngmodel is created within a form it receives an ngcontrol based on it name but the control doesnt get swapped out if the name change this can lead to problem if the ngmodel is part of an ngfor because the name can change based on it position in the list and a new control can be defined with the same name leading u to having multiple directive pointing to the same control for example if we start off with a list like ngmodel ngmodel ngmodel then we remove the second item ngmodel ngmodel and finally if we decide to add an item to the end of the list well already have a control for index causing the list to look like ngmodel ngmodel ngmodel these change fix the issue by removing the old control when the name of the directive change fix fix pr close ,fix
73,form update patternvalidator to inherit abstractvalidatordirective this commit update the patternvalidator class to inherit abstractvalidatordirective to make it conistent with other validators close angular pr close ,refactor
74,core input coercion breaking change form email input coercion form email input value will be considered a true if it is defined with any value rather than false and false pr close ,fix
75,compiler allow bananainabox binding to end with nonnull assertion for twowaybindings that use the bananainabox syntax the compiler synthesizes an event assignment expression from the primary expression it is valid for the primary expression to be terminated by the nonnull operator however naive string substitution is used for the synthesized expression such that the would immediately precede the token resulting in the valid operator token the expression would still parse correctly but it doesnt implement the proper semantics resulting in incorrect runtime behavior changing the expression substitution to force a space between the primary expression and the assignment avoids this mistake but it uncovers a new issue the grammar doe not allow for the lh of an assignment to be the nonnull operator so the synthesized expression would fail to parse to alleviate this the synthesized expression is parsed with a special parser flag to allow for this syntax fix pr close ,fix
76,docsinfra fix cosidered typo fix the cosidered typo which should be considered pr close ,docs
77,router clarify execution order for resolvers fix pr close ,docs
78,remove ie special status handling revert the condition a dev only pr close ,perf
79,core cleanup debugnode and debugelement implementation this commit update debugnode and debugelement implementaitons to cleanup viewengine removal artifact there is no need for a separate interface and implementation class so we can combine them now this comment also get rid of r suffix denoting ivy in helper method pr close ,refactor
80,common support year greater than since according to iso the year is minimum of digit we should support year greater than this is similar to the change in inputjs changed d to d pr close ,feat
81,devinfra convert nullish coalescing operator to plain javascript low version nodejs doesnt support nullish coalescing operator very well pr close ,refactor
82,form correct empty validator to handle object with a property length form required validator should not reject object that contain a length attribute set to zero fix coauthoredby dylan hunn dylhunngmailcom breaking change object with a length key set to zero will no longer validate a empty this is technically a breaking change since object with a key length and value will no longer validate a empty this is a very minor change and any reliance on this behavior is probably a bug anyway pr close ,fix
83,platformbrowser make transfer state key typesafe make statekey typesafe by narrowing the type breaking change this may break invalid call to transferstate method this tightens parameter type of transferstate usage and is a minor breaking change which may reveal existing problematic call pr close ,fix
84,router update navigationinitialurl to match documentation and reality breaking change the type of initialurl is set to stringurltree but in reality the router only set it to a value that will always be urltree initialurl is documented a the target url passed into the routernavigatebyurl call before navigation but the value actually get set to something completely different it set to the current internal urltree of the router at the time navigation occurs with this change there is no exact replacement for the old value of initialurl because it wa enver intended to be exposed routerurl is likely the best replacement for this in more specific usecases tracking the finalurl between successful navigation can also be used a a replacement pr close ,fix
85,animation implement missing transition delay fix the transition function accepting a delay in it animationoptions input but not acting on it by adding such delay to all the transition timeline note adding the delay to all the transition timeline is the only way to accomplish this since transition have their own logic and do not have their own timeline like other animation function have resolve pr close ,fix
86,docsinfra add type to all the aio example button add type to all the button in the angulario example to encourage the best practice of always including a type per button regardless to whether it is in a form or now pr close ,refactor
87,docsinfra remove outdated comment regarding customevent remove the comment present in aio example saying that for older browser such a ie customevent could be necessary a the the event constructor could be not available such comment are no longer necessaryrelevant since the event constructor is available for all the supported browser pr close ,refactor
88,docsinfra fix template eslint issue in aio example the aio example have various eslint issue regarding template rule those are currently turned off and todo comment have been added to them in the example eslintrc fix such issue and remove the respective todo comment this also includes example refactoring to use button for better accessibility this change try to make the smallest amound of change to the example behavior and designsui pr close ,refactor
89,animation add section about animating reordering list item add a section regarding reordering list item in the complex animation sequence guide to help developer rememeber to use a trackbyfunction whenever they are animating ngfor list item which change their ordering a suggested here relates to issue and pr close ,docs
90,router set stricter type for routetitle this commit change the type of routetitle property from string unknown to string typeresolvestring fix pr close ,feat
91,router move type from config and interface to model this commit move all type from configts and interfacests to modelsts to fix circular dependency pr close ,refactor
92,compilercli initial implementation of standalone component this commit implement the first phase of standalone component in the angular compiler this mainly includes the scoping rule for standalone component componentimports significant functionality from the design is not implemented by this pr including import of standalone component into ngmodules the provider aspect of standalone component future commits will address these issue a we proceed with the design of this feature pr close ,feat
93,compilercli extract template scoping logic into a function in preparation for standalone component this commit move the logic which determines the potential set of componentsdirectivespipes in a template into a separate function this is a simple but crucial refactoring that break the assumption that all template scope come from ngmodules pr close ,refactor
94,compilercli split the annotation package into subpackages previously each decoratorhandler in the compiler wa stored in a single file in the annotation package the componentdecoratorhandler in particular wa several thousand line long prior to implementing the new standalone functionality for component this commit refactors annotation to split these large file into their own build target with multiple separate file this should make the implementation of standalone significantly cleaner pr close ,refactor
95,compiler add suppress msgdescriptions if no description is present on an in message ref this happens if a user writes span inmessagespan this is accepted a an internationalized message but without a description jscompiler will throw an error in this situation because description are generally required now the angular compiler will generate a suppression annotation so jscompiler allows the syntax this will ease an internal migration to jscompilerbased in pr close ,refactor
96,devtools change link to the angular repo use proper reporting and source code link in the devtools ui pr close ,fix
97,upgrade do not trigger duplicate navigation event from angular router this code mimic behavior that google analytics ha been using to prevent duplicate navigation they set up their own hybridroutingservice location sync to avoid duplicate navigation that came from the angular router this would happen because the angular router would trigger a navigation which would then get picked up by the locationshim which would trigger a locationchangestart which would then be picked up by the setuplocationsync watcher here which would again trigger a navigation in the angular router all of this can be prevented by checking if the navigationid exists on the history state object this property is added by the angular router during navigation fix pr close ,fix
98,upgrade update router upgrade test to use fewer mock this update the router upgrade test to use le mocked behavior the test upgrade location module is copied from the one thats used in the common package this update to the test verifies more real behavior of the upgrade module pr close ,test
99,platformbrowser do not run change detection when loading hammer the hammerjs might be loaded asynchronously if the hammerloader token is provided it loading cause additional change detection cycle when the script load event is fired and the import promise resolve it loading doesnt have to require angular running tick since the hammer instance is created outside of the angular zone anyway breaking change this change may cause a breaking change in unit test that are implicitly depending on a specific number and sequence of change detection in order for their assertion to pas pr close ,fix
100,docsinfra upgrade cli command doc source to becba updating angularmaster from clibuildsmaster relevant change in commit range modified helpbuildjson helptestjson pr close ,build
101,form update the typed form migration to use formarrayt instead of formarrayt previously formarray accepted an array generic now it accepts the element type so the migration must be update accordingly pr close ,fix
102,compilercli ensure casing of logical path is preserved the logical filesystem would store a cached result based on the canonical path where the cached value contains the physical path that wa originally provided this meant that other physical path with an identical canonical path would use a cached result derived from another physical path this inconsistency is not known to result in actual issue but is primarily being made a a performance improvement a using the provided physical path a cache key avoids the need to canonicalize the path if it result is already cached pr close ,fix
103,compilercli use relative import into dts file a fallback in typecheck file the generated import should normally use module specifier that are valid for use in production code where arbitrary relative import into eg nodemodules are not allowed for template typechecking code it is however acceptable to use relative import a such file are never emitted to j code it is desirable to allow a filesystem relative import a fallback if an import would otherwise fail to be generated a doing so allows fewer situation from needing an inline type constructor pr close ,refactor
104,compiler remove viewengine identifier this commit remove the leftover identifier class that wa used in the viewengine compiler the remaining usage of the inlineinterpolate and interpolate instruction were refactored to make use of an interpolationexpression output expression to capture the argument list of an interpolation expression an attempt wa made to refactor this further by converting to the desired interpolation instruction immediately but some downstream consumer are designed in a way where the argument list itself is needed eg a other argument need to be prependedappended pr close ,refactor
105,router use resolve interface for custom title resolver pr close ,docs
106,router provide better typing for resolver example pr close ,docs
107,common include query parameter for open http request in verify when httptestingcontrollerverify is used to verify that there are not open unexpected request it would throw an error with the method and url of all pending request excluding the query parameter this is confusing a eg expectone match a url including it query parameter and expectone doe include the query parameter when it report when no request could be matched this commit change the error that is reported by verify to include the query parameter close pr close ,fix
108,devtools highlighter should only show the hovered component name the used child property on a htmlcollection doe not contain text element because of this the highlighter overlay text never got fully cleared pr close ,fix
109,common support ngmodule a an input to the ngcomponentoutlet this commit update the logic of the ngcomponentoutlet class to allow passing an ngmodule a an input instead of passing an ngmodule factory deprecated the ngmodulefactory input of the ngcomponentoutlet directive is deprecated in favor of a newly added ngmodule input the ngmodule input accepts reference to the ngmodule class directly without the need to resolve module factory first pr close ,feat
110,compilercli remove leftover extendedtemplatediagnostics flag this flag is currently a noop because extended diagnostics are enabled in production pr close ,refactor
111,migration remove old migration when using ng update user can not update multiple major version at the same time therefore migration that are not targeting version can not be run and therefore we are removing them pr close ,refactor
112,core the runtimeerror class should support more compact syntax this commit refactors the runtimeerror class to support a short version of providing error message throw new runtimeerror runtimeerrorcodeinjectoralreadydestroyed ngdevmode injector ha already been destroyed in prod mode the second argument becomes false andn this commit extends the typing to support that this commit also contains a couple place were the runtimeerror class is used to demostrate the compact form pr close ,refactor
113,compiler remove parsing support for quote expression socalled quote expression were added in becbadfbcfacfabdef to support foreign syntax to be used in angular template requiring a custom template transform to convert them somehow during compilation support for template transforms wa originally implemented in aedeedecaadeabedcc but ha since been dropped since the compiler is not public api the quote expression should not have any usage anymore removing support for them can improve error reporting for expression that contain a eg binding to a url without quote html a href mea here would be parsed a foreign quote expression with googlecom a value later reporting the error quote are not supported for evaluation because there wa no template transform to convert that code close pr close ,refactor
114,form move formcontrol to an overridden exported constructor this implementation change wa originally proposed a part of typed form and will have major consequence for that project a described in the design doc submitting it separately will greatly simplify the risk of landing typed form this change should have no visible impact on normal user of formcontrol see the typed form design doc here pr close pr close ,refactor
115,compilercli remove unused canonicalpath dependency this package is no longer used within compilercli so is being removed a a dependency pr close ,refactor
116,core add back support for namespace uris in createelement of dom renderer support for namespace uris rather than short namespace name wa added in to support how ivy passed around the namespace uri rather than short name at the time a a sideeffect this meant that namespace uris were supported by the default dom renderer a part of the public api likely unintentionally it did not however extend the support to other part of the system setattribute setattribute and the serverrenderer in the future we should decide what exactly the semantics for dealing with namespaces should be and make it consistent fix pr close ,fix
117,core strict template typechecking compatibility for perf test this commit update a type used in the transplanted view perf test to make the test compatible with strict template typechecking currently compiling the perf test result in the following t error error t type templateref is not assignable to type templaterefngforofcontextany any ngcontainer ngforlet n of view template template trackby trackbyindexngcontainer pr close ,refactor
118,form ensure onpush ancestor are marked dirty when the promise resolve currently ngmodel call setvalue after the resolvedpromise is resolved the promise is resolved after the child template executes the change detection is run but onpush view are not updated because they are not marked a dirty pr close ,fix
119,core flush delayed scoping queue while setting up testbed previously some ngmodules that were added to the delayed scoping queue never got removed from the queue before unit test execution that resulted in some component declared in those ngmodules missing their scope which componentsdirectivespipes were matched this commit add the logic to invoke delayed scoping queue flushing before starting a test to avoid missingincomplete scope for component used in a test pr close ,fix
120,animation remove no longer needed csskeyframes class this commit remove cs keyframesbased code that wa used to support animation in old browser with ie deprecation all supported browser have native webanimations support so the old code can be removed this result in kb decrease of the animation package bundle size since most of the code wa nontreeshakable close pr close ,perf
121,compilercli enable nullish coalescing check only with strictnullchecks typescript configures strictnullchecks to be disabled by default so the nullish coalescing check should follow the same default the rule actively depends on strictnullchecks a typescript doesnt include nullundefined in it type otherwise so the check wouldnt have a way to differentiate between them this commit also take the strict flag into account when strictnullchecks itself is not configured pr close ,fix
122,compilercli accept nullish coalescing operator for any and unknown type we should not make assumption about the any and unknown type using a nullish coalescing operator is acceptable for those pr close ,fix
123,core showcase host listener support for specific key in event pr close ,docs
124,animation remove generic object in favor of map we were using a number of generic object a if they were map and relying on delete to remove property in order to improve performance these have been switched to native map pr close ,perf
125,docsinfra make it possible to see whole notification text on smaller screen previously when the notification text did not fit on the viewport width it got truncated and it wa not possible to see the whole text this commit fix this by making the notification scrollable when the text overflow pr close ,fix
126,docsinfra make it easier to interact with notification on smaller screen on smaller screen the action button in notificationcomponent is hidden due to limited horizontal screen real estate thus the only way to perform the action is to click on the notification message which is typically a link previously the link inside the notification did not take up the whole height of the notification bar a a result clicking outside the link would dismiss the notification without following the link this commit make it easier to interact with the notification esp on smaller screen by ensuring the link cover the whole notification bar width and height pr close ,fix
127,docsinfra upgrade cli command doc source to dbece updating angularmaster from clibuildsmaster relevant change in commit range modified helpbuildjson helpeejson helpextractinjson helpservejson helptestjson helpupdatejson pr close ,build
128,devtools show date type property value in preview value of date property were not shown in the preview it wa formatted to a simple string thus not giving valuable info to the developer pr close ,fix
129,compilercli update where and how the indexed error are exposed the initial commit ebdacfbaaffdfcee stored the error rather than throwing but did not store them in a place that wa accessible to consumer instead the error should be added to the indexedcomponent so they can be surfaced where the index result are consumed pr close ,refactor
130,form update the typed form migration schematic to find all file we were breaking out of the loop that walk the source tree due to an incorrect return pr close ,fix
131,docsinfra content overflow in mobile when reading the doc page on mobile some page tend to scroll in horizontal direction quite a lot which is unpleasant fix pr close ,fix
132,form support negative index in formarray method this new feature allows negative index to wrap around from the back just like e arrayat in particular the following method accept negative index and behave like corresponding array method formarrayatindex behaves the same a arrayatindex formarrayinsertindex control behaves the same a arrayspliceindex control formarraysetcontrolindex control behaves the same a arrayspliceindex control formarrayremoveatindex control behaves the same a arrayspliceindex previous work in and by amitbeck issue coauthoredby amit beckenstein amitbeckgmailcom pr close ,feat
133,docsinfra fix link to cli command source code recently the cli repository switched to not prefixing tag name with a v update the versioninfo generated for cli command doc so that the link to the source code which include the tag name are correct fix pr close ,fix
134,form remove dead code this functionally dead code wa originally introduced via pull request were added to verify the fix and the many comment on that issue after it wa closed indicate that it wasnt actually resolved in fact setting selectedindex doe absolutely nothing here since the selected index is immediately overridden by setting the value property a working fix with test for the iesafari bug is in pull request originally this dead code wa removed a part of that pr but andrewkushnir recommended creating a separate pr for the cleanup pr close ,refactor
135,core edit and add doc for ngcontainer pr close ,docs
136,router add routetitle with a configurable titlestrategy this commit provides a service pagetitlestrategy for setting the document page title after a successful router navigation user can provide custom strategy by extending titlestrategy and adding a provider which override it the strategy take advantage of the preexisting data and resolve concept in the router implementation we can copy the routetitle into dataresolve in a nonbreaking way by using a symbol a the key this ensures that we do not have any collision with preexisting property name by using data and resolve we do not have to add anything more to the router navigation pipeline to support this feature resolve pr close ,feat
137,docsinfra fix type checking error with new jasmine type the jasmine type for spyobjcallsall seem to be more specific relying on thistypefn to determine the contextreceiver for an invoked spy this type doe not work a expected with class member a it seems this commit fix three of these type checking failure by explicitly casting the spy context to the actual class owning the method member pr close ,test
138,compilercli tolerate source span error in indexer when the indexer encounter a location where the source span doesnt match up with the expected identifier the current visitor code throw an error instead this change creates an error and move on to the next template item this allows the indexer to continue analysis even when there are error in the source mapping in addition it still allows caller to surface those error in their own way while still providing a much indexed information a possible about a node pr close ,refactor
139,devtools update comment to better reflect what angular version is running in g pr close ,docs
140,devtools remove license file in the devtools directory this file wa carried over from the original angular devtools repo now that devtools ha been merged into angularangular this file is no longer necessary because the root of this repo ha it own license file ,refactor
141,devtools disable cypress and remove dependency previously we were running cypress in ci since cypress need to be installed to run these test it wa decided that we would not run devtools cypress test until a decision could be made on an ee testing solution this commit remove all package script dependency and ci command that reference cypress notably it leaf the actual test in the devtools directory intact so that they can be referenced later once a decision is made ,refactor
142,devtools bring the angular devtools directory into the root bazel workspace previously devtools used a nested workspace for it bazel configuration this meant framework dependency were consumed via npm now devtools is part of the root bazel directory that all other file in this codebase fall under this allows u to build devtools using local angular package removing the need to consume these dependency with npn this is useful because we no longer have to update these dependency with an automated tool like renovate and our ci test will always run against the most up to date framework package ,refactor
143,devtools add override to class that extend abstract class in the devtools directory previously the typescript override keyword wa not on these method now that devtools us the tslint config in angularangular because of the noimplicitoverrideabstract rule we need to add these key word explicitly to method override that is what this commit doe ,refactor
144,devtools remove rulessass patch previously a workaround patch wa needed because rulessass didnt support v of rulesnodejs this commit update rulessass to a version that doe and remove the patch ,refactor
145,devtools run tslint fix on devtools codebase this commit run tslint fix with the angularangular tslint configuration on the file inside the devtools codebase notably the fileheader rule in tslintjson wa missing a default attribute this commit add that default attribute and set it to the license header that is present in all file in this repo after running tslint fix with this default added this commit added the license header to all file in the devtools directory note for the reviewer the automatically added license header were added a comment with the prefix since we want these comment removed in build and the rest of the codebase us a simple find and replace wa performed on the devtools directory to change these prefix to ,refactor
146,devtools make bazel label follow snake case convention previously camel case wa used for bazel label in the devtools directory this commit change these label to snake case except in the case where the label is identical to the directory name that the build file is in ,refactor
147,devtools remove inaccurate comment in bazelrc and defaultsbzl both of these comment were included accidentally after porting over bazel code from angularangular and angularcomponents to devtools they are not relevant to devtools so this commit remove them ,refactor
148,devtools clean up some of tooling brought in from angularcomponents remove mdc constant and unneeded angular package configs from packagesbzl remove partialcompilationintegration from the karma web test tag because we dont perform any of partial compilation integration test for devtools ,refactor
149,devtools remove unneeded tsconfig keyword args for tsproject these keyword args are not needed because tsproject and ngtsproject already default to the tsconfig at the root of the devtools directory this commit remove these key word args from place where tsconfig wa used a a keyword arg with the root level tsconfig a the target ,refactor
150,devtools remove redundant project file previously angular devtools wa in it own repository and so it had some project file related to github workflow vscode setting prettier configuration etc now after devtools ha been transfered to angularangular these file are redundant and so this commit remove them ,refactor
151,devtools run ngdev format on angular devtools file format the entire devtools directory with the ngdev formatting tool previously we relied on prettier so this commit also remove prettier from devtools dependency ,refactor
152,devtools fix some flakey cypress test us cycontains a one command to optimize cypress retryability mechanism affected test are in propertyupdateeejs and viewcomponentmetadataeejs ,test
153,devtools use ngdev stamp tooling to stamp the latest git sha in devtools previously we were using ngxbuildplus with a custom webpack config to determine the git sha at runtime now after migrating to bazel and transfering to angularangular this commit us ngdev to stamp the latest git sha directly in angular devtools application environment this commit also remove the old webpack configs ,build
154,devtools dedupe some bazel tooling brought in from angularcomponents some tooling wa brought in from angularcomponents to help with bundling spec file for karma this tooling ha since been ported over to the devinfra repo this commit dedupes the tooling and instead depends on the angulardevinfraprivate repo ,refactor
155,devtools run ngdev format on bazel file in devtools directory ,refactor
156,devtools disable the rebase pr on target branch circleci job so that the pr that merges the unrelated history of rangleangulardevtools can be successfully merged into angularangular usually this job would ensure that all pr in angularangular are running against the latest change to angularangular in order to merge the unrelated history of the commits in the rangleangulardevtools repo into angularangular we must temporarily disable this job ,build
157,devtools merge rangleangulardevtools into angularangular this is a merge commit that act at the only common child of commits from the rangleangulardevtools codebase and the angularangular codebase this commit wa created a the result of running git merge with the allowunrelatedhistories flag ,refactor
158,animation add bundling size regression test for animation package this add a size regression test for the animation package to the test suite pr close ,test
159,form temporarily disable the typed form migration it best to disable this optional migration in the minor release although it shouldnt run anyway we dont want people accidentally running it this pr will be rolled back after the minor is out pr close ,refactor
160,compilercli handle ngtemplate with structural directive in indexer an ngtemplate with an inline template ie ha a structural directive would previously not get an undefined tagname because the logic assumed the element would be telement or tcontent and read the tag name from the name property for a ttemplate this exists instead on the ttagname the final result would be an tagname of undefined for the parent ttemplate causing failure in the indexer downstream this undefined value is actually expected in the renderer code even though the type doe not specify this possibility this change update the type of tagname to be stringnull and explicitly handle the case where there is a structural directive on an ngtemplate you can see how the two are differentiated in the compliance code that wa modified in this commit pr close ,fix
161,docsinfra update dgenipackages to v this version includes angulardgenipackages and thus fix the rendering of overridden method in api doc fix pr close ,build
162,animation add bundling symbol test for animation package this add a full bundling animation symbol test to the test suite pr close ,test
163,serviceworker add cacheopaqueresponses option for datagroups add a new option for configuring datagroups cacheopaqueresponses that determines whether opaque response are cached or not this allows greater flexibility in configuring the behavior of datagroups while still keeping the current default a fallback fix pr close ,feat
164,serviceworker make mockresponse behave more similarly to real response make the mockresponse class used in test behave more similarly to how real response work by making the following improvement use an empty statustext when provided instead of the default ok value this allows better representing opaque response preserve more property redirected type url when cloning a mockresponse pr close ,test
165,serviceworker mention strategydependent caching behavior for opaque response update the service worker configuration guide to mention the different caching behavior used for opaque response based on the datagroups configured strategy related to pr close ,docs
166,form update required validator and checkbox validator to inherit abstractvalidator modified required validator and checkbox validator to inherit abstractvalidator for every validato type different pr will be raised a discussed in close pr close ,refactor
167,core error if ngzoneisinangularzone is called with a noop zone when the user opts into the noop ngzone they usually still interact with the static method on the nonnoop class this change add a check to handle the case where zonejs hasnt been loaded fix pr close ,fix
168,router fixing pathmatch doc to style code correctly pr close ,docs
169,compiler correct span when parsing binding with comment the previous fix for correcting span with comment in had the unfortunate side effect of breaking the span with comment when there wa leading whitespace this happened because the previous fix wa testing one without a comment identifying that the offset shouldnt have anything added to it and then removing that offset adjustment offsetsi expressiontextlength sourcetolexlength upon further investigation this offset adjustment wa actually necessary for when the input had comment but this wa only because the stripcomments function used trim to remove whitespace for these case this is the real problem not only doe it create a ton of confusion but also it mean that the behavior of the lexer and resulting span is different between input with comment and input without comment after reviewing how the inputlength of parseast wa used it appears that the correct behavior would be to not trim the input the inputlength is used to advance the current index beyond point which have been processed this should include any whitespace additionally inputlength doesnt appear to be needed at all when there wa no comment in the input it wa always equal to the inputlength anyways when there is a comment it should include that comment anyways to advance the index beyond the comment pr close ,fix
170,compilercli properly index svg element when on a template the original fix for svg element in did not account for svg element when they also had a structural directive on them making the node a template this resulted in the logic added in fix above not being applied pr close ,fix
171,docsinfra track error doc during serveandsync ref look for change in error doc ie doc under aiocontenterror in authorspackage so that such doc are tracked when running the serveandsync script pr close ,fix
172,docsinfra track error doc during serveandsync ref look for change in error doc ie doc under aiocontenterror in authorspackage so that such doc are tracked when running the serveandsync script pr close ,fix
173,zonejs update several flaky case related to fix several flaky case should restore windowonerror in test case expecttothrow should pas a function pr close ,fix
174,common unused return value from attemptfocus the function attemptfocus had a return value that nowhere is used but it still save in the bundle pr close ,refactor
175,compiler properly compile di factory when coverage reporting is enabled when running test with code coverage using istanbul the code is instrumented with coverage reporting statement these statement are also inserted into synthesized constructor preventing angular from properly recognizing them a synthesized constructor this commit change the regex to detect synthesized constructor to allow for statement within the constructor before the superarguments call this is limited to code that doe not contain a but this is sufficient to support istanbul coverage instrumentation statement the test have been extended with an input file that is being instrumented using babelpluginistanbul for both e and e target in order to verify that the approach work for realworld usage fix pr close ,fix
176,compilercli skip extendedtemplatecheckerimpl construction if there were configuration error previously if a bad extended diagnostic category wa given it would fail with the expected error a well a an unexpected assertion error ng build c development ✔ browser application bundle generation complete srcmaints error module build failed from nodemodulesngtoolswebpacksrcivyindexjs error unexpected call to assertnever with value test at homedouglasparkersourcengnewnodemodulesngtoolswebpacksrcivyloaderjs at processticksandrejections internalprocesstaskqueuesjs srcpolyfillsts error module build failed from nodemodulesngtoolswebpacksrcivyindexjs error unexpected call to assertnever with value test at homedouglasparkersourcengnewnodemodulesngtoolswebpacksrcivyloaderjs at processticksandrejections internalprocesstaskqueuesjs error error ng angular compiler option extendeddiagnosticschecksinvalidbananainbox ha an unknown diagnostic category test allowed diagnostic category are warning error suppress the assertion come from extendedtemplatecheckerimpl which expects a wellformed configuration yet the compiler would construct it even when error were found this commit skip constructing and running extended diagnostics if the configuration had error which should avoid triggering these assertion error im unfortunately not able to actually test this change the test pass even before the fix because the ngc binary and endtoend test dont request diagnostics unless the configuration is considered valid see slack for more detail pr close ,fix
177,core consistently use namespace short name rather than uri renderer apis expect to be called with the namespace name rather than the namespace uri rather than passing around the uri and having to account for different calling context this change consistently us the namespace short name importantly the uri wa only used in componentrefts create because getnamespace returned the uris and createelementnode in nodemanipulationts because getnamespaceuri also used the uris in contrast attribute would use the short name instead of uris see setupattributes in attrsutilsts these name are pulled directly from the attribute ie xhtmlhref and not converted to uri this dichotomy is confusing and unnecessary the change here aligns the two approach in order to provide consistently throughout the system this relates to because the createelementnode wa calling the animationrenderercreateelement which delegate to the serverrenderer which in turn wa only set up to expect short name a a result the namespaceuris lookup failed and domino created the svg a a regular element which doe not have a style property resolve pr close ,fix
178,languageservice provide plugin to delegate rename request to angular when the user want to rename a symbol in the t file vscode will ask the rename provider for the answer in turn if the first extension return the result the vscode will break the loop and apply the result if the first extension can not rename the symbol vscode will ask the second extension in the list builtin tsjs extension angular l extension etc in other word vscode take the result from only one rename provider and the order depends on registration timing scoring because the builtin t extension and angular extension have the same high score if the builtin t extension is the firstdepends on the time the extension wa registered the result will be provided by the builtin extension we want angular to provide it so this plugin will delegate rename request and reject the request for the builtin t server the angular l only provides the rename info when working within an angular project if we can not locate angular source in the project file the builtin extension should provide the rename info this plugin will apply to the builtin tsjs extension and delegate rename request to the angular l it provides the rename info only when it is an angular project otherwise it will return info by the default builtin t server rename provider see here for more info pr close ,feat
179,compilercli remove leftover extendedtemplatediagnostics requirement ref there were two remaining place where extendedtemplatediagnostics needed to be set which should have been removed in but got missed this update them to only require stricttemplates and not extendedtemplatediagnostics so the feature is properly enabled in production pr close ,fix
180,compiler pas rootdir to tsickle tsickles underlying api ha changed to require passing a rootdir to getgeneratedexterns pr close ,refactor
181,common add injector input to ngtemplateoutlet implement the new injector option from into ngtemplateoutlet pr close ,feat
182,docsinfra fix date parsing in a flaky test mock date in eventscomponent test are parsed in inconsistent way across platformsbrowsers which make the comparison to the mocked utc now date behave differently causing the test to fail this fix ensures that the mocked now date is parsed in the same way a the test date to avoid inconsistency pr close ,fix
183,compilercli enable extended diagnostics by default ref extended diagnostics provide additional analysis about angular template by emitting warning for specific pattern known to be error prone or cause developer confusion currently there are two such diagnostics which are enabled by default invalidbananainbox emits a warning if a user writes a twoway binding backwards like foobar when they actually wanted foobar nullishcoalescingnotnullable emits a warning if a binding attempt to perform nullish coalescing on a type which doe not include null or undefined such a foo bar where foo is defined a string instead of string null these diagnostics are enabled a warning by default but this can be configured in the tsconfigjson like so jsonc angularcompileroptions extendeddiagnostics the category to use for specific diagnostics check map check name to it category invalidbananainbox suppress the category to use for any diagnostics not listed in check above defaultcategory error allowed category for a diagnostic are warning default error or suppress warning emits the diagnostic but allows the compilation to succeed error will fail the compilation while suppress will ignore the diagnostic altogether the initial release ha two diagnostics and we are hoping to expand this longer term to add more diagnostics and provide additional insight into angular template to detect and surface developer mistake before hour of debugging are wasted pr close ,feat
184,core allow for injector to be specified when creating an embedded view add support for passing in an optional injector when creating an embedded view through viewcontainerrefcreateembeddedview and templaterefcreateembeddedview the injector allows for the di behavior to be customized within the specific template fix pr close ,feat
185,core make the error message tree shakable long error message can be treeshaken in the production build and replaced with error code see pr close ,refactor
186,form make a couple small cleanup encountered while rebasing typed form these should all be noops publicly they are just small issue encountered during a large rebase to bring typedforms current pr close ,refactor
187,animation change error type from any to string error in the animation code are of type any but are consistently used a if there were string change any to string to make typing more accurate pr close ,refactor
188,form move formcontrol to an overridden exported constructor this implementation change wa originally proposed a part of typed form and will have major consequence for that project a described in the design doc submitting it separately will greatly simplify the risk of landing typed form this change should have no visible impact on normal user of formcontrol see the typed form design doc here pr close ,refactor
189,compiler remove directive matching from template compiler the directive matching pas that happens during template compilation is redundant since directive matching ha already happened during the resolution phase of ngtsc and only matching declarables are provided to the template compiler in jit mode the declarables only become available after the primary template compilation ha completed so there is no need to perform directive matching in both jit and aot mode pr close ,refactor
190,compiler store modifier in a bitmask instead of an array this commit slightly reduces memory usage of output ast by storing type and statement modifier a a bitmask instead of using an array pr close ,refactor
191,compilercli reduce analysis work during incremental rebuilds this commit reduces the analysis work that need to happen during an incremental rebuild by properly recording file for which no trait were found in the set of file that have no trait such that the same file doesnt have to be reanalyzed during subsequent rebuilds it also excludes shim file from analysis pr close ,perf
192,common make the error message tree shakable make long error message treeshakable in the production build with error code fix pr close ,refactor
193,ngcc support element access for export declaration bundlers like rollup may use an element access expression for an export declaration which cause ngcc to ignore those export declaration possibly resulting in incomplete processing of package element access syntax may be used when the declared name is not considered a valid j identifier but bundlers may be conservative in determining whether an identifier can be used to emit a property access and opt for a string literal in an element access instead the element access syntax introduces a problem for ngcc where it wouldnt consider such export a class declaration causing them to be skipped the ngtsc compiler is implemented with the assumption that all class declaration use a tsidentifier a name whereas the element access is using a string literal for the declared name this make it troublesome for ngcc to support this syntax form in umd bundle to work around the problem this function transforms these access expression into regular property access the source text is parsed to an ast to allow finding the element access in a robust way after which the affected text range are replaced with property access in the original source text close pr close ,fix
194,docsinfra change the testing guide due to deprecation the jasmine used in the doc is typescript expectvariablenamematcherpredicate failoutput the new version should be typescript expectvariablenamewithcontextfailoutputmatcherpredicate so this commit mainly focus on changing the former to latter with format below typescript expectvariablename withcontextfailoutput matcherpredicate and for rxjs see for example someone could name function poorly and confuse the next reader sourcesubscribedosomething dosomethingelse lol with that signature you have to know unapparent detail about subscribe where using a partial observer solves that neatly sourcesubscribe next dosomething error dosomethingelse complete lol this commit also doe this conversion last remove the unused imported async from file twaincomponentmarblesspects pr close ,docs
195,docsinfra add a new processor for overriddenimplementation this new processor named mergeoverriddenimplementation allows dgeni to produce correct documentation for symbol with overridden exported constructor for example in the following example the implementation documentation will be used including the constructor signature export const foo fooctor fooimpl a fooctor this is a major improvement over the current situation in which no constructor signature is documented whatsoever pr close ,feat
196,animation apply setstyles to only roottimelines during keyframe building only consider the root element timeline for the style setting so that the state style applied with can be applied correctly resolve resolve pr close ,fix
197,element remove the createcustomevent function the createcustomevent function pupose is to create customevents even on browser where customevent is not a constructor customevent is currently available in all supported browser since ie support ha ended so remove the function a it is no longer needed pr close ,refactor
198,animation remove unnecessary ie specific code there were a few place we were still checking for internet explorer this remove the reference throughout the animation package pr close ,refactor
199,form update email validator to inherit abstractvalidator modified email validator to inherit abstractvalidator for every validato type different pr will be raised a discussed in close pr close ,refactor
200,docsinfra upgrade cli command doc source to acdfd updating angularmaster from clibuildsmaster relevant change in commit range modified helpbuildjson pr close ,build
201,compilercli properly index svg element in the element node of a parsed svg element the name is recorded a svgsvg when the angular indexer ran over this element it would attempt to find this name in the template text and fail a the namespace portion of the name wa added automatically at parse time and is of course missing from the original template this commit change the indexer to detect these namespaced element and only search for the tag name pr close ,fix
202,compiler correct span when parsing binding with comment when parsing a binding with a comment at the end of the expression the parser previously had logic to offset the parsed span by the length of the comment this logic seemed not to serve any useful purpose and instead resulted in the corruption of the span for example in the expression foo comment the parser would map the parsed foo propertyread node at the location of the character ent from the comment suffix this commit remove that logic correcting the parsed span of such node in the presence of comment removing this logic doe not seem to have caused any test to fail pr close ,fix
203,compilercli handle property read of thisreceiver in the indexer previously the angular indexer made an assumption that in any binding to a property of an implicitreceiver the property name begin at the start of the binding this is true for normal read from implicitreceiver a the implicit receiver ha no representation in the template however thisreceiver inherits from implicitreceiver and doe have a template representation such a binding look like thisfoo this commit corrects the logic of the indexer to use the namespan of the property binding instead of it sourcespan to locate the identifier pr close ,fix
204,compilercli add validation to extended template diagnostics configuration ref this validates the tsconfigjson option for extended template diagnostics it verifies stricttemplates must be enabled if extendeddiagnostics have any explicit configuration extendeddiagnosticsdefaultcategory must be a valid diagnosticcategorylabel extendeddiagnosticschecks key must all be real diagnostics extendeddiagnosticschecks value must all be valid diagnosticcategorylabels these include new error code each of which print out the exact property that wa the issue and what the available option are to fix them it doe disallow the config json angularcompileroptions stricttemplates false extendeddiagnostics defaultcategory suppress such a configuration is technically valid and could be executed but will be rejected by this verification logic there isnt much reason to ever do this since user could just drop extendeddiagnostics altogether and get the intended effect this is unlikely to be a significant issue for user so it is considered invalid for now to keep the implementation simple pr close ,refactor
205,compilercli add defaultcategory option ref the defaultcategory option is used for any extended template diagnostics which do not have any specific category specified for them it default to warning since that is the most common behavior expected for user this provides an easy way for user to promote all diagnostics to error or suppress all diagnostics pr close ,refactor
206,compilercli use configured diagnostic category when emitting warning from extended template diagnostics ref this update templatecontext to include a new maketemplatediagnostic function which automatically us the correct diagnostic category for that check this make sure that each diagnostic is emitted with the correct category it also implicitly pass some known value like component and code to make the extended template diagnostics a little simpler diagnostics which are suppressed are never instantiated at all which act a a slight performance optimization since any emitted diagnostics would be ignored anyways unfortunately diagnostics still have access to ctxtemplatetypecheckermaketemplatediagnostic to manually create diagnostics with a different category both banana in box and nullish coalescing check include test to make sure they respect a manually configured category this convention should hopefully give a reasonable certainty that new diagnostics will use the correct reporting function even if that is not strictly enforced pr close ,refactor
207,compilercli add initial compiler option definition for extended template diagnostics ref this includes a mapping of extended template diagnostics to their associated diagnostic category it is generated from the list of diagnostic name so the list should always be implicitly kept up to date usage look like json angularcompileroptions extendeddiagnostics check invalidbananainbox error nullishcoalescingnotnullable suppress pr close ,refactor
208,compilercli add alldiagnosticfactories ref this is a static array of all the p extended template diagnostic factory built into the angular compiler directly it provides an encapsulated list of all diagnostics rather than requiring user to manually list each one individually pr close ,refactor
209,compilercli call factory directly from extended template checker ref this move extended template check factory invocation into the checker itself where it can provide a more consistent api contract factory are called with compiler option and may return a templatecheck or undefined if the current option do not support that check this allows nullishcoalescingnotnullable to disable itself when strictnullchecks is disabled without throwing error this give extended template diagnostics a stronger abstraction model to define their behavior with pr close ,refactor
210,compilercli add extendedtemplatediagnosticname and templatecheckfactory ref the enum of extended template diagnostic name allows a global registry of firstparty diagnostics with a developerfriendly string name which can be used for configuration this name is used in the new templatecheckfactory to bind the name to a particular errorcode and make both available before constructing the actual template check which is necessary to configure it appropriately pr close ,refactor
211,compiler add support for safe call in template add support for safely calling function that may be undefined inside template expression eg maybeundefined fix pr close ,feat
212,languageservice support completion for animation support completion for animation pr close ,feat
213,compilercli provide the animation for directivemeta in languageservice the checkergetdirectivemetadata doesnt return the animation meta of the component but it useful for animation completion pr close ,feat
214,compilercli enable narrowing of using type guard method the change in cffedafebdeabbd caused method call to be emitted using additional parenthesis into the tcb which in turn prevented proper type narrowing when the method act a a type guard this commit specialcases method call from property read to avoid the additional parenthesis fix pr close ,fix
215,router allow symbol key for route data and resolve property this commit add the ability to use a symbol a the key for the data and resolve object in a route config pr close ,feat
216,animation retain trigger value for moved tracked list item when reordering a list with animation the list item lose their current trigger value that is because the reordering of an item is implemented a follows note the following implementation ha been added in pr the item is removed and marked setforremoval the item is reinserted and the setforremoval is changed to setformove the player set for animating the removal is destroyed when setformove is detected the above step allow the element not to be animated and to keep it styling but the trigger value get lost since the removal transitionplayer ha already been initialized so this change add a previoustriggersvalues map in the removalflag field in order to restore the trigger value ifwhen the removal turn out to be a move changing the above step to the item is removed and marked setforremoval and it current trigger value are saved a well the item is reinserted and the setforremoval is changed to setformove the player set for animating the removal is destroyed when setformove is detected and the trigger value are reapplied in the engine statesbyelement map resolve pr close ,fix
217,compilercli incorrectly interpreting any call with a property read this wa flagged during the code review of when generating a type check block we were interpreting any call to any a an a any cast even if it part of a propertyread eg fooany this is handled correctly in other part of the compiler but it look like it wa missed in the type checker pr close ,fix
218,docsinfra remove ie code since ie is no longer a supported browser remove angulario code implemented specifically for ie support this change reverts the following pr slightly fully fully partially pr close ,refactor
219,common use em instead of i in example updated the html tag format from i to em in t file em tag help to improve the code quality pr close ,docs
220,compilercli update template typechecking link to latest angulario version this page exists in the most recent angulario version v currently so there no need to link to an old version the hash also refers to the title section of the page which isnt necessary and is now dropped pr close ,refactor
221,common url link format updated fix the url link format from http to in bazelmd componentstylesmd pr close ,docs
222,compilercli fix crash during typechecking of library build when building a library the rootdir option is configured to ensure that all source file are present within the entrypoint that is being build this imposes an extra constraint on the reference emit logic which doe not allow emitting a reference into a source file outside of this rootdir during the generation of typecheck block we used to make a besteffort estimation of whether a type reference can be emitted into the typecheck file this check wa relaxed in to support emitting more syntax form and type reference but this change did not consider the rootdir constraint that is present in library build a such the compiler might conclude that a type reference is eligible for emit into the typecheck file whereas in practice this would cause a failure this commit change the besteffort estimation into a preflight reference emit that is fully accurate a to whether emitting a type reference is possible fix pr close ,fix
223,compilercli implement realpath in ngtsccompilerhost the ngtsccompilerhost is implemented using the filesystem abstraction of the compiler which is implemented for test using an inmemory mockfilesystem if the inmemory filesystem contains symlinks then using ngtsccompilerhost would not reflect their resolved real path instead the typescript compiler would use it default implementation based on the real filesystem which is unaware of the inmemory mockfilesystem setup this change doe not currently address any issue but is being fixed a it prevented a reproduction scenario from behaving correctly pr close ,refactor
224,compilercli properly support symlinks in mockfilesystem this commit fix an issue with symlink handling in mockfilesystem where entry within a symlink would fail to resolve pr close ,test
225,compilercli use absolutefromsourcefile to obtain a source file path using absolutefromsourcefile leverage the cache of the resolved absolute path instead of having to compute it each time pr close ,refactor
226,compilercli improve dx for reference emit failure in certain scenario the compiler may have crashed with an unable to write a reference error which would be particularly hard to diagnose one of the primary reason for this failure is when the rootdir option is configuredtypically the case for library and a source file is imported using a relative import from an external entrypoint this would normally report t for the invalid relative import but the crash prevents this error from being surfaced this commit refactors the reference emit logic to result in an explicit failure state with a reason a to why the failure occurred this state is then used to report a fataldiagnosticexception preventing a hard crash close pr close ,refactor
227,form use shared runtimeerror class this commit performs some refactoring of the abstractcontrolbased class to employ shared runtimeerror class and also update the code to avoid duplication and improve minification pr close ,refactor
228,core move runtime error code logic this commit move some logic to make the location of runtime error code consistent across package now all error code are located in packagescoresrcerrorsts file pr close ,refactor
229,core make runtimeerror reusable across package this commit update the code around the runtimeerror class to make it more reusable between package currently it only usable inside the core package specifically the error formatting logic wa updated to handle case when there is no error message provided there is no special set that contains a set of error code for which we have guide on angulario instead this is now encoded into the error code itself making such code negative integer having a separate set make it nontreeshakable which we want to avoid this change should allow to employ the runtimeerror class in other package to further standardize this subsystem and make the error thrown by the framework consistent a a part of the refactoring the common package code wa also updated to follow the same logic a core since the runtimeerror class wa used there a well pr close ,refactor
230,animation fix grammar fix grammar issue based on suggestion in issue fix pr close ,docs
231,docsinfra improve the content of attribute directive improve doc understanding angulardirectivesattribute directive in highlightdirectivets add the private keyword for el property to make it correct and consistent with subsequent example for section setting the value with user input add a step to tell the reader change the method onmouseenter thus more readable for section binding to a second property delete the aliase for the input property and change the name back to apphighlight in the code to make it consistent with the whole tutorial pr close ,docs
232,animation fix link to the animationbuilderbuild method in angulario link to the animationbuilderbuild method are broken and do not point to the api doc page fix such broken link also apply minor wording and related improvement pr close ,docs
233,common url link format updated fix the url link format from http to in icommonlocaleidmd file pr close ,docs
234,upgrade fix flaky test fix a couple of test that have been flaking our test run the two test actually failed consistently when run in isolation but they passed if at least one test ran before them my understanding wa that they failed because they were running outside of the ngzone which meant that the error being thrown inside of a promise werent being flushed pr close ,test
235,form make validators code compatible with property renaming this commit refactors the code of the base validators class to make it compatible with the property renaming optimization currently the code make an assumption that the field with a specified name defined a a string can be found on an object but with property renaming optimization this is not correct pr close ,refactor
236,router fix code block for isactivematchoptions pr close ,docs
237,animation fix filteranimations docregion the filter animation example in the complexanimationsequences guide talk about entering and leaving element but the presented html snipped exluded the ngfor which actually add and remove the element so add the ngfor section to make the example complete and understandable pr close ,docs
238,docsinfra fix eslint issue for aio ugrade example fix the eslint issue in the aiocontentexamplesupgrade folder and remove their ignorepattern in the example eslintrc file pr close ,refactor
239,compiler remove output ast function these function are not used anymore so they are removed pr close ,refactor
240,compiler remove class related output ast type the ivy compiler no longer generates class so this commit remove the supporting output node pr close ,refactor
241,compiler remove typecasting related output ast type the ivy compiler no longer generates code for typechecking purpose using the output ast type instead it us typescript ast node and it printer for typechecking this commit remove the typerelated output node pr close ,refactor
242,compiler remove some unused output ast type this kind of output is no longer emitted into generated code so the supporting output ast is removed pr close ,refactor
243,compiler remove unused method from binding parser this method is no longer called so is being removed pr close ,refactor
244,compiler make template preparser nullsafe this commit remove some nonnull assertion operation to improve nullsafety pr close ,refactor
245,compiler remove unused unsupported function this function is no longer used so is being removed pr close ,refactor
246,compiler make keyspan required in binding parser now that viewengine ha been removed the keyspan property can be made required a it is always provided in the ivy compiler pr close ,refactor
247,compiler cleanup distinction in parse logic this remove the special casing of parsevalidation logic that wa only used by ivy pr close ,refactor
248,compiler remove bindingform enum the ivy compiler only us bindingformexpression so all other variant are removed pr close ,refactor
249,compiler cleanup ast fixup of listener instruction this commit refactors the generation of listener instruction to no longer fixup the output ast that wa designed for viewengine pr close ,refactor
250,compiler remove unused assertion function this code is no longer used now that viewengine ha been removed pr close ,refactor
251,compiler cleanup unsafe usage of null value for ngcontent selector this commit improves the nullsafety of the ngcontent selector and update a comment that turned out to be slightly inaccurate close pr close ,refactor
252,compiler remove unused code from output logic this code is no longer used now that viewengine ha been removed pr close ,refactor
253,compiler remove unused astpath this code is no longer used now that viewengine ha been removed pr close ,refactor
254,compiler remove unused logic from constantpool the constantpoolgetdefinition method is not being used anymore so this commit remove anything that is related to this method pr close ,refactor
255,compiler remove unused type declaration this code is no longer used now that viewengine ha been removed pr close ,refactor
256,compiler remove syntax error logic this code is no longer used now that viewengine ha been removed pr close ,refactor
257,animation add unit test for leaving animated child add a new unit test to make sure that leaving element queried via a parent queried via animatechild are correctly removed note this test the fix introduced in pr pr close ,refactor
258,docsinfra adjust code link styling height the height of code link anchor inside code tag or code tag inside anchor is inconsistent fix such issue by also making sure that code link to external resource do not get wrongly styled pr close ,fix
259,animation add link to state reference the keyword state is included in the ignoredwords set that prevents certain word to be autolinked this cause the animation state function not to be automatically linked so manually link those reference to the state api doc pr close ,docs
260,form add an unused symbol anyforuntypedforms this symbol will support the typed form migration in google the doc will be updated once the migration begin pertains to pr close ,feat
261,docsinfra improve aiofooters layout improve aiofooters layout by using grid instead of flexbox such change make it so that we have four column on wide window size desktop two column on medium window size desktoptablet and a single column on small window size mobile compared to the flex implementation which could only have either column or this make the footer look generally nicer for various window size especially in the middle range in which one column wa too little and four were too much note also a scroll of auto ha been added so we that we can be sure that overflowing footer content never creates a global layout issue pr close ,refactor
262,form make some minor fixups for forwardcompatibility with typed form make the following fix when submitting the entire migration in a disabled state i commented out more code than strictly required responding to some final review comment caused two condition to become flipped always use explicit check instead of boolean corecion fix one missed any cast in a test case pr close ,fix
263,languageservice revert the test file for ivy the completionsspec and definitionsspec is removed by accident in bbff pr close ,fix
264,docsinfra fix numbering of running your application locally step fix numbering of running your application locally step and corrected step statement pr close ,docs
265,compiler fix typo in gethtmltagdefinition function pr close ,docs
266,docsinfra update example to angular update aio and the live example to in order to resolve a build error when opened on stackblitz they were using t with angular which doesnt support fix pr close ,fix
267,core add a migration for typed form this migration will insert anyforuntypedforms or anyforuntypedforms at existing us of abstractcontrol class a well a call to formbuilder method we need to submit this ahead of time in order to get started with the migration in google pr close ,feat
268,docsinfra use eslint in aios examplelint script instead of the deprecated tslint use eslint in the aios examplelint script pr close ,refactor
269,form reducevalue arrow function now ha correct type i previously strengthened some weak type in one of these fix exposed an incorrect call into reducechildren from reducevalue this wa caught in google by a caller who wa extending formgroup and overriding these method special thanks to bart g for catching this issue and suggesting a fix pr close ,fix
270,form allow a formcontrol to use initial value a default allow a formcontrol to be reset to it initial value provide this feature via a new option in a formcontroloptions interface based on abstractcontroloptions also expose the default value a part of the public api this is part of a feature that ha been requested elsewhere eg in this wa originally proposed a part of typed form a discussed in the gde session and after with akushniralxhub it is likely better to just reuse the initial value rather than accepting an additional default it is desirable to land this separately in order to reduce the scope of the typed form pr and make it a typesonly change pertains to issue pr close ,feat
271,docsinfra correct an invalid assumption in aio test the aio application expects formcontrol to have no property for the purpose of it own internal test but this is no longer true after pr close ,test
272,compiler clean up workarounds for typescript clean up some of the temporary workarounds that were necessary in order to land support for typescript since theyre no longer necessary pr close ,refactor
273,animation remove the unused enter and leave selector remove the no longer used enterselector and leaveselector constant note their us have been removed in pr pr close ,refactor
274,animation improve finalkeyframe nonnull assertion instead of declaring the webanimationsplayers finalkeyframe field with a nonnull assertion declare it a optional field and use a nonnull assertion only when it is being used in the beforedestroy function relates to pr close ,refactor
275,form add more test for formbuilder method argument shape it is possible to pas argument to formbuilder using four different format valueonly boxed value control config and valuearray currently these different method are not welltested especially a they interact this pr will add test for the variety of different argument shape this wa originally inspired by typed form when formbuilder becomes typed all these argument shape should just work with correct inferred type pr close ,test
276,form make the minimum change to the form unit test in order to support the typed form pr currently many of our unit test are written to use heterogenous group and array and control that accept heterogenous value this pr will make the minimum possible alteration to prepare those usage mainly by annotating them a untyped control etc this pr is not intended to test typed form merely to minimize the size of the upcoming pr this will allow that pr to be focused on the actual feature and test rather than boilerplate fix pr close ,refactor
277,form i indroduced a minor error in a previous pr pendingvalue is a value not a boolean flag the bug should have no effect since it a typingsonly internalonly bug but it good to fix nonetheless pr close ,fix
278,ngcc dont use the workspace typescript version to generate integration test fixture now that viewengine library can no longer be created the latest typescript version that ngcc should be able to process is typescript ie the version of typescript that wa supported in angular however ngccs integration test used the typescript version of the workspace to create the javascript file from typescript source on demand this introduces friction when upgrading the typescript version within the workspace a change to typescript emit format may affect ngccs ability to process it correctly the on demand creation of javascript file wa convenient for authoring test but it also helped to detect incompatibility with newer version of typescript now that ngcc no longer ha to process newer version of typescript we want to pin the integration suite to use javascript code a if it were compiled using typescript ie a version of typescript that is actually supported by ngcc this commit update the integration test to inline all the generated file directly in the test instead of compiling them on demand this wa done by temporarily installing typescript and using it to create the loadtestfiles statement from the original typescript input an alternative could have been to install typescript a an actual dependency in the workspace and using that to continue compiling the integration suite on demand but this brings some overhead in package installation typescript is mb and the authoring aspect of ngcc integration test is expected to diminish now that ngccs support is no longer a moving target pr close ,test
279,docsinfra change variable name in route guard example change variable name next to route in route guard example on developer guide routing and navigation tutorial adding routing to tour of hero to make it consistent with api doc and subsequent example fix pr close ,docs
280,animation dont consume instruction for animatechild todo fill body commit if pr get accepted resolve resolve pr close ,fix
281,animation should not invoke disabled child animation currently child animation will be triggered by animatechild despite it ha been disabled these change add some logic to prevent that unexpected behavior pr close pr close ,fix
282,form fix weak helper type in the form package mostly function type that can be strengthened to specific callback this wa originally proposed a part of typed form but it may be possible to submit at least some of these change separately and unconditionally ie without relying on typedoruntyped it is desirable to land this separately to reduce the scope of the typed form pr by focusing it only on the new type parameter rather than incidental strictness fix pr close ,refactor
283,animation improve animation transition api doc improve the transition api doc by removing unnecessary examplanations and example also provide helpful information regarding entering and leaving element a part of pr close ,docs
284,form move formcontrol to an overridden exported constructor this implementation change wa originally proposed a part of typed form and will have major consequence for that project a described in the design doc submitting it separately will greatly simplify the risk of landing typed form this change should have no visible impact on normal user of formcontrol see the typed form design doc here pr close ,refactor
285,animation remove unnecessary code the transitionanimationengine had a fallback where it would store class directly on a node if it doesnt have a classlist presumably this is to support old browser or if an animation is set on something like ngcontainer this information wa never used for anything since containsclass wa never called these change simplify the logic to just a null check deprecates the animationdrivermatcheselement method because it wa only used in one place which can be replaced with classlistcontains we cant remove the method completely because animationdriver is a public api we also cant turn it into a method on the base class in order to remove it from the subclass because it can break apps using noimplicitoverride while extending animationdriver pr close ,refactor
286,localize fix typo in inoverviewmd coauthoredby andrew kushnir andrewkushnirusersnoreplygithubcom pr close ,docs
287,animation reuse existing version class animation package ha it own implementation of the version class when other package use an implementation from angularcore this commit aligns animation package with other package and make use of the version class from angularcore pr close ,refactor
288,animation add enter and leave info to query api doc add information to the query api doc clarifying what element can be queried a entering and leaving a that is not currently clearly documented and ha caused confusion to developer one of the task of issue pr close ,docs
289,ngcc correctly resolve umd dependency previously when processing umd ngcc assumed that the export argument of the commonjs factory call if present would be the first argument of the call this is generally true for the supported umd format but can change if ngcc prepends more import and thus factory argument while processing the module this could lead to error when trying to collect dependency of an already processed module this wa accidentally broken in commit bce this commit fix it by not making any assumption about the position of an export argument in the commonjs factory call fix pr close ,fix
290,compiler delete view engine component of angularcompiler this commit finish the removal of view engine from the codebase deleting those piece of angularcompiler which were only used for ve coauthoredby joostk joostkoehoorngmailcom pr close ,refactor
291,docsinfra update browserslistrc to align with new cli apps update browserslistrc to align with new cli apps this drop some older browser that are no longer supported by angular v see the list of supported browser pr close ,build
292,common code size reduction of ngfor directive this commit make several change to the implementation of ngforof to reduce it code size in production build the tailormade message for an unsupported differ is fully treeshaken in production build in favor of the exception from the differ factory itself the private perviewchange method wa changed into a freestanding function to allow it name to be minimized the need for an intermediate recordviewtuple wa avoided by applying the operation inplace instead of collecting all insertion into a buffer first this is safe a the perviewchange operation that used to be done on each recordviewtuple is entirely local to the tuple itself hence it is invariant to execution ordering which mean that the perviewchange can be executed directly during the foreachoperation loop pr close ,perf
293,docsinfra prevent automatic linking of json add json to the ignoregenericwords set so that it doesnt get wrongly linked to the jsonpipe during the aio doc generation a it is a generic javarscript term pr close ,fix
294,core add migration to remove entrycomponents add an automated migration that will drop any usage of entrycomponents from ngmodule and component pr close ,feat
295,docsinfra replace use of deprecated compiler with createngmoduleref remove a use of the deprecated compiler class in elementsloader and use the createngmoduleref function instead pr close ,refactor
296,docsinfra remove obsolete viewengine code path from elementsloader remove a code path that wa only reached in viewengine mode and is now with the removal of viewengine obsolete pr close ,refactor
297,compilercli dismantle view engine implementation of ngc this commit doe a firstpass removal of the view engine infrastructure in compilercli a more indepth cleanup is necessary and large part of the view engine compiler infrastructure remain within angularcompiler this is just a first cleanup step pr close ,refactor
298,bazel remove metadata collection from ngcwrapped the generated metadata is obsolete now that viewengine is no longer used so this commit remove the generation of those file from ngcwrapped this is needed to allow removal of the metadata collector in a subsequent commit pr close ,refactor
299,compilercli move version number helper out of diagnostics subfolder a a preparation for the removal of the viewengine part in compilercli this commit move the version number helper function up one level such that the whole diagnostics subfolder can be removed pr close ,refactor
300,form minor refactoring of selectmultiplecontrolvalueaccessor this commit update the code of the selectmultiplecontrolvalueaccessor to improve typing to make them more precise update the note that refers to ie but we still can not remove the branch since it needed for universal that us domino pr close ,refactor
301,form add an example for async validator token to be consistent with the validator token have the example code for the async validator token pr close ,docs
302,core make the error message tree shakable long error message can be treeshaken in the production build doing this we will keep the throw and remove the long error message see pr close ,refactor
303,form eagerly initialize data member data member in abstractcontrol should be eagerly initialized to address issue this eliminates the need to constantly check for truthiness and make code much more readable more pr to follow to address issue pr close ,refactor
304,docsinfra clean up entrycomponents usage clean up some usage of entrycomponents from aio pr close ,refactor
305,core add migration to remove entrycomponents add an automated migration that will drop any usage of entrycomponents from ngmodule and component pr close ,feat
306,core support typescript add support for typescript includes the following change bumping the package version fixing a few call to createexportspecifier and createimportspecifier that require an extra parameter adding some missing method to the t compiler host fixing an issue in the t mock for the ngcc test where a regex wa too agressive and wa trying to match a path like nodemodulestypescriptlibes accounting for typeonly import specifier when reporting di error see fix pr close ,feat
307,compilercli downlevel transform incorrectly extracting constructor parameter for nested class the downlevel decorator transform commonly used in the cli and other tooling of the ecosystem for enabling jit e is currently incorrectly dealing with nested class the transform will accidentally visit nested class in a constructor multiple time and generate duplicated instance of the ctorparameters field this doe not sound like an issue at first but the duplicated ctorparameters field will miss significant type information that ha been elided by the first visit resulting in generated code like the following j let myclass pure nameclass myclass extends upgradengcomponentadapter constructorscope injector elementref myclass myclassctorparameters type void decorator type inject args scope type injector type elementref myclassctorparameters type void note type injector type elementref pr close ,fix
308,core destroy hook not set up for useclass provider using forwardref fix an issue where destroy hook are not set up for useclass provider that rely on forwardref for passing the actual class reference currently the destroy hook are not captured because forward ref are not resolved for class provider in e this issue becomes even more critical if arrowfunctions are used for eg useclass forwardref this is because arrow function do not have a prototype unlike in e where the function assigned to useclass would always have a prototype in e a runtime exception a followed is returned and doesnt give any useful indication of the forwardref issue typeerror can not read property of undefined reading ngondestroy at registerdestroyhooksifsupported distpackagescoresrcrenderdisetupts distlegacytestbundlespecjs at resolveprovider distpackagescoresrcrenderdisetupts distlegacytestbundlespecjs at resolveprovider distpackagescoresrcrenderdisetupts distlegacytestbundlespecjs at providersresolver distpackagescoresrcrenderdisetupts distlegacytestbundlespecjs at objectdefinitionprovidersresolver distpackagescoresrcrenderfeaturesprovidersfeaturets distlegacytestbundlespecjs at resolvedirectives distpackagescoresrcrenderinstructionssharedts distlegacytestbundlespecjs at elementstartfirstcreatepass distpackagescoresrcrenderinstructionselementts distlegacytestbundlespecjs at ɵɵelementstart distpackagescoresrcrenderinstructionselementts distlegacytestbundlespecjs at ɵɵelement distpackagescoresrcrenderinstructionselementts distlegacytestbundlespecjs at multipleformcontrolstemplate ngmultipleformcontrolsjs pr close ,fix
309,languageservice correctly parse input and selector with dollar sign when we are going to the definition of an input we find both the definition of the input and also look for any directive which have a selector that match the input for example directive selector greeting export class mydir input greeting string with this commit we now correctly handle the case where input andor selector have a dollar sign in them the dollar sign ha special meaning in cs but when we encounter the dollar in a template we need to escape it when used a a selector so that it is taken a a dollar literal rather than a character with special meaning previously we were not escaping the dollar sign and the cs parsing logic would throw an error the change in this commit prevents that error from happening but a trycatch is still added in case there is another unhandled usecase if this happens we do not want the gotodefinition operation to completely fail fix pr close ,fix
310,docsinfra fix the main content layout fix the layout of the main doc content on both small and large screen on small screen content could overlap with the floating toc while on large screen the content wa not centered correctly see screenshots below for reference this wa accidentally broken in before content on small screen before content on large screen before after content on small screen after content on large screen after pr close ,fix
311,ngcc use main property in test packagejson file for umd test previously the mock package created for umddependencyhosts test specified the entrypoint a esm this doe not matter in test since the package are explicitly passed to the umddependencyhost while in reality the appropriate host would be determined based on the name of the entrypoint property in this case detecting the entrypoint a e and not umd however in order to avoid confusion this commit update the test package to use main the default property used for the umd format in packagejson file pr close ,test
312,ngcc correctly report error when collecting dependency of umd module previously the ngcc umdreflectionhost would throw a misleading error when trying to collect dependency of an invalidly formatted umd module this happened because an error would be thrown while trying to construct the error message for the actual error by calling gettext on certain typescript ast node see for a more indepth explanation this commit ensures gettext can be safely called on typescript ast node when collecting dependency of umd module pr close ,fix
313,ngcc run more test against more supported umd format this commit utilizes the infrastructure added in the previous commit to run more test against more of the supported umd format this shall give u more confidence that all aspect of umd processing work correctly with the various format pr close ,test
314,ngcc use helper function for generating umd module for test previously several ngcc test suite used their own helper to generate test umd module this commit switch to using the same helper for generating umd module across test suite this improves dryness ensuring changesfixes to the umd format need only be applied once and make it easier to test different umd format in all test suite pr close ,test
315,ngcc support the umd wrapper function format emitted by webpack previously ngcc could only handle umd module whose wrapper function wa implemented a a tsconditionalexpression ie using a ternary operator this is the format emitted by popular bundlers such a rollup this commit add support for a different format that us ifelse statement which is what is emitted by webpack fix pr close ,fix
316,ngcc make it easy to support more umd wrapper function format previously ngcc could only handle umd module whose wrapper function wa implemented a a tsconditionalexpression ie using a ternary operator this is the format emitted by popular bundlers such a rollup however this failed to account for a different format using ifelse statement such a the one emitted by webpack this commit prepares ngcc for supporting different umd wrapper function format by decoupling the operation of parsing the wrapper function body to capture the various factory function call and that of operating on the factory function call for example to read or update their argument in a subsequent commit this will be used to add support for the webpack format pr close ,refactor
317,docsinfra add safarionly medium query for aio footer flex safari handle rem based medium query differently so in order to provide a similar userexperience to safari user add a new safarionly medium query for the footer flex container resolve pr close ,fix
318,platformbrowserdynamic remove private export of resourceloaderimpl this type wa exported for the viewengine compiler a it needed to reference the class in it di codegen this is no longer a requirement with ivy hence the private export can be removed this change prevents an import of angularcompiler to be referenced in the dts file of angularplatformbrowserdynamic which is beneficial for application compilation a that prevents the angularcompiler dts file from being included in the tsprogram of an application close pr close ,refactor
319,docsinfra ensure deprecated styling is not overridden the codeanchor styling wa overriding the deprecatedapiitem styling the textdecoration is not needed on codeanchor since it inherits this from the a rule in the typographyscss file fix pr close ,fix
320,core clean up test relying on entrycomponents clean up all the test that had to declare a separate module in order to pas in entrycomponents when creating component dynamically this cover almost all of the entrycomponents usage except for a few which ive left for now because theyre testing some of the existing leftover entrycomponents logic in core pr close ,test
321,ngcc remove ivy switch marker transform ngcc used to rewrite prer marker to become postr in order to switch the runtime implementation in angularcore from view engine to ivy now that angularcore is published a native ivy package and the runtime switch code ha been removed there is no need for ngcc to perform this transform anymore pr close ,refactor
322,compilercli remove ivy switch transform now that the core package ha been cleaned up to no longer contain ivy switch code the transform to switch the prer marker to become postr is deleted a well pr close ,refactor
323,core add missing info about a component in the pipe could not be found error message add error handling for pipe with component class name in which it ha a problem add it in ngdevmode so that it will be a treeshake away from the production bundle pr close ,fix
324,common change fallback default url in mockplatformlocation in node the url constructor fails for for a malformed url such a instead is used a this conveys the same information in test but is correctly formed pr close ,test
325,animation remove incorrect information regarding animatechild remove incorrect information present in the angulario animation documentation stating that animatechild doe not work with route transition animation a that turned out not to be true this pr effectively reverts the change make in pr for more context see issue pr close ,docs
326,core improve viewencapsulation documentation slighlty improve the viewencapsulation documentation both in code comment and content file to make it more clear and understandable see pr close ,docs
327,docsinfra move aio footer inside matsidenavcontainer currently the aio footer sits outside the matsidenavcontainer a a result when the matsidenav in over mode appears the footer is not placed under the sidenav backdrop move the footer inside the matsidenavcontainer so that it doe pr close ,fix
328,docsinfra upgrade cli command doc source to eb updating angularmaster from clibuildsmaster relevant change in commit range modified helpnewjson pr close ,build
329,router prevent componentless route from being detached currently when deactivating a route the detach method of the routereusestrategy is always called even when we are dealing with a componentless route if when using a custom strategy we attempt to detach a componentless route an exception is thrown causing the navigation to break this change prevents this from happening by not triggering the detach of the route reuse strategy fix pr close ,fix
330,core clean up isdevmode for treeshaking removing the usage of isdevmode with ngdevmode flag this will make the devmode code treeshakable from the production build pr close ,refactor
331,ngcc ensure that ngcc doe not write a lockfile into nodemodules package directory when executing ngcc writes a lockfile that is used to coordinate multiple concurrent instance of ngcc previously this file wa written at nodemodulesangularcompilerclingcc or similar depending upon the bundling of the package but this cause problem for setup where nodemodules package directory are expected to be readonly now the lockfile is written a ngcclockfile into the top of the nodemodules which is an acceptable place to store transient file this change should help to unblock use of tool like pnpm and lerna which can use symlinks to readonly package directory pr close ,fix
332,docsinfra update example lockfile in the packagejson used to install dependency for doc example wa updated but the corresponding lockfile wa not update the lockfile to keep it in sync with packagejson pr close ,build
333,devtools prepare codebase for migration to angularangular repo ,refactor
334,devtools migrate cypress test to use bazelcypress previously we ran cypress directly now we use the cypresswebtest rule from rulesnodejs to run cypress through bazel srcdevapp is added to the data arg of cypresswebtest this invalidates the bazel cache so that cypress test rerun anytime our demo app the app being ee tested change ,refactor
335,devtools run buildifier on bazel file ,refactor
336,bazel always add stricttemplates option to tsconfigjson stricttemplates wa only conditionally added to the tsconfigjson file to avoid breaking the angularcomponents repo see component ha been updated in so this condition is no longer necessary and stricttemplates can always be included in tsconfigjson without breakage pr close ,refactor
337,common incorrect error type for xhr error in testrequest currently the httpclient always wrap error from xhr request but the underlying error are always of type progressevent or dont have a native error if the status code is just indicating failure eg this behavior doe not match in the testrequest class provided by angularcommon where error are considered being of type errorevent this is incorrect because errorevents provide information for error in script or file which are evaluated since the httpclient never evaluates scriptsfiles and also since xhr request clearly are documented to emit progressevents we should change the testsupport to retrieve such progressevents instead of incompatible object of type errorevent in favor of having a deprecation period we keep supporting errorevent in the testrequesterror signature eventually we can remove this signature in the future resource related to deprecated testrequest from angularcommon no longer accepts errorevent when simulating xhr error instead instance of progressevent should be passed matching with the native browser behavior pr close ,fix
338,docsinfra remove negative margin remove the top padding for the homepage article instead of having that top padding and moving the element up via a negative bottom margin in the intro section note the result is identical except for when the article medium query is applied the difference is barely noticeable anyways pr close ,fix
339,docsinfra fix aio homepage breaking on certain width the aio homepage ha a fixed width for it hero content that is not handling well certain window width fix that by removing the fixed width and tweaking related medium query pr close ,fix
340,compilercli interpret string concat call these change add support for interpreting stringprototypeconcat call we need to support it because in typescript string template expression are transpiled to concat call rather than string concatenation see pr close ,fix
341,core clean up leftover isdevmode usage remove a couple of leftover call to isdevmode pr close ,refactor
342,core support cyclic metadata in testbed override the testbed apis to override metadata would crash when the metadata contained object with cyclic reference metadata override use the json serialized representation of a value to compare object which throw an error if the value ha cyclic reference this commit avoids the error by replacing multiple occurrence of the same object using a unique string representation for the object fix pr close ,fix
343,element remove unneeded custom element polyfill from doc example in pr the angular element guide wa updated to remove mention of the custom elementsrelated polyfills since they are no longer necessary in v due to all cli project being e and all supported browser natively supporting custom element this commit update the related doc example boilerplate to not include the unneeded webcomponentscustomelements polyfill pr close ,refactor
344,docsinfra remove obsolete mention of skipping httpsrelated audit since commit efccffcbaedfea the auditwebapp script no longer need to skip httpsrelated audit update the doc comment to reflect that pr close ,docs
345,docsinfra upgrade cli command doc source to beba updating angularmaster from clibuildsmaster relevant change in commit range modified helpnewjson pr close ,build
346,animation improve some animation comment fix various typo and also improve sentence by making them more clear or grammatically correct present in comment inside the animation package pr close ,refactor
347,devtools port over bazel tooling from angularcomponents previously the tslibrary bazel rule wa used to build angular devtools this commit migrates to t project and brings in some bazel tooling from angularcomponents to run bundle spec file for karma test ,build
348,form make the formcontrolstatus available a a public api this commit make the formcontrolstatus symbol available a a public api the symbol itself wa intended to become a part of the public api but due to the missing reexport the symbol remains private fix pr close ,fix
349,form inherit ngonchanges hook from the base class this commit update the code of the minmax and minlengthmaxlength validator directive to inherit ngonchanges hook from the base class the abstractvalidatordirective one rather than implementing the hook on the child class this wa needed to avoid issue with hook inheritance in viewengine but since it deprecated the code can be cleaned up pr close ,refactor
350,docsinfra ensure overloaded function render correctly if there were or additional overload on a freestanding function in the api the overload were not being shown also the type of overload parameter were not being escaped correctly pr close ,build
351,element remove nonexistent schematic collection breaking with ng add remove a nonexistent schematic collection wired up for angularelements that ha been removed with fix pr close ,refactor
352,animation improve wording for animation example improve the wording of the text explaining an animation code snippet a that can be misinterpreted resolve pr close ,docs
353,router add type annotation for urlsegmentparametermap having the type specified explicitly make the api reference more readable pr close ,refactor
354,core format recently updated file to comply the lint rule this commit update a file that wa changed recently but that change triggered the lint ci job to fail since the lint rule were slightly changed pr close ,refactor
355,core move outdated comment to viewts remove the comment suggesting to use a const enum for viewencapsulation in the rendererdefinitionsts file and add a similar comment in the viewts file in which the enum is defined note the new comment doe not contain the suggestion of changing none to a it is unclear what benefit that would bring for more info see pr close ,refactor
356,compiler ensure that partially compiled query can handle forward reference when a partially compiled component or directive is linked in jit mode the body of it declaration is evaluated by the javascript runtime if a class is referenced in a query eg viewquery or contentquery but it definition is later in the file then the reference must be wrapped in a forwardref call previously query predicate were not wrapped correctly in partial declaration causing the code to crash at runtime in aot mode this code is never evaluated but instead transformed a part of the build so this bug did not become apparent until angular material started running jit mode test on it distributable output this change fix this problem by noting when query are wrapped in forwardref call and ensuring that this get passed through to partial compilation declaration and then suitably stripped during linking see and pr close ,fix
357,compiler rename rproviderexpression and associated helper this interface will be used in other situation so this change renames it to be more general a maybeforwardrefexpression pr close ,refactor
358,compiler remove ie match in jit compiler test since we no longer support nor test on ie we can remove these match for anonymous function pr close ,test
359,devtools create custom no sandbox chrome browser rule previously running test in ci with the chromiumlocal browser would cause the following error running a root without nosandbox is not supported now the karma test suite run in a custom no sandbox browser ,build
360,devtools add d and semver dsl umd module to karma test for ngdevtools and ngdevtoolsbackend these module are necessary because concatjsdevserver need named amdumd module ,fix
361,devtools migrate shellchrome to bazel allows shellchrome to be built with bazel currently this is built in production mode with terser minified code and the appropriate manifest and content script file to make the chrome extension work properly ,build
362,devtools migrate demo app to bazel allows the demo app to be builtmwith bazel and a dev server started with yarn start ,build
363,devtools migrate ngdevtools library to bazel allows the ngdevtools library to be built with bazel ngdevtools can now be used a a dependency in other bazel build rule ,build
364,devtools migrate ngdevtoolsbackend to bazel allows the ngdevtoolsbackend to be built with bazel allows ngdevtoolsbackend to be used a a dependency in other bazel build rule ,build
365,devtools migrate demonozone to be built with bazel and allow it to be served with concatjsdevserver allows the demonozone application to be built with bazel and a devserver run with bazel run projectsdemonozonesrcdevserver ,build
366,devtools create bazel build rule for sharedutils and the protocol library allows sharedutils and protocol to be built with bazel build projectssharedutils and bazel build projectsprotocol this lay down the necessary ground work to include these library a dependency in other bazel build rule ,build
367,devtools set up bazel and bazel tooling mark the beginning of a migration over to building angular devtools with bazel this commit brings in tooling from the canonical angular bazel example repository and includes the necessary dependency in the packagejson ,build
368,platformbrowser use correct parent in animation removechild callback animation onremovalcomplete callback is using incorrect parentnode should be parentnode provided by delegateparentnodeelement instead of direct elementparentnode this is not a problem with default renderer but can cause problem with custom renderer if it us another logic to addremove node fix pr close ,fix
369,languageservice move language service code out of ivy folder this commit move code in the language service package out of the ivy subfolder ivy is the only engine supported in v so there no need to have a name for it pr close ,refactor
370,languageservice remove view engine code from language service package this commit remove viewenginespecific code from the langauge service package this code is no longer used since ve is not supported in v pr close ,refactor
371,compilercli handle prerelease version when checking version currently the t version checking function interprets a version like rc a nan which would allow it to bypass the version checking altogether these change add a little bit more logic to ensure that such version are handled correctly there also an error if we dont manage to parse the version string also it seemed like we never actually ran the version check unit test because they didnt have a test target pr close ,fix
372,devtools v ,release
373,devtools add angular to gitignore ,build
374,devtools update angularcli to cc ,build
375,ngcc improve logging of progress this commit add additional information to encourage developer to contact the author of view engine library and ask them to update to partial ivy fix pr close ,refactor
376,docsinfra remove unnecessary workaround for sw config generation since angulario is now updated to a version that includes the fix from the workaround added in caebbfcffdfccecfbbdf can now be removed pr close ,build
377,devtools v ,release
378,devtools update angularframework to ea ,build
379,devtools handle ngfor and ngif context in the profiler currently we skip the time spent in evaluation of embedded view template because the passed context is either an ngif or an ngforof this change generalizes the implementation to work with view embedded into a component ,fix
380,docsinfra prevent automatic linking of number add number to the ignoregenericwords set so that it doesnt get wrongly linked to the decimalpipe during the aio doc generation a it is a generic typescript term pr close ,fix
381,docsinfra remove eslint directive comment from example linting ha recently been removed from the example provided in angulario see pr and such removal effect the downloadable and stackblitz example but linting is still generally used in the example in the aio project itself they are being migrated from tslint to eslint in pr thus eslint directive comment are still necessary in the code itself so the comment need to be present but need not to be exposed to the user not in the zip stackblitzes nor doc themselves these change are removing such comment during the example parsing phase effectively removing them from all three source mentioned above original discussion resolve pr close ,refactor
382,core do not use function constructor in development mode to avoid csp violation this commit remove the dynamic creation of named array for internal runtime storage array a they may cause csp violation in development mode when an application csp configuration doe not include unsafeeval named array for view data can still be enabled in development mode using the ngdevmodenamedconstructors query parameter when loading the application the usage of native class syntax for named array doe not have the desired effect when the code is downleveled to e since e target are becoming increasingly more rare this is considered le of a problem than the csp violation fix pr close ,fix
383,animation express the second in number ive noticed that the second are expressed both by using number and word for example the doc say second and not half second i believe is more readable to express them by using number and is consistent too pr close ,docs
384,compilercli ensure literal type are retained when strictnullinputtypes is disabled consider the ngmodel directive which ha the ngmodeloptions input t class ngmodel input ngmodeloptions updateon blurchangesubmit in a template this may be set using an object literal a follows html input ngmodel ngmodeloptionsupdateon blur this assignment should be accepted a the object type aligns with the ngmodeloptions input in ngmodel however if the strictnullinputtypes option is disabled this assignment would inadvertently produce an error type updateon string is not assignable to type updateon blurchangesubmit type of property updateon are incompatible type string is not assignable to type blurchangesubmit this is due to the blur value being inferred to be of type string instead of retaining it literal type the nonnull assertion operator that is automatically inserted for input binding assignment when strictnullinputtypes is disabled inhibits typescript from inferring the string value a it literal type this commit fix the issue by omitting the insertion of the nonnull operator for object literal and array literal pr close ,fix
385,compilercli use relative import within the angularcompilercli package intrapackage import should always be done via relative import rather than using the external import location pr close ,refactor
386,compiler reverse testing of ternary operator to ensure typescript properly narrow type by checking if the providedin is a function instead of everything but a function typescript properly narrow the typing for creating the expression pr close ,refactor
387,docsinfra remove link to custom stackblitz for running test previously there wa a custom version of the testing app for stackblitz that would run the test in the browser with the webcontainer approach this is no longer necessary since the test can be run directly from the command line fix pr close ,build
388,docsinfra ensure necessary boilerplate file appear in stackblitz example the tsconfigappjson and similar were not appearing in the generated stackblitz example pr close ,build
389,docsinfra remove unused code this import wa not being used and so it is redundant and can be removed pr close ,build
390,compiler generate correct code for safe method call when a safe method call such a persongetname is used the compiler would generate invalid code if the argument list also contained a safe method call for example the following code persongetnameconfiggettitleenabled would generate let tmp ctxperson null null ctxpersongetnametmp tmp null null tmpenabled notice how the call to configgettitle ha completely disappeared with tmp tmp having taken it place the issue occurred due to how the argument list would be converted from expression ast to output ast twice first the outer safe method call would first convert it argument list this resulted in a temporary being allocated for configgettitle which wa stored in the internal resultmap only after the argument list ha been converted would the outer safe method call realize that it should be guarded by a safe access of person entering the convertsafeaccess procedure to convert itself this would convert the argument list once again but this time the resultmap would already contain the temporary tmp for configgettitle consequently the safe method in the argument list would be emitted a tmp this commit fix the issue by ensuring that node are only converted once close pr close ,fix
391,animation update developer on state of package notify developer that angularanimations package ha been significantly deprioritized animatechild documentation now reference reference please enter the commit message for your change line starting pr close ,docs
392,docsinfra fix systemjsbased doc example previously the systemjsbased doc example typically ngupgrade example were not compatible with angular v due to the removal of umd bundle from the published package this commit make the example compatible with angular v and reenables the test for all systemjsbased example on ci pr close ,build
393,docsinfra include systemjs a a dependency to systemjsbased doc example due to an oversight the systemjs package wa previously not included a a dependency in the boilerplate packagejson file for systemjsbased doc example despite it being required by the app pr close ,build
394,upgrade minor fix to the upgrade guide includes the following fix remove unused format attribute from codeexample element explicitly mention that the starting point for the phonecat upgrade tutorial is the x version of the original phonecat tutorial since the original tutorial ha since been updated to use angularjs vx and use npm instead of bower pr close ,docs
395,form fix typo in tointeger function pr close ,docs
396,core correct typing when getting the nearest lcontainer updating the casted typing of getnearestlcontainer to ensure that typescript properly return the lcontainer null type pr close ,refactor
397,core correct typing check when registering destroy hook making the typing filtering more explicit allows typescript to properly recognize the presence of the prototype property on the provider within the registerdestroyhooksifsupported method pr close ,refactor
398,core remove truthy check for class getter remove the truthy check for the class getter a both path from the check assume classname wa not undefined this allows for typescript to properly determine the type of classname in the falsy path from the truthy check pr close ,refactor
399,devtools update angularframework ,build
400,form update minlengthmaxlength to inherit abstractvalidator modified minlength and maxlength validator to inherit abstractvalidator for every validator type different pr will be raised a discussed in close pr close ,refactor
401,bazel fix typo in packager action file comment fix two typoes in the packager logic pr close ,refactor
402,docsinfra configure region parser to allow mjs this commit update the necessary config setting to allow mjs file to be able to be parsed by the region parser we configure the parser to use inlineconly so that comment are generated in like the below docregion rather than docregion pr close ,build
403,localize ensure schematic code run a commonjs the schematic code in angularlocalize is currently still emitted a commonjs while the rest of angularlocalize is strict esm which is also denoted through type module in the packagejson file the schematic code is currently imported a cjs from the cli so it is not a problem right now still it is safer to ensure the code for schematic is properly picked up a cjs through a local packagejson file resetting type module to type commonjs pr close ,refactor
404,upgrade support ngmodule class a an argument of the downgrademodule function this commit extends the logic of the downgrademodule function to support ngmodule class a an argument this is needed to simplify the api surface to avoid the need to resolve ngmodule factory before invoking the downgrademodule method pr close ,feat
405,add ha method to httpcontext class at present the get method provided by httpcontext will never return null sometimes we need to check whether an http token is included so add the ha method to httpcontext pr close ,feat
406,core set up structure for google usage of migration schematic set up exporting the migration rule from the google directly from the internal angularmigrations package this package is an internal only package to be exposed for loading tslint rule pr close ,refactor
407,docsinfra target webcontainers for stackblitz liveexample link this commit change the stackblitz live example to create webcontainer project on stackblitz this approach support the new angular v packaging format but webcontainers are not supported on some browers so this is a temporary solution pr close ,build
408,migration prevent migration from updating external template multiple time the ngcomponenttemplatevisitor helper wa always referring back to the original source file on disk rather than the virtual file in the migration this meant that some template migration could attempt to modify the template multiple time resulting in invalid output a an example the migrationvrouterlinkemptyexpression migrates the following template div routerlinkdiv to div routerlinkdiv but if the template wa referenced multiple time in the program such a when the component wa referenced in the source and test entrypoints the migration would result in thing like div routerlinkdiv fix pr close ,fix
409,migration account for crlf character in template migration previously when parsing code for template to migrate crlf character were converted to just lf this meant that the sourcespans being used to overwrite the template string in the original source code were out of sync with the position identified in the parsed template this commit fix this by parsing the raw text of the template taken from the source code instead of processed string content fix pr close ,fix
410,docsinfra update angular cliframeworkmaterial to final v rcs in doc example this commit update the doc example to the latest prerelease version of angular cli framework and cdkmaterial it also update the apps to more closely align with new apps cli apps see also the diff between a basic vrc cli app and a vrc one cexbrayatangularclidiffrcrc pr close ,build
411,docsinfra update aio to angular frameworkcomponentscli final rcs update aio to the latest v releasecandidate version of all angularowned package such a angular cdk and angular material applies change needed for the v cli a performed by the cli through ng update additionally the web component polyfill ha been removed a all browser supported by angular seem to support custom element v natively according to scroll down to browser support coauthoredby george kalpakas kalpakasggmailcom pr close ,build
412,docsinfra search box input lineheight this fix an issue on safari which caused the text to be pushed down when blurring out of the search input field the root cause of the problem appears to be that previously the computed line height wa that of px which caused a shift in content close pr close ,fix
413,core add viewref to private export this commit add viewref to private export so it can be reused in internal package the viewref symbol remains private and should not be referenced directly pr close ,refactor
414,docsinfra remove obsolete way of disabling docviewer animation previously there were two way to disable view transition animation in docviewercomponent using a noanimations cs class on the aiodocviewer element and setting the static docviewercomponentanimationsenabled property to false the latter wa only used to disable animation for testing purpose with the recent introduction of appcomponentreducedmotion there is now an easy way to disable animation in test using the noanimations class which is applied by appcomponent based on the value of appcomponentreducedmotion therefore it is no longer necessary to have docviewercomponentanimationenabled this commit remove the now obsolete animationsenalbed property pr close ,refactor
415,docsinfra improve accessibility by respecting prefersreducedmotion make the app easier to use for people with motion sensitivity by disabling several animation esp one involving moving thing around when the user prefers reduced motion the user preference is detected using the prefersreducedmotion cs medium feature disabled animation include view fade inout transition sidenav openclose animation topmenu color and size change contributor card flip animation for more detail on using prefersreducedmotion and disabling angular animation see designing with reduced motion for motion sensitivity disabling angular animation at runtime pr close ,fix
416,element remove incorrect angularplatformbrowser peer dependency the element package doesnt use angularplatformbrowser therefore this is not needed pr close ,fix
417,element remove ngadd schematic this schematic is no longer needed since all the browser that angular support customelementregistry apis side note documentregisterelement ha been deprecated in favor of ungapcustomelement pr close ,fix
418,docsinfra add postdeploy action for testing more redirect configs add deploytofirebase postdeploy action to allow testing various redirect configs in a future commit this will allow testing redirects for the stable rc and next deployment via the firebase config file without requiring change in the firebase console or dns pr close ,feat
419,docsinfra make it easier to configure firebase redirects at deployment refactor the deploytofirebase postdeploy action by extracting logic to separate helper function this make it easier to create more function for testing various redirect configs in a future commit pr close ,refactor
420,docsinfra add more granular support for configuring firebase redirects at deployment previously there wa a deploytofirebase predeploy action for configuring firebase to redirect nonfile request to angulario this is used for ensuring that rcangulario is correctly redirected to angulario even when people have previously visited and have a serviceworker activated on rcangulario this commit add predeploy action for configuring firebase to redirect a deployment to any of angulario rcangulario or nextangulario and also configure whether all request or only nonfile request will be redirected in a future commit this will allow managing redirects for the stable rc and next deployment via the firebase config file without requiring change in the firebase console or dns pr close ,feat
421,docsinfra create undo function for all predeploy action create function to undo the change made by any predeploy action in a future commit this will allow deploying a build to multiple projectssites with different small tweak for each pr close ,feat
422,docsinfra avoid running expensive operation when focusingskipping test previously the precomputation of branch version info for the deploytofirebase test would always take place even when the test that used that info were skipped this precomputation involves network access and may add a noticeable delay this commit refactors the test to not do the precomputation if the corresponding test are skipped this allows for a faster iteration when focusing on a different set of test pr close ,test
423,docsinfra move deploytofirebase postdeploy action to a separate file move some function that are used a postdeploy action from deploytofirebaseindexmjs to a separate file deploytofirebasepostdeployactionsmjs to keep indexmjs small and easier to maintain note while not strictly necessary atm postdeployactionsmjs us the same default export pattern for consistency with utilsmjs pr close ,refactor
424,docsinfra move deploytofirebase predeploy action to a separate file move some function that are used a predeploy action from deploytofirebaseindexmjs to a separate file deploytofirebasepredeployactionsmjs to keep indexmjs small and easier to maintain also rename the removeserviceworker function to disableserviceworker which is a little more accurate note while not strictly necessary atm predeployactionsmjs us the same default export pattern for consistency with utilsmjs pr close ,refactor
425,docsinfra move deploytofirebase util function to a separate file move some util function from deploytofirebaseindexmjs to a separate file deploytofirebaseutilsmjs to keep indexmjs small and easier to maintain note to make it easier to mock function in test utilsmjs us a default export instead of multiple named export and reference local function through the default exported object pr close ,refactor
426,docsinfra create logsectionheader helper in deploytofirebase script create a logsectionheader helper function to avoid duplicating code pr close ,refactor
427,docsinfra convert deploytofirebase script to esm convert the deploytofirebase script and corresponding test from commonjs format to esm pr close ,refactor
428,docsinfra validate computed deployment in deploytofirebase script the deploytofirebase script might have to deploy a single aio build to multiple projectssites potentially with small tweak between each this commit add a step to validate the computed deployment to ensure they are compatible with each other for example that there is exactly one primary deployment that build the app and set the thememode and that all secondary deployment are compatible with the primary one pr close ,build
429,docsinfra add name and type to deployment info this commit add two new property name and type to deployment info data this will make it easier to differentiate between deployment target eg primary v secondary and will provide more informative log message in a subsequent commit this new data can be used to validate the computed deployment list pr close ,refactor
430,docsinfra improve an error message in deploytofirebase script this commit fix a typo in an error message thrown in the deploytofirebase script but it wa but it wa but it wa it also make the error clearer when the request wa not redirected old error expected originalurl to be redirected to expectedurl but it wa but it wa redirected to undefined new error expected originalurl to be redirected to expectedurl but it wa not redirected pr close ,fix
431,docsinfra enable linting for deploytofirebase script this commit enables linting for the script in aioscriptsdeploytofirebase it also make the necessary change to the file to make linting pas pr close ,build
432,docsinfra move deploytofirebasejs into a dedicated directory this commit move the aioscriptsdeploytofirebasejs script into a new directory aioscriptsdeploytofirebase this will make it easier to break it up into multiple smaller file to better organize the code without polluting the aioscripts directory pr close ,refactor
433,docsinfra align doc example with default cli t config this commit enable the noimplicitoverride and nopropertyaccessfromindexsignature typescript compiler option for doc example to better align with the default configuration of new angular cli apps it also make the necessary change to the doc example source code pr close ,refactor
434,docsinfra update doc example to angular vrc this commit update the doc example to angular vrc in addition to updating the dependency version it also update the project structure and configs to more closely match what a new v cli app would look like see also the diff between a basic v cli app and a vrc one note v wa the last version for which we aligned the project with how a new cli app would look like additionlly since we now use rxjs v in doc example this commit remove the extra ci step to explicitly test the doc example against rxjs v since angular v no longer support ie this commit remove an iespecific section from upgradesetupmd pr close ,build
435,docsinfra fix practicalobservableusage doc example test with rxjs v due to how debouncetime work in rxjs v jasmine mock clock wa not enough to trigger it this commit fix it by providing a similar mock clock that is able to mock all of datenow setinterval and settimeout pr close ,test
436,common describe behavior when reference change pr close ,docs
437,core support injectflags argument in nodeinjectorget the injectflags argument wa defined for both getorcreateinjectable and injector but wa ignored in nodeinjector this pr add support for getting parent token via nodeinjectorget close pr close ,fix
438,docsinfra fix heritage link fix incorrect escape of special character when rendering member heritage doc example defaultiterablediffer doc incorrectly render what this class implement it doe not fully display generic type of implemented interface pr close ,fix
439,migration remove no longer accessible migration with this change we remove no longer needed migration these migration are no longer accessible following a change angularangularcli in the angular cli the cli now show an error message when user try to update angular and nguniversal package across multiple major version example to update from version to version the recommand approach is to run the following command ng update angularcore ng update angularcore which is the same a ng update angularcore nb it is recommand that when update from one major to another user verify that their application is working a expected pr close ,refactor
440,devtools bump typescript version to keep angular devtools compatible with the angular compiler also installs the latest typesfilesystem because the transitive dependency from typeschrome is not compatible with typescript ,build
441,form update minlengthmaxlength to inherit abstractvalidator modified minlength and maxlength validator to inherit abstractvalidator for every validator type different pr will be raised a discussed in close pr close ,refactor
442,compilercli extract error documentation base url into separate file prior refactorings caused unexpected g sync issue due to a patch that change the error documentation url this commit move the base url into a separate file to make this more apparent pr close ,refactor
443,compilercli avoid broken reference in dts file due to internal marker the errorcode enum in the errorcodets file is governed by public api guard but the other toplevel export from that file are exempt from public api documentation and are therefore marked a internal however typescript is configured with the stripinternal compiler option such that declaration with internal marker are not emitted into the dts file but this mean that the reexports in the barrel file end up referring to missing declaration the stripinternal option is considered internal and it documentation state to use at your own risk a per having the option enabled is desirable for u a it work well for hiding class field that are marked internal which is an effective way to hide member from the dts file a a workaround for the issue with toplevel symbol the declaration with internal marker are moved to dedicated file for which no public api guard is setup therefore allowing their internal marker to be dropped fix pr close ,fix
444,docsinfra change deprecated keyboardeventkeycode example to use keyboardeventcode pr close ,docs
445,localize fix spelling of documentation link fix the spelling of in in a documentation link pr close ,docs
446,migration remove no longer accessible migration with this change we remove no longer needed migration these migration are no longer accessible following a change in the angular cli the cli now show an error message when user try to update angular and nguniversal package across multiple major version example to update from version to version the recommand approach is to run the following command ng update angularcore ng update angularcore which is the same a ng update angularcore nb it is recommand that when update from one major to another user verify that their application is working a expected pr close ,refactor
447,platformbrowser complete component bootstrap before switching to the next test the bootstrap test that reused the same component the hellorootcmp one were randomly failing due to the incomplete cleanup between test this commit ensures that the component bootstrap is fully cimpleted and there are no pending async action before going to the next test pr close ,test
448,ngcc support alternate umd layout when adding new import in umdreflectionhost wa updated to deal with the new umd format used by rollup where the parenthesis is around the wrapper function and not the wrapper function call for reference this caused failure in the ngccvalidation repo example example this commit update umdrenderingformatter to also handle both umd format in order to validate the change this commit also update the umdrenderingformatter test to run against both umd format pr close ,fix
449,core made comment structure consistent in indexts changed second big block of comment to use multiline comment structure instead of multiple singleline comment pr close ,refactor
450,router reuse route strategy fix currently it impossible to cache detachattach parent route without caching child route this produce a bug when navigating from ab to c then to ad where a route is cached on the last navigation we incorrectly restore ab route instead of ad this change introduces new behavior if the route should be detachedattached we do so but we check also child route recursively fix pr close ,fix
451,devtools update dependency webpack to v ,build
452,serviceworker avoid unnecessary writes to cache when version fails when an app version is detected a broken the sw call the driverversionfailed method previously this method would in turn call the driversync method which writes some metadata about the sw state to the ngswdbcontol cache more specifically driversync persists info about all known app version which one is the latest and also what version each client is assigned to however no relevant info is changed inside driverversionfailed so the call to driversync is redundant since there are no change that need to be synced with the cache this is a leftover from before when driverversionfailed used to update version assignment and thus did require synchronization with the cache this commit remove the redundant driversync call to avoid an unnecessary write to the cache pr close ,refactor
453,compilercli run in extraction test using ivy compiler this commit reenables the extractin test target and update the test to run with the ivy compiler pr close ,test
454,compilercli run watch mode test using ivy compiler this commit reenables the performwatch test target and update the test to run with the ivy compiler additionally this target wa switched over to use angular v package a input to the test to allow the viewengine test to continue working with v package which are ivyonly this commit reverts those change now that view engine test are disabled a it desirable to test against local artifact that are build within the monorepo instead of depending on npm package pr close ,test
455,compilercli throw an error when compiling with view engine the view engine compiler now throw when constructed and will be removed shortly direct user should switch to ngtscprogram to build with ivy the view engine compiler is being removed so this make it throw an error to ensure no one accidentally depends on code being removed pr close ,refactor
456,devtools support electron rangleangulardevtools following suggestion from the issue thread created an empty polyfills to the chromebrowseraction call which are not available in the electron ,fix
457,devtools use local declaration of the change detection strategy enum ,refactor
458,devtools use safe operation to update the overlay ,refactor
459,devtools support trusted type for script injection ,feat
460,ngcc support alternate wrapper function layout for umd recently rollup used by ngpackagr changed the position of parenthesis around it generated umd wrapper function this commit ensures that ngcc can handle both fix pr close ,fix
461,compiler do not error if any is used inside a listener fix that any cast werent being converted to statement inside listener which resulted in a compiler error fix pr close ,fix
462,router do not clear currentnavigation if already set to next one experimentation with the router url management exposed a situation where the currentnavigation wa being cleared in the finalize after the currentnavigation wa already set to the next one this change ensures that the currentnavigation is only cleared if the id of the finalized transition match the one on the currentnavigation object pr close ,fix
463,router remove use of browserurltree in schedulenavigation there are no added test here because the change is generally equivalent to what wa there before the goal of that piece of code is to prevent duplicate navigation due to the location synchronization code between angularjs and angular that is the angular router listens to the popstate event and trigger navigation but so doe the angularjs router and trigger navigation through routernavigatebyurl the settimeout in the angular router setuplocationchangelistener is there to make this bit of code work the popstatehashchange navigation will necessarily come after the imperative nav triggered by angularjss location sync anyhow in the long run i would like to get rid of this bit of code altogether we should not have special handling for these case the angularjsangular location sync should either not trigger a duplicate navigation in the first place or be tolerant to processing the duplicate navigation in the short term this change benefit the router while we investigate removing this logic completely because now browserurltree ha a single responsiblity to support onsameurlnavigationreload this mean that we can work towards removing the browserurltree tracking from the router code at some point a well and have the onsameurlnavigation logic be part of a prenavigation hook that can be handled outside the router this may or may not be possible but the change here open up that change for investigation pr close ,refactor
464,compiler support in interpolated only attribute binding while fully dynamic bound property and attribute can not be marked for localization property that only contain interpolation can this commit ensure that attribute binding that only contain interpolation can also be marked for localization close pr close ,fix
465,compiler reference icu message id from their placeholder when extracting in message from template icu message are split out from the message that contains them this can make it difficult in the translation file to match up the two message especially if the icu is reused in multiple placeholder this commit build on top of the previous one to expose the message id of icu message from the icu placeholder a additional metadata in the localize tagged string now the metablock following any placeholder can also contain the associated id delimited from the placeholder name by fix pr close ,feat
466,localize support associated message id for placeholder when extracting in message the angular compiler need to split icu expression into their own message currently there is no guaranteed way to reassociate the icu message with the original message where the icu wa found this change add support in the localize tooling so that associated id can be stored a metadata in the localize tagged string these id can then be used in generated translation file to provide a link between the two message the xliff and format have been updated to render these relationship via the xid and subflows attribute respectively pr close ,feat
467,docsinfra add padding to docscard title improve the aio docscard title by adding some padding so that it doesnt get too close to the card edge pr close ,fix
468,docsinfra move security anchor outside callout element two callout element in the security guide have anchor a their first child element instead of the callouts header causing uglyunwanted spacing move the anchor above the callout element to fix such issue pr close ,fix
469,docsinfra add a box around cli command line reference syntax this commit help to make the section that describes an overview of the syntax of a cli command stand out from the surrounding text close pr close ,build
470,router fix router public api for cancelednavigationresolution the commit which made the cancelednavigationresolution property on the router public did not add the corresponding configuration in the extraoptions this wa a mistake and is being corrected in this commit we should not encourage changing the property postsetup ie injectroutercancelednavigationresolution computed this manner of configuration make the option nontree shakeable because we have to keep both implementation in case the value change at runtime pr close ,fix
471,compilercli update ngc to pas the build when only warning are emitted ref previously a build when emitted one warning and no error would fail with a nonzero exit code this is not what user would expect but had not been an issue before since the compiler did not actually emit any warning with upcoming extended template diagnostics and other warning this is now a case that need to be supported warning are printed to stderr a before but ngc now exit with code and the build is considered successful implemented this by adding a new expectedexitcode parameter to drivediagnostics which asserts against the real exit code most importantly it doe not require the the build to pas since any exit code can be given so it is up to the test to assert this a well a many message printed to make sure they are acceptable this is useful for testing warning and ensuring the build still pass pr close ,fix
472,docsinfra apply minor style fix to aio contributor card improve the aio contributor card by aligning centrally the contributor name and adding some padding so that it doesnt get too close to the card edge note the name aligning wa already present by wrongly removed in pr pr close ,fix
473,router clean up internal hook beforepreactivation hook is unused the only place that us afterpreactivation doe not use the argument not to say we wont want to provide hook similar to this in the future but the current state is overengineered for what it being used for pr close ,refactor
474,devtools update dependency tsnode to ,build
475,devtools update dependency jasminecore to ,build
476,docsinfra remove unnecessary tsconfigjson file the tsconfigjson file in aiocontentexamples doe not seem necessary anymore a it wa only used for tslinting and tslint ha been removed from the example in pr and pr pr close ,refactor
477,core apply minor improvement to the injectiontokens api doc pr close ,docs
478,devtools update dependency webpack to v ,build
479,docsinfra improve cancel icon in topmenu search webkit browser show a cancel x icon in the input search on focushover which allows to clear the content of the input such icon ha small glitchesimperfections so use a maticon instead this also add such icon to nonwebkit browser pr close ,fix
480,animation fix wrong code link present in the animation guide fix the link present in the animation guide under td element written a codetextlinkcode which are not rendered properly note the bug wa introduced in pr the bug is only present for code block inside html block element the aforementioned format can be used in the inline html element without issue pr close ,docs
481,languageservice enable extended template diagnostics when strict template is forced this effectively enables extended template diagnostics in the vscode extension in google this us the existing forcestricttemplates option to enable since that is already a prerequisite for extended template diagnostics and we dont distinguish between them at the configurationlevel in google anyways pr close ,refactor
482,docsinfra update min range of node version eslint which is used in aio requires nodejs x or later pr close ,build
483,core avoid duplicating comment in testbed teardown migration currently the testbed teardown migration is set up in a similar way to all other migration where we take a callexpression add a parameter to it print it and replace the existing call the problem is that doing so while preserving the expression of the original callexpression can cause comment to be duplicated this can happen quite frequently because by default the cli generates comment before inittestmodule call to work around it these change make the migration more precise by inserting a new parameter or replacing and existing one using string manipulation this requires a bit more code but it more reliable than the following alternative using getfullstart and getfullwidth to replace the node this would work with our current setup but the problem is that getfullstart also includes whitespace and newlines before the leading comment this can cause u to mess up the user formatting and figuring out which whitespace to keep and which one to remove is tricky recreating the callexpressionexpression when constructing the new node this would also work since itll drop any existing comment but the problem is that callexpressionexpression can be a wide variety of node which we would have to account for we cant use getmutableclone because it preserve the comment fix pr close ,fix
484,docsinfra remove tslint from cli systemjs example remove the deprecated tslint from the example of type systemjs note eslint hasnt be applied and linting ha been removed entirely to follow angulars unopinionated view on linting pr close ,refactor
485,devtools update dependency typeschrome to ,build
486,devtools update dependency webpack to v ,build
487,docsinfra remove linting from in example angularjson remove linting from the in angularjson example a that is no longer present in the boilerplace angularjson and the two should be kept in sync note the linting wa removed from the boilerplate angularjson file in pr pr close ,refactor
488,docsinfra ensure swupdatesservice is instantiated in dadbbeccbeee we accidentally stopped instantiating the swupdatesservice service which meant that we were no longer subscribing to serviceworker update event and proactively checking for update we would still get update because the serviceworker automatically check on each navigation request and when a new serviceworker instance is created but we would not proactively fetch update and also miss unrecoverable error this commit fix this by exposing an enable method from swupdatesservice which ha to be explicitly called for the service to be enabled and ensures that the method is called when appcomponent is initialized the commit also get rid of the swupdatesmodule whose only purpose wa to provide swupdatesservice in favor of using providedin fix pr close ,fix
489,docsinfra avoid prepending version info to error message twice previously we used to prepend version info to error message by updating their message property and their stack property however due to the fact that on some browser errorstack is lazily computed based on errormessage the first time the stack property is accessed this resulted in prepending the version info twice this commit ensures that the version info is only prepended to errorstack once to avoid unnecessary repetition in error message pr close ,fix
490,docsinfra fix sas rule resulting in invalid cs the way the sas rule wa defined previously resulted in invalid cs of the form cs table thead this in turn resulted in a buildtime warning warning stylesaabccss warning unexpected │ table thead ╵ this commit fix the affected rule mostly to avoid the warning because this change doesnt seem to have any visual difference it also fix other rule that were currently not affected because they only had nested rule and no direct style but were susceptible to being affected in the future pr close ,fix
491,docsinfra fix ay of external link prevent screen reader from falsely announcing openinnew since they may not actually open new tabswindows but simply send the current page to a domain outside angulario fix pr close ,docs
492,devtools update dependency webpack to v ,build
493,bazel allow for custom condition to be set in ngpackage target the apf v ngpackage rule will generate the export field if not set currently it allows for additional subpath entry to be configured manually the packager doe not allow for custom condition in subpath export which are autogenerated this is sometimes useful and necessary though eg in angular material we also need to expose the index sas file through a sas conditional that the webpack sas loader will pick up for this the packager need to support manual additional condition a long a they do not conflict pr close ,feat
494,compilercli update peerdependencies to require rxjs rxjs version prior to export e code whereas angular application using rxjs today use e this wa fixed in rxjs which expose e entrypoints a well this commit update angulars peer dependency to require the newer rxjs pr close ,refactor
495,common add injection token for default date pipe timezone add a new injection token called datepipedefaulttimezone that allows for the default timezone for all datepipe instance to be specified fix pr close ,feat
496,core update node version support range to support v this commit update the node engine range for all angular framework package to no longer support nodejs v this is done because apf v us package export pattern which are only supported a of v allows for the latest v nodejs version this match with the cli which added nodejs v support with we already limit this to v in preparation to only supporting the lts minor of node v breaking change nodejs version older than v are no longer supported due to the angular package using the nodejs package export feature with subpath pattern pr close ,feat
497,bazel expose esm and e condition in apf package export in addition to the existing export conditional export we ship a part of apf v we want to expose the nonbundled esm output through the esm conditional name additionally we will expose the flat e file through the e conditional field allowing consumer like the cli to prioritize certain format eg consider the case with rxjs where it currently default to the esm output the cli could now set e a the conditional to leverage the e output of rxjs this unveils a problem though since this would also mean that e output of the framework angular package would be used instead of the available e output here is the additional e conditional helpful a it allows the cli to prioritize e fallback to e and lastly fallback to default if none do match for a certain package pr close ,feat
498,docsinfra ensure ngswjson generation is correct and deterministic a explained in currently the generation of the ngswjson sw manifest is nondeterministic and often incorrect until we can update to an angularserviceworker version that includes the fix from pr we temporarily workaround the issue by regenerating the ngswjson manifest after ng build using the ngswconfig binary exposed by angularserviceworker note this work around the issue because the filesystem class used by the ngswconfig binary happens to be synchronous unlike the implementation provided by the angular cli thus avoiding the race condition described in pr close ,build
499,docsinfra update angular material to version next this commit update angulario to the latest prerelease version of angular cdkmaterial vnext pr close ,build
500,docsinfra update aio to align with new vnext cli apps this commit update angulario to more closely align with new apps created with the latest angular cli and remove redundant filesconfig now that cli ha dropped support for differential loading pr close ,build
501,docsinfra prefix error message with angular version info prefix error message with the angular version currently used in the angulario app this applies to both error logged to the console and reported to google analytics and make debugging certain error easier pr close ,refactor
502,docsinfra use schema in ngswconfigtemplatejson to provide intellisense add an appropriate schema property in ngswconfigtemplatejson to allow ides to provide intellisense about the various field of the config pr close ,build
503,docsinfra improve debugging when doc example test fail without exiting when the doc example test run with clispecsconcurrency greater than a happens on ci the output of each process is buffered to avoid interleaved output from multiple parallel process and is only printed out once the process exit either successfully or with an error however in case where a process did not exit the buffered output would be never printed out thus making debugging the failure harder this is the case for example if a build error happens during ng ee this can be seen in action in this ci job where the job fails due to no output but the error which is an incompatible t version is never printed out to make debugging such situation easier in the future this commit update the spawnext helper to reject causing the buffered output to be printed out if there is no output from the spawned process for more than minute pr close ,test
504,docsinfra remove redundant code from runexampleeemjs this commit remove some code that wa unused or had no effect from the runexampleeemjs script pr close ,refactor
505,docsinfra convert buttonlike element to actual button some element in the aio application are anchor or divs but behave like button it is semantically and ay more correct to convert them to actual button element instead pr close ,fix
506,languageservice fix typo in method name the finerenamelocations method should be called findrenamelocations pr close ,refactor
507,docsinfra ensure all overload are shown in interface in the api doc concrete class do not list the implementation overload on a method since this is not strictly part of it api we recently fixed the rendering of interface to display all the overload since there is no implementation overload this commit also fix the rendering of pseudoclasses which are a combination of an interface and a constant fix pr close ,build
508,languageservice provide snippet for attribute support snippet completion for dom attribute whose value is empty for example div my¦ the inserttext will return myoutput fix pr close ,feat
509,core drop support for typescript and bump the minimum required typescript version to and remove the integration test for and breaking change typescript version older than are no longer supported pr close ,feat
510,bazel ngcwrapped should not rely on linker for external workspace currently when ngcwrapped run in externalconsumer workspace like in the angular component project the ngcwrapped binary relies on the linker due to the patched module resolution in rulesnodejs no longer being default the reliance on the linker of rulesnodejs is problematic for worker a the required nodemodules are not relinked for every build this wa previously not an issue before the apf v change because the compilercli module wa loaded only once through an import statement a of apf v the compilercli module is loaded dynamically for every build this dynamic import can then break a the worker doe not initially load the compilercli module when becoming online instead the module is loaded on the first build where the node module might not be linked properly anymore due to eg other target running at the same time we fix thi issue by doing the following thing enabling the patched module resolution for consumerexternal workspace this would match how we use ngcwrapped inside fw a well caching the compiler cli module instead of refetching the module through dynamic import for every build in a worker we should use the cached version this is semantically the same a with apf v where a single import statement at file toplevel wa used technically nodejs should cache the module but it doesnt hurt directly caching it a the module resolution will be patched by rulesnodejs and could perform unnecessary task pr close ,fix
511,languageservice remove option and bundle generation for view engine this commit remove the option to enable the ve language service and remove the ve bundle entirely it also update the name of the ivy bundle to languageservicejs now that there is only one pr close ,refactor
512,serviceworker make ngswjson generation deterministic and correct previously all assetgroups from ngswconfigjson were processed in parallel for each assetgroup we retrieved all file for the current build filtered out file that were already matched by other assetgroups determined which of the remaining file belonged to the current assetgroup and generated entry for the ngswjson manifest this process wa susceptible to race condition when there were file that would be matched by multiple assetgroups this made the generation of the ngswjson manifest nondeterministic and violated the rule that each file would belong to the first assetgroup that matched it based on the assetgroups order of appearance in ngswconfigjson thus leading to broken serviceworker behavior this commit fix it by ensuring that the generation process is deterministic and that assetgroups are processed in the proper order note the generation process ha been broken since the beginning but we have only noticed this recently this is possibly related to the cli switching from a virtual file system host which ha more consistent timing characteristic to the nodejs builtin fspromises in angularangularclidbcccaabeeadafd note this commit also ensures that file in the ngswjson hashtable are in alphabetic order previously the file were added to the hashtable in block corresponding to each assetgroup this change is not necessary ie the order of key in the hashtable make no difference in behavior but it make it easier to scan for a file for example for debugging purpose pr close ,fix
513,serviceworker expose more version update event this commit introduces a new swupdateversionupdates observalbe which provides more granular information about service worker version update than the already existing swupdateavailable observable the new event emitted by swupdateversionupdates basically add the possibility for application to get notified if a new version is available on the server not yet downloaded and if an installation of a new version failed close deprecated the swupdateavailalbe observable is deprecated the new swupdateversionupdates observable provides the same information and more therefore it is possible to rebuild the same behavior a swupdateavailalbe using the event emitted by swupdateversionupdates and filtering for versionreadyevent event a a result the swupdateavailalbe observable is now redundant pr close ,feat
514,serviceworker swupdateactiveupdate and swupdatecheckforupdate should have a meaningful outcome previously activateupdate and checkforupdate returned promisevoid which did not provide any information of the actual outcome of the operation developer needed to subscribe to a corresponding observable to obtain the outcome with this commit swupdateactivateupdate will return promiseboolean which resolve to true if an update wa activated to false if no new version is available and reject in case of any error swupdatecheckforupdate also return a promiseboolean which resolve to true if an update is available to false if no update wa found and reject in case of any error close breaking change the return type of swupdateactivateupdate and swupdatecheckforupdate changed to promiseboolean although unlikely it is possible that this change will cause typescript typechecking to fail in some case if necessary update your type to account for the new return type deprecated the swupdateactivated observable is deprecated the swupdateactivated observable only emits value a a direct response to calling swupdateactivateupdate and wa only useful for determining whether the call resulted in an update or not now the return value of swupdateactivateupdate can be used to determine the outcome of the operation and therefore using swupdateactivated doe not offer any benefit pr close ,feat
515,devtools update angularframework to bcb ,build
516,router unset attachref when routeroutlet is destroyed to avoid mounting a destroyed component previously when a routeroutlet is conditionally shown with an ngif and a subroute wa reattached via a custom routereusestrategy routeroutlet would try to mount a destroyed component into the view if the routeroutlet is destroyed and reinitialized this commit fix it by unsetting contextattachref when routeroutlet is destroyed so when the routeroutlet is being initialized again it no longer see an attachref that it need to mount to the view fix pr close ,fix
517,core fix failing unit test fix a unit test that now fails because rethrowing error is enabled by default the problem is that were checking the behavior of a component that throw during ngondestroy but since the resettestingmodule call itself throw the test is considered a failing pr close ,test
518,compilercli handle nullable expression correctly in the nullish coalescing extended template diagnostic ref previously checking a template with the syntax html div foo test div where foo return a nullable value typescript component class testcmp foo string null null would always log a nullish coalescing not nullable warning this is because getsymbolofnodenodeleft would return the symbol of the function foo rather than the symbol of it returned value foo fixed this by getting the symbol for the whole expression span rather than just the function receiver also made some minor refactorings to templatesymbolbuilder to make a similar change to safe method call this behavior wa originally for the language service in order to handle quick info a the user highlighting a function name would actually apply to the entire expression this is no longer true a the language service will correctly request the type from the function rather than the call expression so these hack are not necessary anymore this broke two existing test case of exactly this behavior which were easily updated also added a test to the language service to confirm that it is not broken by this change pr close ,fix
519,core dont rethrow error if test teardown ha been disabled fix that the current logic wa set up so that error rethrowing wa enabled even when teardown is disabled pr close ,fix
520,compilercli remove sourcemap from dependency sourcemap is only used during testing and therefore there is no need to list it a a dependency cherry picked from commit aedcbdceacaaada pr close ,refactor
521,devinfra remove dependency on minimist refactor script to use yargs the main motivation for this is to align and use a single parser pr close ,refactor
522,compilercli remove dependency on minimist the compiler already ha a dependency on another parser yargs pr close ,refactor
523,core add migration to opt out existing apps from new test module teardown behavior since the destroyaftereach teardown behavior is enabled by default now existing test that depended on the old behavior can start to fail these change add an automated migration that explicitly add destroyaftereach false to existing test the migration work by looking for inittestenvironment call across the entire app and adding the flag to them if no call were found the migration will add the flag to all configuretestingmodule and withmodule call instead pr close ,feat
524,core enable test module teardown by default set the destroyaftereach teardown behavior to be enabled by default pr close ,feat
525,core add createngmoduleref function to create ngmoduleref based on ngmodule class ngmodule factory are obsolete with ivy and most of the operation can already be performed with ngmodule class without retreieving corresponding factory ngmodule factory were useful to generate an ngmoduleref via ngmodulefactorycreate method this commit add a new function to create an instance of the ngmoduleref class without having the need to create a factory first pr close ,feat
526,core add getngmodulebyid function to retrieve loaded ngmodules by id this commit add a new function called getngmodulebyid to the public api surface of the framework the getngmodulebyid function allows to retrieve loaded ngmodule class by id specified via ngmoduleid the function is a replacement for the getmodulefactory function deprecation the getmodulefactory function is deprecated in favor of the getngmodulebyid one with ivy it possible to work with ngmodule class directly without retrieving corresponding factory so the getngmodulebyid should be used instead pr close ,feat
527,compilercli deprecate the fulltemplatetypecheck compiler option when compiling your application using the aot compiler your template are typechecked according to a certain strictness level before angular there existed only two strictness level of template type checking a determined by the fulltemplatetypecheck compiler optionguideangularcompileroptions in version the stricttemplates family of compiler option ha been introduced a a more finegrained approach to configuring how strict your template are being typechecked the fulltemplatetypecheck flag is being deprecated in favor of the new stricttemplates option and it related compiler option project that currently have fulltemplatetypecheck true configured can migrate to the following set of compiler option to achieve the same level of typechecking json angularcompileroptions stricttemplates true strictinputtypes false strictnullinputtypes false strictattributetypes false strictoutputeventtypes false strictdomeventtypes false strictdomlocalreftypes false strictsafenavigationtypes false strictcontextgenerics false pr close ,refactor
528,docsinfra amend color of code link inside single anchor when some auto code link fail to happen they can be added manually with the md code textlink these generate anchor element which contain a code element such code element doe not get the correct text color this commit fix such issue pr close ,fix
529,docsinfra remove tslint from cli example remove the deprecated tslint from the example of type cli note eslint hasnt be applied and linting ha been removed entirely to follow angulars unopinionated view on linting pr close ,refactor
530,docsinfra update script using lighthouse to e module update the aio script that use lighthouse ie auditwebappjs and testaioayjs to e module this allows consuming lighthouselighthousecli v which also switched to e module note switching the testaioayjs script to e module is not strictly necessary since it invokes auditwebappmjs via a shell command but it wa done for consistency pr close ,build
531,migration ensure commonjs migration can be accessed the angularcore migration are currently published a commonjs and also not bundled schematic of which migration are a type are currently required to be commonjs module due to the schematic runtime not yet supporting esmbased schematic to ensure that the migration file are loaded a commonjs module a nested packagejson file ha been introduced within the schematic directory of the package to set the type field for all containing javascript file a commonjs since the migration are also not currently bundled and the devmode output used to build the migration will replace all relative import with fullyqualified module specifier an additional export entry must be added to allow the fullyqualified module specifier to correctly resolve if devmode did not change the relative import the additional entry would not be needed bundling would also remedy the situation and is the longterm path especially once the migration are converted to esm additional followup change should investigate bundling each migration the additional export entry should be removed if either devmode behavior is changed or the migration are bundled pr close ,refactor
532,migration support use of an esm angularcompilercli package currently migration and schematic must be in commonjs format however framework package will only be esm from v and onward to support this configuration dynamic import expression are now used to load angularcompilercli and it new secondary entry point angularcompilercliprivatemigrations dynamic import within nodejs allow the angularcore migration ’ commonjs code to load esm code unfortunately typescript will currently unconditionally downlevel dynamic import into a require call require call can not load esm code and will result in a runtime error to workaround this a function constructor is used to prevent typescript from changing the dynamic import once typescript provides support for keeping the dynamic import this workaround can be dropped and replaced with a standard dynamic import due to the use of the dynamic import a reference to the dynamically loaded module must now be passed to all location that use value from the module pr close ,refactor
533,router restore history in a consistent way on canceled navigation the router code currently ha specialcase handling around when and how the internal state is reset specifically it only reset the internal tracking of the state when an error is thrown which doe not happen when guard reject or resolvers return empty other than the navigation url not matching a config guard rejecting would be the main cause of a navigation being turned down this change update the router code to always reset the internal state in the same way regardless of the reason for navigation cancellation in the end this will only affect very specific usecases with urlhandlingstrategy because the internal state is not updated until the end of the transition pipe the state reset generally doesnt do anything at all however because the rawurltree is reset by calling urlhandlingstrategymerge with the attempted rawurl that failed the resulting browser url reset could be different than before but will now be consistent with how the url is reset in other scenario like a url not matching a route config pr close ,refactor
534,docsinfra upgrade cli command doc source to afdfcd updating angularmaster from clibuildsmaster relevant change in commit range modified helpservejson pr close ,build
535,router add stub file for g patch of ngmodulefactoryloader internally g code still us the loadchildren string syntax we need to continue to provide this functionality with an internal patch this change make that patch easier by only touching stub file that support the loadchildren string other than routerconfigloader pr close ,refactor
536,devtools update angularframework to fb ,build
537,compilercli expose tooling code through private entrypoint similar to the other private entrypoints we have added for localize bazel or the migration we should expose the tooling code through a dedicated private export this will make the compilercli export more consistent and it will become easier for the cli to export necessary code pr close ,refactor
538,compilercli fix integration test failing on window due to missing runfile symlinking currently some test in the compilercliintegrationtest package fail on window because there are spec file which are not bazelgenerated when bazel run these test on window the spec file is resolved to the actual source file since there is no runfile symlinkingsandboxing this break the execution of the cjs spec file since it resides in th packagescompilercli source folder which ha a packagejson set to type module we fix this by adding a packagejson file for the integration test folder and setting module to commonjs pr close ,test
539,docsinfra temporarily disable upgrade systemjs example ee test this commit temporarily disables the systemjs upgrade ee test all of the upgrade ee test except for phonecattypescript rely on umd bundle these are no longer available for the v angular package output so we disable the test for now these ee test can be reenabled once we migrated the exampels from umd bundle to eg the cli or some custom rollup build alternatively it might be even possible to use fesm bundle directly depending on browser support for the aio example this is something the docsinfra team will have to determine though pr close ,test
540,compilercli no longer use deep import into angularcompiler with the apf v package output deep file can no longer be imported since we do not intend to bundle the compiler into the compilercli we need to switch all deep import to the primary entrypoint pr close ,refactor
541,docsinfra update test to use correct charset name due to chromium update we updated the devinfra version a part of the v package format in order to be able to use the latest rollup version and it plugins the update of the shared devinfra package resulted in an update of chromium to a more recent version this version of chromium seems to normalize the contenttype header differently so that the aio example test assertion need to be updated to work with the new version of chromium this commits update the test pr close ,test
542,docsinfra do not error if suite are ignored adding suite to the ignoredexamples array currently result in an runtime exception because later when ignored example are printed to stdout a nonexistent variable is referenced back from when there were example disabled due to the ivy migration this commit fix the logic pr close ,build
543,bazel add module interop for cjsesm compilercli package in the current bazel setup we run commonjs a devmode output and esm for prodmode output this mean that consumer of the angularbazel package will end up using the prodmodebuilt esm package of the compilercli this commit add interop logic to be able to load the compilercli a strict esm package we can not switch devmode to esm a this would require some change in rulesnodejs and potentially the reduction of both output flavor into a single one which is a future project anyway this is out of scope for now and inside g there is still devmode output a well pr close ,refactor
544,compilercli fix ngcc cluster worker incorrectly being marked a busy with esm ngcc relies on cluster for distributing work the master controller sends message to the worker a soon a the worker becomes online the online event is sent a part of the nodejs cluster logic itself this doe not work well because technically online could emit before the worker started listening this seems to be case now with esm a the import are loaded in a way where online emits too early before the worker actually listens for message we fix this by explicitly notifying the master when the worker is ready for retrieving ipc messagesor task this is more safe anyway a it not clearly specified when online emits pr close ,refactor
545,compilercli adjust lock file resolution in ngcc to work with esm update the lock file resolution logic in ngcc to work with esm output the compilercli is now shipped in bundle so the actual module resolution need to stay to keep the lock file path consistent regardless of where the lock file code is bundled into the ngcc integration test need to be updated though since the ngcc entrypoint will always reside in the bundle directory now it ha been considered using the toplevel packagejson of the compilercli package but that caused problem in test down the line because the ngcc test only have the angularcompilerclingcc target linked into the node module it not worth changing this and reworking test if ngcc is going away in the future anyway it ha been like that before pr close ,refactor
546,compilercli do not use filename or dirname global for esm compatibility switch the compilercli usage of filename to importmetaurl when esm bundle are generated unfortunately we can not start using only importmeta yet a we still build and run all code in angular in commonjs module output for devmode test this commit also fix various instance where a jasmine spy wa applied on a namespace export that will break with e module and the interop for commonjs output we fix these spy by using a default import pr close ,refactor
547,platformserver switch from dynamic require to import statement in order to support esm for the platformserver package we need to remove two usage of dynamic import and replace them with their correspondingequivalent import statement this will also allow esbuild to recognize this import note that we want to keep these import external so we explicitly specify the external option for the ngpackage rule pr close ,refactor
548,compilercli remove dynamic require in ngcc to allow for bundling ngcc currently dynamially load the transformer code it doe this to avoid unnecessary parsing and loading of transformerrelated code if there is nothing to process socalled noop case unfortunately this dynamic require is not recognized by esbuild the import need to be discovered a otheriwse the transformer code would not be included in the bundled package output of the cli the ngcc code need to use an async runtime import a it would work in e module this introduces async code into to the compililation pipeline breaking the ngccmain synchronous invocation feature to avoid this we just move the dynamic requireasync import to the file toplevel so that we do not break synchronous processing which the cli relies on this ha the downside of slowingdown the noop case a little but i believe that should be mitigated through bundling of ngcc anyway in the future with fullesm we wont be able to get around this anyway unless we remove the sync variant of ngcc processing pr close ,refactor
549,compilercli expose code needed by angular cli expose code needed by the angular cli previously the cli used deep import for most of these thing but now with bundling the cli we no longer support deep import we will expose the necessary dependency for the linker a part of the primary entrypoint i think that is more maintable than reexporting them a part of the linker we also expose the ngcc entrypoint for the cli with a new constant that will point to the ngcc command line entrypoint which the cli relies on pr close ,refactor
550,compiler use v view engine package for compiler aot test in preparation for the v angular package format where partial declaration are emitted only the aot compiler test is updated to rely on package artifact from v instead this allows u to switch to the new package format without breaking the test which require metadata file to exist in the npm package pr close ,test
551,core fix rollup bundle issue due to reexport conflict after updating to a more recent version of rollup rollup started to complain because the inject and ɵɵinject function are being reexported twice in the angularcore public api entrypoint rollup threw error like error “ ɵɵinject ” can not be exported from nodemodulesangularcoreesmsrcdiinjectorcompatibilityjs a it is a reexport that reference itself a similar error is shown for codegencomponentfactoryresolver it seems like rollup ideally would not throw here similar to typescript which detects that these export are the same and just dedupes them but it loweffort fixing this for now pr close ,refactor
552,compiler fix rollup bundle issue due to reexport conflict after updating to a more recent version of rollup rollup started to complain because the treeparseresult class is being reexported twice in the indexts publicapits compilerts entrypoint rollup threw error like error parsetreeresult can not be exported from mlparserparsermjs a it is a reexport that reference itself it seems like rollup ideally would not throw here similar to typescript which detects that these export are the same and just dedupes them but it loweffort fixing this for now and actually is a good opportunity to make the public api a little more easy understand when looking at the compilerts file pr close ,refactor
553,compilercli always build core package in full compilation mode a part of apf v we ship angular framework package using partial compilation this is done in preparation of ve removal and to eventually get rid of ngcc processing the new library format allows library to switch away from the view engine package format without shipping angular definition with instruction to npm this would make library tightly coupled to specific version of angularcore since angular core is always compatible with itself we always should compile angular core using full compilation mode it is unreasonable to ship angular core with partial compilation output especially since we would need to export the linker declare function in rsymbolsts otherwise pr close ,refactor
554,bazel implement partial compilation apf v for ngpackage rule this commit implement partial compilation apf v for the ngpackage rule the change involve the following thing requesting the partial compilation output for all target and it transitive in the deps or srcs attribute downleveling of e prodmode output to a fesm file cleanup of file resolution previusly execroot file path which are passed to the packager tool were composed manually this is prone to mistake and break with transition a lot of this code can be simplified by passing the necessary bazel file information a json this also simplifies the packager tool significantly and make it more readable remoal of umd bundle this also allows u remove the globals rule attribute with external we do not need any umd global identifier name anymore the packagejson will set the export field and use subpath export to make module resolution work for esm consumer tslib is also always set a external now previously it had to be added a dep to the ngpackage rule a umd file bundled tslib the includedevmodesrcs option ha been removed this option wa an addition to apf that allowed the angularcompiler to ship nonflattened e commonjs source we want to keep apf consistent and not allow such exception compiler is now a strict apf package a well and the compilercli just need to go through the primary entrypoint for thing it need or it bundle the necessary part into the cli overall these are all change a lot of change to make the packager rule and tool more readable and bazelidiomatic were made a well this allows u to easier make packaging change in the future and it more futureproof if we ever change how input like ngmodule target are generated eg consider a case where wed use the tsproject rule pr close ,feat
555,bazel no longer generate ve shim for other workspace by default we should no longer generate ve shim for workspace which are not named angular the default is ivy compilation and this should be optin the component repository for example doe not need any shim a it is using ivy for the common development workflow pr close ,refactor
556,bazel switch prodmode output to e previously the prodmode output wa using e for ngmodule and tslibrary target this commit change it to e this is necessary a we want to ship e output in apf v pr close ,feat
557,bazel pas flat module out file reference to packager in preparation for using the partial compilation transition on the packager we need to be able to have a reference to the flat module out file that is used a index file for entrypoint ngmodule target we need a reference to the file because with transition applied the input are not necessarily in the default bazelout directory the packager currently only guess such path this worked most of the time but guessing the output directory with transition will become impossible so the path need to be computed in a bazelidiomatic way this is more futureproof and correct and more clean imo pr close ,refactor
558,bazel remove compilationmode attribute for ngmodule remove the compilationmode attribute for the ngmodule rule we remove the attribute since we intend to control the compilation mode through the partial compilation build setting we have added before note we could have named the build setting more generically something like ngcompilationmode but i think it more readable only assuming there is partial compilation or full we can always change this in the future a it is not part of the public api pr close ,refactor
559,bazel only deal with a single dts bundle per ngmodule target previously ngmodule generated a second dts bundle in case the built target wa the angular core target this wa done so that the packager later on can ship the rsymbolsdts file along with the apf v output ngcc relied on this file when it processed the angular core package this is no longer needed for angular core v since it will come a partiallycompiled without the need for ngcc the major benefit of no longer generating multiple dts file here is that we can reasonably pas the bundle through a provider to the packager which can then use this for determining the dts file it should link in the packagejson this is beneficial and needed for using a transition since the packager input file are no longer in the default bazelout so it important to keep an reference to the actual bazel file instance allowing u to determine the path properly in the packager without any assumption on the bazelout path pr close ,refactor
560,bazel wire up partial compilation build setting in ngmodule we created a build setting bool flag for controlling whether partial compilation should be enabled or not this commit wire up the build setting so that all ngmodule target respect the flag this will later be useful when we apply the transition which always set the partial compilation flag to true pr close ,feat
561,bazel move ngmodulebzl file into subdirectory for consistent structure move the ngmodulebzl file into a subdirectory called ngmodule this is consistent with other rule in the package and it also allows u to ship the ngmodulebzl code next to other tightlycoupled file like the partial compilation transitionflag pr close ,refactor
562,bazel create transition for enabling partial compilation creates a currently still unused bazel transition that will control a build setting that is enabling the partial compilation mode for ngmodule rule target this is in preparation of implementing the angular package format v which should ship in partial compilation note various other approach aside from the transition ha been considered here is a small summary of the largest idea that have been tried for the apf v partial compilation refactor using an aspect for partial compilation in ngpackage similar to how we had an aspect for esm compilation in the past an aspect could be used to create partial compilation prodmode output for packaging the aspect would take the existing prodmode compilation detail and replay the compilation with a modified tsconfig that enables partial compilation this can work but requires lot of caution and is very prone to issue in order to avoid conflict with the existing prodmode output the partial compilation output would need to be written to a subdirectory this make module resolution extremely difficult when ngpackage creates the fesm bundle also it is difficult to merge multiple of these aspectcompiled folder into a single one for exposing the nonbundled esm output it becomes especially difficult to ensure that such an aspect target will actually use the correct dependency type definition when compiled eg consider a case where a partial compiled target relies on another angular target the dependency will be compiled partially first but the other target need to rely on the partial compilation dts output of the dependency and not the devmode dts output this is incorrect and can cause other typechecking issue or invalid output to make this work the module resolution when invoking tscwrapped would also need to be updatedpatched this is out of scope and not reasonable to maintain exposing a third output flavor directly in the rule instead of replying a compilation we could expose an output flavor next to devmode and prodmode this sounded like the easiest solution at first but it will have the same problem a the aspect approach in term of module resoltion and avoiding conflict of file we can not control how t emits dts or j file without patching into the compiler host so we would need to store the compilation output in a subfolder similar to the aspect resulting in the same issue this is doable but would require module resolution to be patched and we do not have control over bazeltypescript also bazeltypescript doe not forsee a third output flavor so that logic would need to be changed significantly a well pr close ,feat
563,bazel remove unused modifytsconfigjs file remove the unused modifytsconfigjs file located in the angularbazel package this file existed in the past for the esm compilation aspect relying on the t compilation to be replayed we just forgot removing the file and associated nodejsbinary pr close ,refactor
564,bazel update apiextractor bazel tool to only accept a single input update the api extractor tool used by the ngmodule rule to only accept a single entrypoint file this change is made in preparation for apf v where this logic is no longer needed the logic previously only existed to also bundle the rsymbols file this file is no longer needed in apf v because angular core no longer need to be processed with ngcc this allows u to clean up this logic which help simplifying ngmodule consumer that use an older version of angularcore should respectively also use a compilercli version matching the core version pr close ,refactor
565,core update matcherjasminetostring to work with jasmine in jasmine added a required pp parameter to the jasminetostring function signature this commit update our own use of this signature to ensure that compilation succeeds with the latest jasmine typing pr close ,test
566,core remove support for the deprecated wrappedvalue this commit remove the wrappedvalue public api from angularcore which wa deprecated in angular without replacement breaking change the wrappedvalue class can no longer be imported from angularcore which may result in compile error or failure at runtime if outdated library are used that are still using wrappedvalue the usage of wrappedvalue should be removed a no replacement is available pr close ,perf
567,core handle invalid constructor parameter in partial factory declaration this commit fix an oversight in the jit compilation of partial factory declaration where the literal invalid wa not accounted for unlike the aot linker fix pr close ,fix
568,animation improve the aio animation introduction improve slightly the angulario animation introduction guide such improvement are styling information and clarity related pr close ,docs
569,devtools update angularframework to bdde ,build
570,compilercli remove listlazyroutes operation now that routeloadchildren no longer accepts a string there is no need for tooling to find all stringbased loadchildren to setup lazy import for them a a result the listlazyroutes operation that enumerates all stringbased loadchildren occurrence is no longer needed and is therefore removed from the compiler the listlazyroutes api remains on the program interface to avoid breaking external tool that may be using this method but those tool should ultimately move away from using this api pr close ,refactor
571,router remove support for loadchildren string syntax this commit remove the ability to configure lazy route using a string for loadchildren together with the supporting class to load an ngmodulefactory at runtime breaking change it is no longer possible to use routeloadchildren using a string value the following supporting class were removed from angularcore ngmodulefactoryloader systemjsngmodulefactoryloader the angularrouter package no longer export these symbol spyngmodulefactoryloader deprecatedloadchildren the signature of the setuptestingrouter function from angularcoretesting ha been changed to drop it ngmodulefactoryloader parameter a an argument for that parameter can no longer be created pr close ,refactor
572,core add support for type in viewcontainerrefcreatecomponent with ivy it possible to create a componentfactory instance based on the generated component def thus the viewcontainerrefcreatecomponent can accept a component instance and create a factory inside rather than requiring additional complexity of creating a componentfactory outside by invoking componentfactoryresolver this should simplify the api that is used for creating component dynamically deprecation angular no longer requires component factory to dynamically create component the factorybased signature of the viewcontainerrefcreatecomponent function is deprecated in favor of a different signature that allows passing component class instead pr close ,feat
573,router refactor test to not use deprecated loadchildren many of the test in the router code use the deprecated loadchildren a a string this ha been deprecated for year and can easily be changed to just a function that return the module pr close ,test
574,devtools update angularframework to fbe ,build
575,docsinfra ensure all overload are shown in interface in the api doc concrete class do not list the implementation overload on a method since this is not strictly part of it api there is already a special case for abstract method that do not have such an implementation overload but we were missing the case where the method wa part of an interface in interface none of the method have implementation overload fix pr close ,build
576,bazel construct a manifest file even when warning are emitted ref previously if any diagnostics were emitted regardless of their category the manifest would not be generated this mean that if a target emits only warning and no error it would still fail to build because it doe not generate all the required output file specifically the esmf file now the manifest file is generated a long a there are no error diagnostics in the result this make ngmodule support compiler warning a a user would expect added a test which us extended template diagnostics to trigger the invalid banana in box diagnostic this generates a warning and us skylibs buildtest to verify that it build successfully unfortunately there is no easy way to verify that the warning diagnostic is emitted at all expecteddiagnostics should be able to do that but it doesnt seem to have any effect on ngmodule and may not be integrated instead testing that a target with warning build correctly is the best we can easily do here without a deeper investigation pr close ,fix
577,bazel add stricttemplates and experimentalextendedtemplatediagnostics to ngmodule rule ref fix this allows ngmodule target to be built with strict template enabled it mostly work the way we already do this internally also add extended template diagnostics behind an experimental option so it can be used internally and for test stricttemplates can only be used if typecheck is also enabled and experimentalextendedtemplatediagnostics can only be used if stricttemplates is enabled pr close ,feat
578,migration support use of an esm angularcompiler package currently migration and schematic must be in commonjs format however framework package will only be esm from v and onward to support this configuration dynamic import expression are now used to load angularcompiler dynamic import within nodejs allow the angularcore migration ’ commonjs code to load esm code unfortunately typescript will currently unconditionally downlevel dynamic import into a require call require call can not load esm code and will result in a runtime error to workaround this a function constructor is used to prevent typescript from changing the dynamic import once typescript provides support for keeping the dynamic import this workaround can be dropped and replaced with a standard dynamic import due to the use of the dynamic import a reference to the compiler module must now be passed to all location that use value from the angularcompiler package pr close ,refactor
579,migration remove remaining angularcompiler deep import a base class that can be used to implement a render template ast visitor is now used throughout the angularcore migration this class is used instead of the nullvisitor found within the angularcompiler because the nullvisitor requires a deep import which is no longer supported with the esm bundled package a of v the nullvisitor is also fairly trivial in regard to it implementation and the new base class also provides additional helper method for migration specific behavior this remove all remaining deep import of the angularcompiler package from the angularcore migration while avoiding the need to modify the angularcompiler package pr close ,refactor
580,migration remove most template ast deep import most of the deep import into the angularcompiler package in the angularcore migration are for template ast type that are available a export from the main entry point of the package albeit under slightly different name for the available main entry point export the deep import have been transitioned to no longer use the deep import pr close ,refactor
581,compilercli not evaluating new signature for spreadarray in typescript the spreadarray function ha three parameter however we only allowed two which can result in an error pr close ,fix
582,router emit activatedeactivate event when an outlet get attacheddetached previously the event of routeroutlet activatedeactivate were not fired when an outlet got attacheddetached with routereusestrategy the change configure routeroutlet to emit event when an outlet get attacheddetached fix pr close ,feat
583,compilercli correctly interpret token array in injectable deps when specifying the deps array in the injectable decorator to inject dependency into the injectables factory function it should be possible to use an array literal to configure how the dependency should be resolved by the di system for example the following example is allowed t injectable providedin root usefactory a new appservicea deps new optional a export class appservice constructora here the a string token should be injected a optional however the aot compiler incorrectly used the array literal itself a injection token resulting in a failure at runtime only if the token were to be provided using new optional new injecta would it work correctly this commit fix the issue by using the last nondecorator in the array literal a the token value instead of the array literal itself note that this is a loose interpretation of array literal if a token is omitted from the array literal then the array literal itself is used a token but any decorator such a new optional would still have been applied when there multiple token in the list then only the last one will be used a actual token any prior token are silently ignored this behavior mirror the jit interpretation so is kept a is for now but may benefit from some stricter checking and better error reporting in the future fix pr close ,fix
584,devtools update angularframework to ceb ,build
585,docsinfra bump angulareslint package to update the four angulareslint package from to also add the caret to allow minor version update pr close ,build
586,ngcc do not fail for package which correspond with object member prior to this commit ngcc stored it package configuration in javascript object which caused the builtin object member to be found a package configuration this would subsequently crash a their shape wa not a expected this commit move away from using raw javascript object in favor of a map to code wa refactored such that partiallyprocessedconfig is now a class fix pr close ,fix
587,core incorrect signature for inittestenvironment fix that one of the signature of inittestenvironment wasnt using the correct type pr close ,fix
588,router params or queryparams are not advised against according to atscott we no longer speculate about future deprecation there are no current plan to remove params or queryparams and there no benefit to advising against their use pr close ,docs
589,languageservice provide dom event completion native dom event were previously not included in the completion because the dom schema registry would filter out event completely this change update the registry to include event in the private elementproperty map and excludes event from lookup outside of the new allknowneventsofelement function fix pr close ,fix
590,docsinfra display deprecation note for property previously deprecation note for deprecated classinterface property were not shown in the api doc this commit fix it by ensuring that deprecation note are shown for properites similar to how it work for method pr close ,fix
591,serviceworker do not unassign client from a broken version previously when a version wa found to be broken any client assigned to that version were unassigned and either assigned to the latest version or to none if the latest version wa the broken one a version could be considered broken for several reason but most often it is a response for a hashed asset that eiher doe not exist or contains different content than the sw expects see for more detail however assigning a client to a different version or the network in the middle of a session turned out to be more risky than keeping it on the same version for angulario for example it ha led to this commit avoids making thing worse when identifying a broken version by keeping existing client to their assigned version but ensuring that no new client are assigned to the broken version note reloading the page generates a new client id so it is like a new client for the sw even if the tab and url are the same pr close ,fix
592,serviceworker use correct assertion in test previously a serviceworker test wa using the mockserverstatesawrequestfor method this method however only return a boolean indicating whether a request had been seen but would not throw an error in either case since the intention wa to assert that a specific request wa made this commit switch to the correct mockserverstateassertsawrequestfor method pr close ,test
593,form allow disabling minmax validators dynamically by setting the value to null this commit update the logic of the min and max validators to allow disabling them dynamically in case null is provided a a value for example input typenumber minminvalue when minvalue might be set to null in a component class this should allow min and max validators to be used for dynamic form note similar support wa added to the minlength and maxlength validators earlier see pr close ,feat
594,core support typescript add support for typescript highlevel overview of the change made in this pr bump the various package to typescript and tslib the useunknownincatchvariables compiler option ha been disabled so that we dont have to cast error object explicitly everywhere t now pass in a third argument to the spreadarray call inside child class constructor i had to update a couple of place in the runtime and ngcc to be able to pick up the call correctly t now generates code like fooarg arg for imported function call i had to update a few of our test to account for it see our ngtsc test setup call the private matchfiles function from t i had to update our usage because a new parameter wa added there wa one place where we were setting the readonly hastrailingcomma property i updated the usage to pas in the value when constructing the object instead some browser type were updated which meant that i had to resolve some trivial type error the downlevel decorator tranform wa running into an issue where the closure synthetic comment were being emitted twice ive worked around it by recreating the class declaration node instead of cloning it pr close ,feat
595,router fix typo in router event api documentation pr close ,docs
596,devtools update angularcli to b ,build
597,devtools update angularframework to ea ,build
598,devtools update angularcli to ,build
599,serviceworker improve service worker guide improve slightly the angulario guide related to service worker by mean of fix styling information and clarity change pr close ,docs
600,docsinfra upgrade cli command doc source to afa updating angularmaster from clibuildsmaster relevant change in commit range modified helpnewjson pr close ,build
601,get rid of not needed space at the end of the sentence pr close ,docs
602,compilercli rename test file to be more descriptive the test file simply named spects are hard to find when searching for file by name pr close ,test
603,compilercli add test to document usecase for invalid pipe argument nullish coallesce add a test to the nullish coalescing diagnostic check to serve a selfdocumentation on how it work with nullish coalescing on pipe that are often misconfigured this also remove that non null assertion operator which is incorrect because there are situation where a symbol can not be retrieved pr close ,refactor
604,compiler combine call asts currently the compiler ha three different class to represent a call to something methodcall foobar safemethodcall foobar functioncall any call that dont fit into the first two class eg foobar there are a few problem with this approach it is inconistent with the typescript ast which only ha one node callexpression it mean that we have to maintain more code because the various part of the compiler need to know about three node type it doesnt allow u to easily implement some new j feature like safe call eg foobar these change rework the compiler so that it produce only one node call the new node behaves similarly to the typescript callexpression whose receiver can be any expression there wa a similar situation in the output ast where we had an invokemethodexpression and invokefunctionexpression ive combined both of them into invokefunctionexpression pr close ,refactor
605,migration apply individual expression edits to preserve newline character the previous replacement logic would not account for the crlf line ending when applying replacement because it would replace the whole template with templatecontentlength which would not account for crlf this update applies individual expression edits at each location in the template rather than attempting to replace the whole template content with a new string that contains the migration fix pr close ,fix
606,migration ensure routerlink migration doesnt update unrelated file the migration wa previously touching file that did not have any expression to migrate this change ensures that the migration doesnt commit any update on file that do not need them this change however doe not address the underlying issue with the migration and crlf which is fixed in a followup change related to pr close ,fix
607,docsinfra add a skip to content link for better accessibility add a link at the top of the page that allows skipping directly to the main content area this allows people using assistive technology to skip navigationrelated part of the page which are presented before the main content related resource wwwworg accessibilityoitncsuedu csstrickscom example implementation on other website accessibilityoitncsuedu accessibilityoitncsuedu smileamazoncom smileamazoncom chasecom chasecom csstrickscom csstrickscom githubcomangularangular githubcomangularangular newsskycom newsskycom youtubecom youtubecom angulario implementation angulario angulario fix pr close ,fix
608,docsinfra correctly handle inpage anchor link previously anchor link that were supposed to point to fragment inside the current page eg hrefsomething would end up navigating to the homepage this wa due to them being resolved relative to the base url which is set to via base href see also this commit fix this issue by handling such link specially in locationservicehandleanchorclick and prepending the current path to the url this will also be useful for implementing a skip to content link a described in pr close ,fix
609,docsinfra focus element when scrolling to them if focusable when using scrollservicescrolltoelement to scroll to a specific element also focus the element if it is focusable ie if it ha a focus method this will be useful for implementing a skip to content link a described in pr close ,fix
610,docsinfra improve accessibility of contributor card improve the accessibility of contributor card in about by making them easier to navigate via keyboard show the otherwise hidden contributor info link on focus make the view bio link focusable via keyboard to give a clearer indication that user can click to view the bio although technically the click is handled by an ancestor make the flipped card focusable via keyboard so it is possible to click them to unflip pr close ,fix
611,docsinfra improve accessibility of button group improve the accessibility of button group such a those seen in about and resource to choose between the different category by making them easier to navigate via keyboard make the individual button focusable via keyboard previously they were not focusable despite being anchor element because they were lacking an href attribute give focused button a different style pr close ,fix
612,devtools update angularcli to bed ,build
613,common titlecase pipe incorrectly handling number fix that the titlecase pipe wasnt picking up number which meant that case like st would be tranformed to st fix pr close ,fix
614,router prevent url flicker when new navigation cancel ongoing one this bit of code is problematic for several reason angularjsspecific handling should not exist in core router code if it can be avoided it not something that should complicated the code longterm it cause url flickering the replace really doe happen and can be observed the original intent wa likely for the url to not actually change since the router only initially supported deferred navigation this would usually be the case it actually cause observer of url change more problem in handling change because the router is already about to process another navigation request notice that when using computed restoration logic we do not reset the url because it would cause another location change event and conflict with the new navigation it only reset the browser url but doe nothing to sync the rest of the internal state of the router it make guard which call routernavigate behave slightly differently than guard which return urltree guard which return urltree do not reset the url but instead just trigger a new navigation it reset the entire url rather than just the portion that the urlhandlingstrategy is configured to handle theoretically the router could be configured to only handle a part of the url so failed navigation should not reset part it is not configured to touch note that this is actually a problem in other place in the router a well where resetstate is not called before reseturltocurrenturltree a a nice benefit when urlupdatestrategy is set to eager this make possible breaking change the router will no longer replace the browser url when a new navigation cancel an ongoing navigation this often cause url flicker and wa only in place to support some angularjs hybrid application hybrid application which rely on the navigationid being present on initial navigation that were handled by the angular router should instead subscribe to navigationcancel event and perform the locationreplacestate themselves to add navigationid to the router state in addition test which assert urlchanges on the spylocation may need to be adjusted to account for the replacestate which is no longer triggered pr close ,fix
615,compilercli handle directive that refer to a namespaced class in a type parameter bound the template typechecker ha to emit type constructor for the directive that are used in a template where a type constructor declaration ha to mirror the type parameter constraint a they were originally declared therefore the compiler analyzes whether a type parameter constraint can be recreated eg by generating import for any type reference some type reference can not be recreated in which case the compiler ha to fall back to a strategy where the type constructor is created inline in the original source file which come with a performance penalty there used to be an issue for type reference to namespaced declaration the compiler is unable to emit such reference such that an inline type constructor should be used a fallback but this did not happen this caused the attempt to emit the type reference to fail a the namespaced declaration can not be located by the reference emitter this commit fix the issue by using a stricter check to determine if a type parameter requires an inline type constructor the typescript reflection host isstaticallyexported logic wa expanded to work for any declaration instead of just class a eg type declaration can also be referenced in a type parameter constraint close pr close ,fix
616,devtools update angularcli to bbf ,build
617,docsinfra improve aio contributor page responsiveness improve the aio contributor page responsiveness regarding the browser fontsize so that the page look good regarding on fontsize setting no cropped or cramped content pr close ,fix
618,devtools update angularframework to eaafa ,build
619,devtools update angularcli to bcfc ,build
620,devtools update dependency webpack to v ,build
621,devtools update angularframework to acf ,build
622,devtools update angularframework to cf ,build
623,router remove unnecessary gettransition function the gettransition helper function ensures that urlafterredirects is assigned for when the router doe not process the previous or current url in this case we would set the browserurltree to be the urlafterredirects which wa initialized to be the browserurltree this is a noop so there no need for the gettransition function at all pr close ,refactor
624,compiler add a test for parsing multiline expression in attribute this test a scenario that wa failing in an internal project pr close ,test
625,compiler define interface for each lexer token these token interface will make it easier to reason about token in the parser and in spec previously it wa never clear what item could appear in the part array of a token given a particular tokentype now each token interface declares a labelled tuple for the part which help to document the token better pr close ,refactor
626,compiler include leading whitespace in sourcespans of in message previously the way template were tokenized meant that we lost information about the location of interpolation if the template contained encoded html entity this meant that the mapping back to the source interpolated string could be offset incorrectly also the sourcespan assigned to an in message did not include leading whitespace this confused the output sourcemappings so that the first text node of the message stopped at the first nonwhitespace character this commit make use of the previous refactorings where more fine grain information wa provided in text token to enable the parser to identify the location of the interpolation in the original source more accurately fix pr close ,fix
627,compiler check fullstart sourcespan the test were checking that the sourcespan of parsed html node were accurate but they were not checking the span when it includes the leading trivia which are given by the fullstart rather than start location pr close ,test
628,compiler expose token part in text node when it wa tokenized text content is split into part that can include interpolation and encoded entity token to make this information available to downstream processing this commit add these token to the text ast node with suitable processing pr close ,refactor
629,compiler support encoded entity token when lexing markup the lexer now split encoded entity token out from text and attribute value token previously encoded entity would be decoded and the decoded value would be included a part of the text token of the surrounding text now the entity have their own token there are two scenario text and attribute value previously the content of divhello amp goodbyediv would be a single text token now it will be three token text hello encodedentity amp text goodbye previously the attribute value in div titlehello amp goodbye would be a single text token now it will be three token attrvaluetext hello encodedentity amp attrvaluetext goodbye encodedentity token have two part decoded and encoded encodedentity token are always preceded and followed by either text token or attrvaluetext token depending upon the context even if they represent an empty string the html parser ha been modified to recombine these token to allow this refactoring to have limited effect in this commit further refactorings to use these new token will follow in subsequent commits pr close ,refactor
630,compiler support interpolation token when lexing markup the lexer now split interpolation token out from text token previously the content of divhello namediv would be a single text token now it will be three token text hello interpolation name text interpolation token have three part start marker expression and end marker interpolation token are always preceded and followed by text token even if they represent an empty string the html parser ha been modified to recombine these token to allow this refactoring to have limited effect in this commit further refactorings to use these new token will follow in subsequent commits pr close ,refactor
631,compiler improve regular expression for stripping comment previously the regular expression used by the compiler shadowdom cs shim to strip comment from cs text wa susceptible to catastrophic backtracking which could lead to exponential on increase in complexityexecution time more specifically this would be triggered if the processed text contained an unterminated comment with lot of leading whitespace ie followed by lot of whitespace character and no closing although such input is unlikely in realworld scenario this commit improves the regular expression to not be susceptible to this issue pr close ,refactor
632,platformbrowser improve error message for missing animation trigger there are two reason why this error can be called but only one wa covered before fix pr close ,fix
633,docsinfra introduce maxlen eslint rule add the maxlen rule to the aio eslintrc and fix what code break such rule pr close ,refactor
634,docsinfra fix typo in app component and it test fix some minor typo found in the appcomponentts and appcomponentspects file pr close ,refactor
635,docsinfra support overriding boilerplate file in example it is now possible to specify file path in the boilerplateoverride property of exampleconfigjson file to tell the example boilerplate system to use the file in the example directory rather than overwriting the example file with that from the boilerplate directory pr close ,build
636,docsinfra indent docplaster marker to the level of the docregion this change make docplaster marker fit better with the surrounding code that is being rendered instead of a b you can now get a b pr close ,build
637,docsinfra switch json example to use inline docregion comment now json file should be commented using docregion rather than docregion there are currently no json file with either kind of comment so this change ha no impact yet but when we add some example with such comment they will also benefit from style docplasters to join docregion fragment pr close ,build
638,docsinfra support docregions in conf file this commit tell the docregion parser how to process file that end in conf pr close ,build
639,docsinfra support docregions in sh example file this commit tell the docregion parser how to process sh file pr close ,build
640,devtools update angularframework to cffe ,build
641,router remove todo and slightly adjust eager browserurltree update no test wa added for this case because i cant think of a test case to write that would work this change update the code for a consistent mental model of setting the browserurltree it only meant to track the urltree that the urlhandlingstrategy is set to extract not the full rawurl notice that everywhere else the browserurltree is set to urlafterredirects which is computed based on the extracted url not the rawurl pr close ,refactor
642,router add test to document expected behavior pr broke some usecases these test document expected behavior and would have prevented and recent change have already addressed these issue but it would still be a good idea to cover these usecases in test a well pr close ,test
643,router do not modify part of url excluded from with eager update the previous code would set the browser url to be only the part thats extracted by the urlhandlingstrategy however there may be part of the url which are should not be handled by the angular router this change update the code to set the browser url in the same way thats done with deferred merging the extracted url after redirects with the whole raw url of the navigation which includes part not handled by the urlhandlingstrategy pr close ,fix
644,devtools update angularcli to efabe ,build
645,docsinfra reduce unnecessary whitespace in api doc the html for the doc page is generated by dgeni based on some nunjucks template previously these template were set up in a way that introduced a lot excess whitespace in the generated html unnecessarily bloating the corresponding json file that need to be downloaded in order to view a certain doc page this ha been discussed in and wa again observed while investigating this commit refactors some of the template related to api doc which seem to be the most affected one to drastically reduce the amount of excess whitespace more specifically the total size of all file in generateddocsapi wa reduced from mb to mb besides the reduced payload size for each api page this change will also reduce the amount of memory needed by the serviceworker to cache the api page that have been visited by a user note the affected file are not eagerly downloaded when navigating to angulario instead each file is downloaded individually a soon a a user visit the corresponding api doc page therefore the impact of this change will be relatively small for most user pr close ,perf
646,docsinfra update remarkhtml to note this version includes a breaking fix commit bbbac which turn sanitization on by default since we dont need sanitization the html is authored by doc author and tooling and should be safe this commit restores the old behavior by setting the sanitize option to false pr close ,build
647,docsinfra update githubslugger to note this version includes a breaking fix commit affd more specifically githubslugger will no longer trim the text of a heading before generating an id and with whitespace converted to this result in different heading id before h foo bar h h idfoobar after h foo bar h h idfoobar the different id now break some of our anchorlinks becuase githubslugger is used by rehypeslug which is in turn used by our autolinkheadings dgeni postprocessor to avoid the issue with broken anchor link we update the rendermethoddetail nunjucks macro to omit excess whitespace in heading pr close ,build
648,router allow renavigating to failed url there are situation where the router doe not currently clean up failed navigation correctly while this is problematic on it own we can mitigate some of the damage by processing any url when we get a navigation request when the internal router state is out of sync each of the added test would fail without this change fix pr close ,fix
649,router add documentation for the router reset rawurltree add documentation to the router and an additional test based on more complete understanding of how thing work pr close ,docs
650,serviceworker clear service worker cache in safety worker clear angular service worker cache in safety worker to ensure stale or broken content are not served in future request fix pr close ,fix
651,devtools update angularframework to ede ,build
652,devtools update dependency typeschrome to ,build
653,devtools update dependency typesjasmine to ,build
654,devtools update angularcli to e ,build
655,devtools fix linting error ,style
656,devtools invoke tslint directly via binary ,build
657,docsinfra bump aio size limit increase the aio size tracking limit a a result of trusted type refactoring pr close ,fix
658,docsinfra enable tsec security checker tsec is a typescript compiler wrapper for restricting use of securitysensitive dom apis in particular those that could lead to x or trusted type violation add it a a linter to aio to prevent future trusted type regression on angulario also introduces securityexemptionsjson which list the known securityreviewed tsec security violation new entry can only be added to this file after a security review in particular making sure that the corresponding code doe not cause x vulnerability or trusted type violation pr close ,build
659,docsinfra send csp report for trusted type violation configure firebase to serve a csp header on angulario that enables trusted type in reportonly mode this cause any trusted type violation that may occur a user browser angulario to generate a csp report that is sent to cspwithgooglecom where it is processed by google csp report collector this is a nonbreaking change that allows u to evaluate whether angulario is fully compatible with trusted type at which point we can start enforcing trusted type pr close ,build
660,docsinfra enable trusted type enforcement in angularjson configure angularjson to serve a csp header that enabled trusted type in enforcement mode both in ee test and when running the local development server this should help prevent regression related to trusted type in the angulario app pr close ,build
661,docsinfra pas a trustedscripturl to serviceworkermodule fix a trusted type violation in serviceworkermodule that occurs when initializing the service worker from a string url by passing a trustedscripturl instead pr close ,fix
662,docsinfra make docviewer compatible with trusted type change documentcontentscontents to a trustedhtml and update user accordingly pr close ,fix
663,docsinfra make custom icon registry compatible with trusted type change svgiconinfosvgsource to be a trustedhtml and update all it user accordingly also introduce the svg template tag function for building trustedhtml from constant svg source pr close ,fix
664,docsinfra make prettyprinter compatible with trusted type change the prettyprinter interface to accept a trustedhtml and patch prettifyjs so that it make use of that value without modification update all user of the service to produce and pas in a trustedhtml pr close ,fix
665,docsinfra fix simple trusted type violation also introduce a dependency on the trusted type type definition and a trusted type polyfill safevalues create a security module for common securityreviewed transformation into trusted type pr close ,fix
666,docsinfra fix trusted type violation in analytics snippet the google analytics snippet load it runtime by dynamically creating a script element and assigning a url to it src attribute this cause a trusted type violation to fix this create an inline trusted type policy called aioanalytics to bless the script url which is a trusted constant pr close ,fix
667,devtools update dependency webpack to v rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
668,router clean up unnecessary flag in restorehistory function this restores the finalize function to directly call reseturltocurrenturltree a it wa before efbebffaffafbcc this allows u to simplify the restorehistory function because it no longer need to handle the call from finalize where it should not reset the internal router state pr close ,refactor
669,animation emit pure annotation to static property initializers currently the pure annotation comment are not emitted because unless the entire expression is wrapped in brace see the below typescript playground j use strict objectdefinepropertyexports esmodule value true exportsinjector void class nullinjector class injector exportsinjector injector injectornull new nullinjector consoleloginjectornull j use strict objectdefinepropertyexports esmodule value true exportsinjector void class nullinjector class injector exportsinjector injector injectornull pure new nullinjector consoleloginjectornull pr close ,fix
670,core emit pure annotation to static property initializers currently the pure annotation comment are not emitted because unless the entire expression is wrapped in brace see the below typescript playground j use strict objectdefinepropertyexports esmodule value true exportsinjector void class nullinjector class injector exportsinjector injector injectornull new nullinjector consoleloginjectornull j use strict objectdefinepropertyexports esmodule value true exportsinjector void class nullinjector class injector a exportsinjector injector injectornull pure new nullinjector consoleloginjectornull pr close ,fix
671,bazel fix outdated redirect url for guidebazel the file we are redirecting guidebazel to wa moved from bazelsrcschematicsreadmemd to bazeldocsbazelschematicsmd in commit bcabfeeebdacacc update the firebase configuration to use the new path in the redirect url pr close ,docs
672,devtools update angularframework to cd rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
673,router only trigger router navigation on popstate event from location subscription with the merging of our test now more closely emulate real browser behavior this mean that we can make change to the router which depend on actual browser behavior rather than incorrectly mocked test behavior this change update the logic in the router to only trigger navigation on popstate event since our spylocation now trigger the popstate event correctly on simulatehashchange back forward and simulatepopstate we are able to rely on this being true for all of these navigation in test when using spylocation the default for routertestingmodule in addition this behavior relies on documented browser behavior the popstate event happens due to browser transition a a result of user triggered back button or otherwise in addition this change chooses popstate over hashchange because it is the event that is already being used for navigation since the documented behavior of browser is that popstate happens before hashchange fix pr close ,fix
674,migration migration failed finding tsconfig file with this change we change the logic to locate the tsconfig file the public api to locate read and parse the workspace configuration should be use instead of the custom implemented logic the custom implemented logic depended on method which have long been deprecated and are not removed in version of the angular cli this wa not caught during developmentut because this repo is using outdated angular tooling package this change also update a number of spec file which previously creating an invalid angular workspace configuration file close pr close ,fix
675,common removed todo no longer considered necessary the todo comment suggesting to verify that the target element to scroll to need to be an anchor doe not longer seems under consideration so it can be removed resolve pr close ,refactor
676,core fix behavio typo in schematic readme fix the behavio typo in the schemaricsmigrationsrouterlinkemptyexpression readme file pr close ,refactor
677,common correct typo in jsdoc of http client this corrects four typo in the httpclient jsdoc capabilites capability reuested requested wuth with responmse response pr close ,docs
678,devtools update cypress orb to v rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
679,devtools update angularframework to cb rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
680,router option to correctly restore history on failed navigation expose implementation from a a public optin option from that commit we can ’ t determine whether the user actually meant the back or the forward using the popstate event triggered by a browser backforward so we instead need to store information on the state and compute the distance the user is traveling withing the browser history so by using the historygo method we can bring the user back to the page where he is supposed to be after performing the action resolve pr close ,feat
681,common synchronise location mock behavior with the navigator do not emit url pop on locationgo emit a popstate event before each hashchange to have the same behavior of the browser track the url change in the internal history when calling simulatehashchange the change to the router test reflect the goal of the test generally when locationgo is used to trigger navigation it is only relevant for hashlocationstrategy and verifying that the router pick up change from manual url change to do this we convert those call to simulatehashchange instead manual url bar change to the path when not using the hashlocationstrategy would otherwise trigger a full page refresh so they arent relevant to these test scenario which assert correct behavior during the lifetime of the router reference for no popstate on pushstatereplacestate note that just calling historypushstate or historyreplacestate wont trigger a popstate event the popstate event will be triggered by doing a browser action such a a click on the back or forward button or calling historyback or historyforward in javascript reference for popstate before hashchange when the transition occurs either due to the user triggering the browser back button or otherwise the popstate event is near the end of the process to transition to the new location if the value of state changed the popstate event is sent to the document any persisted user state is restored if the browser chooses to do so if the original and new entry shared the same document but had different fragment in their url send the hashchange event to the window breaking change the behavior of the spylocation used by the routertestingmodule ha changed to match the behavior of browser it no longer emits a popstate event when locationgo is called in addition simulatehashchange now trigger both a hashchange and a popstate event test which use locationgo and expect the change to be picked up by the router should likely change to simulatehashchange instead each test is different in what it attempt to assert so there is no single change that work for all test each test using the spylocation to simulate browser url change should be evaluated on a casebycase basis fix pr close ,fix
682,languageservice exclude the safepropertyread when applying the optional chaining when providing the completion for safepropertyread the t server will not apply the optional chaining so no need to shift the start location of replacementspan back pr close ,fix
683,docsinfra update dgenipackages to improve checklinks message this update should make the list of file with broken link more readable fix pr close ,build
684,router add more context to unhandled navigation error previously the error message wa not added to unhandled navigation error before mainjs unhandled navigation error after mainjs unhandled navigation error securityerror failed to execute replacestate on history a history state object with url can not be created in a document with origin and url pr close ,fix
685,router new output that would notify when link is activated this commit add a new output to routerlinkactive directive whenever the associated link becomes active or inactive an event will be fired on this out with the correct status pr close pr close ,feat
686,devtools update angularframework to rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
687,devtools update dependency typesjasmine to rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
688,devtools update dependency typeschrome to rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
689,devtools update angularframework to ecbc rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
690,devtools update dependency jasminecore to rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
691,compilercli add test for nullishcoalescingnotnullablecheck add test to make sure the nullish coalescing check is generating the correct diagnostics ref pr close ,test
692,compilercli add nullishcoalescingnotnullablecheck add a template check that return diagnostics if the left side of a nullish coalescing operation is not nullable ref pr close ,refactor
693,compilercli use templatecheckwithvisitor in invalidbananainboxcheck modify the existing template check to use the new abstract class this make template check easier to read and understand ref pr close ,refactor
694,compilercli add abstract templatecheckwithvisitor class add an abstract class that ha a default implementation of the run function and visit all node author of template check can extend this class and override the visitnode method to return diagnostics ref pr close ,refactor
695,compilercli move component out of templatecontext move component out of the templatecontext so the context can be reused for multiple component ref pr close ,refactor
696,compilercli change check folder structure change template check into extendedchecks instead of extendedsrctemplatechecks ref pr close ,refactor
697,compilercli remove whitespace remove extra whitespace introduced in a previous pr pr close ,refactor
698,router fix incorrect name for url match option fix pr close ,docs
699,form make error message easier to tree shake currently the error message function are defined a static method on a class which mean that a soon a one of them is used somewhere all of them have to be retained this isnt a problem at the moment because all of them are behind ngdevmode check but it error prone and it easy to fix these change move them out into function so that they can be imported individually it also ha the advantage of allowing webpack to minify the function name pr close ,refactor
700,ngcc use angular npm package in integration test in anticipation of the removal of the view engine npm package output the integration test of ngcc are switched to use angular package for from npm the version package are guaranteed to always be view engine format which make them suitable to be processed in the ngcc integration test pr close ,test
701,zonejs rename class zonedelegate to zonedelegate to differentiate it from the zonedelgate interface the current naming cause tsickle to emit implement zonedelegate class zonedelegate which is a cyclic definition error in closure compiler additionally the name shadowing is also confusing to human pr close angular pr close ,refactor
702,compilercli emit type annotation for synthesized decorator field previously the decorator transformer wa annotating the synthesized property with t type annotation however because it ran after the jsdoc transformer the t type were just dropped from the emitted j attempting to move the decorator transformer before the jsdoc transformer cause tsickle crash because synthetic ast fragment are not attached to a sourcefile node pr close ,fix
703,docsinfra upgrade cli command doc source to ed updating angularmaster from clibuildsmaster relevant change in commit range modified helplintjson pr close ,build
704,languageservice add test for extended diagnostics add a test to make sure extended template diagnostics are being correctly generated in the language service for nonts file ref pr close ,test
705,compilercli integrate extended diagnostics with the language service add the call to get the extended template diagnostics in the compiler getdiagnosticsforcomponent this make showing extended diagnostics in nonts file posible ref pr close ,refactor
706,compilercli rename extendedtemplatechecker get diagnostics fucntion rename getextendedtemplatediagnosticsforcomponent to getdiagnosticsforcomponent since it implied they are extended diagnostics ref pr close ,refactor
707,compilercli move getdiagnosticsforcomponent to compiler change the language service to call getdiagnosticsforcomponent from the compiler instead of the templatetypechecker ref pr close ,refactor
708,compilercli move extendedtemplatechecker to lazycompilationstate create the extendedtemplatechecker during makecompilation that way it avaiblable in the whole compiler ref pr close ,refactor
709,compilercli use templatediagnostic in extended package return templatediagnostic instead of tsdiagnostic when getting the extended template diagnostics this make the integration with the language service easier this also fix the error code and now us the ngerrorcode for extended template diagnostics ref pr close ,refactor
710,devtools update angularcomponents to rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
711,devtools update dependency tsnode to rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
712,devtools update angularframework to bec rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
713,common fix emiting typo fix some of the aio example which log string containing emiting instead of emitting pr close ,refactor
714,serviceworker npe if onactionclick is undefined previously it lead to fail if notificationdataonactionclick is undefined pr close ,fix
715,languageservice add method for retrieving the component template at the cursor location this method is the angularlanguageservice side of the implementation for given a location in a file if the location is inside a component gettemplatelocationforcomponent will return the documentspan of the inline template or the documentspan for the file that the templateurl point to pr close ,feat
716,devtools update angularframework to e rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
717,router nullundefined routerlink should disable navigation the current behavior of routerlink for null and undefined input is to treat the input the same a this creates several unresolvable issue with correctly disabling the link because command doe not behave the same a disabling a link instead it navigates to the current page but will also clear any fragment andor query params the new behavior of the routerlink input will be to completely disable navigation for null and undefined input for html anchor element this will also mean removing the href attribute fix fix fix breaking change previously null and undefined input for routerlink were equaivalent to empty string and there wa no way to disable the link navigation in addition the href is changed from a property hostbinding to an attribute binding hostbindingattrhref the effect of this change is that debugelementpropertieshref will now return the href value returned by the native element which will be the full url rather than the internal value of the routerlink href property pr close ,fix
718,devtools update angularframework to f rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
719,languageservice add extended diagnostics test add a test in the langaugeservice to make sure the extended template diagnostics are being correctly generated ref pr close ,test
720,compilercli add extended template diagnostics endtoend test this commit add extended template diagnostics endtoend test to make sure the diagnostics are generated correctly template check are already tested with unit test ref pr close ,test
721,compilercli add extendedtemplatecheck phase to compiler this commit integrates extended template check with the compiler by adding another phase of diagnostics generation this integration is under the extendedtemplatediagnostics flag ref pr close ,refactor
722,compilercli export extendedtemplatecheckerimpl and template check this commit export the implementation of extendedtemplatechecker to generate extended template diagnostics and all the template check ref pr close ,refactor
723,compilercli add extendedtemplatechecker change the current way to run template check to the extendedtemplatechecker instead of just the getextendedtemplatediagnosticsforcomponent function refactored the test that used the previous function to use the new class ref pr close ,refactor
724,compilercli inline resource when generating class metadata call previously with view engine output the enableresourceinlining option could be set to inline external template and style also for the resulting metadatajson file we want to do the same for the ivy compilation pipeline regardless of the compilation mode the full compilation definition and partial declaration currently already inline resource in a way that no external request need to be made although there is one exception currently these are the call for setting class metadata for testbed override this commit update the set class metadata call for both partial and full compilation to always inline resource this mean that library do not need to start shipping external stylestemplates just for the setclassmetadata call note only doing this for partial compilation ha been considered but it seems like it would be simpler implementationwise to do this for full compilation a well given the external resource are already inlined through their ecmp definition it seems acceptable or even more aligned to do the same for the set class metadata call pr close ,feat
725,core add migration to update empty routerlinks in template the previous behavior of routerlink for null and undefined input wa to treat the input the same a or this creates several unresolvable issue with correctly disabling the link because command doe not behave the same a disabling a link instead it navigates to the current page but will also clear any fragment andor query params the new behavior of the routerlink input will be to completely disable navigation for null and undefined input for html anchor element this will also mean removing the href attribute migration for change in pr close ,feat
726,docsinfra use tslint in aios toolslint script instead of the deprecated tslint use eslint in the aios toolslint script pr close ,refactor
727,devtools update angularframework to eb rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
728,devtools update angularframework to cc rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
729,devtools update angularframework to cff rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
730,upgrade add extensible to the upgradecomponent class this class is designed to be used a a base class therefore it should not be marked a final in the api doc pr close ,docs
731,docsinfra add sealed marker to class in api page this change will mark class a sealed unless they have been annotated with an extensible jsdoc tag fix pr close ,build
732,platformbrowser avoid intermediate array in server transition the server transition initializer look for some style tag and clear them based on their ngtransition id the way we currently have the logic creates a couple of intermediate array just so we can call foreach at the end these change use a regular for loop with an if statement instead this isnt a massive performance improvement but the logic doe run during app initialization which is performancesensitive and it an easy change to make on our end pr close ,perf
733,animation add pure annotation to static property initializers class static property with initializers that cause code execution for example call expression or new expression have the potential to cause side effect at module evaluation this is similar in effect to module level code a a result optimizers can not safely remove a class with such a static property a the potential side effect may have meaningful effect on the state of the application execution to allow class with these type of static property to be optimized and removed if unused the initializer expression for the static property can be annotated a pure this annotation provides a signal to an optimizer that the expression doe not have any potential side effect and is useful in case where static analysis can not currently prove that there are in fact no side effect caused by the initializer pr close ,fix
734,core add pure annotation to static property initializers class static property with initializers that cause code execution for example call expression or new expression have the potential to cause side effect at module evaluation this is similar in effect to module level code a a result optimizers can not safely remove a class with such a static property a the potential side effect may have meaningful effect on the state of the application execution to allow class with these type of static property to be optimized and removed if unused the initializer expression for the static property can be annotated a pure this annotation provides a signal to an optimizer that the expression doe not have any potential side effect and is useful in case where static analysis can not currently prove that there are in fact no side effect caused by the initializer pr close ,fix
735,compilercli remove unused closurecompilerenabled from ngtscprogram remove the ngtscprograms private field closurecompilerenabled a that is not being used in the class itself pr close ,refactor
736,router use the correct liveexample name in routingoverviewmd the previously used code liveexample stackblitzrouter would try to target the routerstackblitzjson file inside the nonexistent routingoverview example same a the guide name this commit fix the code to correctly express the original intention of targeting the default stackblitzjson file of the router example with liveexample namerouter fix pr close ,docs
737,compiler add a test for parsing multiline expression in attribute this test a scenario that wa failing in an internal project pr close ,test
738,compiler check that the parser support prematurely terminated interpolation such interpolation turned up during internal testing at google so this commit add a test to prevent regression pr close ,test
739,compiler use rather than in the mlparser this is a simple tidy up commit to move to the more specific comparison operator in the html lexerparser pr close ,refactor
740,compiler share isquote via charsts this function is general purpose and by moving it into the charsts file along with similar helper it can be reused in the lexer for instance pr close ,refactor
741,compiler remove cyclic dependency this commit remove cycle in the dependency graph of the compiler code pr close ,refactor
742,compilercli clarify sourcemap expectation in compliance test the compliance test can check sourcemap segment against expectation encoded into the expectation file previously the encoding of the expected segment wa only delimited by whitespace but this made it difficult to identify segment that started or ended with whitespace now these segment expectation are wrapped in doublequotes which make it easier to read and understand the expectation file pr close ,test
743,ngcc remove unused import this import is not used in the file so can be removed pr close ,refactor
744,common change encoding function in for better performance and coding standard httpparams us custom encoding function standardencoding to encode query string preserving specific charachters this refactoring aim to improve performance and code quality of that function by using a regexp and a map object instead of a chain of replace function pr close ,refactor
745,router eagerly update internal state on browsertriggered navigation the management of browserurltree currently ha several problem with correctly tracking the actual state of the browser this change make the router eagerly update the browserurltree when handling navigation triggered by browser event ie not imperative this is because with those type of navigation the browser url bar is already updated if we do not update the internal tracking of the browserurltree we will be out of sync with the real url if the navigation is rejected it would be best if we could remove browserurltree completely but doing that would require a lot more investigation and is blocked by because the spylocation used in test doe not emulate real browser behavior fix pr close ,fix
746,compilercli remove extra diagnostic from readresource comment remove the extra diagnostic present in the comment for the resourcehosts readresource method pr close ,refactor
747,compiler fix lateron typo in in extractorhost fix typo put in the extractorhostss resourcenametofilename comment in which later on is spelled lateron pr close ,refactor
748,devtools update angularframework to edc rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
749,compiler remove compileundecoratedclasses config file this config file wa added to support g patch now that the patch is removed internally we can remove the file completely pr close ,refactor
750,languageservice autoapply optional chaining on nullable symbol support automatically insert the optional chaining operator when property access is done on a nullable symbol fix pr close ,feat
751,docsinfra upgrade cli command doc source to baf updating angularmaster from clibuildsmaster relevant change in commit range modified helpbuildjson pr close ,build
752,compilercli add test for bananainboxcheck create the test package for extendedtemplatediagnostics and add a unit test for the bananainboxcheck ref pr close ,refactor
753,compilercli add bananainboxcheck to the template check add the implementation of a template check that ensures the correct use of twoway binding syntax generates a warning when foobar is found instead of foobar ref pr close ,refactor
754,compilercli visit input and output for element and template this commit add to the exisiting recursivevisitor and visit input and output for element and template ref pr close ,refactor
755,compilercli move getsourcecodefordiagnostic to utils export getsourcecodefordiagnostic from ngtsctesting to make it available for other package this will help confirm that the source code is correct in other test ref pr close ,refactor
756,compilercli move typecheck test utils into it own package this commit move the test utils used in the typechecking test into it own package this make them available to be used in the test of a different package ref pr close ,refactor
757,compilercli introduce getextendedtemplatediagnosticsforcomponent function add function to get extended template diagnostics generated by all the template check ref pr close ,refactor
758,compilercli make maketemplatediagnostic wrapper error specific this commit make the wrapper function maketemplatediagnostic take an errorcode a a type for the tsdiagnostics to be generated ref pr close ,refactor
759,compilercli introduce extended package to typecheck with it api this commit introduces packagescompilerclisrcngtsctypecheckextended a a container for a new phase of diagnostics generation the api provides an interface for new template check to implement and generate template diagnostics ref pr close ,refactor
760,devinfra exlude commit message filter from formatting exlude commitmessagefilterjs from clang format and tslint pr close ,build
761,core replace reference to googlocale with googgetlocale it is necessary in order to distinguish different reason for referencing the compiledin locale some code just need to pas the locale value on to logic that actually us it other code us the locale value to select localespecific uservisible data and behavior code modified by this change is of the first kind and should use googgetlocale in the future note there are still reference to the googlocale in angular codebase but they are of second type pr close ,refactor
762,docsinfra upgrade cli command doc source to aca updating angularmaster from clibuildsmaster relevant change in commit range modified helpgeneratejson pr close ,build
763,docsinfra correctly detect chunk load error it seems that at some point potentially with the switch to webpack webpack started using the full chunk name instead of just a numeric identifier in chunkloaderror message so the error message changed from chunkloaderror loading chunk failed to chunkloaderror loading chunk srcappsomethingsomemodulets failed this commit update the regex that is used to detect such error in order to print serviceworkerrelated debug info to correctly recognize the new error message format pr close ,fix
764,router ensure check for match option is compatible with property renaming after renaming path is not in routerlinkoptions since it been renamed pr close ,fix
765,docsinfra update doc example to angular v this commit update the doc example to angular v in addition to updating the dependency version it also update the project structure and configs to more closely match what a new v cli app would look like see also the diff between a basic v cli app and a v one pr close ,build
766,router allow question mark in query param value according to the uri spec question mark character are valid in query data so these should accepted by the param parsing see fix breaking change the default url serializer would previously drop everything after and including a question mark in query parameter that is for a navigation to pathqhelloother the query params would be parsed to just q hello this is incorrect because the uri spec allows for question mark characers in query data this change will now correctly parse the params for the above example to be v hello other pr close ,fix
767,devinfra search since head on the local branch for version tag when creating stamp using head wa errantly left in the snapshot stamping logic pr close ,fix
768,form make form status use stricter type specifically narrow the type used for form status from string to a union of possible status change the api method from any to use the new type this is a breaking change however a discussed in the pr breakage seems minimal and google ha been prepped to land this background we uncovered these any typing in the course of design work for typed form they could be fixed in a nonbreaking manner by piggybacking them on top of the new typed form generic but it would be much cleaner to fix them separately if possible breaking change a new type called formcontrolstatus ha been introduced which is a union of all possible status string for form control abstractcontrolstatus ha been narrowed from string to formcontrolstatus and statuschanges ha been narrowed from observableany to observableformcontrolstatus most application should consume the new type seamlessly any breakage caused by this change is likely due to one of the following two problem the app is comparing abstractcontrolstatus against a string which is not a valid status or the app is using statuschanges event a if they were something other than string pr close ,feat
769,docsinfra upgrade cli command doc source to cfb updating angularmaster from clibuildsmaster relevant change in commit range modified helpbuildjson helpeejson helpservejson relevant change in commit range since pr modified helpbuildjson helpservejson close pr close ,build
770,core incorrect error reported when trying to recreate view which had an error during creation currently if a view throw an error during creation mode we mark it a incompletefirstpass so that we can try to recover later the recovery is only possible inside component view the problem is that when this wa introduced i forgot to flip the firstcreatepass when an error is thrown which meant that calling renderview on the same component again is allowed it will eventually hit an assertion which can be confusing for the end user this issue only manifest itself when rendering view manually through viewcontainerref eg using ngif these change flip the firstcreatepass back to false on error so that trying to rerender the same view will throw an error which is consistent to the one that broke the view during creation fix pr close ,fix
771,languageservice global autocomplete doesnt work when the user try to modify the symbol when the user try to trigger suggestion from an interruption the l should provide the global completion for example inputt¦ the t can be the true or the symbol from the component context pr close ,fix
772,core update peerdependencies to allow rxjs we cant update the framework to rxjs until version because it contains breaking change but we can allow user to opt into it since all of our code should be compatible these change expand the allowed version range of rxjs and add an integration test to verify that we dont get compilation error note that we also have a test that run the aio example against rxjs already fix pr close ,refactor
773,docsinfra upgrade cli command doc source to dcfa updating angularmaster from clibuildsmaster relevant change in commit range modified helpgeneratejson helpnewjson pr close ,build
774,compiler add a test for parsing multiline expression in attribute this test a scenario that wa failing in an internal project pr close ,test
775,compiler use rather than in the mlparser this is a simple tidy up commit to move to the more specific comparison operator in the html lexerparser pr close ,refactor
776,compiler check that the parser support prematurely terminated interpolation such interpolation turned up during internal testing at google so this commit add a test to prevent regression pr close ,test
777,compiler define interface for each lexer token these token interface will make it easier to reason about token in the parser and in spec previously it wa never clear what item could appear in the part array of a token given a particular tokentype now each token interface declares a labelled tuple for the part which help to document the token better pr close ,refactor
778,compiler include leading whitespace in sourcespans of in message previously the way template were tokenized meant that we lost information about the location of interpolation if the template contained encoded html entity this meant that the mapping back to the source interpolated string could be offset incorrectly also the sourcespan assigned to an in message did not include leading whitespace this confused the output sourcemappings so that the first text node of the message stopped at the first nonwhitespace character this commit make use of the previous refactorings where more fine grain information wa provided in text token to enable the parser to identify the location of the interpolation in the original source more accurately fix pr close ,fix
779,compiler check fullstart sourcespan the test were checking that the sourcespan of parsed html node were accurate but they were not checking the span when it includes the leading trivia which are given by the fullstart rather than start location pr close ,test
780,compiler expose token part in text node when it wa tokenized text content is split into part that can include interpolation and encoded entity token to make this information available to downstream processing this commit add these token to the text ast node with suitable processing pr close ,refactor
781,compiler support encoded entity token when lexing markup the lexer now split encoded entity token out from text and attribute value token previously encoded entity would be decoded and the decoded value would be included a part of the text token of the surrounding text now the entity have their own token there are two scenario text and attribute value previously the content of divhello amp goodbyediv would be a single text token now it will be three token text hello encodedentity amp text goodbye previously the attribute value in div titlehello amp goodbye would be a single text token now it will be three token attrvaluetext hello encodedentity amp attrvaluetext goodbye encodedentity token have two part decoded and encoded encodedentity token are always preceded and followed by either text token or attrvaluetext token depending upon the context even if they represent an empty string the html parser ha been modified to recombine these token to allow this refactoring to have limited effect in this commit further refactorings to use these new token will follow in subsequent commits pr close ,refactor
782,compiler support interpolation token when lexing attribute value the lexer now split interpolation token out from attribute value token previously the attribute value of div attrhello name would be a single token now it will be three token attrvaluetext hello attrvalueinterpolation name attrvaluetext attrvalueinterpolation token have three part start marker expression and end marker attrvalueinterpolation token are always preceded and followed by text token even if they represent an empty string the html parser ha been modified to recombine these token to allow this refactoring to have limited effect in this commit further refactorings to use these new token will follow in subsequent commits pr close ,refactor
783,compiler share isquote via charsts this function is general purpose and by moving it into the charsts file along with similar helper it can be reused in the lexer for instance pr close ,refactor
784,compiler support interpolation token when lexing markup the lexer now split interpolation token out from text token previously the content of divhello namediv would be a single text token now it will be three token text hello interpolation name text interpolation token have three part start marker expression and end marker interpolation token are always preceded and followed by text token even if they represent an empty string the html parser ha been modified to recombine these token to allow this refactoring to have limited effect in this commit further refactorings to use these new token will follow in subsequent commits pr close ,refactor
785,compiler remove cyclic dependency this commit remove cycle in the dependency graph of the compiler code pr close ,refactor
786,compilercli clarify sourcemap expectation in compliance test the compliance test can check sourcemap segment against expectation encoded into the expectation file previously the encoding of the expected segment wa only delimited by whitespace but this made it difficult to identify segment that started or ended with whitespace now these segment expectation are wrapped in doublequotes which make it easier to read and understand the expectation file pr close ,test
787,ngcc remove unused import this import is not used in the file so can be removed pr close ,refactor
788,bazel extract function to patch filenametomodulename on host this commit extract the patching operation that add filenametomodulename to the angular compiler tscompilerhost into a separate function so that it can be invoked in other compilation flow besides the one outlined in ngcwrapped this is primarily needed for the xin operation in g pr close ,refactor
789,compiler remove unnecessary escape this commit is part of a larger scale change to eliminate unnecessary escape in string literal in advance of enabling stricter check in tslibrary rule in g pr close ,refactor
790,devinfra browser archive rule should handle dmg file we recently reworked our browser archive extraction to happen at analysis time for better caching this resulted in u breaking the extraction of macos dmg file so that firefox is currently not usable for local testing on macos we implement a similar special logic for dmg file to what ha been done within the bazel webtesting rule pr close ,fix
791,devtools update angularcli to ef rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
792,devtools update dependency typeschrome to rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
793,devinfra ensure that building environment stamp fails silently previously when a failure occurred in part of building the environment stamp the entire process errored this should instead fail silently providing no value for the stamp pr close ,fix
794,languageservice support autocomplete string literal union type in template the native t language service ha the ability to provide autocompletions for string literal union type this pr is for angular to do the same in template fix pr close ,feat
795,devinfra introduce release action for directly branchingoff into rc introduces a new release action for cutting a releaseaction by directly moving the next releasetrain into the releasecandidate phase this allows the angular team to release minor version without needing to branchoff first into the featurefreeze phase for minor this phase can be skipped switching into the featurefreeze phase beforehand a a workaround would have allowed for branchingoff but ha the downside that target minor would no longer point to the branchedoff release train only target rc would work then pr close ,feat
796,router add missing outlet event to routeroutletcontract expose both activateevents and deactivateevents a the original outlet interface did pr close ,fix
797,devtools update angularframework to ae rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
798,docsinfra notify errorhandler of unrecoverablestate error with this commit the errorhandler is notified of serviceworker unrecoverablestate error the main purpose of this change is gathering info about the occurrence and frequency of such error in google analytics pr close ,fix
799,compilercli add maketemplatediagnostic wrapper add a maketemplatediagnostic wrapper in the templatetypechecker this requiers le parameter to create template diagnostics since the templatetypechecker can get the templateid and mapping from it scope with the tsclassdeclartion the templatetypechecker is often used to determine if a diagnostic should be produced so it make sense to have a function in it that help create them ref pr close ,refactor
800,compilercli use correct module resolution context for absolute import in dts file the compiler keep track of how a declaration ha been referenced using absolute module import and from which path the absolute module should be resolved from there wa a bug in how the dts metadata extraction would incorrectly use the dts file itself a resolution context for symbol that had been imported using a relative module specifier this could result in module resolution failure for example when extracting ngmodule metadata from nodemoduleslibindexdts that look like import libdirective from dir ngmodule declaration libdirective export libdirective export class libmodule and appmodulets that contains import libmodule from lib ngmodule import libmodule export class appmodule then appmodule would have recorded a reference to libmodule using the lib module specifier when extracting the ngmodule metadata from the nodemoduleslibindexdts file the relative import into dir should also be assumed to be importable from lib according to apf where symbol need to be exported from a single entrypoint so the reference to libdirective should have lib a absolute module specifier but it would incorrectly have nodemoduleslibindexdts a resolution context path the latter is incorrect a lib need to be resolved from appmodulets and not from within the library itself fix pr close ,fix
801,router ability to provide custom route reuse strategy via di for routertestingmodule for now it not possible to provide custom route reuse strategy via di for routertestingmodule only imperative instantiation these change make it possible to provide custom route reuse strategy via di pr close ,feat
802,devtools update dependency webpack to v rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
803,devtools update dependency typeschrome to rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
804,devtools update angularframework to ddba rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
805,router move computed state restoration test to own file to reduce the enormouse size of the integrationspects file move test related to the computed state restoration to their own file pr close ,test
806,router ensure computed state restoration work for thrown error when cancelednavigationresolutioncomputed the router need to handle the case where error are thrown previously the logic wa not updated and would simply do a replacestate rather than determining where in the history we should move to restore the pageurl from before the failed navigation pr close ,refactor
807,docsinfra upgrade cli command doc source to ab updating angularmaster from clibuildsmaster relevant change in commit range modified helpgeneratejson pr close ,build
808,devtools update angularcli to bb rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
809,docsinfra switch the exampleee script to esm switch the j script used for running the doc example test from commonjs to esm format this is necessary for upgrading the globby dependency to version in a subsequent commit pr close ,build
810,docsinfra switch the generatestackblitzzips script to esm switch the j script used for generating stackblitz project and zip from commonjs to esm format this is necessary for upgrading the globby dependency to version in a subsequent commit pr close ,build
811,devinfra include experimental version stamp in env stamp include the determined experimental version for stamping in the env stamp created for release and snapshot build pr close ,feat
812,devinfra move semver utils into the utils directory move semver into the utils directory rather than a a set of utils specifically for release tooling while the utils are only currently used in the release tooling they are not providing a release specific utility and can be used by any subtool of ngdev pr close ,refactor
813,devinfra fix creating experimental semver version to include prerelease chunk semvers created for experimental version should also include the prerelease chunk ie next pr close ,fix
814,form add hasvalidators addvalidators and removevalidators method for both sync and async several new functionality are possible with this change the most requested is that caller can now check whether a control ha a required validator other us include incrementally changing the validators set without doing an expensive operation to reset all validators close pr close ,feat
815,compilercli skip analysis in incremental build for file without angular behavior in an incremental rebuild the compiler attempt to reuse a much analysis data from a prior compilation a possible to avoid doing the analysis work again for source file without angular behavior however no analysis data would be recorded such that the source file had to be reanalyzed each rebuild even if it ha not changed this commit avoids the analysis of such source file by registering these file a not containing any angular behavior allowing subsequent rebuilds to avoid the analysis work pr close ,perf
816,form allow minlengthmaxlength validator to be bound to null if the validator is bound to be null then no validation occurs and attribute is not added to dom for every validator type different pr will be raised a discussed in close pr close ,feat
817,core correctly handle null or undefined in errorhandlerhandleerror since errorhandlerhandleerror expects an argument of type any it should be able to handle value such a null and undefined previously it failed to handle these value because it wa trying to access property on them this commit fix it by ensuring no property are accessed on null or undefined value note this is part of fully addressing fix pr close ,fix
818,devinfra remove usage and dependency on shelljs remove usage of shelljs and instead use spawnspawnsync pr close ,refactor
819,devinfra add spawnsync to child process utils normalize naming of childprocess utils create a spawnsync command for common usage additionally update naming to use spawn instead of spawnwithdebugoutput pr close ,refactor
820,docsinfra fix keyword color in cli page code block previously name of cli command that also happened to be keywords were shown in black color in the code block demonstrating the command usage this worked fine when in light mode where the code block background is white but not in the recently introduced dark mode where the code block background is dark gray this commit fix this by ensuring the kwd token color is inherited from it parent which ha an appropriate color for the current theme previously the kwd token wa reset to it initial value which is black regardless of the theme before cli page keyword before after clipageskeyword after pr close ,fix
821,compilercli use correct module import for type behind a forwardref the static interpreter assumed that a foreign function expression would have to be imported from the absolute module specifier that wa used for the foreign function itself this assumption doe not hold for the forwardref foreign function resolver a that extract the resolved expression from the function argument which is not behind the absolute module import of the forwardref function the prior behavior ha worked for the typical usage of forwardref when it is contained within the same source file a where the static evaluation started in that case the resulting reference would incorrectly have an absolute module guess of angularcore but the local identifier emit strategy wa capable of emitting the reference without generating an import using the absolute module guess in the scenario where the static interpreter would first have to follow a reference to a different source that contained the forwardref would the compilation fail in that case there is no local identifier available such that the absolute module emitter would try to locate the imported symbol from angularcore which fails a the symbol is not exported from there this commit fix the issue by checking whether a foreign expression occurs in the same source file a the call expression if it doe then the absolute module specifier that wa used to resolve the call expression is ignored fix pr close ,fix
822,docsinfra migrate aio from tslint to eslint migrate aio to eslint a tslint ha been deprecated the migration is restricted to the aio app and it ee test and doe not include the other tool for such reason both tslint and codelyzer have not been removed to be done in a next pr some minor tweak needed to be applied to the code so that it would adhere to the new eslinting behaviour most tslint rule have been substituted with their eslint equivalent with some exception whitespace doe not have an eslint equivalent suggested to be handled by prettier importspacing doe not have an eslint equivalent suggested to be handled by prettier ban replaced with norestrictedsyntax a there is no officialincluded eslint equivalent some rule have minor different behaviour compared to their tslint counterpart typescripteslintnamingconvention typescripteslint doe not enforce uppercase for const only typescripteslintnounusedexpressions the tslint optional config allownew is the default eslint behavior and will no longer be ignored arrowbodystyle eslint will throw an error if the function body is multiline yet ha a oneline return on it eqeqeq option smart allows for comparing two literal value evaluating the value of typeof and null comparison noconsole custom console method if they exist will no longer be allowed noinvalidthis function in method will no longer be ignored nounderscoredangle leading and trailing underscore on identifier will now be ignored preferarrowpreferarrowfunctions eslint doe not support allowing standalone function declaration eslint doe not support allowing named function defined with the function keyword spacebeforefunctionparen option constructor is not supported by eslint option method is not supported by eslint additional note the current typescript version used by the aio app is which is not supported by typescripteslint the supported version are and this cause a warning message to appear during linting this issue should likelyhopefully disappear in the future a typescripteslint catch up the new noconsole rule is not completely equivalent to what we had prior the migration this is because tslints noconsole rule let you specify the method you did not want to allow whilst eslints noconsole let you specify the method that you do want to allow so and in order not to have a very long list of method in the eslint rule it been decided for the time being to simply only allow the log warn and error method dependency have been added a they have been considered necessary see extra the migration ha been performed by following more on typescripteslint at pr close ,refactor
823,devinfra use the version from packagejson rather than tag use the version value from the primary packagejson file rather than checking the branch for the latest semver tag this allows for u to explictly create changelogs from the previous version to the new version pr close ,fix
824,devinfra update package version verification to allow for experimental version the angularcli repo publishes experimental versioned package in addition to standard versioned package both experimental and standard verions based on the expected new version provided are treated a valid and correct pr close ,feat
825,devtools update angularframework to aecd rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
826,devtools update dependency cypress to v rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
827,devtools update angularcli to b rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
828,docsinfra improve usagenotes message improve the usagenotes message by adding the word is outcome further information is available in compared to further information available in pr close ,build
829,core use correct injector when resolving di token from within a directive provider factory when a directive provides a di token using a factory function and interacting with a standalone injector from within that factory the standalone injector should not have access to either the directive injector nor the ngmodule injector only the standalone injector should be used this commit ensures that a standalone injector never reach into the directivelevel injection context while resolving di token fix pr close ,fix
830,docsinfra prevent main content from overlapping with toc previously if there wa more content than what would horizontally fit in the main content area it would overflow to the right and overlap with the table of content toc this wa accidentally introduced in this commit fix it by ensuring that the main content area will not overlap with toc and the necessary space for the toc will be reserved using margin instead of padding which contributes to the element size fix pr close ,fix
831,docsinfra correctly handle reported error errorhandling in aio happens mainly in two place for error happening inside the app we have a custom errorhandler implementation reportingerrorhandler reportingerrorhandler pass error to the default errorhandler for them to be logged to the console and also forward them to windowonerror error happening outside the app and error forwarded by reportingerrorhandler are handled by windowonerror which in turn report them to google analytics previously we were making some assumption which turned out to be incorrect based on the info captured in google analytics see reportingerrorhandler assumed that the error passed to it handleerror method would be either string or error instance apparently other value such a null or undefined may also be passed windowonerror assumed that if an error instance wa passed in it would always have a stacktrace ie it stack property would be defined this is not necessarily true although it is not clear based on the log whether reported error of this type are caused by error instance with no stacktrace or by nonstring error object which are incorrectly treated a error instance this commit ensures that all type of error argument can be handled correctly including error instance with no stacktrace and other type of object or primitive note pr is related a it fix handling null and undefined argument in the default errorhandler fix pr close ,fix
832,devinfra add option to setup global type in api golden test previously we disabled automatic typeresolution for the api extractor because in nonsandbox environment this resulted in different api report there are case where global type are still needed for analysis of an entrypoint to support this we add a new property called type which allows for explicit type target being specified note that we do not want to determine type from the data runfiles because api extractor itself also brings in type which should not always be part of the api report analysis pr close ,feat
833,devinfra prevent verbose messaging of git checkout and commit for release prevent logging verbose message to the output for commit and checkout during the release process pr close ,fix
834,devinfra perform actual npm login verification for wombot proxy previously the wombot proxy wa not able to be queried for login state now that it is able to be checked via npm whoami a specific alternate flow is no longer needed pr close ,fix
835,devinfra provide entire pull request object to waitforpullrequesttobemerged waitforpullrequesttobemerged should get the entire pullrequest object rather than just the id to allow it to have more informationcontext for logging and messaging pr close ,refactor
836,devinfra dont pollute standard out during commit message hook when a commit message is not restored there is not need to log this to stdout it is a better experience to silently succeed pr close ,fix
837,animation remove unused animation trigger import in the animationtriggerts file there are unused import remove them to clean up the file pr close ,refactor
838,animation remove publicapi annotation from trigger the buildtrigger function and animationtrigger class are annotated a publicapi which seems wrong and make change to the two problematic so they are being removed here see pr close ,refactor
839,animation normalize final style in buildstyles the final style created in buildstyles lack normalization meaning that pixel value remain a number without px and so such property fail to be correctly setapplied example width is applies a width and thus ignored instead of the correct width px pr close ,fix
840,animation fix typo in transition animation spec file fix the typo meant in the transitionanimationengine spec file to meant the typo is simply in a code comment so the change doe not have any impact pr close ,refactor
841,devtools update angularcli to dae rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
842,devtools update angularcli to ce rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
843,docsinfra upgrade lighthouse to version this commit upgrade lighthouse to the latest version to take advantage of latest fixesimprovements and ensure the min score are still met with the latest audit change pr close ,build
844,devinfra create caretaker handoff assistant to update github team membership create a handoff assistant currently only assist in updating github team membership for caretaking team pr close ,feat
845,docsinfra remove unnecessary podcast from happyangular podcasts title pr close ,docs
846,docsinfra add the angular show to the podcast resource pr close ,docs
847,docsinfra podcast key cleanup in resourcesjson pr close ,docs
848,docsinfra remove deep dive from podcast resource pr close ,docs
849,core expand error logging when the jit compiler is not available if a decorator or partial declaration ha not been aot compiled then the compiler is needed at runtime to be able to jit compile the code however it may occur that the compiler is not available if it ha not been loaded into the application the error that wa reported in this case did not provide insight into which class requested compilation nor did it differentiate between decorator v partial declaration this commit expands the error logging to provide better insight into the class that initiated jit compilation and offer a specialized error message for partial declaration this should help a developer better understand why the error occurs and what can be done to resolve it close pr close ,refactor
850,compilercli optimize cycle detection using a persistent cache for the compilation of a component the compiler verifies that the import it need to generate to reference the used directive and pipe would not create an import cycle in the program this requires visiting the transitive import graph of all directivepipe usage in search of the component file the observation can be made that all directivepipe usage can leverage the exploration work in search of the component file thereby allowing subgraphs of the import graph to be only visited once instead of repeatedly per usage additionally the transitive import of a file are no longer collected into a set to reduce memory pressure pr close ,perf
851,core associate the ngmodule scope for an overridden component when using testbedoverridecomponent the overridden component would incorrectly lose access to it ngmodules declaration scope if the ngmodule had been imported into the testing ngmodule a a modulewithproviders eg using a forroot call the issue occurred a the testbed compiler did not consider ngmodules that had been imported a a modulewithproviders when associating ngmodules with component override this caused the overridden component to be compiled standalone meaning that it doe not have access to it ngmodules declaration this commit extends the logic for traversing the ngmodule graph to also consider modulewithproviders import fix pr close ,fix
852,core allow proper type inference when ngfor is used with a trackby function in the type of trackbyfunction wa changed such that the declaration of a trackby function did not cause the item type to be widened to the trackbys item type which may be a supertype of the iterated type this ha introduced situation where the template type checker is now reporting error for case where a trackby function is no longer assignable to trackbyfunction this commit fix the error by also including the item type t in addition to the constrained type parameter u allowing typescript to infer an appropriate t fix pr close ,fix
853,common resort output of keyvaluepipe when comparefn change previously if only the comparefn changed but the data itself did not then the keyvaluepipe did not resort the output fix pr close ,fix
854,devtools update dependency tsnode to rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
855,devtools update angularcli to ffd rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
856,compilercli check split two way binding check for split two way binding when output is not declared to make error message clearer pr close ,fix
857,compiler add mapping for all html entity angular insert text either through text node documentcreatetextnode or using textcontent but the drawback of doing so is that html entity wont be decoded in order to work around it the compiler ha some logic that map the entity to their unicode representation which can safely be inserted the problem is that our current mapping is arbitrarily limited which mean that some entity will be mapped while others will throw an error even though theyre valid these change expand the list to cover all entity that are supported by the html spec fix pr close ,fix
858,devinfra remove usage and dependency on shelljs remove usage of shelljs and instead use spawnspawnsync pr close ,refactor
859,devinfra add spawnsync to child process utils normalize naming of childprocess utils create a spawnsync command for common usage additionally update naming to use spawn instead of spawnwithdebugoutput pr close ,refactor
860,devinfra transitive target can not be resolved by api extractor for api golden test not running against a npm package we extract all transitive declaration of the specified data target this is necessary because api extractor need to resolve other target that have been linked by the bazel nodejs rule the linker by default only provides access to javascript source but the api extractor is specifically concerned with type definition that we need to manually extract pr close ,fix
861,devinfra do not include all type in api golden test the api golden test tool should not include all type from the nodemodules this result in unnecessary type resolution when the api golden tool is run outside of sandbox ie on window or with bazel run for accept pr close ,fix
862,devinfra better caching for browser archive content add better caching for browser archive and their extraction this is done because the archive are currently extracted a a build action and these are action are invalidated frequently causing flakiness on the ci and slowdown in local development here is an example flaky error on the ci that surface often with rbe execution error homecirclecicachebazelbazelcirclecicececfdcaaeadexternalnpmangulardevinfraprivatebazelbrowserschromiumbuildbazel extracting orgchromiumchromiumamdfilechromelinuxzip failed exit extractsh failed error executing command externaliobazelruleswebtestingwebinternalextractsh externalorgchromiumchromiumamdfilechromelinuxzip remaining argument skipped note remote connectionprotocol failed with execution failed we fix this by introducing a new rule that downloads a browser archive and unpacks it directly into a bazel repository before this change the archive would just be downloaded but extracted later a part of a build action this is unnecessary and result in le efficient caching a build action are invalidated more often especially if developer run bazel clean in between the root cause on why the extraction often fails in rbe container is unclear it unclear why the extacted archive is not cached properly a part of a build action most likely some hermeticity issue within ruleswebtesting but it seems more bazelidiomatic to unpack the archive a part of the repository anyway and this solves the flakiness issue pr close ,feat
863,devinfra add lint rule to enforce noimplicitoverride abstract member typescript introduced a new flag called noimplicitoverride a part of typescript v this flag introduces a new keyword called override that can be applied to member which override declaration from a base class this help with code health a t will report an error if eg the base class change the method name but the override would still have the old method name similarly if the base class remove the method completely t would complain that the memeber with override no longer override any method a similar concept applies to abstract method with the exception that typescript builtin noimplicitoverride option doe not flag member which are implemented a part of an abstract class we want to enforce this a a bestpractice in the repository a adding override to such implemented member will cause t to complain if an abstract member is removed but still implemented by derived class more detail pr close ,feat
864,zonejs ensure compatibility with noimplicitoverride add the override keyword to the zonejs source to ensure compatibility with noimplicitoverride pr close ,refactor
865,localize ensure compatibility with noimplicitoverride add the override keyword to the localize source to ensure compatibility with noimplicitoverride pr close ,refactor
866,languageservice ensure compatibility with noimplicitoverride add the override keyword to the languageservice source to ensure compatibility with noimplicitoverride pr close ,refactor
867,serviceworker ensure compatibility with noimplicitoverride add the override keyword to the serviceworker source to ensure compatibility with noimplicitoverride pr close ,refactor
868,form ensure compatibility with noimplicitoverride add the override keyword to the form source to ensure compatibility with noimplicitoverride pr close ,refactor
869,element ensure compatibility with noimplicitoverride add the override keyword to the element source to ensure compatibility with noimplicitoverride pr close ,refactor
870,common ensure compatibility with noimplicitoverride add the override keyword to the common source to ensure compatibility with noimplicitoverride pr close ,refactor
871,benchpress ensure compatibility with noimplicitoverride add the override keyword to the benchpress source to ensure compatibility with noimplicitoverride pr close ,refactor
872,upgrade ensure compatibility with noimplicitoverride add the override keyword to the upgrade source to ensure compatibility with noimplicitoverride pr close ,refactor
873,router ensure compatibility with noimplicitoverride add the override keyword to the router source to ensure compatibility with noimplicitoverride pr close ,refactor
874,platformserver ensure compatibility with noimplicitoverride add the override keyword to the platformserver source to ensure compatibility with noimplicitoverride pr close ,refactor
875,platformbrowserdynamic ensure compatibility with noimplicitoverride add the override keyword to the platformbrowserdynamic source to ensure compatibility with noimplicitoverride pr close ,refactor
876,platformbrowser ensure compatibility with noimplicitoverride add the override keyword to the platformbrowser source to ensure compatibility with noimplicitoverride pr close ,refactor
877,core ensure compatibility with noimplicitoverride add the override keyword to the core source to ensure compatibility with noimplicitoverride pr close ,refactor
878,animation ensure compatibility with noimplicitoverride add the override keyword to the animation source to ensure compatibility with noimplicitoverride pr close ,refactor
879,devinfra ensure compatibility with noimplicitoverride add the override keyword to the devinfra source to ensure compatibility with noimplicitoverride pr close ,refactor
880,compilercli ensure compatibility with noimplicitoverride add the override keyword to the compilercli source to ensure compatibility with noimplicitoverride pr close ,refactor
881,compiler ensure compatibility with noimplicitoverride add the override keyword to the compiler source to ensure compatibility with noimplicitoverride pr close ,refactor
882,core optimize the implementation about finding context from error in errorhandler in findcontext method use conditional operator check whether the params error exists and then u reccursion way to find context in original error if getdebugcontexts result doe not exist pr close ,refactor
883,core optimize the implementation about finding context from error in errorhandler in findcontext method use conditional operator check whether the params error exists and then use nullish coalescing operator instead conditional operator when getdebugcontexts result doe not exist pr close ,refactor
884,compiler incorrect context object being referenced from listener instruction inside embedded view currently unless a listener inside of an embedded view try to reference something from the parent view or if the reference is a local ref we dont generate the view restoration instruction and we allow for the value to be picked up from the context object in the function parameter the problem is that the listener is only run during creation mode and the context object may have been swapped out afterwards these change fix the issue by always generating the view restoration instruction for listener inside template fix pr close ,fix
885,compilercli properly emit literal type when recreating type parameter in a different file in the template type checker became capable of replicating a wider range of generic type parameter for use in template typecheck file any literal type within a type parameter would however emit invalid code a typescript wa emitting the literal using the text a extracted from the template typecheck file instead of the original source file where the type node wa taken from this commit work around the issue by cloning any literal type and marking them a synthetic signalling to typescript that the literal text ha to be extracted from the node itself instead from the source file this commit also excludes import type node from being supported a their module specifier may potentially need to be rewritten fix pr close ,fix
886,core fix viewchildren code example to avoid t error add a nonnull assertion in viewchildren code example to avoid a typescript error due to uninitialized property fix pr close ,docs
887,devinfra add bazel rule for extracting javascript module flavor from target introduces a rule that collect declared javascript module output file from a list of dependency based on a configurable javascript module provider the extracted output are exposed within the defaultinfo provider target defined using this rule can be used a input for rule that require javascript source or if there are multiple javascript output variant defined for a target while for example only the jsmoduleinfo output are of interest a an example this rule is helpful in combination with tslibrary and ngmodule a those rule expose multiple output flavor which are distinguishable by the javascript module provider a imported from providersbzl ie these rule expose flavor for named amd module and ecmascript module output if we want to ship a npm package only using ecmascript module for example we could extract all jsecmascriptmoduleinfodenoted output and feed that into the pkgnpm rule compared to bringing in all output flavor for reference pr close ,feat
888,core edit and add doc for ngtemplate pr close ,docs
889,bazel compatibility with rulesnodejs v this commit applies change to angularbazel which are necessary to support the bazel nodejs rule v the bazel nodejs rule no longer support the tslibrary option for the linkablepackageinfo provider and therefore we need to stop using it due to this removal we also need to add two new attribute called packagename and packagepath so that the api of ngmodule match tslibrary note this is denoted a refactor a we currently are not able to merge feature commits into patch branch but we want the tooling to not diverge significantly between the patch and next branch it is planned to update the merge tooling to allow for such change to land pr close ,refactor
890,devinfra ngrollupbundle rule should error if import can not be resolved rollup just print a warning if an import can not be resolved and end up being treated a an external dependency this in combination with the silent true attribute for rollupbundle mean that bundle might end up being extremely small without people noticing that it miss actual import to improve this situation the warning is replaced by an error if an import can not be resolved this unveiles an issue with the ngrollupbundle macro from devinfra where import in view engine were not resolved but ended up being treated a external this did not prevent benchmark using this macro from working because the concatjs devserver had builtin resolution for workspace manifest path though given the new check for no unresolved import this will now cause error within rollup and we need to fix the resolution we can fix the issue by temporarily enabling workspace linking this doe not have any performance downside to enable workspace linking which we might need more often in the future given the linker taking over patched module resolution we had to rename the angular dependency to a more specific one so that the angular linker could link into nodemodulesangular pr close ,fix
891,devtools update angularcli to d rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
892,bazel update examplepackagegolden this is caused by the update of microsoftapiextractor to pr close ,test
893,router adjust behavior for computed navigation restoration when another navigation is triggered during an inprocess navigation and the cancelednavigationresolution is computed we should not attempt to restore the browser history using historygo doing that would trigger a third navigation through the router which would conflict with the new navigation that we were trying to process instead we treat this a a redirect and skip the history restoration attempt this act similarly to returning urltree from a guard fix issue described in pr close ,refactor
894,docsinfra fix margin of social icon on small screen this commit fix the margin of the social icon on small screen this mainly affect screen between px and px where only one social icon is show due to limited space but not necessarily the first one in dom order before social icon before after social icon after pr close ,fix
895,core initializeapp method should return function update packagescoresrcapplicationinitts update applicationinitts update applicationinitts coauthoredby george kalpakas kalpakasggmailcom pr close ,docs
896,core fix spelling error fix spelling error in migration schematic pr close ,docs
897,core remove no longer needed type workaround ha been solved and therefore we no longer need this workaround pr close ,refactor
898,serviceworker correctly handle unrecoverable state when a client no longer exists previously the serviceworker assumed that a client found in clientversionmap would exist ie it could be retrieved via clientsget however if a browser tab had been closed the corresponding client while present in clientversionmap which is only updated on serviceworker initialization would not be retrievable via clientsget this commit fix it by checking whether the client exists before trying to notify it about an unrecoverable state pr close ,fix
899,serviceworker switch to the official typescript typing previously we used custom typing for the serviceworker environment this wa necessary back when the serviceworker package wa introduced since there were no official typing since there are now official typing for web worker including serviceworkers offered by typescript a libwebworkerdts this commit get rid of our custom typing in favor of using the official one pr close ,refactor
900,serviceworker better align mock global scope implementation with actual implementation this commit better aligns the mock serviceworkerglobalscope implementation used in serviceworker test and the associated typing with the actual implementation and the official typescript typing this allows verifying the serviceworker behavior in a slightly more realistic environment this is in preparation of switching from our custom typing to the official typescript typing libwebworkerdts pr close ,test
901,serviceworker better align mock client implementation with actual implementation this commit better aligns the mock client implementation used in serviceworker test and the associated typing with the actual implementation and the official typescript typing this allows verifying the serviceworker behavior in a slightly more realistic environment this is in preparation of switching from our custom typing to the official typescript typing libwebworkerdts pr close ,test
902,serviceworker move mock client class to their own file in the serviceworker test we use mock implementation of the various client apis that the serviceworker interacts with previously these mock implementation were defined in the testingscopets file this added several extra class to a file that already contains a few making it harder to maintain therefore this commit move these mock client class to a separate testingclientsts file pr close ,refactor
903,serviceworker better align mock event implementation with actual implementation this commit better aligns the mock event implementation used in serviceworker test and the associated typing with the actual implementation and the official typescript typing this allows verifying the serviceworker behavior in a slightly more realistic environment this is in preparation of switching from our custom typing to the official typescript typing libwebworkerdts pr close ,test
904,serviceworker move mock event class to their own file in the serviceworker test we use mock implementation of the various event emitted during the serviceworker lifecycle previously these mock implementation were defined in the testingscopets file this added several extra class to a file that already contains a few making it harder to maintain therefore this commit move these mock event class to a separate testingeventsts file pr close ,refactor
905,serviceworker make swtestharnessenvissupported a standalone function this commit make the swtestharnessenvissupported static method a standalone function this function is used to determine whether the current environment provides the necessary apis to run the sw test and is independent of swtestharness so is no need for it to be a static method of swtestharness this is in preparation of switching from our custom typing to the official typescript typing libwebworkerdts pr close ,refactor
906,serviceworker remove duplicate context type in favor of extendableevent this commit remove the duplicate context interface and us the extendableevent interface instead this is in preparation of switching from our custom typing to the official typescript typing libwebworkerdts pr close ,refactor
907,serviceworker remove unused variable and import from test this commit remove some unused variable and associated import from integrationspects pr close ,refactor
908,form add diff between add and set control pr close ,docs
909,serviceworker avoid storing redundant metadata for hashed asset the serviceworker need to keep track of some metadata for unhashed asset resource to know ifwhen they might need to be revalidated this applies to resource that do not exist on the filesystem at buildtime and thus can not be hashed such a font or image loaded from external source for hashed resource this metadata is irrelevant because the hash is enough to verify that the content hasnt changed and no revalidation is necessary previously the serviceworker would store such metadata for hashed resource a well even though it would never be used thus taking up space unnecessarily this commit fix it by not storing metadata for hashed resource ie those that are included in an assetgroups hash array pr close ,fix
910,serviceworker add missing comma in example json data pr close ,docs
911,compilercli inline type checking instruction no longer prevent incremental reuse source file that contain directive or component that need an inline type constructor or inline template typecheck block would always be considered a affected in incremental rebuilds the inline operation cause the source file to be updated in the typescript program that is created for template typechecking which becomes the reuse program in a subsequent incremental rebuild in an incremental rebuild the source file from the new user program are compared to those from the reuse program the updated source file are not the same a the original source file from the user program so the incremental engine would mark the file which needed inline operation a affected this prevents incremental reuse for these file causing suboptimal rebuild performance this commit attache the original source file for source file that have been updated with inline operation such that the incremental engine is able to compare source file using the original source file fix pr close ,fix
912,docsinfra ensure the sidenav backdrop cover the floating toc previously on narrow page where the sidenav wa in over mode the sidenavs backdrop only covered the main doc content but not the floating table of content toc on the right this wa inconsistent and confusing to the user because they could interact with the toc and scroll to different area of the main content while the sidenav and backdrop were still covering the content this commit fix it by ensuring the sidenav backdrop cover both the main content and the floating toc when present fix pr close ,fix
913,docsinfra log more sw debug info this commit expands the info printed to the console to help diagnose serviceworker issue to include the internal debug info retrieved from ngswstate this will provide more useful data such a the activated sw version state client recent operation and any recent error note this temporarily increase the payload size removing this code and reclaiming the payload size is being tracked in pr close ,fix
914,docsinfra replace deprecated sas division with mathdiv this commit replaces the deprecated operator used for division in sas file with the recommended mathdiv function to get rid of build warning example pr close ,refactor
915,docsinfra prevent warning due to missing expectation fix a unit test warning due to jasmine not realizing that is an expectation example warn spec documentservice currentdocument should encode the request path to be caseinsensitive ha no expectation pr close ,test
916,docsinfra update angular to update angular package to latest x version mainly to take advantage of recent serviceworker improvement such a and pr close ,build
917,docsinfra update payload size this commit update the payload size for angulario to make it easier to identify payload size change from an imminent update of angular package pr close ,build
918,docsinfra slightly improve topmenu responsiveness make sure that the topmenu link dont get overlapped by the search input regardless on the browser fontsize and the window width make also sure that the header logo doe not overlap the search input on narrow window again regardless on the browser fontsize pr close ,fix
919,devtools update angularframework to d rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
920,devinfra missing pkgnpm substitution for toplevel target being accessed currently if a toplevel target or file within devinfra is being referenced like devinfratsconfig then the label is not subsituted properly and break consumption of the built npm package pr close ,fix
921,compilercli support reflecting namespace declaration dts bundling will cause originally namespaced import become namespace declaration within the same file example before bundling t import a i from router export declare class routermodule constructorguard any router router static ɵmod iɵɵngmoduledeclarationroutermodule typeof irouteroutlet after bundling declare namespace i export routeroutletcontract routeroutlet export declare class routermodule constructorguard any router router static ɵmod iɵɵngmoduledeclarationroutermodule typeof irouteroutlet and therefore this commit add support for reflecting type that are defined in such namespace declaration close pr close ,fix
922,bazel enable dts bundling for ivy package it is now possible to bundle dts file of ivy library since the blocker ha been addressed upstream pr close ,fix
923,devinfra apigolden tool doe not specify a tsconfig and break for consumer tool that are shipped a a bazel rule with the shared devinfra tool require a specific tsconfig a otherwise tslibrary will accidentally look for a tsconfig in npmtsconfig and the build will fail we bring in our devinfra tsconfig and reference it explicitly pr close ,fix
924,devinfra convert commit shas and pr number to link when generating changelog previously the commit shas and pr number referenced in the generated changelogmd were not automatically converted to link in the github ui a happens for release note and issuepr comment this made it le straightforward for someone reading the changelog to get to the commitpr corresponding to a change this commit update the tooling that generates the changelog to convert the commit sha and the corresponding pr number referenced at the end of the commit message header to link pr close ,fix
925,docsinfra correctly configure topmenu navitem in the sidenav previously the condition for showing the topmenu navmenu in the sidenav wa the same a that for switching the sidenav mode from docked mode side to floating mode over therefore the iswide input of the corresponding navmenucomponent could be hardcoded to false since the component would only be shown when the sidenav wa in floating mode in fedfdfecfadacfa these two desicions were decoupled which would result in the topmenu navitem being shown in the sidenav while the sidenav is in docked mode and thus the iswide input should be set to true this commit fix it by setting the iswide input based on the value of the docksidenav property a happens for the rest of the navmenus pr close ,fix
926,docsinfra simplify condition for determining sidenav mode previously the appcomponentshowtopmenu property wa taken into account when determining the matsidenavmode value however this wa redundant because in the only case in which the use of showtopmenu would make a difference ie when docksidenav wa true and issidenavdoc wa false the sidenav would be closed and the hamburger menu button would not be visible thus there would be no way to open it manually this commit simplifies the condition for determining the sidenav mode by removing showtopmenu from the expression pr close ,refactor
927,languageservice do not override t l method not supported by ve ngls historically our language service wa built with the potential to be a dropin replacement for the typescript language service with the added benefit of being able to provide angularspecific information a well while our vscode extension doe not use the language service in this way it appears that other communitycontributed plugins do we dont really officially support this usecase but there not real reason for u to override the typescript language service implementation in the ve angular language service so that it return undefined a with other nonimplemented method we can just allow this to be deferred to tsls fix pr close ,fix
928,devtools update angularframework to rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
929,compilercli return directive for an element on a microsyntax template when the template type checker try to get a symbol of a template node it will not return the directive intended for an element on a microsyntax template for example div ngforlet user of user dir the dir will be skipped but it needed in language service fix pr close ,fix
930,docsinfra move dot inside usage note anchor tag in the html generated aio doc the dot of usage note should be part of the anchor tag same a it is for see more pr close ,fix
931,core error in testbed if module is reset midcompilation in viewengine when testbedcompilecomponents is called under viewengine we kick off a compilation and return a promise that resolve once the compilation is done in most case the consumer doesnt have to await the returned promise unless their component have external resource the problem is that the test could be over by the time the promise ha resolved in which case we still cache the factory of the test module this becomes a problem if another compilation is triggered right afterwards because itll see that we still have a modulefactory and it wont recreate the factory these change resolve the issue by saving a reference to the module type that is being compiled and checking against it when the promise resolve note that while this problem wa discovered while trying to roll out the new test module teardown behavior in the component repo it ha been there for a long time the new test behavior made it more apparent pr close ,fix
932,devtools update dependency webpack to v rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
933,devinfra introduce shared tool for validating api signature for the last year the angular repository relied on tsapiguardian for testing the public api signature this project worked well in general but it another inconvenience to maintain if we could rely on microsofts apiextractor tool especially since with typescript issue with export alias appeared that would require u to extend t api guardian to support such export this is not a straightforward a it sound given it requires rewriting of declaration to showcase the proper name in the api golden microsofts api extractor ha integrated support for this a of typescript we want to start using the new override keyword we are not able to use that keyword currently because an old version of api extractor is used in the ngmodule rule to flatten the type into a single file to fix this we need to update apiextractor but this unveils the issue with t api guardian because the most recent version of apiextractor us alias export to avoid potential conflict with globals available through the typescript default library eg domdts pr close ,feat
934,compiler support number separator in template a of e javascript allows using underscore a separator inside number in order to make them more readable eg v typescript ha had support for separator for a while so these change expand the template parser to handle them a well pr close ,feat
935,platformbrowser in metaaddtag do not add duplicate meta tag previously if there were two tag with the same name or property attribute selector then only the first wa checked for duplicate when deciding whether to add a new meta tag fix fix pr close ,fix
936,devtools update angularframework to dbf rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
937,devinfra remove bot from special thanks section with this change we remove known used bot from special thanks section in the changelog pr close ,fix
938,devinfra use api pagination for retrieving project branch we rely on a github api branch request to determine the active release train currently this logic is broken if more than protected branch exist within a repository this issue surfaced recently where the itemsperpage setting wa set to causing the merge tooling and release tooling to not detect the proper latest release train this commit us github pagination for retrieving branch to determine the active release train and make the logic more longterm proof pr close ,fix
939,devinfra update octokit to latest version v we previously held off with updating octokit to v due to their more noticable issue with typing this commit update u to the latest version in order to take advantage of the new pagination api which is also stronglytyped and to not fall behind too much over time octokit seems to change quite often we work around the problem with the type for getcontent by just using a type cast with a todo and link to the issue similarly we work around a problem where the octokit type have an incorrect type for the name of the label array in an api response pr close ,refactor
940,docsinfra make angulario and doc example compatible with rxjs v this commit applies the necessary change to make angulario and most doc example compatible with both rxjs v and v it also add new step to relevant ci job to test angulario and doc example against rxjs v a well to catch potential regression note some of the doc example are not compatible with rxjs v and are therefore excluded from the test the systemjsbased ngupgrade example in particular are excluded since they require a different systemjs configs to run against rxjs v and v and the extra complexity of managing that is not worth it for the affected example pr close ,refactor
941,docsinfra allow excluding certain doc example from test this commit add support for excluding certain doc example from the command used to run test this is useful to run extra test on ci that might not be compatible with all example for example run test with different version of a dependency in a subsequent commit this will be used to run test against rxjs v a a quick way to catch potential regression pr close ,test
942,devinfra add command for printing release train information currently the active release train are printed when a developer run ngdev publish release this is not ideal because it requires the developer to provide an oauth token to be on the next branch and to have no uncommitted change while the actual release train information is not dependent on these check this commit introduces a new command called ngdev release info that can be used to retrieve relase information without the aforementioned requirement note that this command provides more detailed information about release branch than the ngdev caretaker check command which also requires on authentication a a side note the release info command also print active lts branch for example pr close ,feat
943,docsinfra styling fix on error page add center aligment for heading text and additional style on not found related page pr close ,fix
944,core add context jsdoc param to createembeddedview pr close ,docs
945,docsinfra fix styling of summary element on dark theme previously the color of summary element wa hardcoded to black this did not work well on the dark theme where the background color of the page is also very dark this commit fix it by removing the explicit color style thus letting summary element inherit the color of their container close pr close ,fix
946,docsinfra improve styling of completed roadmap project this commit improves the styling of the completed project section of the roadmap by a making it consistent with the rest of the roadmap section and b making it more similar with detail element on other page before collapsed completed project collapsed before expanded completed project expanded before after collapsed completed project collapsed after expanded completed project expanded after pr close ,fix
947,docsinfra make detail style more reusable this commit make the styling for detail element including expandcollapse action in their summary more reusable pr close ,refactor
948,docsinfra merge duplicate codescss file pr reorganized the sc file of the angulario app moving most of them in subdirectory due to incorrectly resolved merge conflict for pr targeting the sc file around that time we ended up with duplicate style file for code element stylesmodulescodescss stylesmodulescodecodescss stylesmodulescodecodethemescss this commit get rid of the extra file stylesmodulescodescss and port any change from it to the correct file inside the code subdirectory pr close ,refactor
949,compiler interally typo fixed pr close ,docs
950,devtools update dependency waiton to v rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
951,devtools update dependency webpack to v rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
952,devtools update dependency typeschrome to rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
953,devtools update angularcomponents to rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
954,devtools update angularframework to ddb rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
955,devtools update angularframework to cfccc rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
956,compilercli add support for partially evaluating type add support to the partial evaluator for evaluating literal type and tuples resolve pr close ,fix
957,devinfra fetch branch from github instead of this commit fix an issue with the ngdev tool where githubs api return paginated branch data only branch are returned by default and angular now ha more than branch in it repo this commit increase the number of branch returned to the api limit of which should buy u some time until we can implement proper pagination pr close ,fix
958,docsinfra disambiguate doc path for global apis in the disambiguatedocspathsprocessor wa introduced to fix an issue with caseinsensitively equal path this processor may alter the output path of some doc due to it nature the disambiguatedocpathsprocessor must be the last processor in the pipeline that update a doc output path however the updateglobalapipathprocess which also alters the output path of some doc wa not configured to run before disambiguatedocpathsprocessor a a result the change made by disambiguatedocpathsprocessor were overridden by updateglobalapipathprocess resulting in the apps failing to load such global api doc page an example of such an api page is this commit fix it by ensuring that the updateglobalapipathprocess is explicitly run before the disambiguatedocpathsprocessor so that the former doe not override the change made by the latter pr close ,build
959,serviceworker ensure obsolete cache are always cleaned up previously the sw wa only able to clean up cache for appversions found in the driver version map if for some reason the driver failed to load a valid stored state including appversions and ended up with an empty version map any obsolete version would remain in the cache storage this case wa rare but possible this commit make the cache cleanup logic more robust by ensuring that all appversion cache are removed unless they are currently used by the sw to serve active client with the exception of the latest appversion which is always retained fix pr close ,fix
960,serviceworker ensure cache are cleaned up when failing to load state previously obsolete cache were only cleaned up when successfully loading the stored state when the state failed to be loaded cleaning up the cache would be skipped until the next sw initialization this commit change this ensuring that the cache are cleaned up regardless if the stored state wa loaded successfully or not pr close ,fix
961,serviceworker simplify accessing cachestorage throughout the serviceworker this commit simplifiessystemizes accessing the cachestorage through a wrapper with the following benefit ensuring a consistent cache name prefix is used for all cache without having to repeat the prefix in different place allowing referring to cache using their name without the common cache name prefix exposing the cache name on cache instance which for example make it easier to delete cache without having to keep track of the name used to create them pr close ,refactor
962,serviceworker improve serviceworker cache name this commit improves the cache name generated by the serviceworker by making them shorter and nonrepetitive in particular the following change are made datagroup cache name no longer include the dynamic infix since it doe not add any value before ngswdatadynamic after ngswdata cachedatabase table name no longer include the ngswpath prefix twice before ngswpathdbngswpath after ngswpathdb note this change will result in different cache name being generated for the same appversions with the new sericeworker script this mean that some of the previously cached data will need to be redownloaded because the serviceworker will not be able to reuse the old cache but that should be transparent for the end user while possible adding logic to allow the serviceworker to retrieve data from the old cache is not worth the extra complecity and maintenance cost note generating different cache name for some of the cache mean that the serviceworker will not be able to cleanup some of the old cache this will be taken care of in a subsequent commit that will rework the cleanup logic to be more robust covering change such a this one and other edgecases pr close ,fix
963,serviceworker use correct name when listing cachedatabase table cachedatabase us the unprefixed table name to interact with database table however the list method return the raw prefixed table name which are not useful since they can not be used to opendelete a table this commit fix this by removing the prefix from the cache name returned by the list method note this method is currently not used anywhere so this change doe not affect the serviceworker behavior pr close ,fix
964,serviceworker include serviceworker version in debug info this commit includes the serviceworker version in the debug info shown at ngswstate to make it easier to know what version of the serviceworker script is controlling the page pr close ,feat
965,serviceworker minor refactorings to improve readabilitymaintainability this commit make some minor refactorings to improve the code readability and maintainability including avoiding code duplication using more descriptive variable name using asyncawait instead of promisethen accessing variable directly instead of via this when possible pr close ,refactor
966,compilercli change default ngcc hash algorithm to be fips compliant the previous default algorithm wa md which is not compliant with fips the default is now set to sha which is compliant fix pr close ,fix
967,compilercli ngcc entrypoint manifest hash is now configurable the hash algorithm for the entrypoint manifest wa hardcoded to md this can now be configured by the hashalgorithm property on the ngccconfigjs project configuration pr close ,refactor
968,compilercli make ngcc configuration hash algorithm configurable the ngcc configuration get hashed to be used when caching but it wa hardcoded to use the md algorithm which is not fips compliant now the hash algorithm can be configured in the ngccconfigjs file at the project level pr close ,refactor
969,serviceworker add openwindow focuslastfocusedoropen and navigatelastfocusedoropen add openwindow focuslastfocusedoropen and navigatelastfocusedoropen abilty to the notificationclick handler such that when either a notification or notification action is clicked the serviceworker can act accordinly without the need for the app to be open pr close pr close ,feat
970,compiler should not break a text token on a nonvalid start tag previously the lexer would break out of consuming a text token if it contains a character then if the next character did not indicate an html syntax item such a a tag or comment then it would start a new text token these consecutive text token are then merged into each other in a post tokenization step in the commit before this interpolation no longer leak across text token the approach given above to handling character that appear in text is no longer adequate this change ensures that the lexer only break out of a text token if the next character indicate a valid html tag comment cdata etc pr close ,fix
971,compiler do not allow unterminated interpolation to leak into later token when consuming a text token the lexer track whether it is reading character from inside an interpolation so that it can identify invalid icu expression inside an interpolation there will be no icu expression so it is safe to have unmatched character but outside an interpolation this is an error previously if an interpolation wa started by an opening marker eg in a text token but the text came to an end before the closing marker eg then the lexer wa not clearing it internal state that tracked that it wa inside an interpolation when the next text token wa being consumed the lexer incorrectly thought it wa already within an interpolation this resulted in invalid icu expression error not being reported for example in the following snippet the first text block ha a prematurely ended interpolation and the second text block contains an invalid character divdiv divdiv previously the lexer would not have identified this a an error now there will be an eof error that look like t unexpected character eof do you have an unescaped in your template use to escape it pr close ,fix
972,core improve applicationrefbootstrap doc add proper example and update usage note add reference to the method at relevant place in the doc pr close ,docs
973,serviceworker correctly determine client id on navigation request the serviceworker assigns an appversion to a each client to ensure that all subsequent request for a client are served using the same appversion the assignment is done based on the client id previously the serviceworker would only try to read the client id off of the fetchevents clientid property however for navigation request the new client id will be set on resultingclientid while clientid will either be empty or hold the id of the client where the request initiated from see also related discussion in wcserviceworker and wcserviceworker in theory this could lead to the navigation request ie indexhtml being served from a different appversion than the subsequent subresource request ie asset in practice the likelihood of this happening is probably very low though since it would require the latest appversion to be updated between the initial navigation request and the first subresource request which should happen very shortly after the navigation request this commit ensures that the correct client id is determined even for navigation request by also taking the resultingclientid property into account pr close ,fix
974,devinfra update pullapprove verification to ensure all group have reviewer update the pullapprove verification tooling to ensure a reviewer is defined for each group this is being done in preparation for the upcoming change to how pullapprove billing work the new billing will work on a seat based approach rather than flat usage pr close ,feat
975,devtools update angularcli to fdc rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
976,devtools update dependency tsickle to rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
977,devtools update typing of differ object to fit the new contract of trackbyfunction rangleangulardevtools previously defaultiterablediffer wa able to infer the type of it generic by reading the type contract defined by the user defined trackby function this wa because trackbyfunction can be specified with a generic that is used to type it second argument if this generic is not provided like in this case typescript infers this type from the function contract directly in this case this inferred type wa flatnode this inference is then propagated to defaultiterablediffer which is why we were not seeing this error previously a change in the framework made it so the second argument of trackbyfunction is typed a a generic that extends the generic passed into trackbyfunction since we had not previously passed in this generic to trackbyfunction this type wa inferred a an extension of unknown causing a type error when passed a an argument to the defaultiterablediffer constructor now the function being used are typed directly a trackbyfunctionflatnode for clarity the defaultiterablediffer generic is now also typed a flatnode see for the framework change ,fix
978,compiler add support for shorthand property declaration in template add support for shorthand property declaration inside angular template eg doing foo bar instead of foo foo bar bar fix pr close ,feat
979,compilercli add additional safe keyed read test this commit add some test that were mistakenly omitted from the original change for safe keyed readswrites pr close ,test
980,devtools use visible gutter size in calculation for split area flex basis rangleangulardevtools after pr rangleangulardevtools an invisible gutter wa introduced to increase the draggable area of the split pane gutter the gutter size being used in the calculation for the split area flexbasis still referenced the size of the now invisible gutter causing split area to be smaller than they should be this is most noticable in the the inputoutputstate expandable panel in the property explorer tab now the visible gutter size is used in the flexbasis calculation instead of the invisible one ,fix
981,compilercli enable relative import in the type parameter emitter previously the template type checker would only optin to inline type constructor if it could import all type reference from absolute module specifier this limitation wa put into place in an abundance of caution a there wa a safe but le performant fallback available the language service is not capable of using this fallback which now mean that the limitation of absolute module specifier limit the language service ability to use accurate type for componentdirective class that have generic type parameter this commit loosens the restriction such that type reference are now eligible for emit a long a they are exported pr close ,refactor
982,compilercli transform type reference in generic type parameter default when a componentdirective ha a generic type parameter the template type checker attempt to translate the type parameter such that the type parameter can be replicated in the type constructor that is emitted into the typecheck file type parameter with a default clause would incorrectly be emitted into the typecheck file using the original tstypenode for the default clause such that tstypereferencenodes within the default clause would likely be invalid ie referencing a type for which no import is present in the typecheck file this did not result in userfacing typecheck error a error reported in type constructor are not translated into template position regardless this commit ensures that tstypereferencenodes within default are properly translated into the typecheck file pr close ,fix
983,compilercli use typescript transform to emit type parameter the template type checker is capable of recreating generic type bound in a different context rewriting type reference along the way if possible this wa previously done using a visitor that only supported a limited set of type resulting in the inability to emit all sort of type even if they dont contain type reference at all the inability to emit generic type bound wa not critical when the type parameter emitting logic wa introduced a the compiler also ha a fallback strategy of creating inline type constructor however this fallback is not available to the language service resulting in inaccurate type when componentsdirectives use a complex generic type to mitigate this problem the specialized visitor ha been replaced with a generalized typescript transform where only type reference get special treatment this allows for more complex type to be emitted such a union and intersection type object literal type and tuple type pr close ,refactor
984,compiler generate view restoration for keyed write inside template listener if an implcit receiver is accessed in a listener inside of an ngtemplate we generate some extra code in order to ensure that were assigning to the correct object the problem is that the logic wasnt covering keyed writes which caused it to write to the wrong object and throw an assertion error at runtime these change expand the logic to cover keyed writes fix pr close ,fix
985,compilercli support xin in ngtsc xin is the operation of extracting in message from template in the compilation previously only view engine wa able to perform xin this commit implement xin in the ivy compiler and a copy of the view engine test for ivy verifies that the result are identical pr close ,refactor
986,compilercli extract xin utility function to a separate file this commit move some xinrelated function in the view engine ngprogram into a new file this is necessary in order to depend on them from the ivy ngprogram while avoiding a cycle pr close ,refactor
987,devtools update dependency webpack to v rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
988,docsinfra document how to configure redirects pr close ,docs
989,docsinfra autogenerate sw navigationurls from firebase config previously redirects had to be configured in both the firebase config firebasejson and the serviceworker config ngswconfigjson this made it challenging to correctly configure redirects since one had to understand the different format of the two configs and wa also prone to getting outofsync configs this commit simplifies the process of adding redirects by removing the need to update the serviceworker config ngswconfigjson and keep it in sync with the firebase config firebasejson instead the serviceworker navigationurls are automatically generated from the list of redirects in the firebase config note currently the automatic generation only support the limited set of pattern that are necessary to translate the existing redirects it can be made more sophisticated in the future should the need arise pr close ,build
990,docsinfra align navigationurls in ngswconfigjson with firebase redirects the serviceworker navigationurls glob defined in ngswconfigjson are supposed to exclude any url that are redirected on the server a configured in firebasejson however the list of redirected urlsglobs in firebasejson and ngswconfigjson have gotten out of sync this commit update the glob in ngswconfigjson to match the one in firebasejson this is in preparation of automatically generating the serviceworker navigationurls based on firebasejson pr close ,build
991,docsinfra alphabetically sort all navigationurls in ngswconfigjson this commit sort all navigationurls in ngswconfigjson alphabetically this is in preparation of automatically generating the serviceworker navigationurls based on firebasejson pr close ,build
992,docsinfra allow a trailing in more navigationurls glob in ngswconfigjson previously we were not consistent in allowing a trailing in navigationurls glob in ngswconfigjson and when we did we used two glob one with and one without the trailing this commit update all appropriate navigationurls glob to allow a trailing it also merges the two glob pattern the one with and the one without the into one this is in preparation of automatically generating the serviceworker navigationurls based on firebasejson pr close ,build
993,docsinfra remove redundant navigationurls glob from ngswconfigjson this commit remove some navigationurls glob from ngswconfigjson that have no effect more specifically it remove glob of the form xyzhtml since these are already covered by the more generic glob it remove apingfor since it doe not have a corresponding redirect rule in firebasejson this is in preparation of automatically generating the serviceworker navigationurls based on firebasejson pr close ,build
994,docsinfra add missing redirect rule for api in firebasejson previously only subpaths such a api were redirected to guidedeprecations this commit ensures that also api itself which used to point to the module api page is redirected a well pr close ,build
995,docsinfra ensure all redirect rule are tested this commit add a test assertion to verify that all redirect rule defined in firebasejson are tested ie that each rule is applied to at least one testcase from urlstoredirecttxt this will ensure that any redirect rule added in the future will be tested pr close ,test
996,docsinfra unnest unnecessarily nested test suite previously the destination test suite in testfirebaseredirectionspects wa nested under the with legacy url test suite however the two suite are unrelated and there is no reason to have them nested this commit move the destination test suite to be beside instead of inside the with legacy url one pr close ,test
997,docsinfra add testcases for all redirect rule this commit add testcases in urlstoredirecttxt for all redirect rule defined in firebasejson this ensures that all rule are tested and work a expected pr close ,test
998,docsinfra make notificationcomponent element nonfocusable when hidden previously the notificationcomponent would be hidden by reducing it height to this allowed for a smoother hide animation when closing the notification but left the component interactive element focusable via keyboard navigation this wa confusing for user because the focused element would not be visible on the page this commit fix the issue be also setting the display cs property to none when the notificationcomponent is hidden thus ensuring that it content are not focusable via keyboard navigation this doe not affect the hide animation since the display style is not animatable and is only applied at the end of the animation pr close ,fix
999,docsinfra remove redundant maticon element previously we included a dummy maticon element in appcomponent in order to ensure that the material icon font would be requested and thus cached by the serviceworker on every navigation however introduced the themetogglecomponent which will be present on all page since it is located in the topmenu and relies on the material icon font therefore the workaround for loading the material icon font is no longer necessary this commit remove the now redundant maticon from appcomponent pr close ,fix
1000,docsinfra convert external link to maticonbuttons this commit change the anchor element used for external link to maticonbuttons while the appearance remains the same with the exception of hoverfocus style this better aligns the styling of external link icon with other nearby icon button ie the theme toggle and alows a to simplify the cs for external link since much of their styling is handled by angular material pr close ,fix
1001,docsinfra remove redundant cs rule since we now use svg for external link icon there are no img element inside the anchor element so the cs rule doe not match any element and can be removed pr close ,refactor
1002,docsinfra remove disambiguator doctype now that we disambiguate file by encoding the outputpath there is no need for the disambiguator doctype pr close ,build
1003,docsinfra use caseinsensitive encoding for content file to avoid having content file that have the same file path on caseinsensitive filesystems we now encode the path to remove uppercase character pr close ,build
1004,router error if module is destroyed before location is initialized this is something i ran into while working on a fix for the testbed module teardown behavior for in the routerinitializerappinitializer we have a callback to the locationinitialized which ha to do some di lookup the problem is that if the module is destroyed before the location promise resolve the injectorget call will fail this is unlikely to happen in a real app but itll show up in unit test once the test module teardown behavior is fixed pr close ,fix
1005,core add optin test module teardown configuration we currently have two longstanding issue related to how testbed test are torn down the dynamicallycreated test module isnt going to be destroyed preventing the ngondestroy hook on provider from running and keeping the component style node in the dom the test root element arent going to be removed from the dom instead they will be removed whenever another test component is created by themselves these issue are easy to resolve but given how long theyve been around there are a lot of unit test out there that depend on the broken behavior these change address the issue by introducing apis that allow user to opt into the correct test teardown behavior either at the application level via testbedinittestenvironment or the test suite level via testbedconfiguretestingmodule at the moment the new teardown behavior is optin but the idea is that well eventually make it optout before removing the configuration altogether fix pr close ,feat
1006,devtools switch to sas use and new angular material theming api rangleangulardevtools previously we were using sas import rule to bring in material and other styling now we are using the use rule and have switched over to the new angular material theming api ,refactor
1007,devtools prevent mat button cs from leaking out of property view header rangleangulardevtools previously the property view header component had mat button styling nested in an ngdeep selector this broke some styling in the info popup whenever an item wa selected in the component explorer because the existence of a selected component cause the property view header tab to render and thus brings in the leaky component cs now the leaky styling ha been removed and the component cs ha been cleaned up ,fix
1008,docsinfra make anchor in list item inherit lineheight in order to have a consistent lineheight between list item containing text and list item containing link the anchor should inherit the list item lineheight pr close ,fix
1009,docsinfra add horizontal margin to nav menu add a px left and right margin to the aionavmenu to make sure that the item outline doesnt get cropped pr close ,fix
1010,docsinfra fix width of sidenav icon make sure that the width of the sidenav chervon icon is rem this need to be done using the flex property and not the width one a that can change in flex container also center chevron icon inside maticon container in order to maintain the correct icon positioning at any fontsize pr close ,fix
1011,docsinfra prevent vertical nav item overflowing prevent the overflowing unwanted effect that happens during a nav item opening and closing during the chevron rotation pr close ,fix
1012,docsinfra improve card layout for different browser font size remove the fixed height set on the card element present in angulario allowing the card to have a dynamic height derived from their content and thus removing overflow issue related to the browser fontsize make other minor cs related adjustment to allow the card to look good on the different browser fontsize setting pr close ,fix
1013,form correct sample code for formarrayreset remove unexpected this correct output comment for arrvalue and correct parameter type for formarrayget pr close ,docs
1014,docsinfra add support for special element this commit add support for generating page that document special angular element such a ngcontent and ngtemplate which have special behavior in angular but are not directive nor component resolve pr close ,feat
1015,languageservice go to defininition for object defined in template previously the go to definition action did no account for the possibility that something may actually be defined in a template this change update the logic in the definition builder to convert any result that are location in template typecheck file to their corresponding location in the template pr close ,fix
1016,languageservice use last child end span for parent without close tag unclosed element tag are not assigned an endsourcespan by the parser a a result the visitor which determines the target node at a position for the language service wa unable to determine that a given position wa inside an unclosed parent this happens because we update the endsourcespan of templateelement node to be the end tag and there is not one for unclosed tag consequently the visitor then can not match a position to any child node location this change update the visitor logic to check if there are any child of a templateelement node and update the end span to be the end span of the last child this allows our iswithin logic to identify that a child position is within the unclosed parent address one of the issue found during investigation of pr close ,fix
1017,compiler always match close tag to the nearest open element this commit update the parser logic to continue to try to match an end tag to an unclosed open tag on the stack previously it would only push an error to the list and stop looking at unclosed element for example the invalid html of lidivli ha an unclosed element stack of li div when it encounter the close li tag we compare against the previously unclosed tag div and see that this is unexpected instead of simply giving up here we continue to move up the unclosed tag until we find a match if there is one pr close ,fix
1018,form change to status not always being emitted to statuschanges observable for async validators when a formcontrol formarray or formgroup is first constructed if an async validator is attached the statuschanges observable should receive a message when the validator complete ie pending validinvalid if the validator wa provided a part of the constructor option it wa not fired at construction time which is fixed in this pr fix pr close ,fix
1019,docsinfra correctly serve indexhtml with a query string previously due to a bug in firebase hosting request to indexhtmlquery would lead to an infinite redirect and eventually a failure this affected for example cachebusting request from the serviceworker which look like indexhtmlngswcachebust for more detail see this commit temporarily work around the bug by explicitly redirecting indexhtmlquery to query fix pr close ,fix
1020,docsinfra implement popup to inform about the use of cooky this commit add a popup to angulario to inform the user about the use of cooky once the user confirms having read the info the popup will not be shown on subsequent visit this commit is partly based on angularmaterialangulario fix pr close ,feat
1021,docsinfra provide localsessionstorage via di previously we had the same logic in a couple of place to safely access the window localsessionstorage and provide a noop fallback if necessary soon we will need the same logic for the cooky popup see this commit reduces code duplication by providing localsessionstorage a injectables and sharing the logic for accessing them safely this also make it easier to mock the storage in test without having to mess with the actual window object note this commit actually decrease the payload size in the main bundle by b pr close ,refactor
1022,docsinfra fix warning in themetogglecomponent unit test due to unknown maticon element this commit fix some warning in the unit test of the themetogglecomponent which were caused by the following the maticon element used in togglethemecomponents template wa not declared in test the darkthemecss and lightthemecss file requested by togglethemecomponent were not available pr close ,test
1023,docsinfra align code with new cli v apps this commit aligns the angulario config file more closely to how a newly generated cli v app would look like this help validate the setup and make it easier to apply new chages in the future by preventing the angulario layout from deviating too much from the default new app layout pr close ,build
1024,packaging remove rehype rehype dependency is now moved to the dgenipackage thus it can be removed from the main dependency list pr close ,build
1025,router compute correct history restoration when navigation is cancelled we can ’ t determine whether the user actually meant the back or the forward using the popstate event triggered by a browser backforward so we instead need to store information on the state and compute the distance the user is traveling withing the browser history so by using the historygo method we can bring the user back to the page where he is supposed to be after performing the action implementation for pr close ,refactor
1026,devtools update angularcli to ff rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
1027,zonejs only one listener should also rethrow an error correctly close in the previous commit the error thrown in the event listener will be caught and rethrown but there is a bug in the commit if there is only one listener for the specified event name the error will not be rethrown so this commit fix the issue and make sure the error is rethrown pr close ,fix
1028,compilercli prevent prior compilation from being retained in watch build in watch build the compiler attempt to reuse a much information from a prior compilation a possible to accomplish this it keep a reference to the most recently succeeded traitcompiler which contains all analysis data for the program however traitcompiler ha an internal reference to an incrementalbuild which is itself built on top of it prior state consequently all prior compilation continued to be referenced preventing garbage collection from cleaning up these instance this commit change the analyzedincrementalstate to no longer retain a traitcompiler instance but only the analysis data it contains this break the retainer path to the prior incremental state allowing it to be garbage collected pr close ,fix
1029,core ensure that autoregistermodulebyid registration in ɵɵdefinengmodule is not dceed by closure previously the autoregistermodulebyid registration wa marked with nosideeffects wrapper to ensure that we dont end up retaining all ngmodules however the return value wa not referenced by anything so closure compiler removed it because it determined that this code ha no side effect and is not referenced by anyone this issue affect apps that use closure compiler and also rely on to retrieve factory by id this combination is used heavily in google especially in pantheon fix b pr close ,fix
1030,docsinfra upgrade cli command doc source to bbdd updating angularmaster from clibuildsmaster relevant change in commit range modified helpgeneratejson pr close ,build
1031,form undo revert and add ngsubmitted class to form that have been submitted a previously discussed in pull and issue this would be useful because it is often desirable to apply style to field that are both nginvalid and ngpristine after the first attempt at form submission but angular doe not provide any simple way to do this although evidently angularjs did this will now be possible with a descendant selector such a ngsubmitted nginvalid in this implementation the directive that set control status class on form and formgroups ha it set of status widened to include ngsubmitted then in the event that issubmitted is invoked the submitted property of the control container is returned iff it exists this is preferred over checking whether the container is a form or formgroup directly to avoid reflecting on those class close pr close this reverts commit bdaabdccebcabd undoing the rollback of this change pr close ,feat
1032,platformserver added command for universal and add prerendering info fix pr close ,docs
1033,docsinfra prepare documentservice to handle new disambiguated url a subsequent commit is going to change disambiguated url this commit prepares the aio application to attempt the new url if the old url fail this will help to mitigate problem that may occur during the period between deployment of the new version and the serviceworker not being updated pr close ,refactor
1034,router fix serializequeryparams logic corrects a bug that resulted in query params such a queryparamsa b being serialized a a instead of a resolve pr close ,fix
1035,core describe interaction between viewencapsulated component this commit add information to the view encapsulation guide that describes the styling interaction between component that use differing view encapsulation mode close pr close ,docs
1036,languageservice fix autocomplete info display for some case before this commit attribute completion display part were retrieved but not assigned in addition the switch case wa nonexhaustive because it did not include structuraldirectiveattribute pr close ,fix
1037,router fix codeexample header previously the codeexamples header used in the creating custom route match tutorial contained the name of the example directory routingwithurlmatcher this wa confusing because the user wa previously instructed to create an app named angularcustomroutematch and switch to that directory this commit fix it by removing the root directory name from the header thus leaving the path of the file relative to the current working directory this also aligns with codeexamples in other guide pr close ,docs
1038,compiler emit diagnostic for shadow dom component with an invalid selector this is based on a discussion we had a few week ago currently if a component us viewencapsulationshadowdom and it selector doesnt meet the requirement for a custom element tag name a vague error will be thrown at runtime saying something like element doe not support attachshadowroot these change add a new diagnostic to the compiler that validates the component selector and give a better error message during compilation pr close ,feat
1039,core clarify deprecation of entrycomponents these may still be needed in view engine library close pr close ,docs
1040,docsinfra fix search result font color use the same white constant for no result message pr close ,fix
1041,core support typescript switch the repository to typescript and the latest version of tslib this involves updating the peer dependency range on typescript for the compiler cli and for the bazel package test for new typescript feature have been added to ensure compatibility with angulars ngtsc compiler pr close ,feat
1042,devinfra always use same virtual git client instance in publish test with the recent refactorings to gitclient where singleton are created and can be retrieved through a static method the test ha been updated to also install spy for the static method of gitclient this commit update the spy installation so that the same mock git client is used that is also passed manually to the release action having two separate instance of the mock git client could result in falsepositive test result pr close ,test
1043,devinfra improve typesafety of git client utility currently the gitclient accepts a generic parameter for determining whether the githubtoken should be set or not this worked fine so far in term of distinguishing between an authenticated and nonauthenticated git client instance but if we intend to conditionally show method only for authenticated instance the generic parameter is not suitable this commit split up the gitclient into two class one for the base logic without any authorization and a second class that extends the base logic with authentication logic ie the authenticatedgitclient this allows u to have specific method only for the authenticated instance eg hasoauthscopes ha been moved to only exist for authenticated instance the graphql functionality within gitclientgithub is not accessible for nonauthenticated instance graphql api requires authentication a per github the initial motiviation for this wa that we want to throw if hasoauthscopes is called without the octokit instance having a token configured this should help avoiding issue a within that prevented the caretaker process momentarily additionally the git client ha moved from indexts to gitclientts for better discoverability in the codebase pr close ,refactor
1044,docsinfra disable critical cs inlining previously the critical cs inlining optimization which is turned on by default in cli v wa causing a flash of unstyled content fouc this wa caused by the combination of the following fact the way cs inlining is implemented in the cli make loading the full style asynchronous and nonrenderblocking so the app can bootstrap before the style are fully downloaded angulario doe not employ the app shell pattern in order to render page at build time resulting in very minimal cs rule being recognized a critical for the purpose of inlining this commit fix the fouc by disabling the critical cs inlining while we consider a better way to approach this in order to be able to rip the benefit of inlining without the fouc fix pr close ,build
1045,compiler support safe keyed read expression currently we support safe property ab and method ab access but we dont handle safe keyed read a which is inconsistent these change expand the compiler in order to support safe key read expression a well pr close ,feat
1046,form add ngsubmitted class to form that have been submitted a previously discussed in pull and issue this would be useful because it is often desirable to apply style to field that are both nginvalid and ngpristine after the first attempt at form submission but angular doe not provide any simple way to do this although evidently angularjs did this will now be possible with a descendant selector such a ngsubmitted nginvalid in this implementation the directive that set control status class on form and formgroups ha it set of status widened to include ngsubmitted then in the event that issubmitted is invoked the submitted property of the control container is returned iff it exists this is preferred over checking whether the container is a form or formgroup directly to avoid reflecting on those class close pr close ,feat
1047,devinfra always use enus locale for printing date in merge tool in the devinfra merge tool a test fails locally if it run on a system with a different system locale we can either make the test more flexible or update the merge tool to always print the date in enus format the latter is more reasonable given our console message being in english anyway pr close ,refactor
1048,compilercli remove unused return type transform with the removal of the modulewithproviders transform in the parent commit the underlying dts transform can also be removed a it is not used elsewhere pr close ,refactor
1049,compilercli remove modulewithproviders generic type transform the modulewithproviders type ha required a generic type since angular so it is no longer necessary for the compiler to transform usage of the modulewithproviders type without the generic type a that should have been reported a a compile error this commit remove the detection logic from ngtsc pr close ,refactor
1050,form the min and max validators should work correctly with a a value prior to this change the min and max validator directive would not set the min and max attribute on the host element the problem wa caused by the truthy check in host binding expression that wa calculated a false when is used a a value this commit update the logic to leverage nullish coalescing operator in these host binding expression so is treated a a valid value thus the min and max attribute are set correctly partially close pr close ,fix
1051,common infer correct type when trackby is used in ngfor when a trackby function is used that accepts a supertype of the iterated array type the loop variable would undesirably be inferred a the supertype instead of the array item type this commit add an inferred type parameter to trackbyfunction to allow an extra degree of freedom enabling the loop value to be inferred a the most narrow type fix pr close ,fix
1052,compilercli move trackbyfunction from fakecommon to fakecore the trackbyfunction is declared in angularcore so it should also be included in fakecore instead of fakecommon pr close ,test
1053,compilercli load type declaration from fakecommon the ngtsc test target have fake declaration file for angularcore and angularcommon and the template type checking test can leverage the fake common declaration instead of declaring it own type pr close ,test
1054,compilercli exclude typeonly import from cycle analysis typeonly import are known to be elided by typescript so the compiler can be certain that such import do not contribute to potential import cycle a such typeonly import are no longer considered during cycle analysis regular import statement that would eventually be fully elided by typescript during emit if none of the imported symbol are used in a value position continue to be included in the cycle analysis a the cycle analyzer is unaware of these elision opportunity only explicit import type statement are excluded pr close ,fix
1055,devtools update angularcli to bdcab rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
1056,common initialize currencycode in currencypipe currencycode should be initialized with the injected default currency code pr close ,fix
1057,docsinfra fix url for ay testing of angulario this commit fix one of the url used for testing the accessibility of angulario from startrouting to startstartrouting the old url is not correct and result in a page not found error this commit also increase some of the ay score pr close ,test
1058,devinfra move shared browser bazel setup into dedicated bazel folder this change move the devinfrabrowsers folder into devinfrabazel the browser folder is providing custom configuration for bazel so it should live within the bazel folder for a more wellstructured devinfra folder pr close ,refactor
1059,devinfra remove duplicate method that check for uncommitted change remove the duplicate haslocalchanges method from the git client we already have hasuncommittedchanges also remove a todo for adding assertnolocalchanges a it seems more flexible to manually check ie better messaging with context on the current tool eg can not perform rebase pr close ,refactor
1060,devtools update angularframework to ea rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
1061,devtools adding ee test for input output property ,test
1062,devtools updating test for input output property name ,test
1063,devtools removing input output rename lint rule adding example for the same ,refactor
1064,devtools incorrect input name ,fix
1065,docsinfra clean up aio sas file clean up aios sas file by switching them all over to the usebased api from angular material removing the import of the material theming api in a bunch of place that werent using it migrating the new usage of sas utility function to the new syntax eg mapget v mapget fixing a few file that were using space for indentation instead of pr close ,refactor
1066,devinfra prevent deprecation from being merged into patch branch a per semver deprecation should only be released if the minor version is incremented this mean that we should error if commits w deprecation target an upcoming patch lts release additionally we also error if deprecation are made a part of an upcoming releasecandidate pr close ,feat
1067,devinfra add jsdoc throw description to assertion function add the jsdoc throw annotation to function that would throw within in the ngdev tool we want to add throw so clearly communicate if the invocation of a function result in error or not this help if ides show the throw annotation on invocation or if t ever land a feature like java throw with more finegrained and typed error handling pr close ,refactor
1068,devinfra breaking change and deprecation note incorrectly picked up if a commit message currently mention the breaking change or deprecation note keywords the commit message parse logic accidentally pick up the note this could then accidentally prevent the commit from being merged eg if the commit target the patch branch but mentioned the breaking change marker this commit switch the commit message note pattern to only capture note at the beginning of a line also allowing accidental whitespace this match with the format we describe in our contribution guide a well a with our commit message validation logic that also assumes note at the beginning of a line pr close ,fix
1069,devinfra validate deprecation note in commit message currently the commit message validation tool from ngdev validates the breaking change commit message note this commit add a similar check for deprecated commit message note additionally the check for breaking change is reworked slightly to be more tolerant ie if there is only a single line break after the summary this is acceptable a per the parser and commonly done in the comp repo the check have been updated to capture wrong keywords that are commonly used instead of the correct one eg if a commit message us deprecation instead of deprecated the validation will fail this prevents changelog generation issue where breaking change note or deprecation are missing this happened in the comp repo where the deprecated keyword wa used incorrectly see pr close ,feat
1070,devtools update angularframework to bab rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
1071,languageservice correct rename info for pipe name expression prior to this pr attempting to get rename info for pipe name expression would defer to the typescript language service which would return no rename info this wa not caught because the test wa written incorrectly this pr corrects the test behavior and adjusts the logic in getting rename info to account for indirect renames like pipe name pr close ,fix
1072,devinfra update outdated buildworkerjs file update the outdated buildworkerjs file this file ha been accidentally not updated when we fixed the octokit authentication to unblock the caretaker ,fix
1073,devinfra github oauth token not picked up by octokit we recently updated octokitrest to a more recent version for this the github client had to be refactored to account for new type of octokit with the refactorings the authentication of the github client broke a we used an incorrect option for setting the oauth token the t transpilation did not fail because the octokit type support arbitrary option in the constructor this is not solvable on our side so we can not prevent similar issue in the future unfortunately adding test for authentication is not a reasonable option either ,fix
1074,devtools update dependency typeschrome to rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
1075,devtools update angularcli to eb rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
1076,compilercli better detect class that are indirectly exported the compiler flag compilenonexportedclasses allows the angular compiler to process class which are not exported at the top level of a source file this is often used to allow for aot compilation of test class inside it test block for example previously the compiler would identify exported class by looking for an export modifier on the class declaration itself this work for the trivial case but fails for indirectly exported class typescript component is declared unexported component class foocmp indirect export of foocmp export foocmp this is not an immediate problem for most application build since the default value for compilenonexportedclasses is true and therefore such class get compiled regardless however in the angular language service now compilenonexportedclasses is forcibly overridden to false thats because the tsconfig used by the ide and language service is often far broader than the application build configuration and pull in test file that can contain unexported class not designed with aot compilation in mind therefore the language service ha trouble working with such structure in this commit the reflectionhost gain a new api for detecting whether a class is exported the implementation of this method now not only considers the export modifier but also scan the tssourcefile for indirect export like the example above this ensures the above case will be processed directly in the language service this new operation is cached using an expando symbol on the tssourcefile ensuring good performance even when scanning large source file with lot of export eg a fesm file under ngcc fix pr close ,fix
1077,docsinfra document the implementation of style incl theming in angulario pr close ,docs
1078,docsinfra improve homepage layout in print mode in the herologo image wa changed from an img element to a div with an image background a a result in print mode where browser often omit background to save ink the logo wa not present this commit fix this by ensuring the word angular is displayed a a title instead of the logo in print mode it also hide the get started button in print mode since it doesnt add any value before homepageprint before after homepageprint after pr close ,fix
1079,docsinfra remove unused typographythemescss file this commit remove the typographythemescss file that is currently not used the file contains a single sas mixin docssitetypographytheme which is never called pr close ,refactor
1080,docsinfra minor refactoringsstyle change this commit includes some minor refactorings and style change a a followup to pr the change were minor enough that didnt warrant blocking the pr pr close ,refactor
1081,devinfra update to later version of octokitrest and remove class extenstion of octokit update octokitrest and remove the usage of a class extension of octokit a the class doe not have a class define constructor pr close ,refactor
1082,form make the form validation guide specify more clearly what happens when mixing html native validators with angular form previously the doc didnt say anything about the fact that the novalidate attribute is added to the enclosing form or how to override that behavior i have added a couple line in the appropriate spot clarifying this issue pr close ,docs
1083,docsinfra fix linting warning this commit fix some linting warning that were printed when running ng lint the warning can be seen in the lint step of this ci job most of the warning were related to the deprecation of passing context to jasmine matcher in favor of using the withcontext matcher introduced in jasmine v pr close ,build
1084,devtools update angularcli to acdfec rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
1085,devtools small type on readmemd rangleangulardevtools a small type fixed on the readmemd file ,docs
1086,devtools update dependency webpack to v rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
1087,devtools update dependency tsickle to rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
1088,devtools update dependency typeschrome to rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
1089,devtools update angularframework to abcb rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
1090,devtools v ,release
1091,devtools show properly dynamically inserted content with dom apis rangleangulardevtools fix rangleangulardevtools build the render tree starting from the root node of the application this fix is applicable only for v apps that are using the latest debugging apis ,fix
1092,devtools delayed angular detection with appinitializer rangleangulardevtools this pr set a timeout for repetitive check if there an angular app on the page fix rangleangulardevtools ,fix
1093,devtools make sure we update the property explorer on state change rangleangulardevtools fix rangleangulardevtools with this pr now we consider not only the property name but also the value of property in the differ comparison the change also contains ee and unit test ,fix
1094,docsinfra implement dark mode defines style for a first iteration of an aio darkmode pr close ,feat
1095,docsinfra create module theme file creates theming file for the module style in aio done a part of the effor to make aio themeable pr close ,feat
1096,docsinfra create typography and layout theme file creates theming file for the aio typography style done a part of the effort to make aio themeable pr close ,feat
1097,docsinfra grab sc mixins with sc use syntax instead of global import move away from global mixins because import is going to be deprecated pr close ,refactor
1098,docsinfra grab sc constant using sc use syntax instead of the global import move away from using global constant in sc file because import will be deprecated soon pr close ,refactor
1099,docsinfra rename namespaced sc to index file sc file were forwarded from file that were named without convention change these file name to follow convention pr close ,refactor
1100,docsinfra port over material io theming logic to angular io brings in theming tool from material io into angular io in preparation of implementing darkmode pr close ,feat
1101,devtools update angularframework to cecum rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
1102,docsinfra remove unused spydirectivegif image the only reference to the spydirectivegif image wa removed in so the image is no longer used this commit remove the file from the repository pr close ,build
1103,devtools update angularcli to d rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
1104,docsinfra allow only nodejs v and above the aio docgen us javascript syntax that requires nodejs or above close pr close ,build
1105,common rewrite doc for ngforofngfortrackby clarify the prupose of the tracking function and document how to create a good one fix pr close ,docs
1106,devtools skip node if there is no associated tviewdata rangleangulardevtools fixbackend skip node if there is no associated tviewdata the code wa assuming that the tviewdata item at the same index a the node in lview would contain a data entry this value can be null which is the case in our app which cause a catastrophic failure in the dev tool by checking for null the node is skipped because it can not determine the associated component or directive and the dev tool doe not die fix issue rangleangulardevtools chore style tweak add early return to avoid nesting ,fix
1107,devtools update angularcli to c rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
1108,devtools update dependency typeschrome to rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
1109,devinfra build with stamping for release build ngdev release build should always build with version stamping rather than snapshot stamping pr close ,fix
1110,devtools update angularframework to cc rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
1111,devinfra add ngdev buildandlink command add a command to build the release output without stamping for release and link via yarn link the generated build to a project provided pr close ,feat
1112,devinfra add support for determining if build should be stamped add support for the build process to determine if the generated build should be stamped for release pr close ,feat
1113,form add float number support for min and max validator added float number support for minvalidator and maxvalidator close pr close ,fix
1114,platformbrowser update started state on reset this commit fix the state of variable started on call of reset method earlier behaviour wa on call of reset method we are not setting back started flag value to false and it created various issue for end user which were expecting this behaviour a per name of method we provided end user reset method but it wa empty method and on call of it wasnt doing anything a end userdeveloper were not able to reuse animation not animation after call of reset method in this pr on call of reset method we are setting flag started value to false which can be accessed by hasstarted resolve pr close ,fix
1115,devinfra add release note generation to ngdev add tooling to create adhoc release note entry via ngdev release note pr close ,feat
1116,devinfra move the release note into it own directory under release move the release note tooling under it own directory under release rather than within publish in preparation to have a release note generation command for adhoc release note generation pr close ,refactor
1117,docsinfra increase the opacity of backgroundcolor for inline code block i intentionally did not change the font size a discussed in because the current font size is already about the same a the normal text size fix pr close ,fix
1118,devinfra format command incorrectly print outdated file when ngdev format check is run the ngdev tool print out all file that are outofdate we recently updated the format tool to also capture stderr for failed file this broke the console message a we did not unwrap the formatfailure to their file path when printing the ngdev format fix command pr close ,fix
1119,core update supported range of node version to be le restrictive update the supported range of node version for to be le restrictive no longer causing yarn or npm to fail engine check for future version of node while this change will no longer cause yarn or npm to fail these engine check this doe not reflect a change in the officially supported version of node for angular angular continues to maintain support for active lts and maintenance lts version of node pr close ,build
1120,upgrade update supported range of node version to be le restrictive update the supported range of node version for to be le restrictive no longer causing yarn or npm to fail engine check for future version of node while this change will no longer cause yarn or npm to fail these engine check this doe not reflect a change in the officially supported version of node for angular angular continues to maintain support for active lts and maintenance lts version of node pr close ,build
1121,serviceworker update supported range of node version to be le restrictive update the supported range of node version for to be le restrictive no longer causing yarn or npm to fail engine check for future version of node while this change will no longer cause yarn or npm to fail these engine check this doe not reflect a change in the officially supported version of node for angular angular continues to maintain support for active lts and maintenance lts version of node pr close ,build
1122,router update supported range of node version to be le restrictive update the supported range of node version for to be le restrictive no longer causing yarn or npm to fail engine check for future version of node while this change will no longer cause yarn or npm to fail these engine check this doe not reflect a change in the officially supported version of node for angular angular continues to maintain support for active lts and maintenance lts version of node pr close ,build
1123,platformserver update supported range of node version to be le restrictive update the supported range of node version for to be le restrictive no longer causing yarn or npm to fail engine check for future version of node while this change will no longer cause yarn or npm to fail these engine check this doe not reflect a change in the officially supported version of node for angular angular continues to maintain support for active lts and maintenance lts version of node pr close ,build
1124,platformbrowser update supported range of node version to be le restrictive update the supported range of node version for to be le restrictive no longer causing yarn or npm to fail engine check for future version of node while this change will no longer cause yarn or npm to fail these engine check this doe not reflect a change in the officially supported version of node for angular angular continues to maintain support for active lts and maintenance lts version of node pr close ,build
1125,platformbrowserdynamic update supported range of node version to be le restrictive update the supported range of node version for to be le restrictive no longer causing yarn or npm to fail engine check for future version of node while this change will no longer cause yarn or npm to fail these engine check this doe not reflect a change in the officially supported version of node for angular angular continues to maintain support for active lts and maintenance lts version of node pr close ,build
1126,localize update supported range of node version to be le restrictive update the supported range of node version for to be le restrictive no longer causing yarn or npm to fail engine check for future version of node while this change will no longer cause yarn or npm to fail these engine check this doe not reflect a change in the officially supported version of node for angular angular continues to maintain support for active lts and maintenance lts version of node pr close ,build
1127,languageservice update supported range of node version to be le restrictive update the supported range of node version for to be le restrictive no longer causing yarn or npm to fail engine check for future version of node while this change will no longer cause yarn or npm to fail these engine check this doe not reflect a change in the officially supported version of node for angular angular continues to maintain support for active lts and maintenance lts version of node pr close ,build
1128,form update supported range of node version to be le restrictive update the supported range of node version for to be le restrictive no longer causing yarn or npm to fail engine check for future version of node while this change will no longer cause yarn or npm to fail these engine check this doe not reflect a change in the officially supported version of node for angular angular continues to maintain support for active lts and maintenance lts version of node pr close ,build
1129,element update supported range of node version to be le restrictive update the supported range of node version for to be le restrictive no longer causing yarn or npm to fail engine check for future version of node while this change will no longer cause yarn or npm to fail these engine check this doe not reflect a change in the officially supported version of node for angular angular continues to maintain support for active lts and maintenance lts version of node pr close ,build
1130,compiler update supported range of node version to be le restrictive update the supported range of node version for to be le restrictive no longer causing yarn or npm to fail engine check for future version of node while this change will no longer cause yarn or npm to fail these engine check this doe not reflect a change in the officially supported version of node for angular angular continues to maintain support for active lts and maintenance lts version of node pr close ,build
1131,compilercli update supported range of node version to be le restrictive update the supported range of node version for to be le restrictive no longer causing yarn or npm to fail engine check for future version of node while this change will no longer cause yarn or npm to fail these engine check this doe not reflect a change in the officially supported version of node for angular angular continues to maintain support for active lts and maintenance lts version of node pr close ,build
1132,common update supported range of node version to be le restrictive update the supported range of node version for to be le restrictive no longer causing yarn or npm to fail engine check for future version of node while this change will no longer cause yarn or npm to fail these engine check this doe not reflect a change in the officially supported version of node for angular angular continues to maintain support for active lts and maintenance lts version of node pr close ,build
1133,bazel update supported range of node version to be le restrictive update the supported range of node version for to be le restrictive no longer causing yarn or npm to fail engine check for future version of node while this change will no longer cause yarn or npm to fail these engine check this doe not reflect a change in the officially supported version of node for angular angular continues to maintain support for active lts and maintenance lts version of node pr close ,build
1134,animation update supported range of node version to be le restrictive update the supported range of node version for to be le restrictive no longer causing yarn or npm to fail engine check for future version of node while this change will no longer cause yarn or npm to fail these engine check this doe not reflect a change in the officially supported version of node for angular angular continues to maintain support for active lts and maintenance lts version of node pr close ,build
1135,docsinfra temporarily serve the devtools guide at devtools too the latest sw app version know that devtools should be redirected to guidedevtools however if a user ha an older app version installed and until the sw downloads the latest version they will get a when navigating to devtools the reason is that the sw will see devtools a a regular navigation url and serve indexhtml instead the angular app will then try to get the content for devtools by fetching generateddocsdevtoolsjson which doe not exist this commit fix the issue by redirecting generateddocsdevtoolsjson to geenrateddocsguidedevtoolsjson when a user visit devtools for the first time they will still be able to see the guide content while the sw update in the background on subsequent visit once the sw ha downloaded the latest app version they will be redirected to guidedevtools at a later time once we are confident that the majority of user will have updated to a newer app version we can remove this temporary redirect pr close ,build
1136,devtools update dependency tsnode to v rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
1137,core tighten up pipetransform example type the example wa using any type but then assuming that the value wa a string fix pr close ,docs
1138,devinfra use template string for release note template use template string for release note template rather than loading ejs file at runtime pr close ,fix
1139,devtools v ,release
1140,devtools add call signature ,style
1141,devtools fix flaky test using cypress orb rangleangulardevtools ci refactor circle config to use cypress orb ci skipping unit test while validating ee run ci fix karma chrome launch ci investigating karma headless failure ci iterating on failure ci move environment to executor build revert karma config change ci update karma config coauthoredby mgechev mgechevgmailcom ,ci
1142,devtools improve dark mode style when no ivy detected ,fix
1143,devtools update the prod mode detection to also consider ve apps fix rangleangulardevtools ,fix
1144,devtools dont access service prop unnecessarily the code wa requesting index of each item in the lview before checking if it is an array this cause issue with service that only allow call to property that are defined on the service backed by a strict e proxy a check if the type is array first corrects this issue fix issue rangleangulardevtools ,fix
1145,migration add migration to replace deep with ngdeep with this change we add a migration to replace the deprecated shadowpiercing selector from deep with deprecated but recommended ngdeep the main motivation for this change is that the cs optimizer cssnano which is used by the angular cli no longer support this non standard selector and cause build time error due to the selector being minified incorrectly however cssnano doe support the recommended deprecated ngdeep selector close pr close ,fix
1146,docsinfra fix example compilation issue fix an issue that prevented the http test stackblitz and testing test stackblitz from compiling resolve pr close ,fix
1147,devinfra formatting error not reported with failure message currently if formatting for a file fails due a formatter error the ngdev tool report that formatting failed but no actual error or involved file is printed out this commit print out the failed file with their error message pr close ,fix
1148,devtools prevent directive forest hook from being initiated in production application ,fix
1149,docsinfra correctly test url redirects when the destination url is also redirected since guideupdatingtoversion is being redirected to however vangulario itself is being redirected to angulario while v is the latest stable version a a result guideupdatingtoversion end up being redirected to currently this cause a ci failure in the aiomonidoting job example failure this will change once v is released a the new stable version alternatively we could update the config and test to expected guideupdatingtoversion to be redirected to but that would end up being redirected to once v would be released which is different behavior this commit provides a way to test for redirects when the destination url is itself redirected to a different url this allows u to use the intended url for example which will continue to work a expected regardless of what is the latest stable version without causing ci failure pr close ,test
1150,devtools update angularcli to da ,build
1151,devtools update issue template ,docs
1152,devtools update angularframework to dcbd ,build
1153,devtools update dependency typeschrome to ,build
1154,devtools updating contributing doc ,docs
1155,devtools update dependency webpack to v ,build
1156,docsinfra upgrade cli command doc source to cbbf updating angularmaster from clibuildsmaster relevant change in commit range modified helpservejson pr close ,build
1157,devtools wrong label in the profiler ,fix
1158,devinfra correct formatconfig interface correct the formatconfig interface to use key string instead of the incorrect keyof string pr close ,fix
1159,devinfra publish major version to next npm dist tag previously the devinfra release tool would publish major version directly to the npm latest dist tag this is correct in theory but rather unpractical given that we want to publish package first a next so that other dependent angular package can update too allowing u to publish all main angular package from fw comp and tool at the same time to latest on npm this involves creating a new release action for retagging the previously released major a latest on npm pr close ,feat
1160,devinfra improve type safety of npm dist tag in release tool instead of passing string in the release tool for npm dist tag we should use a union string type that limit the tag to latest next and anything matching vnumberlts this avoids mistake at compilationlevel if an invalidunknown tag would be set by a release action pr close ,refactor
1161,compiler unclear lexer error when using private identifier in expression typescript support ecmascript private identifier it can happen that developer intend to access such member from within an expression this currently result in an unclear error from the lexer eg parser error unexpected token at column in myfield in ctestts we could improve such error by tokenizing private identifier similar to how the typescript scanner process them later we can report better error in the expression parser or in the typecheck block this commit cause all private identifier token to be disallowed so it never reach the type checker this is done intentionally a private identifier should not be considered valid angular syntax especially because private field are not guaranteed to be accessible from within a componentdirective definition eg there case where a template function is generated outside of the class which result in private member not being accessible and this result in mixedconfusing behavior fix pr close ,fix
1162,devtools adding link to chrome web store and using yarn ,docs
1163,devtools updating documentation ,docs
1164,docsinfra fixed broken stackblitz example this commit fix the broken stackblitz example close pr close ,build
1165,devtools update dependency typeschrome to ,build
1166,devtools update angularframework ,build
1167,devtools update angularcomponents to v ,build
1168,devtools update dependency ngpackagr to v ,build
1169,benchpress reword a comment this is a follow up on pr to change the wording of the comment explaining the fix pr close ,docs
1170,devinfra add testing for integration of releasenotes in publishing tooling add testing of the releasenotes integration with the release publishing tooling pr close ,test
1171,devinfra remove invoke bazel clean command from release tool currently the ngdev release tool always run bazel clean before calling the configured build release function the clean is necessary to ensure the release output is actually built and not restored from previous build which could have different bazel workspace status variable which provide the npm package version instead of doing this a part of the release tool the actual script running to build the release output should run the bazel clean the release tool doe not intend to know about detail on how the release output is built this is necessary because the build setup could vary between version branch especially for older one such a lts version branch pr close ,refactor
1172,core global listener not being bound on nonnode host element we skip event listener on nonelement host node eg ngcontainer or ngelement because they dont map to a dom node so there nothing to bind the event to the problem is that this also prevents listener bound to global target from being bound these change add an extra condition to allow for the event to be bound if it ha a custom event target resolver fix pr close ,fix
1173,benchpress update the check for start and end event recently performance event started showing up with a bpstart and bpend suffix to indicate their being the start and end event for our performance testing to fix this we added an additional check for those suffix in addition to the old check pr close ,fix
1174,form registeronvalidatorchange should be called for ngmodelgroup the validator and asyncvalidator interface provide a callback registeronvalidatorchangefn registeronvalidatorchange is supposed to be fired at least once to register fn with the validator fn is then called by the validator whenever it input change this wa previously not happening for formgroup validators and is now fixed pr close ,fix
1175,docsinfra upgrade cli command doc source to fadce updating angularmaster from clibuildsmaster relevant change in commit range modified helpupdatejson pr close ,build
1176,devtools use the aio doc link rather than github ,fix
1177,docsinfra update doc example to angular v this commit update the example boilerplate to angular v the diff is fairly trivial and the migration did not produce any code change pr close ,build
1178,devtools consistent branding ,build
1179,devtools update dependency typeschrome to ,build
1180,devtools update angularcli to d ,build
1181,devtools breadcrumb algorithm when there is no parent available ,fix
1182,devtools preserve proper nesting in flattened node list rather than naively filter the flattened list preserve the nesting by filtering the original tree ,fix
1183,devtools recognize app after reopening devtools previously angular devtools did not recognize the angular application the second time the user reopens the extension tab webpack wa preventing u to invoke twice a module with the same name this pr change the contentscript to a library allowing u to invoke it multiple time ,fix
1184,devtools remove log statement and update style when no ng app found ,refactor
1185,devtools update dependency webpack to v ,build
1186,devtools update angularframework to aa ,build
1187,devtools expand node ancestor on component inspection previously if a component wa inspected with the component inspector and that component wa collapsed in the component explorer the component would be selected but would not be viewable until the explorer wa manually expanded now ancestor are expanded on component inspection ,feat
1188,devtools focus search input when icon is clicked previously clicking the search icon on the component explorer did nothing now it focus search input on click ,feat
1189,devtools better naming and removal of log statement rangleangulardevtools ,refactor
1190,platformbrowser prevent memory leak of style node if shadow dom encapsulation is used prior to this change any inserted style node into shadow dom tree would be retained in memory even after the shadow dom tree ha been removed this commit fix the memory leak by tracking the inserted style node per host element such that removal of the host element also release the style node fix pr close ,fix
1191,docsinfra fixed in broken stackblitz example this commit fix the broken stackblitz example of in close pr close ,build
1192,docsinfra show a disttag when installing the cli on nonstable version it is important to use the correct major version of the angular cli when following the example in the tutorial this commit provides a custom element that render an appropriate disttag in the setup step of the tutorial when the doc are not in stable mode fix pr close ,build
1193,devtools adding tooltips for icon ,feat
1194,core do not retain dynamically compiled component and module the jit compiler ha a mapping from component to the owning ngmodule and track whether a certain ngmodule class ha been verified these map cause any jit compiled component and ngmodule to be retained even if they are no longer referenced from anywhere else this commit switch the map to weakmap to allow garbage collecting any component and ngmodules that are no longer referenced elsewhere fix pr close ,fix
1195,compilercli remove redundant potentialsourcemapurl property now that there is no need to work around the sourcemap bug in typescript we can just use resolvedtemplateurl for the sourcemap url rather than having a separate property pr close ,refactor
1196,compilercli fix typo pr close ,docs
1197,compilercli remove unused import the makediagnostic function is not used in this file pr close ,refactor
1198,compilercli remove t bug workaround the t bug at wa fixed in t so the workaround is no longer required pr close ,refactor
1199,core remove unnecessary cast the a any is no longer needed since providedin can accept any pr close ,refactor
1200,docsinfra remove unused cs rule the ngmoduleiist is no longer used so can be removed pr close ,refactor
1201,docsinfra add ngmodules reference to provided injectables parse the provider property of each ngmodule doc and add this doc to the ngmodules property of each provided injectable pr close ,build
1202,docsinfra associate providedin injectables with their ngmodule such injectables were not appearing in the provider list of their ngmodule this commit update the docgen to support associating these automatically further it also allows developer to mark other injectables that are provided in an ngmodule with a reference to the ngmodule where they are provided the commit also doe a refactoring of the processngmoduledocs dgeni processor code to make it easier to maintain fix pr close ,build
1203,docsinfra update glossary to include the term templateinputvariable template input variable are now described in the glossary pr close ,fix
1204,core optimize call to split and slice while computing version part reduce the number of call made to split and slice while computing version part by deconstructing the result pr close ,refactor
1205,devtools update dependency typeschrome to ,build
1206,devtools update angularframework to bac ,build
1207,devtools update dependency typesjasmine to ,build
1208,compilercli use for the source map url of indirect template indirect template are template produced by a nonliteral expression value of the template field in component the compiler can statically determine the template string but there is not guaranteed to be a physical file which contains the byte of the template string for example the template string may be computed by a concatenation expression a b previously the compiler would use the t file path a the source map path for indirect template this is incorrect however and break source mapping for such template since the offset within the template string do not correspond to byte of the t file this commit return the compiler to it old behavior for indirect template which is to use a the source map url for such template fix pr close ,fix
1209,devtools update dependency typeschrome to ,build
1210,devtools update angularcli to ecefb ,build
1211,devinfra merge tool should ensure that token ha workflow oauth scope currently if a pr modifies any file that configures a github action eg a workflow file the caretaker might face an error when merging such pr remote rejected mergeprtargetx x refusing to allow a personal access token to create or update workflow this happens because github requires the token being used for the push operation to have the workflow scope set this is a special scope added by github to ensure that no change can be made on upstream branch that might expose the githubtoken environment variable which is available for push build and could cause the token being leaked with this commit we enforce that the caretaker add the workflow scope to their github token since pr can only be merged if reviewed thoroughly it acceptable to allow workflow file change being merged through the merge tool by the caretaker especially since we also allow circleci config file being merged with the default repopublicrepo scope pr close ,fix
1212,docsinfra ensure that terminal code snippet render correctly after the change to the langnone styling in code snippet marked with languagenone classcodeshell were being styled with the same foreground and background colour it turn out that most of these ought to be marked languagesh in which case the codeshell style became redundant and ha been removed fix pr close ,build
1213,common add urlsearchparams to request body urlsearch params are by default supported in the browser but are not supported by angularhttp package added support for urlsearchparams fix pr close ,feat
1214,devinfra set the default loglevel of gitclient logging to debug previously by default gitclient would log the command it wa executing at the info level this change move the default level of this logging to debug while still allowing caller of the method to set the log level back to info pr close ,fix
1215,core invoke profiler around ngondestroy lifecycle hook invoke the profiler for ngondestroy lifecycle hook for service component directive and pipe pr close ,fix
1216,devtools update angularframework to aae ,build
1217,devtools updating image ,docs
1218,devtools updating todos ,test
1219,languageservice fully deduplicate reference and rename result rather than deduplicating result a we build them a final deduplication can be done at the end this way there no forgetting to deduplicate result at some level prior to this commit result from template location that mapped to multiple different typescript location would not be deduplicated eg an input binding that is bound to two separate directive pr close ,fix
1220,compilercli adjust generated tcb when checktypeofpipes is false when checktypeofpipes is set to false our tcb currently generates the a statement like the following when pipe appear in the template pipe a anytransformargs this did enable u to get some information from the language service about pipe in this case because we still had access to the pipe instance however because it is immediately cast to any we can not get type information about the transform access that mean action like go to definition find reference quick info etc will return incomplete information or fail altogether instead this commit change the tcb to generate pipetransform a anyargs this give u the ability to get complete information for the l operation listed above pr close ,refactor
1221,languageservice enable renaming of pipe this commit update the logic in the l renaming to handle renaming of pipe both from the name expression in the pipe metadata a well a from the template the approach here is to introduce a new concept for renaming an indirect rename in this type of rename we find rename location in with the native t language service using a different node than the one we are renaming using pipe a an example if we want to rename the pipe name from the string literal expression we use the transform method to find rename location rather than the string literal itself which will not return any result because it just a string so the general approach is determine the detail about the requested rename location ie the targeted template node and symbol for a template rename or the t node for a rename outside a template using the detail of the location determine if the node is attempting to rename something that is an indirect rename pipe selector binding other renames are considered direct and we use whatever result the native tsls return for the rename location in the case of indirect renames we throw out result that do not appear in the template in this case the shim file these result will be for the indirect rename that we dont want to touch but are only using to find template result create an additional rename result for the string literal expression that is used for the inputoutput alias the pipe name or the selector note that renaming is moving towards being much more accurate in it result than find reference when the approach for renaming stabilizes we may want to then port the change back to being shared with the approach for retrieving reference pr close ,feat
1222,languageservice separate reference and rename capability this commit separate the reference and rename function into separate builder so it easier to locate function specific to each pr close ,refactor
1223,languageservice extract utility function for reference and rename this commit extract utility function and separate them from the core logic of the reference and rename builder pr close ,refactor
1224,languageservice update file name for reference and rename this commit renames the file for the reference and rename functionality to indicate that they deal with both reference and rename not just reference pr close ,refactor
1225,compiler stricter type for html ast a node can only be an instance of one of the six class this relation can be accurately expressed using a union type pr close ,refactor
1226,devinfra include release note in github release entry when publishing include the release note entry for the release in the release created on github pr close ,feat
1227,common change missing ngswitch provider error message change error message of invalid ngswitch use and add corner case test pr close ,refactor
1228,docsinfra add support for unformatted codesnippets this commit add support for skipping formatting in aiocode element which are used by codeexample and codepane element under the hood by specifying the language option a root this is useful for codesnippets that include plain text pr close ,feat
1229,devinfra set up new common release note generation tooling enables the new common release note generation within the ngdev release publishing tooling pr close ,feat
1230,docsinfra upgrade cli command doc source to ab updating angularmaster from clibuildsmaster relevant change in commit range modified helpbuildjson helpgeneratejson pr close ,build
1231,compiler preserve page rule in encapsulated style currently the compiler treat page rule in the same way a medium however that is incorrect and it result in invalid cs because page allows style declaration at the root eg page margin and it only allows a limited set of atrules to be nested into it given these restriction we cant really encapsulate the style since they apply at the document level when the user try to print these change make it so that page rule are preserved so that we dont break the user cs more information fix pr close ,fix
1232,docsinfra upgrade cli command doc source to cfeb updating angularmaster from clibuildsmaster relevant change in commit range modified helpgeneratejson helpnewjson pr close ,build
1233,devinfra publish script python check not working on window we recently added a sanity check that ensures that python is available for bazel the check relies on usrbinpython to check if python is available w the correct version the problem is that on window there is no guarantee that the usrbin folder exists so the ngdev release publish command always fails we fix this by just accessing the env binary that is also consulted by script executed within bazel action the env binary can be assumed exist in the shell path and can point u to python a if it would be executed within bazel pr close ,fix
1234,devinfra spawned child process messing with tty output currently we have a common utility method for running command in a child process this method pipe all stdout and stderr but set the stdin to inherited this seemed to work a expected in term of allowing interactive command being executed but it mess with the tty in window and potentially other platform so that color and prompt no longer work properly see attached screenshot we fix this by not inheriting the stdin by default but exposing a dedicated method for interactive command this result in more readable and obvious code too so it worth making this change regardless of the tty issue pr close ,fix
1235,common add body a an optional property on the option of httpclientdelete adding optional body for http delete request option this new param added a an optional so wont break the existing code also provide the capability the send the body when and where it required pr close ,fix
1236,devinfra switch away from deprecated platform execution property bazel no longer recommends the use of remoteexecutionproperties within platform definition bazel intends to replace this attribute with an object literal based attribute called execproperties this simplifies the platform configuration and make it more readable additionally this make inheritance and overriding easier pr close ,refactor
1237,common corrected the wrong formatting removed the extra backtick character for getlocaletimeformat link pr close ,docs
1238,devinfra do not set lts dist tag on package from releasecandidate train currently if a major releasetrain in the releasecandidatefeaturefreeze phase becomes latest we intend to set the npm lts dist tag for all package of the previous major a the old release train in latest move into lts phase the logic for this exists but the release tool set the npm dist tag for all package of the new major this mean that the script might error if a new package is part of the new major or it could cause a deleted package to not receive the lts tag properly pr close ,fix
1239,compiler support directive selector with attribute containing this commit add support for in when selecting attribute resolve testlanguageservice add test to expose bug caused by source file change this commit add a test to expose the bug caused by source file change in between typecheck program pr close pr close ,feat
1240,localize relax error to warning for missing target some localization workflow want to use the extracted source translation file directy back in the project a a target translation file the extraction process generates file that only contain source message and not target message this is actually valid for most translation format but currently the angular localization process expects target translation file to always contain target message and will stop with an error in this case now instead of an error the translation file loader will log a warning and then try to falback to a source message only erroring if this is also missing fix pr close ,fix
1241,devtools get all the property name including getters this pr intentionally ignores symbol because their serialization and deserialization will include extra complexity the change also improve the typing in the continuation function thats passed during serialization ,fix
1242,devtools improve the style in the meta popup ,fix
1243,devtools fix broken integration test ,test
1244,devtools proper dev mode detection when app compiled with closure ,fix
1245,devtools doc link icon rangleangulardevtools ,fix
1246,compilercli expose the linker a a babel plugin this allows the linker to be used a a true babel plugin in a babel configuration file include the linker a follows j plugins angularcompilerclilinkerbabel or if you need to specify configuration option j plugins angularcompilerclilinkerbabel linkerjitmode true pr close ,fix
1247,core asyncpipe now compatible with rxjs add a fix to make sure that rxjs v observable is compatible with asyncpipe this is a typingsonly change for more information see pr close ,fix
1248,devtools adding info popup rangleangulardevtools feat adding info popup update projectsngdevtoolssrclibdevtoolstabsdevtoolstabscomponenthtml coauthoredby minko gechev mgechevgmailcom ,feat
1249,devtools renaming master to main ,fix
1250,devtools updating documentation ,docs
1251,devtools updating documentation ,docs
1252,devtools updating documentation ,docs
1253,devtools adding image and gifs for documentation ,docs
1254,devtools adding router tree documentation ,docs
1255,devtools adding component inspector documentation ,docs
1256,devtools adding overview documentation ,docs
1257,devtools disable animation when running ee testing to fix flaky test ,fix
1258,devtools use material icon in popups ,refactor
1259,devtools set proper icon size ,fix
1260,devtools update script and manifest ,build
1261,devtools disable router tree tab previously the router parser us private apis to create the visualization for the router tree tab now the router parser always return an empty router tree effectively disabling the router tree tab until the necessary framework apis are developed ,fix
1262,devtools adding coverage reportor to gitignore ,fix
1263,devtools updating to karmacoverage and setting clear context to true ,feat
1264,devtools updating to karmacoverage ,feat
1265,docsinfra revert watchr to v to restore docswatch performance watchr v change the way watched directory are scannedwatched thus causing a great increase in the consumed cpu and ram this affect the performance of the docswatch and transitively serveandsync npm script for reference on my local machine it go from cpu and mb ram with v to cpu and gb ram with v this commit pin watchr to version which is the latest version that doe not cause performance issue and disabled automatic update via renovate pr close ,build
1266,form reduce ambiguity in form data flow wording pr close ,docs
1267,common add right contenttype for boolean value with httpclient request body currently a boolean a body is seen a textplain where is should be seen a applicationjson since it is valid json like number pr close ,fix
1268,devtools implement drag to scroll functionality to improve frame navigation rangleangulardevtools ,feat
1269,devtools update dependency typeschrome to rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
1270,devtools update angularcli to cf rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
1271,devinfra remove getbasedir method from gitclient remove the getbasedir method from gitclient a the basedir is determined once during construction and doe not need to be rediscovered the property access should always be used pr close ,fix
1272,core handle multiple in attribute with expression binding when there are multiple attribute that are marked for in translation which contain expression binding we were generating in update opcodes that did not accurately map to the correct value to be bound in the lview each attribute binding were relative to the start of the lview first attribute value rather than to their own this fix pass the current binding index to generatebindingupdateopcodes when processing in attribute to account for this fix pr close ,fix
1273,docsinfra switch over to imgloadinglazy for front page image this should speed up the perceived loading latency a the image loading wont block rendering pr close ,fix
1274,animation ensure consistent transition namespace ordering when including a component in a template the component host element is immediately appended a child of the parent node upon creation hence hostelementparentnode will be a valid reference however if the parent component is being inserted a an embedded view—through ngif for example—then the parent node itself will not have been inserted yet this mean that we can not properly determine the position of the transition namespace a any containselement check will return false given that the partial dom tree ha not been inserted yet even though it will be contained within an existing transition namespace once the partial tree is attached this commit fix the issue by not just looking at the existence of a parent node but rather a more extensive check using the driver containselement method pr close ,fix
1275,compilercli prefer nonaliased export in reference emitter this commit change the reference emitter in the ivy compiler to prefer nonaliased export if they exist this avoids selecting private export that may not be stable eg the reexports that have been added by the view engine compiler such reexports are not stable and are therefore not suitable to be emitted into partial compilation a the output of partial compilation should only reference stable symbol from upstream library an alternative solution ha been considered where viewenginegenerated export would gain a certain prefix such that the ivy compiler could just exclude those export see however that solution would be insufficient in case a library is built using partial compilation and while depending itself on a vecompiled library from earlier version of angular where the magic prefix would be missing for such library ngcc would have generated reexports using the declared name if not already present so this change doe result in choosing the correct export because ngcc always generates reexports using the declared name even if an aliased export is present this change cause those ngccgenerated export to be chosen in downstream library using partial compilation this is unfortunate a it mean that the declared name become effectively public even if the library author wa intentionally exporting it using an alias this commit doe not address this problem it is expected that this should not result in widespread issue across the library ecosystem fix pr close ,fix
1276,core minor improvement to listener instruction make the following improvement to the listener instruction to make them slightly smaller and more memoryefficient remove the default value from the usecapture parameter since it generates more code than just castint to false remove the usecapture and eventtargetresolver parameter from ɵɵsynthetichostlistener since they wont be generated by the compiler a far a i can tell make it so that we dont have to return a target name from a globaltargetresolver this allows u to save on some memory because we can return a reference to the target without having to wrap it in an object literal deprecation eventmanagerplugingetglobaleventtarget is now deprecated and wont be called from ivy code anymore global event will go through addeventlistener pr close ,perf
1277,devtools updating readme rangleangulardevtools doc updating readme doc updating readme ,docs
1278,devtools update angularframework to badd ,build
1279,docsinfra fix handling of clientside error in networking previously example for handling clientside error in networking didnt work when there wa no internet connection caught error is progressevent in such case not errorevent and errorerrormessage is undefined pr close ,docs
1280,core make test more resilient to header offset change update some test where value related to the headeroffset are hardcoded causing them to break when the offset is updated this come up once in a while during refactorings and these change should save u some time in the future pr close ,test
1281,devtools update dependency webpack to v ,build
1282,devtools implement negation in the filtering query language ,feat
1283,devtools dont show comment node by default ,feat
1284,devtools improve output formatting ,feat
1285,devtools implement output profiling ,feat
1286,devtools move the profiler subscription to the native profiler ,refactor
1287,devtools move different profiler implementation to separate file ,refactor
1288,docsinfra upgrade cli command doc source to acfce updating angularmaster from clibuildsmaster relevant change in commit range modified helpaddjson helpanalyticsjson helpdeployjson helpeejson helphelpjson helplintjson helpnewjson helprunjson helptestjson pr close ,build
1289,docsinfra update to latest puppeteer the update to webdriver required an update to puppeteer to ensure that the correct chromium wa downloaded pr close ,build
1290,docsinfra add assert polyfill with this change we add the assert polyfill which is required because timezonemock is a nodejs library which is being used in browser pr close ,build
1291,docsinfra remove srcgenerated from ng test configuration asset are stored in memory during ng test hence since srcgenerated are unused we shouldnt include them pr close ,build
1292,docsinfra update angular package to rc update angular package to rc pr close ,build
1293,devinfra replace chalk require with namespace import since we now use version we can use namespace import and leverage in build type pr close ,fix
1294,devinfra correctly detect prettier config this commit us the correct property name prettier v pretter to check whether prettier is enabled via the config it also fix some typo in devinfra pr close ,fix
1295,devtools update angularframework to bee ,build
1296,docsinfra do not redirect disambiguated url in logic wa added to disambiguate caseinsensitively equal doc pathsurls this process includes appending a d suffix to some pathsurls for example inject unfortunately some of the firebase redirects configured in firebasejson would match these url and redirect them to nonexisting path example failure stable next note this wa not picked up in the regular ci test run for pr because the local devserver and the preview server used to test pr do not support firebaselike redirects this commit fix this by ensuring these disambiguated pathsurls are not matched by the redirect rule by checking whether the part of the suffix after the contains any numeric digit while this check is not ideal it should be good enough for our purpose since the legacy url that we do want to redirect contain suffix such a class function and thus no numeric digit pr close ,fix
1297,docsinfra take disambiguated doc path into account when generating the sitemap in the disambiguatedocspathsprocessor wa introduced to fix an issue with caseinsensitively equal path this processor may alter the path of some doc and thus their final url in the app previously both the disambiguatedocpathsprocessor and the createsitemap processor which relies on the doc computed path to generate the sitemap file were configured to run before the renderingdocs phase however this resulted in the disambiguatedocpathsprocessors running after createsitemap which meant that the sitemap did not include the updated doc path this commit fix it by ensuring that the disambiguatedocpathsprocessor is explicitly run before the createsitemap processor so that the latter will be able to take into account any change made by the former pr close ,build
1298,docsinfra make it easier to identify the failing url in testfirebaseredirectionspects this commit includes the url under test in the test description in testfirebaseredirectionspects to make it easier to identify the affected url when a test fails it also avoids unnecessarily creating multiple firebaseredirector instance by sharing instance between test pr close ,test
1299,docsinfra update firebasetestutils to support regexbased redirects this commit update the utility in firebasetestutils to also support testing firebase redirects that are configured using regular expression via the regex property see the firebase doc for more detail pr close ,test
1300,docsinfra prepare firebasetestutils for accepting regexbased redirects currently the utility for testing firebase redirects assume that the redirects are configured using the globbased source property however firebase also support configuring redirects using regular expression via the regex property see the firebase doc for more detail this commit refactors the utility in firebasetestutils to make it easy to add support for such regexbased redirect configuration pr close ,refactor
1301,docsinfra fix createexample test on window previously the test in createexamplespects made assertion using some hardcoded absolute path something like foobar this caused the test to fail on window where the absolute path are prefixed with the drive letter something like cfoobar this commit us pathresolve to ensure path are converted to the format used on the current o pr close ,test
1302,devtools update angularcli to d ,build
1303,devtools update dependency webpack to v ,build
1304,devtools update issue template ,docs
1305,devinfra create the prettier formatter for ngdev format tooling add support to use prettier for formatting using ngdev format pr close ,feat
1306,devinfra add github token requirement for discovernewconflicts add the github token optionrequirement for the pr discovernewconflicts command pr close ,fix
1307,docsinfra update dgenipackages to fix version list the current version wa not being computed correctly for next and rc deployment of the angulario website fix pr close ,build
1308,compiler strip scoped selector from fontface rule fontface rule can not contain nested selector nor can they be nested under a selector normally this would be a syntax error by the author of the style but in some rare case such a importing style from a library and applying host ngdeep to the imported style we can end up with broken cs if the imported style happen to contain fontface rule this commit work around this problem by sanitizing such case erasing any scoping selector during emulated shadowdom encapsulation style processing fix pr close ,fix
1309,devtools increase the width of the filter ,fix
1310,core update supported range of node version to only include lts version update the supported range of node version for angular to only include supported lts version pr close ,fix
1311,upgrade update supported range of node version to only include lts version update the supported range of node version for angular to only include supported lts version pr close ,fix
1312,serviceworker update supported range of node version to only include lts version update the supported range of node version for angular to only include supported lts version pr close ,fix
1313,router update supported range of node version to only include lts version update the supported range of node version for angular to only include supported lts version pr close ,fix
1314,platformserver update supported range of node version to only include lts version update the supported range of node version for angular to only include supported lts version pr close ,fix
1315,platformbrowser update supported range of node version to only include lts version update the supported range of node version for angular to only include supported lts version pr close ,fix
1316,platformbrowserdynamic update supported range of node version to only include lts version update the supported range of node version for angular to only include supported lts version pr close ,fix
1317,localize update supported range of node version to only include lts version update the supported range of node version for angular to only include supported lts version pr close ,fix
1318,languageservice update supported range of node version to only include lts version update the supported range of node version for angular to only include supported lts version pr close ,fix
1319,form update supported range of node version to only include lts version update the supported range of node version for angular to only include supported lts version pr close ,fix
1320,element update supported range of node version to only include lts version update the supported range of node version for angular to only include supported lts version pr close ,fix
1321,compiler update supported range of node version to only include lts version update the supported range of node version for angular to only include supported lts version pr close ,fix
1322,compilercli update supported range of node version to only include lts version update the supported range of node version for angular to only include supported lts version pr close ,fix
1323,common update supported range of node version to only include lts version update the supported range of node version for angular to only include supported lts version pr close ,fix
1324,bazel update supported range of node version to only include lts version update the supported range of node version for angular to only include supported lts version pr close ,fix
1325,animation update supported range of node version to only include lts version update the supported range of node version for angular to only include supported lts version pr close ,fix
1326,docsinfra add path disambiguation when two document have the same outputpath only differing by letter casing there can be problem on caseinsensitive filesystems only one of each of the doc would end up being written moreover the webpack bundler will error if it come across file that have this kind of ambiguous path this commit add a new doctype disambiguator which will display a list of the doc that match an ambiguous path each of the ambiguous doc is then given a unique path and outputpath to ensure there are no collision pr close ,build
1327,docsinfra no duplicate doctypes in postprocesshtml processor this processor wa being initialized with the same doctypes twice pr close ,build
1328,docsinfra apply custom autolinkcode filter to singleword code element previously the autolinkcode dgeni postprocessor would not apply the custom filter when matching the whole content of a code element this meant that custom filter would not be applied to singleword code element you can see occurrence of this issue in the following section of the reactive form guide creating nested form group look for street city state and zip control using the formbuilder service to generate control look for group method this commit fix this by also applying the custom filter when processing the whole content of a code element this commit also update the filterpipes custom filter to allow matching a pipe name in a singleword code element where there is no preceeding character pr close ,fix
1329,docsinfra do not process generated node for autolinking while generating the doc when a code element is inspected for autolinking the autolinkcode dgeni postprocessor will break it content up into word and generate text node for those word that should not be autolinked previously our text node visitor would visit these generated text node and try to autolink them too a a result it would unnecessarily process node that had already been checked and could potentially generate link that would otherwise be ignored you can see an occurrence of this issue in the create the product list section of the getting started with angular tutorial look for a this commit fix this by ensuring the visitor will skip the current node and any node generated by autolinkcode pr close ,fix
1330,devtools prevent link in property view body from closing panel header when clicked rangleangulardevtools ,fix
1331,core avoid storing lview in ngcontext currently we save a reference to an lview on most dom node created by angular either by saving the lview directly in the ngcontext or by saving the lcontext which ha a reference to the lview this can be a problem if the dom node is retained in memory because the lview ha reference to all of the child node of the view a well a other internal data structure previously we tried to resolve the issue by clearing the ngcontext when a node is removed see but we decided not to proceeed because it can slow down destruction due to a megamorphic write these change aim to address the issue while reducing the performance impact by assigning a unique id when an lview is created and adding it to ngcontext all active view are tracked in a map where their unique id is used a the key we dont need to worry about leak within that map because lviews are an internal data structure and we have complete control over when they are created and destroyed fix pr close ,perf
1332,serviceworker replace global window with globalthis global property is not available in the browser previously this wa polyfilled through corejs this now fails with global is not defined since global can not be accessed when not defined pr close ,test
1333,docsinfra fix ee testing systemjsbased doc example this commits make the systemjsbased doc example more selfcontained by ensuring the necessary webdrivers are fetched before running the ee test this is a followup to see there for more discussion pr close ,build
1334,docsinfra fix external link icon positioning while trying to fix the appearance of code element inside of anchor with external url in the positioning of external link icon wa broken for anchor that would span multiple line see for detail this commit fix the positioning of external link icon while still preserving the correct appearance of code element inside anchor with external url note different type of link with external url can be seen in the following doc section fix pr close ,fix
1335,devtools update dependency webpack to v ,build
1336,devtools update angularframework to f ,build
1337,devtools update angularcli to adabe ,build
1338,devinfra publish test should not rely on external http request a test for the devinfra publish tool currently relies on an external http request by accident this will break if we disallow internet access within rbe container pr close ,test
1339,devinfra create shared platform for remote execution introduces a shared bazel platform for remote execution build using google cloud previously we used bazeltoolchains for providing the platform w additional cpp and java toolchains bazeltoolchains no longer provides default toolchains with the latest version but provides a tool linux and window only for generating toolchainplatforms which then need to be checked into the repository this is quite inconvenient and cumbersome especially with no macos support so we just provide our own platform and cpp toolchain within devinfra this is more simple than all the effort wed need to make the toolchain generation tool work while it would also increase the amount of checkedin source significantly with more unused toolchains for cpp or java pr close ,feat
1340,upgrade preserve intervalflush when ngmocks is being used also preserve any other property that the user may have decorated interval with pr close ,fix
1341,docsinfra upgrade cli command doc source to eb updating angularmaster from clibuildsmaster relevant change in commit range modified helpbuildjson pr close ,build
1342,devtools pas in root element ng context a an lview instead of a a context object ,fix
1343,devtools contrast on label and link rangleangulardevtools ,fix
1344,devtools move barchart component to live under barchart visualizer ,refactor
1345,devtools remove relative positioning from profiler content make split pane gutter full height for profile detail ,fix
1346,devtools update angularframework to bd ,build
1347,core add single type for injector token currently we have a lot of place where we repeat the type typetabstracttypetinjectiontokent which make it cumbersome to add another type or to type something else with the same signature these change add a new type that can be used instead fix pr close ,refactor
1348,core replace loadlcontext with getlcontext call this commit refactors the code to replace loadlcontext with getlcontext call the only difference between these two function is that the loadlcontext support throwing an error in case lcontext can not be found the investigation performed in revealed that throwing while retrieving lcontext might have undesirable performance implication so we should avoid that to make sure there are no accidental perf regression in other part of code that used loadlcontext moreover in most of the place the loadlcontext wa already called in a mode that prevented an error from being thrown so this refactoring should have no effect on the actual behavior pr close ,refactor
1349,compilercli match string indexed partial declaration some partial library have been minified which result in the declaration call being being converted from property access to indexed access this commit ensures that the linker can process these call fix pr close ,fix
1350,compilercli allow linker to process minified booleans some partial library have been minified which result in boolean literal being converted to and this commit ensures that the linker can process these value fix pr close ,fix
1351,devtools update angularcli to dfb ,build
1352,docsinfra upgrade cli command doc source to ce updating angularmaster from clibuildsmaster relevant change in commit range modified helpbuildjson helpeejson helpgeneratejson helpnewjson pr close ,build
1353,docsinfra fix stackblitzbuilder after jsdom update in commit cffbdeddaadfbc jsdom wa updated from v to v this includes a breaking change that caused stackblitzbuilder to fail to generate the stackblitz example however this failure went unnoticed because stackblitzbuilder still completed successfully after failing to generate the example this ha been fixed in the previous commit this commit update stackblitzbuilder to use the new jsdom api pr close ,build
1354,docsinfra exit with an error code if generating stackblitz example fails previously failing to generate one or more stackblitz example would log the error but exit the command successfully this made it easy to miss such failure this commit fix this by exiting the process with an error code if generating one or more stackblitz example fails in order to be able to see all potential error all example are attempted to be generated before exiting the process pr close ,build
1355,devinfra verify python is available before release verify that the usrbinpython point to the python interpreter binary pr close ,fix
1356,zonejs should invoke xhr task even onload handler throw error close this case related to the issue zoneroot fork name xhr onhastaskdelegate currentzone zone taskstate consoleloghasmacrotask taskstatemacrotask return delegatehastaskzone taskstate run const xhr new xmlhttprequest xhropenget xhraddeventlistenerload throw new error xhrsend zonejs invoke all onload event handler before change the xhr task state from scheduled to notscheduled so if any onload listener throw error the xhr task wlll be hang to scheduled and leave the macrotask status in the zone wrongly this ha been fixed in the previous commit this commit add test to verify the case pr close ,test
1357,zonejs should continue to executue listener when throw error close zonejs patch event listener and run all event listener together if one event handler throw error the listener afterward may not be invoked reproduction export class appcomponent implement afterviewinit viewchildbtn btn elementref title eventerror constructorprivate ngzone ngzone ngafterviewinit thisngzonerunoutsideangular thisbtnnativeelementaddeventlistenerclick throw new errortest thisbtnnativeelementaddeventlistenerclick consolelogadd eventlistener click until now no angular user report this issue becuase in the ngzone all error will be caught and will not rethrow so the event listener afterward will still continue to execute but if the event handler are outside of ngzone the error will break the execution this commit catch all error and after all event listener finished invocation rethrow the error in seperate microtasks the reason i am using microtask here is to handle multiple error case pr close ,fix
1358,devtools implement profiler with new framework apis ,feat
1359,devtools link to doc in property view tab ,fix
1360,devtools update dependency webpack to v ,build
1361,devtools update dependency typeschrome to ,build
1362,devtools update angularcli to bcce ,build
1363,devtools add filtering functionality in the profiler allow to filter using a simple dsl search query query source w duration d m ,feat
1364,devtools simplify component styling for tab component ,feat
1365,devtools update angularframework to ae ,build
1366,devtools update dependency webpack to v ,build
1367,compiler not generating update instruction for ngtemplate inside alternate namespaces we have a check that determines whether to generate property binding instruction for an ngtemplate the check look at whether the tag name is exactly ngtemplate but the problem is that if the tag is placed in a nonhtml namespace eg svg the tag name will actually be namespacengtemplate and the check will fail these change resolve the issue by looking at the tag name without the namespace fix pr close ,fix
1368,docsinfra upgrade cli command doc source to dc updating angularmaster from clibuildsmaster relevant change in commit range modified helpgeneratejson pr close ,build
1369,devtools disable flaky test ,test
1370,devtools change the isivy detection ,fix
1371,devtools set more accurate search label ,fix
1372,devtools use framework debugging apis to extract metadata ,refactor
1373,devtools use framework debugging apis to extract render tree ,refactor
1374,devtools implement view extraction strategy ,refactor
1375,devtools update angularcli ,build
1376,docsinfra update doc example to angular v this commit update the doc example to angular v see the diff between and fw and cli the change are fairly trivial including removal of emitdecoratormetadata from tsconfigjson file where no jit compilation is required setting enableinlegacymessageidformat to false for cli based application the in example wa already migrated away from legacy message id pr close ,build
1377,docsinfra tidy up systemjs boilerplate for upgrade example the ngupgrade example mostly rely upon systemjs configuration this commit tidy up how these example are built and tested so that it will be easier to migrate them to work with angular x pr close ,refactor
1378,zonejs should invoke xhr task even onload handler throw error close this case related to the issue zoneroot fork name xhr onhastaskdelegate currentzone zone taskstate consoleloghasmacrotask taskstatemacrotask return delegatehastaskzone taskstate run const xhr new xmlhttprequest xhropenget xhraddeventlistenerload throw new error xhrsend zonejs invoke all onload event handler before change the xhr task state from scheduled to notscheduled so if any onload listener throw error the xhr task wlll be hang to scheduled and leave the macrotask status in the zone wrongly this ha been fixed in the previous commit this commit add test to verify the case pr close ,test
1379,zonejs should continue to executue listener when throw error close zonejs patch event listener and run all event listener together if one event handler throw error the listener afterward may not be invoked reproduction export class appcomponent implement afterviewinit viewchildbtn btn elementref title eventerror constructorprivate ngzone ngzone ngafterviewinit thisngzonerunoutsideangular thisbtnnativeelementaddeventlistenerclick throw new errortest thisbtnnativeelementaddeventlistenerclick consolelogadd eventlistener click until now no angular user report this issue becuase in the ngzone all error will be caught and will not rethrow so the event listener afterward will still continue to execute but if the event handler are outside of ngzone the error will break the execution this commit catch all error and after all event listener finished invocation rethrow the error in seperate microtasks the reason i am using microtask here is to handle multiple error case pr close ,fix
1380,docsinfra fix code inside anchor element with external url previously due to the inlineflex display style of anchor element with external url code element nested inside such anchor element would cause extra spacing between line an occurrence of this can be seen in the angular workspace configuration guide this commit fix the problem by removing the inlineflex display style allowing anchor element to fall back to the default inline style for reference the inlineflex style wa introduced in commit eeccfeaabceddcc in order to avoid underlining link icon this style seems to no longer be necessary either it wa never necessary or the underlying browser bug that made it necessary wa fixed before code link before after code link after pr close ,fix
1381,docsinfra remove duplicate ol selector this commit remove a duplicate ol selector from typographyscss pr close ,refactor
1382,docsinfra simplify regex in search webworker this commit simplifies a regex used in angularios search webworker it also update some comment to add more context on what the code doe pr close ,refactor
1383,devinfra remove unused argument from publish script since recently the githubtoken parameter passed to the releasetool constructor is no longer used this commit remove the unused parameter and also the corresponding argument from the publish script pr close ,refactor
1384,devinfra update jsdoc comment to reflect recent code change pr close ,docs
1385,devinfra fix typo in devinfra docscomments pr close ,docs
1386,docsinfra change url separator from t to in urlstoredirecttxt previously the urlstoredirecttxt file wa expected to separate url by a t character this could easily been mistaken for a regular space and would often result in test error when updating the file this commit update the urlstoredirecttxt file and the corresponding test helper to use potentially surrounded by whitespace a a separator for the url this also give a hint about the from to relationship of the redirect url pair pr close ,test
1387,docsinfra ignore empty line in urlstoredirecttxt previously the urlstoredirecttxt file wa expected to not contain any empty line this could easily result in test error when updating the file since it is common for ideseditors to automatically ensure there is an empty line at the end of a saved file example failure this commit update the test helper to be able to cope with empty or whitespaceonly line in urlstoredirecttxt by ignoring such line pr close ,test
1388,devtools update angularframework ,build
1389,devinfra prevent pr merges of feature or breaking change on rc prevent pull request targeting target rc from merging pr with breaking change or feature from being merged pr close ,feat
1390,compiler nonliteral inline template incorrectly processed in partial compilation currently if a component defines a template inline but not through a string literal the partial compilation reference the template expression a is this is problematic because the component declaration can no longer be processed by the linker later a there is no static interpretation eg j const mytemplate testcmpɵcmp iɵɵngdeclarecomponent version placeholder type testcmp selector testcmp ngimport i template mytemplate isinline true to fix this we use the the resolved template in such case so that the linker can process the templatecomponent declaration a expected pr close ,fix
1391,compiler clean up template information passed for partial compilation with the introduction of the partial compilation the angular compiler existing parsetemplate method ha been extended to pas through multiple property purely in favor of the partial compilation eg the parsetemplate function now accepts an option called isinline this option is just passed through and returned a part of the parsedtemplate this is not ideal because the parsetemplate function doesnt care whether the specified template wa inline or not this commit clean up the parsetemplate compiler function so that nothing needed only for the partial compilation is added to it we introduce a new struct for additional template information that is specific to the generation of the declarecomponent function with that change we can simplify the component decorator handler and keep logic more local pr close ,refactor
1392,docsinfra run all example test in ivy runtime we have several test which use systemjs this mean that we can not use ngcc with createivyentrypoints also we need to process umd bundle since our systemjs configuration use umds pr close ,test
1393,docsinfra update liteserver to fix error on osx liteserver c bsconfigaotjson ngc p tsconfigaotjson rollup c rollupconfigjs usersxxxxgitangularaiotoolsexamplessharednodemodulesbrowsersyncnodemoduleschokidarlibfseventshandlerjs return new fseventspathonfsevent callbackstart typeerror fsevents is not a constructor at createfseventsinstance usersxxxxgitangularaiotoolsexamplessharednodemodulesbrowsersyncnodemoduleschokidarlibfseventshandlerjs at setfseventslistener usersxxxxgitangularaiotoolsexamplessharednodemodulesbrowsersyncnodemoduleschokidarlibfseventshandlerjs at fswatcherfseventshandlerwatchwithfsevents usersxxxxgitangularaiotoolsexamplessharednodemodulesbrowsersyncnodemoduleschokidarlibfseventshandlerjs at fswatcheranonymous usersxxxxgitangularaiotoolsexamplessharednodemodulesbrowsersyncnodemoduleschokidarlibfseventshandlerjs at loop fsjs at processticksandrejections internalprocesstaskqueuesjs error command failed with exit code info visit for documentation about this command completed yarn serveaot pr close ,build
1394,docsinfra remove view engine related code this is a preupdate to angular cleanup this is not needed for version since application can not be built using view engine pr close ,build
1395,compilercli autocomplete literal type in template this add string literal number literal true false null and undefined to autocomplete result in template for example when completing an input of union type component inputinput input abnull template input provide a b and null a autocompletion entry previously we did not include literal type because we only included result from the component context ctx and the template scope this is the second attempt at this the first attempt is in dcffcbeec and it wa reverted in febdfcafcaf pr close ,fix
1396,devtools update dependency jasminespecreporter to v ,build
1397,devtools update dependency webpack to v ,build
1398,devtools update angularframework ,build
1399,devtools treemap hover color highlight selection ,fix
1400,devtools frame color indicate framerate good v bad ,fix
1401,common viewport scroller not finding element inside the shadow dom the viewportscroller figure out which element to scroll into view using documentgetelementbyid the problem is that it wont find element inside the shadow dom these change add some extra logic that go through all the shadow root to look for the element fix pr close ,fix
1402,animation allow animation on element in the shadow dom when determining whether to run an animation the transitionanimationplayer check to see if a dom element is attached to the document this is done by checking to see if the element is contained by the document body node previously if the element wa inside a shadow dom the engine would determine that the element wa not attached even if the shadow doms host wa attached to the document this commit update the containselement method on animationdriver implementation to also include shadow dom element a being contained if their shadow host element is contained further when using cs keyframes to trigger animation the styling wa always added to the head element of the document even for animation on element within a shadow dom this meant that those element never receive those style and the animation would not run this commit update the insertion of these style so that they are added to the element root node which is the nearest shadow dom host or the head of the document if the element is not in a shadow dom close pr close ,fix
1403,router only retrieve stored route when reuse strategy indicates it should reattach when creating the router state the routereusestrategyretrieve should only be called when routereusestrategyshouldattach return true that is we should only retrieve a stored route when the reuse strategy indicates that there is one stored and that it should be reattached this now match the behavior in the route activation fix pr close ,fix
1404,docsinfra upgrade cli command doc source to dab updating angularmaster from clibuildsmaster relevant change in commit range modified helpbuildjson helptestjson pr close ,build
1405,devinfra move getrepobasedir to gitclient a getrepobasedir relies on git it should be a method on gitclient for retrieval rather than it own utility outside of the common gitclient used for all git ineractions pr close ,refactor
1406,router add router regression test for hash location strategy this situation can probably happen only when using hashlocationstrategy and by manually changing hash that trigger a route guard that return a new urltree then hash in the browser might not match the current route because navigation wa canceled while hash in the url remained set by the user related to pr close ,test
1407,compiler reduce amount of generated code for safe access and nullish coalescing this is followup from and it reduces the amount of code we generate for safe property access ab and nullish coalescing a b by reusing variable in nested nullish coalescing expression not initializing temporary variable to null the way our code is generated mean that the value will always be overwritten before we compare against it so the initializer didnt really matter fix pr close ,perf
1408,router recursively merge empty path match when recognizing route the router merges node which map to the same empty path config this is because auxiliary outlet under empty path parent need to match the parent config this would result in two outlet match for that parent which need to be combined into a single node the regular primary match and the match for the auxiliary outlet in addition the child of the merged node should also be merged to account for multiple level of empty path parent fix pr close ,fix
1409,compilercli do not error with prepocessing if component ha no inline style the asynchronous preprocessing check wa not accounting for component that did not have any inline style in that case the cache did not have an entry which then allowed the asynchronous check to run and fail the compilation the caching during the asynchronous analysis phase now handle component without inline style pr close ,fix
1410,devinfra prevent attempting to merge draft closed or merged pull request during pull request validation assert that the pull request is not in draft mode already merged or already closed pr close ,feat
1411,devtools update angularframework ,build
1412,devtools style of editor input could still get some love on being a textarea highlighting all text on selection minwidth fix empty issue though it need a value ,fix
1413,devtools rename state to property rangleangulardevtools ,fix
1414,compilercli change how partiallinkers are matched to declaration version previously it wa not possible to block a partiallinker from trying to process a declaration that wa defined in a newer version of angular than that of the partiallinker for example if a partiallinker wa published a part of version there wa no way for a partiallycompiled declaration compiled via version to tell the linker that it would be invalid to attempt to process it this commit add a new minversion property to partialdeclarations which is interpreted a the minimum partiallinker version that can process this declaration when selecting a partiallinker for such a declaration the known linker version range are checked to find the most recent linker whose version range ha an overlap with the interpreted declaration range this approach allows u to set a minimum version for a declaration which can inform an old partiallinker that will it not be able to accurately process the declaration note that any prerelease part to version are ignored in this selection process the filelinker can be configured via the unknowndeclarationversionhandling property of linkeroptions to handle such a situation in one of three way error the version mismatch is a fatal error warn a warning is sent to the logger but the most recent partiallinker will attempt to process the declaration anyway ignore the most recent partiallinker will silently attempt to process the declaration the default is to throw an error close pr close ,refactor
1415,upgrade update supported range of node version update the supported range of node version for angular angular now support node to dropping support for node v pr close ,feat
1416,serviceworker update supported range of node version update the supported range of node version for angular angular now support node to dropping support for node v pr close ,feat
1417,router update supported range of node version update the supported range of node version for angular angular now support node to dropping support for node v pr close ,feat
1418,platformserver update supported range of node version update the supported range of node version for angular angular now support node to dropping support for node v pr close ,feat
1419,platformbrowser update supported range of node version update the supported range of node version for angular angular now support node to dropping support for node v pr close ,feat
1420,platformbrowserdynamic update supported range of node version update the supported range of node version for angular angular now support node to dropping support for node v pr close ,feat
1421,localize update supported range of node version update the supported range of node version for angular angular now support node to dropping support for node v pr close ,feat
1422,languageservice update supported range of node version update the supported range of node version for angular angular now support node to dropping support for node v pr close ,feat
1423,form update supported range of node version update the supported range of node version for angular angular now support node to dropping support for node v pr close ,feat
1424,element update supported range of node version update the supported range of node version for angular angular now support node to dropping support for node v pr close ,feat
1425,compiler update supported range of node version update the supported range of node version for angular angular now support node to dropping support for node v pr close ,feat
1426,compilercli update supported range of node version update the supported range of node version for angular angular now support node to dropping support for node v pr close ,feat
1427,common update supported range of node version update the supported range of node version for angular angular now support node to dropping support for node v pr close ,feat
1428,bazel update supported range of node version update the supported range of node version for angular angular now support node to dropping support for node v pr close ,feat
1429,animation update supported range of node version update the supported range of node version for angular angular now support node to dropping support for node v pr close ,feat
1430,core update supported range of node version update the supported range of node version for angular angular now support node to dropping support for node v breaking change angular no longer maintains support for node v pr close ,feat
1431,languageservice resolve to the precompiled style when compiled cs url is provided with this commit the language service will first try to locate a precompiled style file with the same name when a cs is provided in the styleurls this prevents a missing resource diagnostic for when the compiled file is not available in the language service environment and also allows go to definition to go to that precompiled file fix angularvscodenglanguageservice pr close ,fix
1432,devtools updating page design ,fix
1433,devtools setting default page for extension ,fix
1434,devtools allow deleting property when editing ,fix
1435,devtools setting min width for input editor and allowing for rendering space ,fix
1436,languageservice bound attribute should not break directive matching the language service us an element attribute to determine if it match a directive in the component scope we do this by accumulating all attribute binding and matching against the selector for the available directive the compiler itself doe a similar thing in addition the compiler doe not use the value of boundattributes to match directive this commit change the language service to also ignore bound attribute value for directive matching fix pr close ,fix
1437,devtools update dependency cypress to v ,build
1438,devtools update angularcli ,build
1439,core optimize getdirectives this commit introduces the following optimization we return an empty array for text node in getdirectives because angular doe not support attaching logic to them this optimization improves performance of getdirectives significantly because text node often result in expensive call to loadlcontext since we cant resolve it from a parent node getdirectives now call loadlcontext with second argument false so it doesnt throw an error this brings another significant improvement because prevents the vm from deoptimizing call breaking change previously the nggetdirectives function threw an error in case a given dom node had no angular context associated with it for example if a function wa called for a dom element outside of an angular app this behavior wa inconsistent with other debugging utility under ng namespace which handled this situation without raising an exception now calling the nggetdirectives function for such dom node would result in an empty array returned from that function pr close ,perf
1440,core introduce getdirectivemetadata global debugging utility this commit introduces a global debugging method nggetdirectivemetadata which return the metadata for a directive or component instance pr close ,feat
1441,devtools bump webpack version and fix breaking change ,fix
1442,devtools new icon active status ,feat
1443,devtools update angularframework ,build
1444,compilercli autocomplete literal type in template this add string literal number literal true false null and undefined to autocomplete result in template for example when completing an input of union type component inputinput input abnull template input provide a b and null a autocompletion entry previously we did not include literal type because we only included result from the component context ctx and the template scope pr close ,fix
1445,compilercli remove in option from linkeroptions there were three option being made available to user of the linker enableinlegacymessageidformat innormalizelineendingsinicus inuseexternalids none of these should actually be configurable at linking time because partiallylinked library have tighter restriction on what in option can be used this commit remove those option from the linkeroptions interface it wa considered to add a check for backwards compatibilty to ensure that if these option were being passed and were different to the expected default we would throw an informative error but from looking at the angular cli the only known client of the linker it ha never been setting these option so they have already always been set to the default breaking change linked library no longer generate legacy in message id any downstream application that provides translation for these message will need to migrate their message id using the localizemigrate command line tool close pr close ,refactor
1446,languageservice use script version for incremental compilation this commit ha the language service take advantage of versioned source file added in the compiler previously with this change the language service incremental compilation will now be correct even if the t language service mutates tssourcefiles without changing their object identity a we know it doe in certain corner case no test is added here a it is difficult to reproduce this behavior in the l artificial testing environment a test for this case exists in the l extension repo where it will be used to validate that a workaround three is no longer necessary pr close ,fix
1447,compilercli support tssourcefile versioning generally the compiler assumes that tssourcefiles are immutable object if a new tsprogram is compared to an old one and a tssourcefile within that program ha not changed it object identity the compiler will assume that it prior analysis and understanding of that source file is still valid however not all typescript workflow uphold this assumption for tsprograms that originate from the tslanguageservice some source file may be reparsed or otherwise undergo mutation without changing their object identity this break the compiler incremental workflow within such environment it necessary to track source file change differently in addition to object identity it necessary to compare a version string associated with each source file between when that file is analyzed originally and when a new program is presented that still contains it it possible for the object identity of the source file to be the same but the version string to have changed indicating that the source file should be treated a changed this commit add an optional method getsourcefileversion to the programdriver to provide access to version information if available when this method is present the compiler will build a map of source file version string and use this map to augment identity comparison during incremental compilation pr close ,refactor
1448,compilercli replace the incrementaldriver with a new design this commit replaces the incrementaldriver abstraction which powered incremental compilation in the compiler with a new incrementalcompilation design principally it separate two concern which were tied together in the previous implementation tracking the reusable state of a compilation at any given point that could be reused in a subsequent future compilation making use of a prior compilation state to accelerate the current one the new abstraction add explicit tracking and type to deal with both of these concern separately which greatly reduces the complexity of the state tracking that incrementaldriver used to perform pr close ,refactor
1449,compilercli cache result of absolutefromsourcefile the compiler frequently translates typescript source file filename string into absolute path via a fsresolve operation this is often done via the helper function absolutefromsourcefile this commit add a caching mechanism whereby the absolutefspath of a source file is patched onto the object under an angularspecific symbol property allowing the compiler to avoid resolving the path on subsequent call pr close ,perf
1450,bazel remove old angular cli schematic and builder this is leftover code which is no longer used pr close ,refactor
1451,languageservice implement signature help this commit implement signature help in the language service on top of typescript implementation within the tcb a separate pr add support for translation of signature help data from t api to the lsp in the language service extension pr close ,feat
1452,languageservice specifically identify empty argument position this commit change gettemplateattarget to be able to identify when a cursor position is specifically within the argument span of a methodcall or safemethodcall with no argument if the call had argument one of the argument expression would be returned instead but in a call with no argument the tightest node is the methodcall adding the additional argument context will allow for functionality that relies on tracking argument position like getsignaturehelpitems pr close ,refactor
1453,compiler avoid parsing emptyexpr with a backwards span emptyexpr is somewhat unique in that it constructed in a circumstance where the parser ha been looking for a particular token or string of token and ha failed to find any this mean the parser state when constructing emptyexpr is fairly unique this give rise to a bug where the parser construct emptyexpr with a backwards span a start value thats beyond the end value this likely happens because of the strange state the parser is in when recovering with emptyexpr this commit add a backstopworkaround to avoid constructing such broken emptyexpr span or any other kind of span eventually the parser state should be fixed such that this doe not occur but that requires a significant change to the parser functionality so a simple fix in th interim is in order pr close ,fix
1454,compiler add an argumentspan to the method call ast this commit add a separate span to methodcall and safemethodcall which track the text span between the and token of the call tool like the language service can use this span to more accurately understand a cursor position within a method call expression pr close ,refactor
1455,docsinfra ensure that jasmine node test fail on build error previously if there wa a problem when building the test the error would be swallowed a an unhandled promise rejection now these are caught and the process is exited with a nonzero value to prevent any ci job from passing incorrectly pr close ,build
1456,docsinfra add correct type to tuples this is to fix the below error toolsfirebasetestutilsfirebaseredirectts error t argument of type string regexp is not assignable to parameter of type replacementdetail type string regexp is missing the following property from type replacementdetail return xregexpreplaceeachthisdestination paramreplacers restreplacers pr close ,build
1457,devinfra only create authenticated github instance once in yargs fix github token option for yargs to only create an authenticated token one time pr close ,fix
1458,compilercli show a more specific error for ivy ngmodules when an ivy ngmodule is imported into a view engine build it doesnt have metadatajson file that describe it a an ngmodule so it appears to ve build a a plain undecorated class the error message shown in this situation generic and confusing since it recommends adding an ngmodule annotation to a class from a library this commit add special detection into the view engine compiler to give a more specific error message when an ivy ngmodule is imported pr close ,fix
1459,docsinfra fix not accepting null error by using number instead fix unexpected error when following the tutorial when going through it with stricter type checking enforced while convert a string to an integer it doe not account for the possibility that thisroutesnapshotparammapgetid could return null type string null since this null case is not a practical outcome it is a matter of type switching from to the number function eliminates this issue making the tutorial more robust pr close ,docs
1460,compilercli cleanup redundant storage of reuse tsprogram in the compiler the ngtscprogram is responsible for creating the tsprogram instance to use potentially using a tsprogram from a prior compilation to enable incremental compilation it used to track a reusetsprogram for this purpose however the tsprogram that should be used a reuse program is also tracked by the ngcompiler instance that is used by ngtscprogram the ngtscprogram can leverage the state from ngcompiler instead of keeping track of it by itself pr close ,refactor
1461,compilercli allow incremental compilation in the presence of redirected source file when multiple occurrence of the same package exist within a single typescript compilation unit typescript deduplicates the source file by introducing redirected source file proxy such proxy are recreated during an incremental compilation even if the original declaration file did not change which caused the compiler not to reuse any work from the prior compilation this commit change the incremental driver to recognize a redirected source file and treat them a their unredirected source file pr close ,perf
1462,languageservice use any instead of failing for inline tcbs in environment such a the language service where inline typechecking code is not supported the compiler would previously produce a diagnostic when a template would require inlining to check this happened whenever it component class had generic parameter with bound that could not be safely reproduced in an external tcb however this created a bad user experience for the language service a it feature would then not function with such template instead this commit change the compiler to use the same strategy for inline tcbs a it doe for inline type constructor falling back to any for generic type when inlining isnt available this allows the l to support such template with slightly weaker typechecking semantics which a test verifies there is still a case where component that arent exported require an inline tcb and the compiler will still generate a diagnostic if so fix pr close ,fix
1463,compilercli track a dependency on a default import on wrappednodeexpr previously the defaultimportrecorder interface wa used a follows during the analysis phase the default import declaration of an identifier wa recorded during the emit phase each emitted identifier would be recorded the information from step would then be used to determine the default import declaration of the identifier which would be registered a used a typescript transform would taint all default import that were registered a used in step such that the import are not elided by typescript in incremental compilation a file may have to be emitted even if it analysis data ha been reused from the prior compilation this would mean that step is not executed resulting in a mismatch in step and ultimately in incorrectly eliding the default this wa mitigated by storing the mapping from identifier to import declaration on the tssourcefile instead of a member of defaultimporttracker such that it would also be visible to the defaultimportrecorder of subsequent compiles even if step had not been executed ultimately however the information that is being recorded into the defaultimportrecorder ha a longer lifetime than a single defaultimportrecorder instance a that is only valid during a single compilation whereas the identifier to import declaration mapping outlives a single compilation this commit replaces the registration of this mapping by attaching the default import declaration on the output ast node that capture the identifier this enables the removal of all of the defaultimportrecorder usage throughout the analysis phase together with the defaultimportrecorder interface itself pr close ,refactor
1464,compilercli prevent eliding default import in incremental recompilations the angular compiler ha to actively keep default import statement alive if they were only used in typeonly position but have been emitted a value expression for di purpose a problem occurred in incremental recompilations where the relationship between an identifier usage and it corresponding default import would not be considered this could result in the removal of the default import statement and caused a referenceerror at runtime this commit fix the issue by storing the association from an identifier to it default import declaration on the source file itself instead of within the defaultimporttracker instance the defaultimporttracker instance is only valid for a single compilation whereas the association from an identifier to a default import declaration is valid a long a the tssourcefile is the same instance a subsequent commit refactor the defaultimporttracker to no longer be responsible for registering the association a it lifetime is conceptually too short to do so fix pr close ,fix
1465,compilercli disable emitdecoratormetadata in the compiler test environment the emitdecoratormetadata compiler option doe not have to be enabled a angular decorator are transformed by the aot compiler having the option enabled in our test can hide issue around import preservation a with emitdecoratormetadata enabled the typescript compiler itself doe not elide import even if they are only used in typepositions this is unlike having emitdecoratormetadata disabled however in that case the angular compiler ha to actively trick typescript into retaining default import when an identifier in a typeonly position ha been reified into a value position for di purpose a subsequent commit address a bug in default import preservation that relies on this flag being false pr close ,test
1466,ngcc provide correct sourcemappings for renderer test the recent update to magicstring result in a different basic set of mapping in the renderer this change update our test to match pr close ,test
1467,docsinfra update dgenipackages dependency this update includes fix that prevented u from updating other dependency pr close ,build
1468,devinfra use a singleton for gitclient creates a singleton class for gitclient rather than relying on creating an instance to require being passed around throughout it usage pr close ,refactor
1469,devtools update angularcli ,build
1470,compilercli introduce declaration function to declare class metadata this commit refactors the generated code for class metadata in partial compilation mode instead of emitting class metadata into a toplevel ɵsetclassmetadata call guarded by ngdevmode flag the class metadata is now declared using a toplevel ɵɵngdeclareclassmetadata call pr close ,refactor
1471,compilercli add integration test for relative rootdir this will make it easier to detect regression of the relative rootdir behavior pr close ,test
1472,compilercli resolve rootdirs to absolute ensure that rootdirs are absolute by resolving them against the current working directory fix pr close ,fix
1473,compilercli mark ability to use partial compilation mode a stable this commit mark the compilationmode compiler option a stable such that library can be compiled in partial compilation mode in partial compilation mode the compiler output change from fully compiled aot definition to an intermediate form using partial declaration this form is suitable to be published to npm which now allows library to be compiled and published using the ivy compiler please be aware that library that have been compiled using this mode can only be used in angular application and up they can not be used when ivy is disabled ie when using view engine or in version of angular prior to the compilationmode option ha no effect if enableivy false is used close pr close ,feat
1474,core error if debugrendererdestroynode is called twice in a row fix an error that will be thrown if debugrendererdestroynode is called with a node that ha already been destroyed the error happened because we had a nonnull assertion even though the value can be null note that this fix applies only to viewengine because ivy doesnt provide the debugrenderer i decided to resolve it because it fix is straightforward and this error ha been showing up in our log for a long time now making actual error harder to find pr close ,fix
1475,devinfra verify breaking change are properly labeled before merging during merging with ngdev pr merge tooling will ensure that pull request are properly labeled for breaking change pull request with commits noting breaking change must also be labeled a such additionally pull request with breaking change label must contain commits noting breaking change fix pr close ,feat
1476,devtools update angularcli ,build
1477,languageservice add test to expose bug caused by source file change this commit add a test to expose the bug caused by source file change in between typecheck program pr close ,test
1478,devinfra create releasenotes class for generating release note during publishing generate release note to be used for entry in both changelogmd file a well a github release pr close ,feat
1479,devinfra extract commit message build function into testing util function creates a testing utility function to build commit message string pr close ,test
1480,devinfra remove chai from tsapiguardian test refactor tsapiguardian test to use jasmine instead of chai pr close ,test
1481,languageservice stop tracking lastkwownprogram in compilerfactory with the work done in the compiler always track the last known program so there no need to track the program in the compiler factory anymore pr close ,refactor
1482,devinfra use base ref name rather than sha for the githubtargetbranch after updating to use the v graphql api in the merge tooling the githubtargetbranch wa set to be the sha of the latest commit rather than the branch name of the target branch this caused our tooling to mismatch which branch were actually being targeted with the effect that if a pr targeted only the patch branch ie labeled target patch and targeting x in githubit would still expect to merge into both x and master this is now corrected to once again use the branch name restoring to the previous functionality pr close ,fix
1483,form add base class for all builtin controlvalueaccessors this commit add a base class that contains common logic for all controlvalueaccessors defined in form package this allows to remove duplicated logic from all builtin controlvalueaccessor class pr close ,refactor
1484,router handle new navigation from a navigationend event this commit remove the line to set currentnavigation to null in the navigation transition subscription of the router this logic is already handled in the finalize stage of the transition pipe and ha been found to cause issue if a new navigation is triggered from a subscription to the navigationend event fix pr close ,fix
1485,compilercli ensure the compiler track tsprograms correctly ngcompiler previously had a notion of the next tsprogram which served two purpose it allowed a client using the tscreateprogram api to query for the latest program produced by the previous ngcompiler a a starting point for building the next program that incorporated any new user change it allowed the old ngcompiler to be queried for the tsprogram on which all prior state is based which is needed to compute the delta from the new program to ultimately determine how much of the prior state can be reused this system contained a flaw it relied on the ngcompiler knowing when the tsprogram would be changed this work fine for change that originate in ngcompiler apis but a client of the templatetypechecker may use that api in way that create new tsprograms without the ngcompilers knowledge this caused the ngcompilers concept of the next program to get out of sync causing incorrectness in future incremental analysis this refactoring clean up the compiler tsprogram management in several way typecheckingprogramstrategy the api which control tsprogram updating is renamed to the programdriver and extracted to a separate ngtsc package it loses it responsibility of determining component shim filename that functionality now life exclusively in the template typechecking package the next tsprogram concept is renamed to the current program a the next name wa misleading in several way ngcompiler now wrap the programdriver used in the templatetypechecker to know when a new tsprogram is created regardless of which api drove the creation which actually fix the bug pr close ,fix
1486,compiler implement ngdeclareinjectable this commit change the partial compilation so that it output declaration rather than definition for injectables the jit compiler and the linker are updated to be able to handle these new declaration pr close ,refactor
1487,core rename ɵɵinjectabledef interface to ɵɵinjectabledeclaration the other similar interface were renamed in but this one wa left since it had existed before ivy it look like the interface wa never actually exposed on npm so it is safe to rename this one too pr close ,refactor
1488,compiler fix typo there wa spelling mistake in a comment pr close ,refactor
1489,router remove information about attached component when deactivating route when we deactivate a child route we deactivate it outlet a well a it child we also need to clear the stored information about the route and the associated component if we do not the context will keep these reference and can result in reactivating an outlet that wa deactivated by the previous navigation fix pr close ,fix
1490,docsinfra store search dictionary a a string previously the search index info file contained an array of string that is the dictionary of term in the corpus storing this a a space separated string reduces the size of the file pr close ,build
1491,docsinfra tidy up the generatekeywords processor the recent pr contained some change that could be improved pr close ,build
1492,compiler support nullish coalescing in template add support for nullish coalescing expression inside of angular template eg a b c fix pr close ,feat
1493,core remove deprecated rxjs signature usage in event emitter and make more minifierfriendly we had a usage of observablesubscribe that us the deprecated signature with argument these change switch to the nondeprecated version that pass in an observer avoids always creating a complete callback since it isnt required we were repeating all of the internal callback twice once for sync and once for async these change move them out into variable so that theyre more minifierfriendly the saving arent huge byte minified but it doesnt add any maintenance effort on our end so i decided to add it pr close ,refactor
1494,devinfra add support for targetlabelexemptscopes for merging add a property targetlabelexemptscopes to the merge configuration allowing certain scope to be exempted from requirement for feature and breaking change only included in pr targetting certain label pr close ,feat
1495,devinfra prevent merges for pr with invalid breaking change or commit type check commits in pull request to ensure the pr can be merged into the target branch confirms that pr targeting minor do not contain breaking change and pr targeting patch or lts do not contain breaking change or feat commits pr close ,feat
1496,devinfra use graphql to query pr in merge tooling migrate to use graqhql to query for pr information during the validation and preperation portion of the pr merge tooling pr close ,refactor
1497,compilercli allow analysis to continue with invalid style url currently we throw a fataldiagnosticerror when we fail to load a resource templateurl or styleurl at various stage in the compiler this prevents analysis of the component from completing this will result in in user not being able to get any information in the component template when there is a missing styleurl for example this commit simply track the diagnostic mark the component a poisoned and continues merrily along environment configured to use poisoned data like the language service will then be able to use other information from the analysis fix pr close ,fix
1498,devinfra make scope for test and refactor commit type optional a the test and refactor commit type are not used in release note and there are solid use case for having multiple scopesscopeless us of these type they are made to be optional instead of required on commits pr close ,fix
1499,bazel add missing dependency on tslib angularbazel depends on tslib related failure pr close ,fix
1500,compilercli fix extending angularcompileroptions from non relative extension le typescript configuration file support non rooted file of node package and relative path without json extension close pr close ,fix
1501,devtools update dependency typeschrome to ,build
1502,devtools update angularframework ,build
1503,docsinfra enable linting for ngpackagesinstaller script this commit enables linting for the script in aiotoolsngpackagesinstaller it also make the necessary change to the file to make linting pas pr close ,build
1504,docsinfra update eslint and eslintpluginjasmine to latest version this commit update the eslint and eslintpluginjasmine package to latest version to take advantage of latest fix and improvement pr close ,build
1505,router make getcurrentnavigation jsdoc more explicit add additional clarification to the documentation for getcurrentnavigation pr close ,docs
1506,devinfra update commitmessage function to properly type commits from git log for commits from git log entry additional field are available such a the reference hash and author name update the utility function in commitmessage to include the parsed field additionally define per commit message type whether to include the commit in a release note entry pr close ,feat
1507,devinfra add utility method to gitclient to get latest semver tag create a utility method for the latest git tag sorted by committerdate which match semver representing the latest version released on the branch pr close ,feat
1508,core support forwardref in providedin of injectable declaration add support for using a forwardref inside of the providedin of an injectable declaration fix pr close ,feat
1509,common add historygo method to location service add new method historygo that will let the user navigate to a specific page from session history identified by it relative position to the current page we add some test to locationspects to validate the behavior of the historygo and forward method add more test for locationspec to test locationhistorygo locationhistorygo locationhistorygo and locationhistorygo we also add new test for integration spec to validate the navigation when we using locationhistorygo update the historygo function doc note that this wa made an optional function in the abstract class to avoid a breaking change because our location class use implement platformlocation rather than extends platformlocation simply adding a default implementation wa not sufficient to make this a nonbreaking change while we could fix the class internal to angular this would still have been a breaking change for any external developer who may have followed our implementation a an example pr close ,feat
1510,compiler remove dependency on fsextra currently fsextra is used to delete a directory recursively but this is already available in native nodejs hence making this dependency redundant see pr close ,refactor
1511,docsinfra upgrade cli command doc source to bfc updating angularmaster from clibuildsmaster relevant change in commit range modified helpbuildjson helpextractinjson relevant change in commit range since pr modified helpbuildjson close pr close ,build
1512,devinfra prevent git push from being called in dryrun mode update gitclient to prevent the push command from being run in drymode pr close ,feat
1513,devinfra create dryrun environment variable flag utils create utility function for adding a dryrun flag and checking the environment for a dry run mode pr close ,feat
1514,docsinfra avoid autolinking generic word state since state is a generic word this commit add it to the list of ignored word for autolinking to avoid incorrectly autolinking to the state animation helper for example see ngswstate in the serviceworker in production guide pr close ,fix
1515,core fix functionname shim used in ie since ie doe not support functionname we use a shim in test that par the stringified function to extract the name previously that shim would cache the computed name on the function to speed up future invocation however this resulted in incorrect value for function that extended other function such a the code generated by typescript when downleveling e class that extended other class to avoid issue such a see also internal discussion this commit remove the caching of name this is not expected to noticeably affect performance since a it is only used in test b it is only used on browser that do not natively support functionname ie ie and c accessing function name is rare and inexpensive compared to other operation that happen during testing pr close ,test
1516,compilercli support transforming component style resource this change introduces a new hook on the resourcehost interface named transformresource resource transformation allows both external and inline resource to be transformed prior to compilation by the aot compiler this provides support for tooling integration to enable feature such a preprocessor support for inline style only style resource are currently supported however the infrastructure is in place to add template support in the future pr close ,feat
1517,compiler remove typescript program reuse check we no longer support t hence this check is redundant pr close ,refactor
1518,devinfra exclude nodemodules from circular dependency check with this change we exclude nodemodules from circular dependency check pr close ,fix
1519,devtools update angularframework ,build
1520,core add private hook around user code executed by the runtime introduces an internal experimental profiler function which the runtime invokes around user code including before and after running the template function of a component executing a lifecycle hook evaluating an output handler the profiler function invokes a callback set with the global ngɵsetprofiler this api is private and experimental and could be removed or changed at any time this implementation is cheap and available in production it cheap because the profiler function is simple which allows the jit compiler to inline it in the callsites it also doesnt add up much to the production bundle to listen for profiler event t ngɵsetprofilerevent args monitor user code execution pr close ,perf
1521,devinfra require npm login for all publishes via wombat proxy due to an issue with wombat proxy returning the login state of the generated token we will need to require a login for all ngdev release publish run to ensure npm login ha occured pr close ,fix
1522,devinfra allow npm like scope a commit message scope in the cli and universal we use the package name a commit message scope the recent change that introduced conventionalcommitsparser in break the parsing of such commit scope and caused commit validation to fail example pr close ,fix
1523,core fix jit factory declaration test for ie this commit remove a check for the name of the generated factory function which is unimportant to test the behaviour of the code the name of these function is generated from the name of the class being instantiated in ie there is no functionname property available and so there is a shim for it in thirdpartyshimsforiejs which patch the functionpropertyname property for performance reason this shim writes the result of the computation to the prototype of the function unfortunately this mean that any class that extends the patched class will have the same value for name pr close ,test
1524,docsinfra upgrade cli command doc source to eebc updating angularmaster from clibuildsmaster relevant change in commit range modified helpextractinjson helpgeneratejson relevant change in commit range since pr modified helpgeneratejson close pr close ,build
1525,form fix the short description for defaultvalueaccessor the position of the searchkeywords inline tag wa causing the shortdescription to be empty pr close ,docs
1526,docsinfra include more info in search index data the aio search index is built in a webworker on the browser from a set of page information that is downloaded a a json file searchdatajson we want to keep this file a small a possible while providing enough data to generate a useful index to query against previously we only included one copy of each nonignored term from each doc but this prevents more subtle ranking of query result since the number of occurences of a term in a doc is lost this commit change the generated file in the following way all nonignored term are now included in the order in which they appear in the doc the term are indexed into a dictonary to avoid the text of the term being repeated in every doc that contains the term each term is prestemmed using the same porter stemming algorith that the lunr search engine us the webworker ha been updated to decode the new format of the file now that all term are included it may enable some level of phrase based matching in the future the size of the generated file is considerably larger than previously but on production http server the data is sent compressed which reduces the size dramatically pr close ,refactor
1527,docsinfra improve search query processing this commit try to improve the search result by processing the query and attempting progressively le restrictive search until a nonzero set of page is matched the new procesing includes stripping off quote mark which were causing search to fail first attempting to match page where all the query term exist second attempting to match page where any of the query term exist third attempting to match page where the title contains partial word match the first query attempt approximates quite well the idea of searching for multiword phrase this is given the technical nature of the term and the fairly small size of the corpus pr close ,feat
1528,devinfra correctly place comment in dockerfile the doc in say that docker treat line that begin with a a comment unless the line is a valid parser directive a marker anywhere else in a line is treated a an argument fix pr close ,fix
1529,compiler include used component during jit compilation of partial component declaration in the list of used directive wa split into two array of used directive and component but the jit side wa not updated this commit fix the jit integration by including the list of used component fix pr close ,fix
1530,languageservice only provide angular property completion in template when possible the angularlanguageservice should only provide information related to angular when there is an embedded language like inline template editor extension should have the ability to create virtual document and forward the request to the relevant provider for that language type see this commit remove all dom schema completion in both inline and external template and provides only the angular syntax for property completion on element pr close ,fix
1531,docsinfra increase the max width of the filenotfound page previously the max width of the filenotfound page wa limited to rem px by default this allowed little space for showing potentially helpful search result which are shown in column this commit increase the max width of the filenotfound page to rem px by default to allow search result to be visible without requiring scrolling this will not negatively affect ux because the page us a multicolumn layout and therefore there will rarely be long line of text to scan pr close ,fix
1532,docsinfra correctly show search result on narrow screen previously some part of the search result would be hidden and inaccessible on narrow screen this wa caused by an issue with the flexbox layout see here for more info on the issue and the available solution note this issue affected both the search result shown when using the search box on the top right of the page a well a the search result shown in the filenotfound page this commit change how the layout of search result is achieved to ensure they are always accessible via scrolling on all screen size while keeping the same layout on larger screen before search result at px before after search result at px after pr close ,fix
1533,devinfra set up new method for checking range of commits check a range of commits by retrieving the log file to be parsed with the expected format for the parser this change is in part of a larger set of change making the process for obtaining and parsing commits for release note creation and message validation consistent this consistency will make it easier to debug a well a ease the design of tooling which is built on top of these process pr close ,refactor
1534,common temporarily reexport and deprecate xhrfactory the moved xhrfactory still need to be available from angularcommon for some library that were built prior to otherwise they can not be used in application built post this commit add back the reexport of xhrfactory and deprecates it pr close ,fix
1535,docsinfra consistently format docscard element in the guide this commit format the docscard element used in contributorsguideoverview and doc guide to have consistent indentation and linewrapping pr close ,refactor
1536,docsinfra add updatingcontentgithubui guide to the sidenav it seems that the updatingcontentgithubui guide wa accidentally omitted from the sidenav in this commit add the guide to the sidenav pr close ,fix
1537,languageservice add perf tracing to languageservice add perf tracing for the public method in languageservice if the log level is verbose or higher trace performance result to the tsserver logger this logger is implemented on the extension side in angularvscodenglanguageservice pr close ,feat
1538,compiler handle casesensitive cs custom property currently we normalize all cs property name in the stylingbuilder which break custom property because theyre casesensitive these change add a check so that custom property arent normalized fix pr close ,fix
1539,common remove xhrfactory reexport from angularcommon this wa only done temporary to allow migration in google the removal breaking change message ha already been included in pr close ,refactor
1540,bazel allow setting compilationmode in ngmodule rule add a new attribute to the ngmodule rule that allows user to set the angular compiler compilationmode flag an alternative would have been to just enable the option in the userspecified tsconfig though that is more inconvenient if a bazel workspace want to change the compilation mode conditionally at anaylsis phase through build setting related to pr close ,feat
1541,compiler rename rfactorytarget to factorytarget this enumeration will now start to appear in publicly facing code a part of declaration so we remove the r to make it le specific to the internal name for the ivy renderercompiler pr close ,refactor
1542,compilercli use a shared function for gathering factory metadata each of the annotation had it own function for doing this and those method were generally employing spread operator that could allow unwanted property to leak into the factory metadata object this commit supply a shared function tofactorymetadata that avoids this spread of property into the returned function pr close ,refactor
1543,compiler remove rresolveddependencytype altogether now that other value were removed from rresolveddependencytype it meaning can now be inferred from the other property in the rdeclaredependencymetadata type this commit remove this enum and update the code to work without it pr close ,refactor
1544,compiler remove unused dependenciesfromglobalmetadata function this function is never called by any of the code in angular and is not publicly exported so it can be safely removed pr close ,refactor
1545,compilercli having an ɵinj field no longer guarantee injectability when ɵngdeclareinjector wa implemented the factory wa moved out to the ɵfac static property on the class this check wa not updated pr close ,refactor
1546,core remove the need for ɵɵinjectpipechangedetectorref this instruction wa created to work around a problem with injecting a changedetectorref into a pipe see this fix required special metadata for when the thing being injected wa a changedetectorref now this is handled by adding a flag injectorflagsforpipe to the ɵɵdirectiveinject call which avoids the need to special testcases changedetectorref in the generated code pr close ,refactor
1547,compilercli implement ɵɵngdeclarefactory this commit change the partial compilation so that it output declaration call rather than compiled factory function the jit compiler and the linker are updated to be able to handle these new declaration pr close ,refactor
1548,compiler remove injectfn option from factory metadata the injectfn reference can be inferred unamiguously from the target property so it is not needed pr close ,refactor
1549,docsinfra update doc on configuring project for travis ci remove sudo since it no longer ha use in travis ci build configuration change chrome addons to use the latest required method remove dist to make the travis ci build run in the latest ubuntu release xenial this because trusty us an older version of chrome which is not supported by the current the latest chrome driver used in ng ee test fix pr close ,docs
1550,devtools update dependency karma to ,build
1551,devtools update angularframework ,build
1552,compiler option to include html comment in parsedtemplate add a collectcommentnodes option on parsetemplateoptions which will cause the returned parsedtemplate to include an array of all html comment found in the template pr close ,refactor
1553,devinfra use all nonheader content for checking commit body length a discovered in commit body length check should consider all of the nonheader content a the commit body rather than the conventionalcommitparsers current method of considering everything after an issuepr reference to be the footer pr close ,fix
1554,core add migration for xhrfactory import automatically migrates xhrfactory from angularcommon to angularcommon pr close ,feat
1555,docsinfra support building the local angularinmemorywebapi package in ngpackagesinstaller in some case we want to test the aio app or doc example against the locally built angularinmemorywebapi for example to ensure that the change in a commit do not introduce a breaking change pr close ,build
1556,platformbrowser configure xhrfactory to use browserxhr with this change we move xhrfactory to the root entrypoint of angularcommmon this is needed so that we can configure xhrfactory di token at a platform level and not add a dependency between angularplatformbrowser and angularcommon currently when using httpclientmodule in a child module on the server referenceerror xmlhttprequest is not defined is being thrown because the child module ha it own injector and cause xhrfactory provider to be configured to use browserxhr therefore we should configure the xhrfactory at a platform level similar to other browser specific provider breaking change xhrfactory ha been moved from angularcommon to angularcommon before t import xhrfactory from angularcommon after t import xhrfactory from angularcommon close pr close ,fix
1557,devtools add opening instruction ,feat
1558,compilercli refactor the performance tracing infrastructure ngtsc ha an internal performance tracing package which previously ha not really seen much use it used to track performance statistic on a very granular basis microsecond per actual class analysis for example this had two problem it produced voluminous amount of data complicating the analysis of such result and providing dubious value it added nontrivial overhead to compilation when used which also affected the very performance of the operation being measured this commit replaces the old system with a streamlined performance tracing setup which is lightweight and designed to be alwayson the new system track metric time taken by various phase and operation within the compiler event counter which measure the shape and size of the compilation memory usage measured at various point of the compilation process if the compiler option traceperformance is set the compiler will serialize these metric to a json file at that location after compilation is complete pr close ,perf
1559,docsinfra add zach arend to contributorsjson add an entry for zach arend to the contributorsjson file pr close ,docs
1560,devtools update angularframework ,build
1561,devtools fix constrast on navigation tab make light mode icon the same colour a the text rangleangulardevtools ,fix
1562,devinfra use conventionalcommitsparser for commit parsing use conventionalcommitsparser for parsing commits for validation this is being done in anticipation of relying on this parser for release note creation unifying how commits are parsed will provide the most consistency in our tooling pr close ,refactor
1563,devtools change background colour to align with chrome devtools ,feat
1564,devtools update angularcli ,build
1565,core detect synthesized constructor that have been downleveled using t typescript ha changed it emitted syntax for synthetic constructor when using downleveliteration which affect e bundle that have been downleveled from e bundle this is typically the case for umd bundle in the apf spec a they are generated by downleveling the esm bundle into e the reflection capability in the runtime need to recognize this new form to correctly deal with synthesized constructor a otherwise jit compilation could generate invalid factory function fix pr close ,fix
1566,ngcc detect synthesized constructor that have been downleveled using t typescript ha changed it emitted syntax for synthetic constructor when using downleveliteration which affect e bundle that have been downleveled from e bundle this is typically the case for umd bundle in the apf spec a they are generated by downleveling the esm bundle into e ngcc need to detect the new syntax in order to correctly identify synthesized constructor function in e bundle fix pr close ,fix
1567,router add migration for activatedroutesnapshotfragment add a migration that cast the value of activatedroutesnapshotfragment to be nonnullable also move some code from the abstractcontrolparent migration so that it can be reused relates to pr close ,feat
1568,languageservice show suggestion when type inference is suboptimal the ivy language service us the compiler template typechecking engine which honor the configuration in the user tsconfigjson we recommend that user upgrade to stricttemplates mode in their project to take advantage of the best possible type inference and thus to have the best experience in language service if a project is not using stricttemplates then the compiler will not leverage certain type inference option it ha one case where this is very noticeable is the inference of let variable for structural directive that provide a template context guard such a ngfor without stricttemplates these guard will not be applied and such variable will be inferred a any degrading the user experience within language service this is working a designed since the language service should reflect type exactly a the compiler see them however the view engine language service used it own type system that would infer these type even when the compiler did not a a result it confusing to some user why the ivy language service ha worse type inference to address this confusion this commit implement a suggestion diagnostic which is shown in the language service for variable which could have been narrowed via a context guard but the type checking configuration didnt allow it this should make the reason why variable receive the any type a well a the action needed to improve the typing much more obvious improving the language service experience fix angularvscodenglanguageservice close pr close ,fix
1569,docsinfra remove unused contributor image this commit remove some contributor image that are no longer referenced in contributorsjson ie they belong to contributor that have since been removed btw removing these unused image save kb off the total size of the asset that are deployed along with the app pr close ,build
1570,devtools make tab menu action button icon smaller ,feat
1571,animation cleanup dom element when the root view is removed currently when importing browseranimationsmodule angular us animationrenderer a the renderer when the root view is removed the animationrenderer defers the actual work to the transitionanimationengine to do this and the transitionanimationengine doesnt actually remove the dom node but just call markelementasremoved the actual dom node is not removed until transitionanimationengine flush unfortunately though that flush will never happen since the root view is being destroyed and there will be no more flush this commit add flush call when the root view is being destroyed breaking change dom element are now correctly removed when the root view is removed if you are using ssr and use the apps html for rendering you will need to ensure that you save the html to a variable before destorying the app it is also possible that test could be accidentally relying on the old behavior by trying to find an element that wa not removed in a previous test if this is the case the failing test should be updated to ensure they have proper setup code which initializes element they rely on pr close ,fix
1572,router fragment can be null activatedroutefragment wa typed a observablestring but could emit both null and undefined due to incorrect nonnull assertion these nonnull assertion have been removed and fragment ha been retyped to string null breaking change strict null check will report on fragment potentially being null migration path add null check fix fix pr close ,fix
1573,devtools update angularcli ,build
1574,compiler use ɵɵinjectordeclaration rather than ɵɵinjectordef in compiled output the ɵɵinjectordef interface is internal and should not be published publicly a part of library this commit update the compiler to render an opaque type ɵɵinjectordeclaration for this instead which appears in the typing for compiled library pr close ,refactor
1575,core rename ɵɵfactorydef to ɵɵfactorydeclaration th ɵɵfactorydef type will appear in published library via their typing file to describe what type dependency a di factory ha the parameter on this type are used by tooling such a the language service to understand the di dependency of the class being created by the factory this commit move the type to the publicdefinitionsts file alongside the other type that have a similar role and it renames it to ɵɵfactorydeclaration to align it with the other declaration type such a ɵɵdirectivedeclaration and so on pr close ,refactor
1576,core rename withmeta type to declaration and alias to unknown these type are only used in the generated typing file to provide information to the angular compiler in order that it can compile code in downstream library and application this commit alias these type to unknown to avoid exposing the previous alias type such a ɵɵdirectivedef which are internal to the compiler pr close ,refactor
1577,core fix typo in interface doc the terminology use in the comment did not match the actual type being referred to pr close ,docs
1578,docsinfra remove image size exclusion list in the size of contributor image wa limited but some image were already too large so an exclusion list wa added these image have now been reduced so the exclusion list is no longer needed the file were reduced by a combination of running them through the online service and manually setting their size to px wide or tall using the macos image preview app pr close ,refactor
1579,devtools update angularframework ,build
1580,devinfra remove commit message wizard and builder removing commit message builder and wizard a they are unused and unneeded pr close ,fix
1581,devinfra validate breaking change commit message with this change we valid breaking change description a per our contribution guideline see pr close ,feat
1582,compiler correctly process multiple rule containing host selector when there wa more than one rule in a single style string only the first rule wa having it host selector processed correctly now subsequent rule will also be processed accurately fix pr close ,fix
1583,core remove obsolete check for class and classname presence previously presence of both class and classname binding on an element wa treated a compiler error implemented in later the situation wa improved to actually allow both binding to coexist see however the compiler check wa not removed completely the only situation where the error is thrown at this moment is when static but with interpolation and bound class attribute are present on an element for ex div class one classtwodiv in the current situation the error is acually misleading a it refers to classname this commit remove the mentioned compiler check a obsolete and make the class and style attribute processing logically the same the last occurrence is used to compute the value pr close ,fix
1584,docsinfra add profile picture size check this commit update the logic that validates contributorsjson data and introduces a new check that verifies that profile image dont exceed specified limit pr close ,feat
1585,localize expose documentation for the angularlocalize package pr close ,docs
1586,devtools disable flame graph animation ,perf
1587,devtools disable critical cs inlining because of csp ,fix
1588,devtools sort array index in ascending order ,fix
1589,devtools make flamegraph scrollable ,fix
1590,devtools update dependency jasminecore to ,build
1591,devtools update angularcli ,build
1592,docsinfra upgrade cli command doc source to beffecae updating angularmaster from clibuildsmaster relevant change in commit range modified helpextractinjson pr close ,build
1593,compilercli add useinlining option to type check config this commit fix the behavior when creating a type constructor for a directive when the following condition are met the directive ha bound generic parameter inlining is not available this happens for language service compiles previously we would throw an error saying inlining is not supported in this environment the compiler would stop type checking and the developer could lose out on getting error after the compiler give up this commit add a useinlinetypeconstructors to the type check config when set to false we use any type for bound generic parameter to avoid crashing when set to true we inline the type constructor when inlining is required address pr close ,fix
1594,compilercli dont use fakeenvironment for tcb test for the test in packagescompilerclisrcngtsctypecheck this commits us a typecheckfile for the environment rather than a fakeenvironment using a real environment give u more flexibility with testing pr close ,refactor
1595,devtools update angularcli ,build
1596,devtools update angularframework ,build
1597,devtools update the typescript compiler ,build
1598,core drop support for typescript and drop support for typescript and across the repo the typing check for wa kept in order to ensure that we dont break g pr close ,feat
1599,core support typescript update the repo to typescript and tslib pr close ,feat
1600,compilercli separate used component from used directive in partial declaration the partial declaration of a component includes the list of directive that are used in it template including some metadata of the directive which can be used during actual compilation of the component used component are currently part of this list a component are also directive this commit split the used component into a dedicate property in the partial declaration which allows for template compilation to optimize the generated code for component pr close ,refactor
1601,docsinfra upgrade cli command doc source to f updating angularmaster from clibuildsmaster relevant change in commit range modified helpbuildjson helplintjson pr close ,build
1602,devtools add tooltip in bar chart ,feat
1603,devtools make the bar chart scrollable ,fix
1604,devtools update angularcli ,build
1605,ngcc support read helper a used by typescript this commit complement the support for the spreadarray helper that wa added in microsofttypescript the prior helper spread and spreadarrays used the read helper internally but the helper is now emitted a an argument to spreadarray so ngcc now need to support evaluating it statically the real implementation of read read an iterable into an array but for ngccs static evaluation support it is sufficient to only deal with array a is additionally the optional n parameter is not supported a that is only emitted for array destructuring syntax which ngcc doe not have to support pr close ,feat
1606,ngcc support spreadarray helper a used by typescript in typescript the spread and spreadarrays helper were both replaced by the new helper function spreadarray in microsofttypescript these helper may be used in downleveled javascript bundle that ngcc ha to process so ngcc ha the ability to statically detect these helper and provide evaluation logic for them because angular is adopting support for typescript it becomes possible for library to be compiled by typescript and thus ngcc ha to add support for the spreadarray helper the deprecated spread and spreadarrays helper are not affected by this change close pr close ,feat
1607,docsinfra upgrade cli command doc source to eea updating angularmaster from clibuildsmaster relevant change in commit range modified helpgeneratejson helpnewjson pr close ,build
1608,form make radiocontrolregistry class treeshakable this commit make the radiocontrolregistry class treeshakable by adding the providedin property to it injectable decorator now if the radio button are not used in the app thus no radiocontrolvalueaccessor directive is initialized the radiocontrolregistry should not be included into application prod bundle pr close ,perf
1609,form make formbuilder class treeshakable this commit make the formbuilder class treeshakable by adding the providedin property to it injectable decorator now if the formbuilder class is not referenced in application code it should not be included into it production bundle pr close ,perf
1610,ngcc do not compile javascript source if typingsonly processing is repeated the recently introduced typingsonly mode in ngcc would incorrectly write compiled javascript file if typingsonly mode wa requested in case the typing of the entrypoint had already been processed in a prior run of ngcc the corresponding format property for which the javascript file were written were not marked a processed though a the typingsonly mode excluded the format property itself from being marked a processed consequently subsequent run of ngcc would not consider the entrypoint to have been processed and recompile the javascript bundle once more resulting in duplicate ngcc import fix pr close ,fix
1611,core fix typo in developer doc pr close ,docs
1612,compiler fix typo in partial compilation comment pr close ,docs
1613,compilercli implement ɵɵngdeclarengmodule and ɵɵngdeclareinjector this commit change the partial compilation so that it output declaration call rather than definition call for ngmodules and injector the jit compiler and the linker are updated to be able to handle these new declaration pr close ,refactor
1614,compiler consolidate rcompiledexpression there were a number of almost identical interface used in the same way throughout the render compiler code this commit change the compiler to use the same interface throughout pr close ,refactor
1615,compiler remove unused code these function are not used so can be removed pr close ,refactor
1616,compiler move type in shared rpartialdeclaration interface all interface that extend rpartialdeclaration require a type property so it make sense to put it in the base interface pr close ,refactor
1617,compiler consolidate wrapreference this function is declared in multiple place the instance inside compiler are slightly different to those in compilercli so this commit consolidates them into two reusable function pr close ,refactor
1618,compiler use definitionmap and remove maptomapexpression by consistently using the definitionmap class there is no longer any need for the maptomapexpression function pr close ,refactor
1619,form avoid direct reference to the validators class currently the validators class contains a number of static method that represent different validators a well a some helper method since class method are not treeshakable any reference to the validator class retains all of it method even if youve used just one this commit refactors the code to extract the logic into standalone function and use these function in the code instead of referencing them via validators class that should make the code more treeshakable the validators class still retains it structure and call these standalone method internally to keep this change backwardscompatible pr close ,perf
1620,compilercli introduce httpcontext request context a longrequested feature for httpclient is the ability to store and retrieve custom metadata for request especially in interceptor this commit implement this functionality via a new context object for request each outgoing httprequest now ha an associated context an instance of the httpcontext class an httpcontext can be provided when making a request or if not then an empty context is created for the new request this context share it lifecycle with the entire request even across operation that change the identity of the httprequest instance such a rxjs retries the httpcontext function a an expando user can create typed token a instance of httpcontexttoken and readwrite a value for the key from any httpcontext object this commit implement the httpcontext functionality a followup commit will add angulario documentation pr close ,feat
1621,devtools call change tab helper when tab change a a result of the inspector being selected ,fix
1622,devtools update angularcli ,build
1623,form make builtin controlvalueaccessors more treeshakable this commit update form code to avoid direct reference to all builtin controlvalueaccessor class which prevents their treeshaking from production build instead a new static property is added to all builtin controlvalueaccessors which is checked when we need to identify whether a given controlvalueaccessors is a builtin one pr close ,perf
1624,form properly handle the change to the formgroup shape currently the code in the formgroupdirective assumes that the shape of the underlying formgroup never change and formcontrols are not replaced with other type in practice this is possible and form code should be able to process such change in formgroup shape this commit add extra check to the formgroupdirective class to avoid applying formcontrolspecific to other type fix pr close ,fix
1625,docsinfra fix codetabs in ie previously codetabs did not work correctly in ie more specifically due to how ie handle update to innerhtml the content of codepane element were cleared before we could capture them and pas them to the aiocode component this commit fix it by ensuring we capture the codepane content before clearing unneeded html before code tab in ie before after code tab in ie after pr close ,fix
1626,docsinfra fix display of angularjs logo on the press kit page in ie previously the angularjs svg logo shown on the press kit page wa not displayed correctly in ie see the image below this commit fix it by explicitly specifying the svg viewbox on the logo before presskit angularjs logo in ie before after presskit angularjs logo in ie after pr close ,fix
1627,docsinfra fix the layout of the feature page in ie ie doe not support justifycontent spaceevenly and therefore fall back to the default flexstart breaking the layout of the item in the feature page see the image below this commit fix the layout by specifying spacearound a a fallback for justifycontent which keep the layout closer to the intended before feature page layout in ie before after feature page layout in ie after pr close ,fix
1628,docsinfra fix the layout of doc page in ie ie doe not recognize the main element a a block element and therefore it doe not apply marginpaddingswidths a expected this resulted in the layout of doc page being broken in ie see the image below this commit fix the layout by explicitly setting sidenavcontent which is a main element to display block before doc page layout in ie before after doc page layout in ie after pr close ,fix
1629,docsinfra fix angulario on browser that support custom element but not e before angulario wa broken on ie due to missing a polyfill for an api reflectconstruct needed by the custom element e shim tried to fix this by loading the necessary polyfill esreflectconstructjs on browser that do not support e module including ie it turn out that the fix in wa itself broken because the esreflectconsructjs script included directly in the page via a script tag wa in commonjs format which can not run in the browser a is by chance this still allowed browser that supported neither custom element nor e module such a ie to work correctly a a sideeffect of loading the webcomponentscustomelements polyfill after the custom element e shim nativeshimjs however on the few browser that natively support custom element but not e module angulario would still be broken this commit correctly fix angulario on all browser by properly bundling the polyfills and transpiling to e implementationwise we use esbuild for bundling the polyfills and converting from commonjs to a browsercompatible iifebased format and swc for downleveling the code to e since esbuild only support e pr close ,fix
1630,core switch emitdistinctchangesonlydefaultvalue to true breaking change switching default of emitdistinctchangesonlydefaultvalue which change the default behavior and may cause some application which rely on the incorrect behavior to fail emitdistinctchangesonly flag ha also been deprecated and will be removed in a future major release the previous implementation would fire change querylistchangessubscribe whenever the querylist wa recomputed this resulted in an artificially high number of change notification a it is possible that recomputing querylist result in the same list when the querylist get recomputed is an implementation detail and it should not be the thing that determines how often change event should fire unfortunately fixing the behavior outright caused too many existing application to fail for this reason angular considers this fix a breaking fix and ha introduced a flag in contentchildren and viewchildren that control the behavior export class querycompwithstrictchangeemitparent contentchildrenfoo this option is the new default with this change emitdistinctchangesonly true foos querylistany for backward compatibility before v emitdistinctchangesonlydefaultvalue wa set to false this change change the default to true pr close ,fix
1631,devtools update dependency karma to ,build
1632,devtools hide router tree if router config isnt found ,feat
1633,devtools use resizeobserver for directive forest to handle reorienting split pane and toggling breadcrumb button ,refactor
1634,devtools refactor treemap visualizer to use resizeobserver instead of window resize listener ,refactor
1635,languageservice use export syntax for default export tsserver expects angularlanguageservice to provide a factory function a the default export commonjsstyle of the package the current implementation side step typescript import syntax by using moduleexports factory this allows the code to incorrectly reexport other symbol t export from api which transpiles to j var tslib requiretslib tslibexportstarrequireangularlanguageserviceapi export doing this meant that the package now ha a runtime dependency on tslib which is totally unnecessary with the proper export syntax tslib is removed and no other export are allowed output j function factory if typeof module object typeof moduleexports object var v factoryrequire export if v undefined moduleexports v else if typeof define function defineamd defineangularlanguageservice require export factory function require export use strict return function factorytsmodule var plugin return create function info var config infoconfig var bundlename configivy ivyjs languageservicejs plugin requirebundles bundlenametsmodule return plugincreateinfo getexternalfiles function project var a b return b a plugin null plugin void void plugingetexternalfiles null a void void acallplugin project null b void b onconfigurationchanged function config var a a plugin null plugin void void pluginonconfigurationchanged null a void void acallplugin config pr close ,build
1636,localize trim extracted equivtext value the viewengine message extraction would trim the value of the equivtext attribute this commit aligns the ivy extraction of these attribute fix pr close ,fix
1637,docsinfra upgrade cli command doc source to edcdbc updating angularmaster from clibuildsmaster relevant change in commit range modified helpaddjson helpbuildjson helpeejson helpextractinjson helpgeneratejson helpnewjson helpservejson helptestjson pr close ,build
1638,docsinfra generate the html page correctly previously the generated html page did not include a body tag in some browser such a ie this wa causing warning in the console this commit ensures the generated page contains a body tag it also fix the indentation in the generated page pr close ,fix
1639,docsinfra fix angulario on ie previously the angulario app wa broken on ie in particular page that included custom element would fail to load because the reflectconstruct method which the custom element e shim relies on wa not available this commit fix this by loading the polyfill for reflectconstruct on browser that do not support e including ie pr close ,fix
1640,docsinfra avoid unnecessarily loading custom element e shim the custom element spec is not compatible with e style class this mean e code compiled to e will not work with a native implementation of custom element to support browser that natively support custom element but not e module we load webcomponentscustomelementssrcnativeshimjs which minimally augments the native implementation to be compatible with e code see here for more detail previously the shim wa included in polyfillsts which meant it wa loaded in all browser even those supporting e module and thus not needing the shim this commit move the shim from polyfillsts to a nomodule script tag in indexhtml this will ensure that it is only loaded in browser that do not support e module and thus do not needed the shim note this commit also reduces size of the polyfills bundle by b b b pr close ,fix
1641,devtools update angularcli ,build
1642,devtools change flamegraph component input to have it be responsive by default ,feat
1643,common remove unused method from domadapter the domadapter is present in all angular apps and it method arent tree shakeable these change remove the method that either arent being used anymore or were only used by our own test note that these change arent breaking because the adapter is an internal api the following method were removed getproperty only used within our own test log guaranteed to be defined on console loggroup and loggroupend only used in one place it wa in the domadapter for builtin null checking loggroupend only used in one place it wa placed in the domadapter for built in null checking performancenow only used in one place that ha to be invoked through the browser console supportscookies unused getcookie unused getlocation and gethistory only used in one place which appears to have access to the dom already because it had direct access to window furthermore even if this wa being used in a nonbrowser context already the dominoadapter wa set up to throw an error the following apis were changed to be more compact supportsdomevents changed to a readonly property remove no longer return the removed node pr close ,perf
1644,localize render correct closing tag placeholder name in xliff when there are element in a translated message the start and end tag are encoded a placeholder the name of these placeholder are computed from the name of the element for example a will be startlink and a will be closelink if there are more than one element with the same name but different attribute then the starting placeholder name is made unique for example a hrefa would be startlink while a hrefb in the same message would then be called startlink but the closing tag will not be made unique since there are no attrbutes the always have the same text a which will produce for example closelink previously when extracting xliff formatted translation file the closing tag placeholder name were computed incorrectly from the opening tag placeholder name for example closelink this commit strip these type ending from the start tag placeholder name when computing the closing tag placeholder name it also ensures that the type of the placeholder is computed accurately in these case too fix pr close ,fix
1645,compilercli ensure module resolution cache is reused for typecheck program the angular compiler creates two tsprograms one for emit and one for template typechecking the creation of the typecheck program could benefit from reusing the tsmoduleresolutioncache that wa primed during the creation of the emit program this requires that the compiler host implement resolvemodulenames a otherwise typescript will setup a tsmoduleresolutionhost of it own for both program this commit ensures that resolvemodulenames is always implemented even if the originally provided compiler host doe not this is beneficial for the ngc binary pr close ,perf
1646,common change misspelled constant change misspelled constant from localid to localeid pr close ,docs
1647,docsinfra print info to help debugging sw cache issue from time to time an angulario page fails to load due to requesting a file that can not be found neither on the server nor in the cache we believe this is caused by the browser partially clearing a cache see for more detail some time ago we introduced swupdateunrecoverable to help work around this issue by reloading the page when such an error is detected however this issue still pop up occasionally for example in an attempt to help diagnose the issue this commit print more info regarding the sw state and cache content when this error occurs it will result in something like the following being printed to the console serviceworker activated cache ngswdbcontrol entry ffeefccebbadcacfaafefbafefbfa latestcfaafefbafefbfa cache ngswcfaafefbafefbfaassetsappshellcache entry cache ngswdbngswcfaafefbafefbfaassetsappshellmeta entry tsusedtrue if you see this error please report an issue at including the above log note this change increase the main bundle by b but it can be reverted a soon a we gather enough info to diagnose the issue pr close ,fix
1648,docsinfra simplify code snippet indentation in the cheat sheet guide previously the indentation of code snippet in the cheat sheet guide wa done using br element for line break and emsp html entity for space this wa laborious and put the onus on the author to remember to use these symbol instead of regular whitespace character discussed in this commit change the way code element are style inside the cheat sheet guide to allow using regular whitespace character in code snippet it also change all bremsp occurrence to n respectively to make code snippet more readable in the source code pr close ,refactor
1649,docsinfra improve the layout of the feature page on medium screen the feature page organizes feature in groupsrows of feature each on wide screen all paragraph of a grouprow can be shown next to each other on narrow screen between px and px the layout change to stack the paragraph vertically on medium screen however there is not enough space to show more than two paragraph next to each other previously the rd paragraph wa wrapped over to the next line this commit improves the layout on medium screen by switching to immediately stacking the paragraph vertically a soon a there is not enough space for them to be displayed in one row since the total width is still too much for one paragraph the paragraph are limited to of the total width before on px width feature page on px before after on px width feature page on px after pr close ,fix
1650,docsinfra avoid truncating several api list item previously with the min width of px per item several api list item were truncated this commit increase the min width per item to px which allows almost all item to have their full text shown it also increase the api list page max content width from em px to em px to allow item to be shown on three column despite their increased width this increase in the content width shouldnt negatively affect ux since the api list page us a multicolumn layout ie it doe not contain pxlines of text before apilist before after apilist after pr close ,fix
1651,docsinfra show ellipsis when text overflow in api list item previously when an api list item text overflowed it container it wa just hidden this made it often difficult to realize that there wa more text this commit fix this by ensuring an ellipsis is shown when the text overflow before apilist truncated before after apilist truncated after pr close ,fix
1652,docsinfra limit max content width on contributor and cheat sheet page previously the content width on the contributor page about and the cheat sheet guide guidecheatsheet wa unlimited ie the content would take up all the available space horizontally this wa not very ergonomic on large screen especially on the cheat sheet guide there wa a lot of unnecessary whitespace between the code shown on the left column and the description shown on the right column this commit fix this by setting a max content width for both page of em px by default this keep the content at a more manageable width and avoids unnecessary whitespace before contributor contributor page on px before before cheatsheet cheatsheet on px before after contributor contributor page on px after after cheatsheet cheatsheet on px after pr close ,fix
1653,docsinfra use more consistent content width on marketing page previously each marketing page used a different limit for it content width if it had a limit at all and implemented the width limiting in a different way besides resulting in an inconsistent ux this also made it difficult to apply sitewide layout change this commit make the limit for most marketing page consistent and us the same cs class to make it easier to apply sitewide change in the future the chosen limit is slightly larger than that of doc page empx v empx because marketing page have a different type of content and layout ie image multicolumn layout etc finally this commit also remove obsolete wrapper element cs class and cs style that are no longer necessary after the change notably the homepage and the contributor page about have remained unchanged because the former ha it own layout that is different from other marketing page and the latter would offer a worse ux with a small content width limit a the one used on other marketing page the content width of the rest of the marketing page change slightly a a result of the change in this commit but not in a way that would have a negative impact on ux more specifically page url size before size after contribute px px event unlimited px feature px px presskit px px resource px px pr close ,refactor
1654,docsinfra fix code indentation in contributorlistcomponents template this commit fix the indentation of the template of contributorlistcomponent to make it more readable pr close ,refactor
1655,docsinfra remove unnecessary wrapper div from the cheat sheet guide this commit remove an unnecessary wrapper div from the cheat sheet guide the cs style that referenced the element id cheatsheet have been updated to use pageguidecheatsheet instead pr close ,refactor
1656,docsinfra fix code styling in the cheat sheet guide since code element have a distinctive background to make them stand out from regular text however this styling is not desirable in certain cell of the cheat sheet guide table which exclusively contain code this commit update the code styling to remove the distinctive background in those cheat sheet cell before cheatsheet code before pr since cheatsheet code since pr after this commit cheatsheet code after pr close ,fix
1657,docsinfra fix styling of code element on older browser previously styling of code element utilized the not cs pseudoclass with multiple selector noth h it turn out that older browser such a ie do not support multiple selector in a single not instance see mdn and caniuse for more info this commit fix code styling to use multiple separate not instance instead nothnoth so that they are styled correctly on older browser a well note this change seems to trigger some kind of bug in lighthouse that cause the ay score of start to be calculated a which is clearly wrong this happens on linux tested on ci and locally using the window subsystem for linux wsl on window the score is computed correctly a example failure the bug seems to be related to the layout of the content and go away if we change the viewport size for example switching to lighthouse desktop config or make another change that affect the content layout for example reducing the padding of code element to work around the issue this commit update the testaioayjs script to test startrouting instead of start pr close ,fix
1658,docsinfra improve the layout of the feature page on medium screen the feature page organizes feature in groupsrows of feature each on wide screen all paragraph of a grouprow can be shown next to each other on narrow screen the layout change to stack the paragraph vertically on medium screen however the rd paragragh is wrapped over to the next line previously the wrapped content wa leftaligned which left a lot of empty space on the right this commit improves the layout on medium screen by ensuring the paragraph are horizontally centered with space distributed evenly around them before feature page before after feature page after pr close ,fix
1659,docsinfra use a fixed topmenu on marketing page a well previously in contrast to doc page marketing page had a nonfixed topmenu which meant that the topmenu would scroll out of the viewport along with the rest of the content this had a couple of downside the ui wa different between page ie different topmenu behavior on doc v marketing page since some of the marketing page are long it wa not easy for people to navigate to a different page ie they had to scroll all the way back up this commit improves the ux by using the same fixed topmenu on all page which restores consistency and allows the user to navigate around more easily note the old behavior nonfixed topmenu is kept on the homepage since it topmenu design in a little different than other page eg it us a transparent topmenu and would not play well with a fixed topmenu pr close ,fix
1660,docsinfra do not underline link icon on hover the external link in the doc content and the download link in the press kit page have icon next to their text an external link icon and a download icon respectively previously when hovering over one of those link the icon used to get underlined along with the link text which wa not desirable this commit fix it by changing the mechanic of how these icon are positioned inside the anchor element so that only the link text is underlined on hover before external link on hover before before presskit link on hover before after external link on hover after after presskit link on hover after pr close ,fix
1661,form split form example app into reactive and templatedriven one one of the main goal of the bundling test is to verify that unused symbol are treeshaken away in prod bundle currently both reactive and templatedriven test apps are merged into one in order to make these treeshaking test even more useful this commit split exiting test app into two so that we can further optimize set of symbol that should be retained in both scenario pr close ,test
1662,compiler move factory out of injector definition previously injector definition contained a factory property that wa used to create a new instance of the associated ngmodule class now this factory ha been moved to it own ɵfac static property on the ngmodule class itself this is inline with how directive component and pipe are created there is a small size increase to bundle size for each ngmodule class because the ɵfac take up a bit more space before j let a class n return numod ccbtype n nuinj cbbfactory functiont return new t n import eaforchilds ea n after j let a class n return nufac functiont return new t n numod ccbtype n nuinj cbbimports raforchilds ra n in other word nufac is longer than factory by character and only because the tooling insists on encoding ɵ a u this can be mitigated in a future pr by only generating the ɵfac property if it is actually needed pr close ,refactor
1663,compiler separate compilefactoryfunction from compileinjector this commit move the creation of the injector factory function out so that it can be more easily refactored further pr close ,refactor
1664,compilercli add readmemd for template type checking system this commit add a semicomprehensive readme file which describes the design goal and implementation of the template type checking engine which power the angular language service a well a the main compiler understanding of type in template pr close ,docs
1665,compilercli avoid module resolution in cycle analysis the compiler performs cycle analysis for the used directive and pipe of a component template to avoid introducing a cyclic import into the generated output the used directive and pipe are represented by their output expression which would typically be an externalexpr those are responsible for the generation of an import statement cycle analysis need to determine the tssourcefile that would end up being imported by these externalexprs a the tssourcefile is then checked against the program importgraph to determine if the import is allowed ie doe not introduce a cycle to accomplish this the externalexpr wa dissected and ran through module resolution to obtain the imported tssourcefile this module resolution step is relatively expensive a it typically need to hit the filesystem even in the presence of a module resolution cache would these module resolution request generally see cache miss a the generated import originates from a file for which the cache ha not previously seen the imported module specifier this commit remove the need for the module resolution by wrapping the generated expression in an emittedreference struct this allows the reference emitter mechanism that is responsible for generating the expression to also communicate from which tssourcefile the generated expression would be imported precluding the need for module resolution down the road pr close ,perf
1666,compilercli use bound symbol in import graph in favor of module resolution the import graph scan source file for it import and export statement to extract the source file that it importsexports such statement contain a module specifier string and this module specifier used to be resolved to the actual source file using an explicit module resolution step this is especially expensive in incremental rebuilds a the module resolution cache ha not been primed during program creation assuming that the incremental program wa able to reuse the module resolution result from a prior compilation this meant that all module resolution request would have to hit the filesystem which is relatively slow this commit is able to replace the module resolution with typescript bound symbol of the module specifier this symbol corresponds with the tssourcefile that is being importedexported which is exactly what the import graph wa interested in a a result no filesystem access are done anymore pr close ,perf
1667,devinfra fix test order failure in test for the release command depending on test order the npmpackageinfocache contains information which cause the prompt result to be slightly different text pr close ,test
1668,core manually annotate desugarred core treeshakable provider with pureorbreakmycode this is necessary for closure compiler in order to support cross chunk code motion im intentionally not annotating these call site with pure at the moment because buildoptimizer doe it within the angular cli build in the future we might want to consider having both annotation here in case we change how buildoptimizer work pr close ,feat
1669,compiler emit pure or pureorbreakmycode annotation in the generated code this change mark all relevant define callsites a pure causing the compiler to emmit either pure or pureorbreakmycode annotation based on whether we are compiling code annotated for closure or terser this change is needed in g where we dont run build optimizer but we need the code to be annotated for the closure compiler additionally this change allows for simplification of cli and build optimizer a they will no longer need to rewrite the generated code there are still other place where a build optimizer rewrite will be necessary so we cant remove it we can only simplify it pr close ,feat
1670,bazel fix incorrect rollup plugin method signature update the resolvebazel method signature to align with the rollup plugin resolveid api pr close ,fix
1671,localize add script to migrate away from legacy message id add a new flag to localizeextract called migratemapfile which will generate a json file that can be used to map legacy message id to cannonical one also includes a new script called localizemigrate that can take the mapping file which wa generated by localizeextract and migrate all of the id in the file that were passed in pr close ,feat
1672,core add usage example for appinitializer token add multiple usage example for appinitializer using promise observable and multi provider close pr close ,docs
1673,compilercli detect semantic change and their effect on an incremental rebuild in angular program changing a file may require other file to be emitted a well due to implicit ngmodule dependency for example if the selector of a directive is changed then all component that have that directive in their compilation scope need to be recompiled a the change of selector may affect the directive matching result until now the compiler solved this problem using a single dependency graph the implicit ngmodule dependency were represented in this graph such that a changed file would correctly also cause other file to be reemitted this approach is limited in a few way the file dependency graph is used to determine whether it is safe to reuse the analysis data of an angular decorated class this analysis data is invariant to unrelated change to the ngmodule scope but because the single dependency graph also tracked the implicit ngmodule dependency the compiler had to consider analysis data a stale far more often than necessary it is typical for a change to eg a directive to not affect it public api—its selector input output or exportas clause—in which case there is no need to reemit all declaration in scope a their compilation output wouldnt have changed this commit implement a mechanism by which the compiler is able to determine the impact of a change by comparing it to the prior compilation to achieve this a new graph is maintained that track all public api information of all angular decorated symbol during an incremental compilation this information is compared to the information that wa captured in the most recently succeeded compilation this determines the exact impact of the change to the public api which is then used to determine which file need to be reemitted note that the file dependency graph remains a it is still used to track the dependency of analysis data this graph doe no longer track the implicit ngmodule dependency which allows for better reuse of analysis data these change also fix a bug where template typechecking would fail to incorporate change made to a transitive base class of a directivecomponent this used to be a problem because transitive base class were not recorded a a transitive dependency in the file dependency graph such that prior typecheck block would erroneously be reused this commit also fix an incorrectness where a change to a declaration in ngmodule a would not cause the declaration in ngmodules that import from ngmodule a to be reemitted this wa intentionally incorrect a otherwise the performance of incremental rebuilds would have been far worse this is no longer a concern a the compiler is now able to only reemit when actually necessary fix fix close pr close ,perf
1674,core dont use innerhtml in domtestcomponentrenderer the use of innerhtml is unnecessary and cause trustedtype violation pr close ,refactor
1675,core colocate readwrite patched data function this commit refactors ivy runtime code to move readpatcheddata and attachpatcheddata function to a single location for better maintainability and to make it easier to do further change if needed the readpatchedlview function wa also moved to the same location since it a layer on top of the readpatcheddata function pr close ,refactor
1676,docsinfra capture all decorator in docgen in cff we broke the decorator doc because the docgen no longer knew how to identify them this commit update the dgeni processor responsible for identifying the decorator in the code and ensures that the doc are now generated correctly fix pr close ,build
1677,docsinfra run ay test against tutorial and update ay score this commit add tutorial to the list of angulario page that we run ay test against and update the required score to match the current one to avoid a future regression going unnoticed pr close ,test
1678,docsinfra print the browser version in auditwebappjs to help debugging this commit update the auditwebappjs script used to run pwa and ay test on angulario to also print the version of the browser used to run the test this can help when debugging a ci failure pr close ,test
1679,devtools update dependency ngxflamegraph to v ,build
1680,devtools update angularcli ,build
1681,devtools update dependency typeschrome to ,build
1682,devtools implement programatic json download logic to replace dependency on filesaver library ,refactor
1683,devtools update angularframework ,build
1684,form add integration test app to keep track of payload size this commit add a formsbased test app into the integration folder to have an ability to measure and keep track of payload size for the change in form package pr close ,test
1685,devtools remove unneccessary method from directiveforest component and provide semantic meaning to some variable name ,refactor
1686,devtools update angularframework ,build
1687,compilercli support producing closurespecific pure annotation for certain generated function call the compiler emits a pure annotation which informs terser the optimizer about the purity of a specific function call this commit expands that system to produce a new closurespecific pureorbreakmycode annotation when targeting the closure optimizer instead of terser pr close ,feat
1688,languageservice only provide dom completion for inline template we currently provide completion for dom element in the schema a well a attribute when we are in the context of an external template however these completion are already provided by other extension for html context like emmet to avoid duplication of result this commit update the language service to exclude dom completion for external template they are still provided for inline template because those are not handled by the html language extension pr close ,fix
1689,common cleanup location change listener when the root view is removed in the new behavior angular cleanup popstate and hashchange event listener when the root view get destroyed thus event handler are not added twice when the application is bootstrapped again breaking change method of the platformlocation class namely onpopstate and onhashchange used to return void now those method return function that can be called to remove event handler pr close pr close ,fix
1690,core more precise type for appinitializer token this commit update the type of the appinitializer injection token to better document the expected type of value that angular handle only promise and observables are awaited and other type of value are ignored so the type of appinitializer ha been updated to promiseunknown observableunknown void to reflect this behavior breaking change the type of the appinitializer token ha been changed to more accurately reflect the type of return value that are handled by angular previously each initializer callback wa typed to return any this is now promiseunknown observableunknown void in the unlikely event that your application us the injectorget or testbedinject api to inject the appinitializer token you may need to update the code to account for the stricter type additionally typescript may report the t error if the appinitializer token is used in an expression of which it inferred type ha to be emitted into a dts file to workaround this an explicit type annotation is needed which would typically be provider or provider close pr close ,feat
1691,devtools time label on profiler ,fix
1692,core remove duplicated emptyobj constant the codebase currently contains several emptyobj constant and they can end up in the bundle of an application a recent commit fbe tipped u off a it introduced several noop occurrence in the golden symbol file after investigating we decided to remove the duplicated symbol this probably shave only a few byte but this commit remove the duplicated function by always using the one in coresrcutilsempty pr close ,fix
1693,compiler remove unused buildoptimizer constant these constant were created in a very early phase of ivy development they have never been used in the framework no the buildoptimizer tool pr close ,refactor
1694,core do not publish ɵɵgetfactoryof previously ɵɵgetfactoryof wa privately published from angularcore since in the past it wa assumed that this might be an instruction generated by the compiler this is not currently the case so this commit remove it from the private export and renames it to indicate that it is a local helper function pr close ,refactor
1695,core remove getfactoryof from angularcoredienv this function is never actually generated directly so it can be removed from the context passed to the jit compiler pr close ,refactor
1696,compiler remove unused emitallpartialmodules and associated code this method doe not appear to be used in the project this commit remove it and code that it exclusively depended upon or depended upon it pr close ,refactor
1697,compiler remove unused function the accessexportscope function is not used anymore pr close ,refactor
1698,core use unknown rather than never for private property before unknown wa available the never type wa used to discourage application developer from using private property the unknown type is much better suited for this pr close ,refactor
1699,router fix typo for the equivalent exactmatchoptions value when routerisactive is called with true the exactmatchoptions value is set for this case pr close ,docs
1700,devtools fix component styling for tooltip add overflow to tree wrapper truncate long tree label ,feat
1701,devtools update angularcli ,build
1702,devtools implement dark mode styling for loading screen ,feat
1703,devtools disable devtools for production application ,feat
1704,languageservice dont show external template diagnostics in t file the compiler considers template diagnostics to belong to the source file of the component using the template this mean that when diagnostics for a source file are reported it return diagnostics of t structure in the actual source file diagnostics for any inline template and diagnostics of any external template the language service us a different model and want to show template diagnostics in the actual html file thus it not necessary and in fact incorrect to include such diagnostics for the actual t file a well doing this currently cause a bug where external diagnostics appear in the t file with random source span this commit change the language service to filter the set of diagnostics returned by the compiler and only include those diagnostics with span actually within the t file itself fix pr close ,fix
1705,languageservice always attempt html ast to template ast conversion for l the current logic in the compiler is to bail when there are error when parsing a template into an html ast or when there are error in the in metadata a a result a template with these type of parse error will not have any information for the language service this is because we never attempt to conver the html ast to a template ast in these scenario so there are no template ast node for the language service to look at for information in addition this also mean that the error are never displayed in the template to the user because there are no node to map the error to this commit add an option to the template parser to temporarily ignore the html parse and in meta error and always perform the template ast conversion at the end the in and html parse error are appended to the returned error list while this seems risky it at least provides u with more information than we had before which wa and it only done in the context of the language service when the compiler is configured to use poisoned data html parse and in meta error can be interpreted a a poisoned template fix angularvscodenglanguageservice pr close ,fix
1706,languageservice provide element completion after open tag an opening tag without any character after it is interperted a a text node just a le than character rather than the start of an element in the template ast this commit adjusts the autocomplete engine to provide element autocompletions when the nearest character to the left of the cursor is part of the fix for angularvscodenglanguageservice pr close ,fix
1707,compiler allow binding to autocomplete property on select and textarea element update the schema to allow binding to the autocomplete property of a textarea or select fix pr close ,fix
1708,compiler recover from an incomplete open tag at the end of a file the compiler parsing code ha logic to recover from incomplete open tag ie div but the recovery logic doe not handle when the incomplete tag is terminated by an eof this commit update the logic to allow for the eof character to be interpreted a the end of the tag open so that the parser can continue processing it will then fail to find the end tag and recover by marking the open tag a incomplete part of pr close ,fix
1709,docsinfra upgrade cli command doc source to daf updating angularmaster from clibuildsmaster relevant change in commit range modified helpbuildjson pr close ,build
1710,languageservice add plugin option to force stricttemplates this commit add a new configuration option forcestricttemplates to the language service plugin to allow user to force enable stricttemplates this is needed so that the angular extension can be used inside google without changing the underlying compiler option in the ngmodule build rule pr close ,fix
1711,docsinfra update angular framework material and cli to latest method this commit update the angular framework angular cdkmaterial and angular cli to latest stable version and respectively this update also fix a lighthouse audit fail due to angularcore being identified a vulnerable to x regarding the payload size increase they are mostly attributed to angular material before this commit b after framework update b b after material update b b after cli update b b pr close ,build
1712,docsinfra update lighthouse to version in this version we no longer need our custom logic to skip certain http related audit on localhost since lighthouse will treat it a a secure context similar to how browser do see also googlechromelighthouse pr close ,build
1713,languageservice only provide template result on reference request vscode only deduplicates reference result for go to reference request but doe not deduplicate them for find all reference request the result is that user see duplicate reference for result in typescript file one from the builtin t extension and one from u while this is an issue in vscode see this commit provides a quick workaround on our end until it can be addressed there this commit should be reverted when microsoftvscodeissues is resolved fix pr close ,fix
1714,docsinfra correctly display event date on all timezones previously the event date displayed on the angulario event page event wa off by one day on timezones with a negative offset from utc see this commit fix it by using the getutc method of the date object to extract the date info which are not affected by the user timezone pr close ,fix
1715,platformbrowser cast response of jsonparse cast the response of jsonparse to so that is not an any type this is because google doe not allow the use of any type pr close ,refactor
1716,add example for interceptor order add an example for the order of interceptor with image pr close ,docs
1717,compiler remove unreachable code the error function throw so no code after it is reachable some switch statement are exhaustive so no code after them are reachable pr close ,refactor
1718,animation cleanup dom element when the root view is removed currently when importing browseranimationsmodule angular us animationrenderer a the renderer when the root view is removed the animationrenderer defers the actual work to the transitionanimationengine to do this and the transitionanimationengine doesnt actually remove the dom node but just call markelementasremoved the actual dom node is not removed until transitionanimationengine flush unfortunately though that flush will never happen since the root view is being destroyed and there will be no more flush this commit add flush call when the root view is being destroyed breaking change dom element are now correctly removed when the root view is removed it is possible that test could be accidentally relying on the old behavior by trying to find an element that wa not removed in a previous test if this is the case the failing test should be updated to ensure they have proper setup code which initializes element they rely on pr close ,fix
1719,languageservice cant provide the input and output custom binding property name now the language service always us the name of the javascript property on the component or directive instance for this input or output this pr will use the right binding property name pr close ,fix
1720,compilercli ensure ngcc can handle wildcard basepaths ngcc us the path property to compute the potential basepaths for package that are being processed if the path contain a wildcard within a path segment ngcc wa not finding the basepath correctly now when a wildcard is found there is an additional search to look for path that might match the wildcard fix pr close ,fix
1721,devtools adding routertree test and reverting configuration ,refactor
1722,devtools adding router tree ,feat
1723,devtools add breadcrumb scroll button test ,test
1724,devtools create scroll button for breadcrumb feature ,feat
1725,core remove duplicated emptyarray constant the codebase currently contains several emptyarray constant and they can end up in the bundle of an application a recent commit fbe tipped u off a it introduced several noop occurrence in the golden symbol file after investigating with petebacondarwin we decided to remove the duplicated symbol this probably shave only a few byte but this commit remove the duplicated function by always using the one in coresrcutilsempty pr close ,fix
1726,docsinfra implement full template checking for example this commit turn on full template type checking and fix the example that had error pr close ,build
1727,docsinfra enable ivy in stackblitz example we need to explicitly set the enableivy option in a tsconfig file to tell stackblitz not to use viewengine this commit will generate an appropriate tsconfigjson file in the example data that is sent to stackblitz which match the ivy setting of the aio project itself pr close ,build
1728,docsinfra improve the layout of the resource page this commit improves the readability of the resource page by limiting the content max width to em which is px by default it also get rid of custom color value and either us the default color or color specified via sas variable before resource page before after resource page after this change ha been extracted from coauthoredby stefanie fluin sjtrimblegmailcom pr close ,fix
1729,docsinfra clean up styling of the aioresourcelist component this commit clean up the style and the elementsclasses used for styling the content of the aioresourcelist component this change ha been extracted from coauthoredby stefanie fluin sjtrimblegmailcom pr close ,refactor
1730,docsinfra center the contribute page this commit improves the layout of the contribute page by centering the content similar to other marketing page before contribute layout before after contribute layout after this change ha been extracted from coauthoredby stefanie fluin sjtrimblegmailcom pr close ,fix
1731,docsinfra use uptodate url in contribute link and replace deprecated mdbutton this commit replaces some outdated url in contribute link on the contribute page githubcomangularmaterial githubcomangularcomponents githubcomangularangularfire githubcomangularangularfire it also replaces the deprecated mdbutton attribute with matbutton pr close ,fix
1732,docsinfra remove unwanted underline when hovering over contributor info link this commit remove an unwanted underline effect when hovering over contributor info link contributorinfo infoitem this wa accidentally introduced in before contributor info on hover before after contributor info on hover after pr close ,fix
1733,docsinfra make inline code stand out more this commit improves the styling of inline code block to make them stand out more before code formatting before after code formatting after this change ha been extracted from coauthoredby stefanie fluin sjtrimblegmailcom pr close ,fix
1734,docsinfra improve the appearance of filterbutton element this commit improves the appearance of filterbutton element used to jump between different category in contributor and resource page before wide screen contributor button wide screen before before narrow screen contributor button narrow screen before after wide screen contributor button wide screen after after narrow screen contributor button narrow screen after this change ha been extracted from coauthoredby stefanie fluin sjtrimblegmailcom pr close ,fix
1735,docsinfra move filterbutton style inside groupbuttons since filterbutton element only appear inside groupbuttons element this commit move filterbutton cs style inside groupbuttons style pr close ,refactor
1736,docsinfra put the license reference in a separate paragraph in the footer this commit improves how sentence are broken up into line in the footer due to the limited maxwidth of the content by moving the license reference in a separate paragraph before footer before after footer after pr close ,fix
1737,docsinfra remove redundant sas mixin this commit remove the bp sas mixin which wa only used in one place and also included several unused codebranches pr close ,refactor
1738,docsinfra use sas variable for color used in theme this change ha been extracted from note the color name for the rc theme were computed using coauthoredby stefanie fluin sjtrimblegmailcom pr close ,refactor
1739,docsinfra increase margin of headerlinks this change ha been extracted from coauthoredby stefanie fluin sjtrimblegmailcom pr close ,fix
1740,devinfra properly tag github release a prerelease a appropriate previously all github release created by the release tooling tagged release a latest instead release which are created for the next tag on npm should be tagged a prerelease for github pr close ,fix
1741,devinfra clear cached bazel output before building artifact for publishing clearing the cached bazel output before building the artifact for publishing prevents an intermittent error found when the version is cached between publishes pr close ,fix
1742,common allow number or boolean a http params this change fix an incompatibility between the old angular package and it successor angularcommon by reintroducing the type that were supported before it now allows to use number and boolean directly a http params instead of having to convert it to string first before this params page page after this params page httpparams ha also been updated to have most of it method accept number or boolean value fix breaking change the method of the httpparams class now accept string number boolean instead of string for the value of a parameter if you extended this class in your application youll have to update the signature of your method to reflect these change pr close ,fix
1743,docsinfra add link to glossary for term on the press kit page the press kit page ha a terminology section that list a couple of term currently aot and jit compilation this commit add link to the corresponding entry in glossary to make it easier for people to find out what the term mean pr close ,fix
1744,docsinfra more clearly separate different section on the press kit page this commit add a horizontal line and some extra spacing between different section of the press kit page to make it easier to identify where one section end and the next begin before presskit section before after presskit section after pr close ,fix
1745,docsinfra improve the layout and appearance of the press kit page this commit improves the layout and appearance of the press kit page most notable change include center content and limit max width to em which is px by default remove uppercase transform for heading use a twocolumn layout for icon instead of one icon per row show download icon next to download link before wide presskit page wide before before narrow presskit page narrow before before narrow presskit page narrow before after wide presskit page wide after after narrow presskit page narrow after after narrow presskit page narrow after this change is based on code from coauthoredby stefanie fluin sjtrimblegmailcom pr close ,fix
1746,ngcc do not fail hard when a formatpath point to a nonexisting or empty file previously when ngcc encountered an entrypoint with a formatpath that pointed to a nonexisting or empty file it would throw an error and stop processing the remaining task in the past we used to ignore such formatpaths and continue processing the rest of the task see code this wa changed to a hard failure in dbcaccacecfeb looking at the code history the reason for changing the behavior wa an incorrect assumption that the condition could not fail this assumption failed to take into account the case where a rdparty library ha an invalid formatpath in it packagejson this is an issue with the library but it should not prevent ngcc from processing other packagesentrypointsformats this commit fix this by reporting the task a failed but not throwing an error thus allowing ngcc to continue processing other task fix pr close ,fix
1747,form add array example to get method pr close ,docs
1748,router add more findtuned control in routerlinkactiveoptions this commit add more configurability to the routerisactive method and routerlinkactiverouterlinkactiveoptions it allows tuning individual match option for query params and the url tree which were either both partial or both exact match in the past additionally it also allows matching against the fragment and matrix parameter fix breaking change the type of the routerlinkactiverouterlinkactiveoptions input wa expanded to allow more finetuned control code that previously read this property may need to be updated to account for the new type pr close ,feat
1749,animation add support for disabling animation through browseranimationsmodulewithconfig currently the only way to disable animation is by providing the noopanimationsmodule which doesnt allow for it to be disabled based on runtime information these change add support for disabling animation based on runtime information by using browseranimationsmodulewithconfigdisableanimations true pr close ,feat
1750,compiler ensure jit compilation of ɵɵngdeclarepipe work previously the compiler wa not evaluating the jit compilation of ɵɵngdeclarepipe but there wa no test to check it pr close ,fix
1751,languageservice use single entry point for ivy and view engine currently there are two entry point for the angularlanguageservice package angularlanguageservice this default entry point is for view engine l through the redirection of main field in packagejson it resolve to bundleslanguageservicejs angularlanguageservicebundlesivyjs this secondary entry point is for ivy l typescript recently changed the behavior of tsserver to allow only package name a plugin name for security reason this mean the secondary entry point for ivy l can no longer be used we implemented a quick hack in the module resolver in the extension repo to fix this but the long term fix should be in angularlanguageservice here the main field in packagejson is changed to indexjs and in the index file we conditionally load view engine or ivy based on the input config this eliminates the need for multiple entry point a part of this pr i also removed all source code for view engine and ivy included in the npm package consumer of this package should run the bundled output and nothing else this would help u prevent an accidental import that result in execution of unbundled code pr close ,fix
1752,localize ensure test pas on window these test were relying upon unixlike path which caused them to fail on window note that the filegroup bazel rule tends not to work well on window so this ha been replaced with copytobin instead pr close ,test
1753,ngcc support processing only the typing file of package some tool such a language server and ngpackagr only care about the processed typing generated by ngcc forcing these tool to process the javascript file a well ha two disadvantage first unnecessary work is being done which is time consuming but more importantly it is not always possible to know how the final bundling tool will want the processed javascript to be configured for example the cli would prefer the createivyentrypoints option but this would break noncli build tooling this commit add a new option typingsonly on the command line and typingsonly via programmatic api that instructs ngcc to only render change to the typing file for the entrypoints that it find and not to write any javascript file in order to process the typing a javascript format will need to be analysed but it will not be rendered to disk when using this option it is best to offer ngcc a wide range of possible javascript format to choose from and it will use the first format that it find ideally you would configure it to try the e fesm format first since this will be the most performant fix pr close ,refactor
1754,devtools prevent circular dependency between directivepropertyresolver and propertydatasource ,fix
1755,languageservice remove circular dependency this commit remove the circular dependency from bufferutilprojectbuffer pr close ,test
1756,languageservice remove old testing helper all spec have been switched to the new testing package the old test helper are no longer needed pr close ,refactor
1757,languageservice convert referencesspec to new testing package refactorlanguageservice convert referencesspec to new testing package pr close ,refactor
1758,languageservice migrate typedefinitionsspec to the new testing package refactorlanguageservice migrate typedefinitionsspec to the new testing package pr close ,refactor
1759,languageservice migrate quickinfospec to new testing package refactorlanguageservice migrate quickinfospec to new testing package pr close ,refactor
1760,languageservice migrate definitionsspec to new testing package refactorlanguageservice migrate definitionsspec to new testing package pr close ,refactor
1761,languageservice migrate gettcbspec to new testing package refactorlanguageservice migrate gettcbspec to new testing package pr close ,refactor
1762,languageservice migrate diagnosticspec to new test infrastructure refactorlanguageservice migrate diagnosticspec to new test infrastructure pr close ,refactor
1763,languageservice migrate completionsspec to new testing api refactorlanguageservice migrate completionsspec to new testing api pr close ,refactor
1764,languageservice update compilerspec to use the new testing env this commit update compilerspects in the ivy l suite to utilize the new testing environment which wa introduced in the previous commit eventually all spec should be converted but converting one right now help ensure that the new testing env is working properly and able to support real test pr close ,test
1765,core drop support for zonejs x with this change we drop support for zonejs x this is needed because in version the cli will only work with see angularangularcli breaking change minimum supported zonejs version is pr close ,feat
1766,languageservice add type guard for nglanguageservice type guard should be colocated with the nglanguageservice interface not in angularvscodenglanguageservice pr close ,refactor
1767,languageservice clean up gettcb interface gettcbresponse should not be a union type with undefined pr close ,refactor
1768,bazel use bazel runfiles helper for resolving file name use bazels runfiles helper to resolve file name path rather than require pr close ,test
1769,languageservice skip angular analysis when quick info requested outside a template the angular l doe not provide quick info when the given position is not inside a template a an optimization we can quickly look at the file and determine if we are at a position that is part of an angular template if not we bail before asking the compiler for any more information note that the angular l already provides no quick info when outside a template file but currently asks the compiler to analyze the program before it determines that information pr close ,perf
1770,common avoid mutating context object in ngtemplateoutlet currently ngtemplateoutlet recreates it view if it template is swapped out or a context object with a different shape is passed in if an object with the same shape is passed in we preserve the old view and we mutate the previous object this mutation of the original object can be undesirable if two object with the same shape are swapped between two different template outlet the current behavior is a result of a limitation in core where the context of an embedded view is readonly however a previous commit made it writeable these change resolve the context mutation issue and clean up a bunch of unnecessary logic from ngtemplateoutlet by taking advantage of the earlier change fix pr close ,fix
1771,core allow embeddedviewref context to be updated currently embeddedviewrefcontext is readonly which mean that the only way to update it is to mutate the object which can lead to some undesirable outcome if the template and the context are provided by an external consumer see these change make the property writeable since there doesnt appear to be a specific reason why it wa readonly to begin with pr close ,fix
1772,compilercli separate out constant target of g patch this commit move a constant which is affected by a g sync patch into a separate file this way change to the rest of the compiler codebase have no chance of conflicting with the patched code pr close ,refactor
1773,devtools theming of profiler tab ,fix
1774,languageservice shortcircuit l operation when certain information is requested from the angular language service we know that there will be no additional angular information if the requested position is not in an inline template template url or style url to avoid unnecessary compiler compilation we short circuit and return undefined before asking the compiler for any type of answer which would trigger a partial compilation at the very least fix pr close ,perf
1775,core ngzone coaleascing option should trigger onstable correctly fix when setting ngzoneruncoalescing to true onstable is not emitted correctly the reason is before this commit the code look like this application code call ngzonerun ngzonerun step inside ngzone in the oninvoke hook ngzone try to delay the checkstable function delaychangedetectionforeventszone ngzoneprivate if zonelastrequestanimationframeid step return zonelastrequestanimationframeid zonenativerequestanimationframecallglobal step if zonefaketopeventtask zonefaketopeventtask zonerootscheduleeventtaskfaketopeventtask zonelastrequestanimationframeid step updatemicrotaskstatuszone step checkstablezone step undefined zonefaketopeventtaskinvoke updatemicrotaskstatuszone function updatemicrotaskstatuszone ngzoneprivate ignorecheckrafid false if zonehaspendingmicrotasks zoneshouldcoalesceeventchangedetection zoneshouldcoalescerunchangedetection zonelastrequestanimationframeid step zonehaspendingmicrotasks true else zonehaspendingmicrotasks false function checkstablezone ngzoneprivate if zonenesting zonehaspendingmicrotasks zoneisstable step try zonenesting zoneonmicrotaskemptyemitnull application ref subscribe onmicrotaskempty ngzoneonmicrotaskemptysubscribe ngzonerun step tick and the process is step application call ngzonerun step ngzone delay the checkstable call in a requestanimationframe and also set zonelastrequestanimationframeid step inside the requestanimationframe callback reset zonelastrequestanimationframeid first step update microtask status step if zonelastrequestanimationframeid is that mean no microtask pending step checkstable and trigger onmicrotaskempty emitter step applicationref subscribed onmicrotaskempty so it will call another ngzonerun to process tick step and this new ngzonerun will try to check zonelastrequestanimationframeid in step when trying to delay the checkstable and since the zonelastrequestanimationframeid is already reset to in step so this ngzonerun will run into step again and become a infinite loop so onstable is never emit in this commit there is a new flag zoneischeckstablerunning added to prevent reentry when shouldcoaleascing flag is enabled pr close ,fix
1776,zonejs update objectcreate params to match web platform this commit update objectcreate argument name used in zonejs to match web platform pr close ,refactor
1777,core refactor applicationinitstatus test to avoid testbed sideeffects currently testbed both viewengine and ivy invoke applicationinitstatusruninitializers a a part of the bootstrap process to mimic real bootstrap step this is problematic for the applicationinitstatus class test since the runinitializers call performed by testbed interfere with actual test this commit update applicationinitstatus test to interact with the class directly instead of relying on testbed apis to retrieve the class though di pr close ,test
1778,core support appinitializer work with observable this commit add support for observables that now can be used a a part of appinitializer previously only primises were supported close pr close ,feat
1779,languageservice update compilerspec to use the new testing env this commit update compilerspects in the ivy l suite to utilize the new testing environment which wa introduced in the previous commit eventually all spec should be converted but converting one right now help ensure that the new testing env is working properly and able to support real test pr close ,test
1780,languageservice introduce new more configurable testing env the ivy language service codebase testing suite contains a few testing utility which allow for assertion of language service operation against an inmemory project however this existing utility lack the flexibility to test more complex scenario such a those involving multiple t project with dependency between them this commit introduces a new testing package for the ivy l which attempt to more faithfully represent the possible state of an ide and allows for testing of more advanced scenario the new utility borrows from the prior version and is geared towards more ergonomic testing only basic functionality is present in this initial implementation but this will grow over time pr close ,test
1781,core use runtimeerror to throw provider not found error this pr performs a small refactoring to use runtimeerror class and corresponding error code by calling throwprovidernotfounderror which format the message to make it more consistent with other place where similar error are thrown pr close ,refactor
1782,ignore question mark when params are parsed this commit add a fix where params will ignore question mark when parsed fix pr close ,fix
1783,animation error when setting position before starting animation it is now possible to set the position when the animation ha not ever been started pr close ,fix
1784,docsinfra convert sas mixin from camelcase to kebabcase to follow sas convention this commit convert the last remaining camelcased sas mixin deploytheme to kebabcase deploytheme to follow the sas convention discussed in pr close ,refactor
1785,docsinfra create mixin for styling marketing page previously in order to apply some style to marketing ie nondocs page we listed the various page class that corresponded to doc page this meant that addingremoving a marketing page required update in several place which is errorprone this commit avoids this by using a sas mixin for applying style to marketing page pr close ,refactor
1786,docsinfra remove duplicate or unused cs style this commit remove some cs style that have no effect ie are duplicate or overridden by other rule pr close ,refactor
1787,docsinfra fix top margin of press kit page on small screen previously the press kit page had a larger top margin on smaller screen that seemed unnecessary this commit remove the extra top margin before presskit top section margin before after presskit top section margin after pr close ,fix
1788,docsinfra use consistent padding in marketing page this commit make the padding of the event feature and press kit page consistent with that of other marketing page before presskit padding before after presskit padding after pr close ,fix
1789,docsinfra make topnav consistent across all marketing page previously some of the marketing page had different style for the topnav than others even if they had the same layout and bluebackground header more specifically the topnav had a boxshadow and it wa absolutely positioned on some marketing page while it had no boxshadow and wa statically positioned on others this commit make the appearance of marketing page wrt the topnav consistent across all marketing page by changing the style for the remaining page contributor about contribute contribute press kit presskit before contribute topnav shadow before after contribute topnav shadow after pr close ,fix
1790,docsinfra make the contributor page header similar to other marketing page before wide screen contributor wide screen before before narrow screen contributor narrow screen before after wide screen contributor wide screen after after narrow screen contributor narrow screen after pr close ,fix
1791,docsinfra add spacing between past and future event section this commit add some more spacing between the past and future event section on the event page before event spacing before after event spacing after pr close ,fix
1792,docsinfra create mixin for styling doc page previously in order to apply some style to doc ie nonmarketing page we listed the various folder class that corresponded to doc page this meant that addingremoving a doc area required update in several place which is errorprone this commit avoids this by using a sas mixin for applying style to doc page pr close ,refactor
1793,docsinfra ensure the main font is applied to input it turn out that input and button element do not inherit the fontfamily style from body by default but rather use a useragent defined style this mean that their fontfamily might be different than the one used in the rest of the page this commit fix it by ensuring input and other element inherit their fontfamily style from their parent element before input font before after input font after the difference in font is subtle but it there pr close ,fix
1794,docsinfra remove unnecessary fontfamily style this commit remove some unnecessary style setting fontfamily to mainfont these style are redundant because the targeted element already inherit this style from body pr close ,refactor
1795,docsinfra remove unused cs for the version selector this commit remove some cs rule targeting docversion select in the sidenav these rule do not match any element any more since now we use a custom aioselect component instead of the select element pr close ,refactor
1796,docsinfra merge doc with guide and start with tutorial in searchresults previously the docsmd guide wa appearing under other in search result and the result for the start tutorial page were appearing under start this commit change this so that docsmd appears under guide and start appear under tutorial since that is where they belong conceptually it also change the header of the guide searcharea from guide to guide and that of tutorial from tutorial to tutorial before searchresults area before after searchresults area after pr close ,fix
1797,docsinfra show the error list page under error in search result previously the error list page wa appearing under the other section in search result this commit fix this to make it appear under the error section before searchresults before after searchresults after pr close ,fix
1798,docsinfra use relative url for internal link on error page previously some of the link on the error page had url prefixed with this caused them to be treated a external url which had the following downside link would always point to angulario instead of the same version a the error page eg nextangulario or vangulario dgeni would not be able to check that the url are valid ie point to existing page an external link icon would incorrectly be shown next to the link on angulario this commit fix the link to use relative url pr close ,fix
1799,docsinfra show external link icon for external link on error page this commit add error page to the list of doc page that have an external link icon next to link to external url pr close ,fix
1800,router allow for custom router outlet implementation this pr formalizes document and make public the router outlet contract the set of routeroutlet method used by the router ha not changed in over year since the introduction of route reuse strategy creation of custom router outlet is already possible and is used by the ionic framework there is a small hack that is needed to make this work which is that outlet must register with childrenoutletcontexts but it currently only accepts our routeroutlet by exposing the interface the router us to activate and deactivate route through outlet we allow for developer to more easily and safely extend the router and have finetuned control over navigation and component activation that fit project requirement pr close ,feat
1801,platformbrowser ensure that hammer loader is called only once currently the function that is provided through hammerloader is called the same number of time a the hammergesturespluginaddeventlistener method is called until the hammer is loaded this commit add a class property in which the loader call is saved thereby preventing multiple call to the loader function pr close pr close ,fix
1802,compiler add process title to angular node binary set the process title for angularcompilercliangularlocalize package resolve pr close ,refactor
1803,platformbrowser remove intl reference since intl api wa dropped to use to improve browser support would be nice to remove the reference of it pr close ,refactor
1804,localize avoid computing sourcemaps in extraction unnecessarily previously we were calling updatesourcelocations a part of extractmessages for every file that wa passed in regardless of whether any localize tagged string were to be found in the file this wa very wasteful because it is nontrivial to compute the flattened sourcemap for file if it is not needed pr close ,refactor
1805,devtools bump up the split pane gutter size for the profiler split pane and hide the icon ,fix
1806,compiler retrieve variable from context inside nested template listener this is a prerequisite for given the following template which ha a listener that reference a variable from a parent template name ngtemplate letnamename button clickhellonamebutton ngtemplate we generate code that look that look like note how we access name through ctx j function templaterf ctx if rf const r ɵɵgetcurrentview ɵɵelementstart button ɵɵlistenerclick function ɵɵrestoreviewr const namer ctxname note the ctxname access here const ctxr ɵɵnextcontext return ctxrlognamer ɵɵelementend this work fine at the moment because the template context object cant be changed after creation the change in allow for the object to be changed which mean that the ctx reference inside the listener will be out of date because it wa bound during creation mode this pr aim to address the issue by accessing the context inside listener through the saved view reference with the new code the generated code from above will look a follows j function templaterf ctx if rf const r ɵɵgetcurrentview ɵɵelementstart button ɵɵlistenerclick function const restoredctx ɵɵrestoreviewr const namer restoredctxname const ctxr ɵɵnextcontext return ctxrlognamer ɵɵelementend pr close ,refactor
1807,core use ngdevmode to treeshake warning this commit add ngdevmode guard to show the warning only in dev mode similar to how thing work in other part of ivy runtime code the ngdevmode flag help to treeshake the warning from production build in dev mode everything will work a it work right now to decrease production bundle size pr close ,perf
1808,core add documentation for hostlistener add return value documentation for hostlistener callback close pr close ,docs
1809,compilercli error on cyclic import in partial compilation our approach for handling cyclic import result in code that is not easy to treeshake so it is not suitable for publishing in a library when compiling in partial compilation mode we are targeting such library publication so we now create a fatal diagnostic error instead of trying to handle the cyclic import situation close pr close ,refactor
1810,form fix link for browser compatibility of using selects in ie coauthoredby andrew kushnir andrewkushnirusersnoreplygithubcom pr close ,docs
1811,form remove reference to firefox bug that wa fixed pr close ,docs
1812,router fix load interaction of navigation and preload strategy fix router to ensure that a route module is only loaded once especially in relation to the use of preload strategy with delayed or partial loading add test to check the interaction of preloadingstrategy and normal router navigation under differing scenario checking prevention of duplicate loading of module related to prevention of duplicate routeconfigloadstartend event related to ensuring preload strategy remains active for submodules if needed the selected preload strategy should still decide when to load submodules possibility of memory leak with unfinished preload subscription related to ensure that the stored loader promise is cleared so that subsequent load will try the fetch again add error handle error from loadchildren ensure we handle error from with ngmodule create fix pr close ,fix
1813,form add emitevent option for abstractcontrolbased class method this commit add the emitevent option to the following formarray and formgroup method formgroupaddcontrol formgroupremovecontrol formgroupsetcontrol formarraypush formarrayinsert formarrayremoveat formarraysetcontrol formarrayclear this option can be used to prevent an event from being emitted when adding or removing control breaking change the emitevent option wa added to the following formarray and formgroup method formgroupaddcontrol formgroupremovecontrol formgroupsetcontrol formarraypush formarrayinsert formarrayremoveat formarraysetcontrol formarrayclear if your app ha custom class that extend formarray or formgroup class and override the abovementioned method you may need to update your implementation to take the new option into account and make sure that override are compatible from a type perspective close pr close ,feat
1814,compiler support multiple selector in hostcontext the previous commits refactored the shadowcss emulator to support desirable usecases of hostcontext but it dropped support for passing a comma separated list of selector to the hostcontext this commit rectifies that omission despite the usecase not being valid according to the shadowdom spec to ensure backward compatibility with the previous implementation pr close ,fix
1815,compiler handle hostcontext and host in the same selector in viewencapsulationemulated mode the compiler convert host and hostcontext pseudo class into new cs selector previously when there wa both hostcontext and host class in a selector the compiler wa generating incorrect selector there are two scenario both class are on the same element ie not separated eg hostcontextfoohostbar this setup should only match the host element if it ha both foo and bar class so the generated cs selector should be foobarhostmarker the host class is on a descendant of the hostcontext eg hostcontextfoo hostbar this setup should only match the foo selector if it is a proper ancestor of the host and not on the host itself so the generated cs selector should be foo barhostmarker this commit fix the generation to handle these scenario fix pr close ,fix
1816,compiler support multiple hostcontext selector in viewencapsulationemulated mode the compiler must generate additional combination of selector to handle the hostcontext pseudoclass function previously when there is wa more than one hostcontext selector in a rule the compiler wa generating invalid selector this commit generates all possible combination of selector needed to match the same element a the native hostcontext selector fix pr close ,fix
1817,docsinfra fix top padding of main content when a notification is visible this commit fix the top padding of the main content on the homepage and other page when a notification is visible at the top of the page the problem wa particularly obvious on the homepage see image below before homepage topright before after homepage topright after pr close ,fix
1818,docsinfra fix placement of toc hoveractive marker dot this commit fix the placement of the toc hoveractive marker dot so that they are horizontally in the middle of the marker rail and vertically in the middle of the item first line this commit also refactors the tocscss to be more dry wrt styling the toc markersmarker rail and us sas variable and mixins to ensure that the styling is kept uptodate wrt future typography change to toc item before toc marker before after toc marker after pr close ,fix
1819,docsinfra improve linespacing between toc item esp for wrapped line previously the linespacing between different toc item wa almost the same a that between wrapped line of the same item this made it more diffucult to distinguish the different item this commit fix this by reducing the linespacing between wrapped line of the same item and keeping a larger linespacing between different item before toc linespacing before after toc linespacing after pr close ,fix
1820,docsinfra fix sidenav top position on narrow screen on larger screen the topbar ha a height of px on screen smaller than px the topbar ha a height of px a a result the sidenav should have a top position of px on screen smaller than px and px on other screen previously the style setting the top position to px wa tied to the presence of the collapsed class which depends on whether the sidenav is docked or not the change from docked to collapsed sidenav however happens at px a a result the sidenav had an incorrect top position px instead of px on screen between px and px this commit fix this by ensuring the change of the top position for the sidenav happens at px pr close ,fix
1821,docsinfra improve linespacing between search result esp for wrapped line previously the linespacing between different search result item wa the same a that between wrapped line of the same result this made it difficult to distinguish the different result this commit fix it by reducing the linespacing between wrapped line of the same result item and keeping a larger linespacing between different result before searchresults before after searchresults after pr close ,fix
1822,docsinfra avoid pagebreaks inside an image when printing previously when printing a pagebreak could be inserted inside an image contained in a lightbox element this commit ensures no pagebreaks are inserted inside lightbox element which contain image before printpagebreak before after printpagebreak after pr close ,fix
1823,docsinfra fix search result top padding when a notification is visible previously when a notification wa visible at the top of the page the search result pane had more top padding than necessary this commit fix it by removing the extra padding before searchresults before after searchresults after pr close ,fix
1824,docsinfra dim linenumbers in code example this commit ensures that the linenumbers in code example appear dimmed to make it clearer that they are not part of the actual code based on the cs rule it seems that the intention wa to make it so but the color wa incorrectly set on the ol element instead of targeting limarker before linenumbers before after linenumbers after pr close ,fix
1825,docsinfra fix vertical alignment of contributor info item this commit fix the vertical alignment of info item ie link to bio twitter website in the contributor list before contributor alignment before after contributor alignment after pr close ,fix
1826,docsinfra clear unneeded dom node in codeexampletabscomponent both codeexamplecomponent and codetabscomponent component receive some code via content projection grab the projected content and pas it through to a codecomponent instance for formatting and displaying previously the projected content wa kept in the dom hidden this unnecessarily increased the number of dom node this commit fix this by clearing the projected dom node once their content ha been captured pr close ,fix
1827,add custom jsonparser example update the http guide and associated example to demonstrate how an interceptor can be used to provide a custom json parser resolve pr close ,docs
1828,docsinfra add a link to usage note from description the usage note section is often at the bottom of a long page of content which can make it difficult to discover this commit add a link at the end of the description if there is a usage note section on the page this link should help the reader to discover that there is more information available further down the page this is basically a marginal fix the longer term fix should be to consider what content go in which section and how they should be laid out on the page see pr close ,build
1829,docsinfra use cdk clipboard service the cdk ha had a service for copying string to the clipboard these change switch aio to it rather than having to maintain a custom solution pr close ,refactor
1830,devtools clean up mattab cs ,refactor
1831,devtools update angularframework ,build
1832,devtools swap svg for maticon ,refactor
1833,devtools implement invisible gutter technique from chrome devtools ,feat
1834,devtools update dependency husky to v ,build
1835,devtools update angularcli ,build
1836,devtools update angularframework ,build
1837,core address trusted type bug in chrome in chrome passing a trustedscript to eval just return the trustedscript back without evaluating it causing the newtrustedfunctionfordevjit function to fail this is a browser bug that ha been fixed in chrome and only affect angular application running with jit which includes unit test a a temporary workaround for user still on chrome detect when this occurs in the newtrustedfunctionfor function and fall back to the straightforward nontrusted type compatible implementation the only combination that is left affected consists of angular application running with jit that have explicitly configured trusted type in enforcement mode with user that are still on chrome also correct docstring for newtrustedfunctionforjit pr close ,fix
1838,devtools update dependency typeschrome to ,build
1839,devtools update dependency ngxflamegraph to v ,build
1840,devtools update angularcomponents to ,build
1841,compilercli implement ɵɵngdeclarepipe this commit implement creating of ɵɵngdeclarepipe call in partial compilation and processing of those call in the linker and jit compiler see pr close ,refactor
1842,docsinfra upgrade cli command doc source to bf updating angularmaster from clibuildsmaster relevant change in commit range modified helpgeneratejson helpnewjson pr close ,build
1843,platformserver allow shimming the global env sooner angularplatformserver provides the foundation for rendering an angular app on the server in order to achieve that it us a serverside dom implementation currently domino for rendering on the server to work a closely a possible to running the app on the browser we need to make dom globals such a element htmlelement etc which are normally provided by the browser available a globals on the server a well currently angularplatformserver achieves this by extending the global object with the dom implementation provided by domino this assignment happens in the setdomtypes function which is called in a platforminitializer while this work in most case there are some scenario where the dom globals are needed sooner ie before initializing the platform see for example and for more detail on such issue this commit provides a way to solve this problem by exposing a sideeffectful entrypoint angularplatformserverinit that shim the global object with dom globals people will be able to import this entrypoint in their serverrendered apps before bootstrapping the app for example in their mainserverts file see also comment in a future update the universal schematic will include such an import by default in newly generated project pr close ,feat
1844,platformserver add domino to the list of dependency the platformserver package currently depends on the domino package this commit add domino to the list of dependency for the platformserver ngmodule target pr close ,build
1845,compilercli set t original node on imported namespace identifier this commit cause import added by ngtscs importmanager to have their typescript original node set to the generated tsimportdeclaration statement in g the tsickle transformer run after the angular transformer and post process angulars compilation output one of it postprocessing task is to transform generated import and reference to imported symbol from the commonjs module system to the g module system part of this transformation involves recognizing module with specific metadata and altering reference to symbol from those module accordingly normally tsickle can rely on typescript binding for an imported symbol to find it origin module and thus the correct metadata for the symbol however the angular transform generates new synthetic import which dont have such binding information angulars import are always namespace import of the form import a qualifier modulespecifier reference to such an import are then of the form qualifiersymbolname to process such import properly tsickle need to be able to associate the reference to qualifier in the expression qualifersymbolname with the tsimportdeclaration statement that defines it it expects to do this by looking at the tsgetoriginalnode for the qualifier reference which should be the tsimportdeclaration this commit change ngtscs import generation mechanism to set the original node on qualifier identifier according to this expectation this commit is not tested in the direct compiler test since there is no observable behavior externally from setting the original node we dont have test that intercept transformer operation which could be used to directly assert against the ast node tsickles published version doe not yet contain the gspecific transformation which rely on the original node and would thus allow the behavior to be observed instead we rely on the g testing suite to validate the correctness of this fix breaking this functionality would cause g compilation error for target since tsickle would be unable to transform import correctly pr close ,fix
1846,compilercli extend angularcompileroptions in tsconfig from node typescript support non rooted extends we should do the same close pr close ,fix
1847,bazel use readconfiguration to read config file with this change we clean up the parsing of tsconfig file pr close ,refactor
1848,compilercli readconfiguration existing option should override option in tsconfig at the moment when passing an angular compiler option in the existingoptions it doesnt override the defined in the tsconfig pr close ,fix
1849,router fix load interaction of navigation and preload strategy fix router to ensure that a route module is only loaded once especially in relation to the use of preload strategy with delayed or partial loading add test to check the interaction of preloadingstrategy and normal router navigation under differing scenario checking prevention of duplicate loading of module related to prevention of duplicate routeconfigloadstartend event related to ensuring preload strategy remains active for submodules if needed the selected preload strategy should still decide when to load submodules possibility of memory leak with unfinished preload subscription related to ensure that the stored loader promise is cleared so that subsequent load will try the fetch again add error handle error from loadchildren ensure we handle error from with ngmodule create fix pr close ,fix
1850,devinfra update npm package subsitutions to reflect no longer having an imported workspace update replacement of the devinfra piece of bazel path segment to reference the npm workspace rather than creating it own workspace pr close ,fix
1851,core add missing dot at the end of the sentence pr close ,docs
1852,core fix typo in interpolation property description pr close ,docs
1853,common support icu standard stand alone day of week with datepipe this commit add support for finnish full date formatting a well a ccccccccccccccccccccc date format in the datepipe fix pr close ,feat
1854,emit error on xmlhttprequest abort event before this change when google chrome cancel a xmlhttprequest an observable of the response never finish this happens for example when you put your computer to sleep or just press ctrls to save the browser page after this commit if request is canceled or aborted an appropriate observable will be completed with an error fix pr close ,fix
1855,compiler include parenthesis in expression source span the parser doe not include parenthesis in the ast so if a lh expression would be parenthesized then it start span would start after the opening parenthesis previously some parent ast node would be created with the start span of it lh a it own start so this resulted in the parent ast node not encompassing the opening parenthesis in it source span this commit fix the issue by capturing the start index prior to parsing a child ast tree which is then used a the start of the source span of the the parent ast node that is parsed fix pr close ,fix
1856,compilercli remove event output helper from tcb in cbabcdfaeedcbd the eventemittersubscribe api wa extended with a new signature that allows the emitter generic type t to flow into the subscribe callback this new signature remove the need for the special outputhelper function that used to be emitted into tcbs when strictoutputeventtypesstricttemplates is enabled pr close ,refactor
1857,languageservice add note about eclipse ide support of angular l mention eclipse wild web developer that ship with angular language service pr close ,docs
1858,compiler throw error for duplicate template reference add an error if a reference is used more than once on the same element eg div a a we used to have this error in viewengine but it wasnt ported over to ivy fix pr close ,fix
1859,common date is not correctly formatted when year is between and use setfullyear method when parsing date to avoid javascript date factory behaviour fix pr close ,fix
1860,core properly move embedded view of dynamic component projectable node this commit fix the issue of the assertion error issue when a projected nodernode inside an array is checked against the type of tnodetypeelement tnodetypecontainer tnodetypeelementcontainer tnodetypeicucontainer tnodetypeprojection a it inside an array it doesnt fall into any of those type a a result it throw the assertion error pr close pr close ,fix
1861,compilercli dont crash when we cant resolve a resource produce a diagnostic when we can not resolve a component external style sheet or external template the previous behavior wa to throw an exception which crashed the language service fix angularvscodenglanguageservice pr close ,fix
1862,complete the request on timeout when using the timeout attribute and an xhr request time out browser trigger the timeout event and execute the xhrs ontimeout callback additionally safari handle timedout request in the same way even if no timeout ha been explicitly set on the xhr in the above case httpclient would fail to capture the xhrs completing with an error so the corresponding observable would never complete pr close pr close ,fix
1863,docsinfra upgrade cli command doc source to cdfd updating angularmaster from clibuildsmaster relevant change in commit range modified helplintjson pr close ,build
1864,localize support downleveled inlined helper localize call when the downleveling helper function ha been inlined into the localize call it is a bit more tricky to parse out the cooked and raw string there wa already code to do this but it assumed that the cooked and raw item were both array sometimes the raw array is just a copy of the cooked array via an expression similar to raw rawtcookedslice this commit change the unwrapmessagepartsfromlocalizecall function to be able to handle such a situation fix pr close ,fix
1865,docsinfra correctly handle entrypoints with no public export previously if an entrypoint had no public export such a the angularplatformservershims introduced in which is a sideeffectful entrypoint it wa incorrectly marked a having all it export deprecated which mark the entrypoint a deprecated a well this commit fix this by ensuring that an entrypoint is not marked a having all it export deprecated if it ha no public export pr close ,fix
1866,localize improve invalid syntax in extraction error message previously if the code is invalid the error message might look like unexpected messageparts for localize expected an array of string this is not very helpful for debugging where the problem occurs now we build a codeframe description to give more useful information typeerror can not create property message on string srcappappcomponentjs unexpected messageparts for localize expected an array of string export class appcomponent constructor thistitle localizea myapp pr close ,fix
1867,animation properly track listener for a removed element prior to this patch if an element wa removed multiple time due to the nature of parentchild element the leave listener may have been fired for an element that wa already removed this patch add a guard within the animation code to prevent this pr close ,fix
1868,compilercli update ngcc integration test for latest change in rulesnodejs update the ngcc integration test to handle the change in the latest version of rulesnodejs pr close ,fix
1869,devinfra update build tooling for latest change in rulesnodejs update the build tooling to handle the change in the latest version of rulesnodejs pr close ,fix
1870,bazel update build tooling for latest change in rulesnodejs update the build tooling to handle the change in the latest version of rulesnodejs pr close ,fix
1871,devinfra update type casting for jsonparse usage update usage of jsonparse to be cast a specific type pr close ,fix
1872,bazel update type casting for jsonparse usage update usage of jsonparse to be cast a specific type pr close ,fix
1873,benchpress update type casting for jsonparse usage update usage of jsonparse to be cast a specific type pr close ,fix
1874,compiler update type casting for jsonparse usage update usage of jsonparse to be cast a specific type pr close ,fix
1875,compilercli update type casting for jsonparse usage update usage of jsonparse to be cast a specific type pr close ,fix
1876,element update type casting for jsonparse usage update usage of jsonparse to be cast a specific type pr close ,fix
1877,localize update type casting for jsonparse usage update usage of jsonparse to be cast a specific type pr close ,fix
1878,platformbrowser update type casting for jsonparse usage update usage of jsonparse to be cast a specific type pr close ,fix
1879,router update type casting for jsonparse usage update usage of jsonparse to be cast a specific type pr close ,fix
1880,serviceworker update type casting for jsonparse usage update usage of jsonparse to be cast a specific type pr close ,fix
1881,zonejs update build tooling for latest change in rulesnodejs update the zonejs build tooling to handle the change in the latest version of rulesnodejs pr close ,fix
1882,bazel update integration test to use rulesnodejs update the integraiton test for bazel to the latest rulesnodejs version pr close ,fix
1883,docsinfra use a single cs class to target the api list container previously the api list container in the template of the aioapilist component had three different cs class apilistcontainer docscontent lcontentsmall that were all used for styling it this seemed unnecessary and made it more difficult to see what style were applied to the container this commit remove the extra class and consolidates the style under the apilistcontainer class which wa the most descriptive one pr close ,refactor
1884,docsinfra scope api list style to the aioapilist element this commit ensures that all style for the api list page which are defined in apilistscss only apply to element inside an aioapilist element this will prevent the style accidentally taking effect on a different part of the app pr close ,refactor
1885,docsinfra move common codeanchor style to codescss the codeanchor class can be used anywhere where we have code example including api page and doc guide previously global style for codeanchor were defined in apilistscss ie the style from apilistscss were also applied to codeanchor element in other pagescomponents this commit move the codeanchor style to codescss which contains other common coderelated style pr close ,refactor
1886,docsinfra move common symbol style to apisymbolsscss the symbol cs class which is primarily used to denote the type of api symbol class function interface etc are used in several place in the api list page with the corresponding style defined in apilistscss in search result with the corresponding style defined in errorsscss in error list page with the corresponding style defined in searchresultsscss in the aioselect component with the corresponding style defined in selectmenuscss previously global style for symbol were defined in apilistscss ie the style from apilistscss were also applied to symbol element in other placescomponents also some of the sc file mentioned above defined some duplicate style for symbol this commit move the symbol style to a new apisymbolsscss file which contains common symbolrelated style pr close ,refactor
1887,docsinfra merge style rule in apilistscss this commit clean up the style in apilistscss by merging together block that target the same element pr close ,refactor
1888,docsinfra remove unused style from apilistscss this commit remove some style from apilistscss that are no longer used ie either their cs selector do not match any element in the app or they are overridden by other rule pr close ,refactor
1889,docsinfra scope toc style to the aiotoc element this commit ensures that all style for the toc which are defined in tocscss only apply to element inside an aiotoc element this will prevent the style accidentally taking effect on a different part of the app pr close ,refactor
1890,docsinfra merge style rule in tocscss this commit clean up the style in tocscss by merging together block that target the same element pr close ,refactor
1891,docsinfra scope selectmenu style to the aioselect element this commit ensures that all style for the selectmenu element which are defined in selectmenuscss only apply to element inside an aioselect element this will prevent the style accidentally taking effect on a different part of the app pr close ,refactor
1892,docsinfra scope resource style to the aioresourcelist element this commit ensures that all style for the resource page which are defined in resourcesscss only apply to element inside an aioresourcelist element this will prevent the style accidentally taking effect on a different part of the app pr close ,refactor
1893,docsinfra merge style rule in resourcesscss this commit clean up the style in resourcesscss by merging together block that target the same element pr close ,refactor
1894,docsinfra remove unused style from resourcesscss this commit remove some style from resourcesscss that are no longer used ie either their cs selector do not match any element in the app or they are overridden by other rule pr close ,refactor
1895,docsinfra merge style rule in presskitscss this commit clean up the style in presskitscss by merging together block that target the same element pr close ,refactor
1896,docsinfra merge style rule in labelscss this commit clean up the style in labelscss by merging together block that target the same element pr close ,refactor
1897,docsinfra remove unused style from labelscss this commit remove some style from labelscss that are no longer used ie their cs selector do not match any element in the app pr close ,refactor
1898,docsinfra fix indentation in labelscss this commit make the indentation in labelscss consistent with that in most other sc file in aio pr close ,refactor
1899,docsinfra remove unused editpagectascss file this commit remove the editpagectascss file which is no longer used ie the rule it contains do not match any element in the app pr close ,refactor
1900,docsinfra merge style rule in detailsscss this commit clean up the style in detailsscss by merging together block that target the same element it also change the summary selector to detail summary but that should not make any difference in practice since summary element always appear a direct child of detail pr close ,refactor
1901,docsinfra scope contributorlist style to the aiocontributorlist element this commit ensures that all style for the contributor list which are defined in contributorscss only apply to element inside an aiocontributorlist element this will prevent the style accidentally taking effect on a different part of the app pr close ,refactor
1902,docsinfra remove unused style from contributorscss this commit remove some style from contributorscss that are no longer used ie either their cs selector do not match any element in the app or they are overridden by other rule pr close ,refactor
1903,docsinfra scope code example style to the aiocode element this commit ensures that all style for the code example which are defined in codescss only apply to element inside an aiocode element this will prevent the style accidentally taking effect on a different part of the app pr close ,refactor
1904,docsinfra merge style rule in codescss this commit clean up the style in codescss by merging together block that target the same element it also normalizes the rule targeting angular material tab to use consistent selector and use class name instead of tag name pr close ,refactor
1905,docsinfra remove unused style from codescss this commit remove some style from codescss that are no longer used ie either their cs selector do not match any element in the app or they are overridden by other rule pr close ,refactor
1906,docsinfra move common groupbuttons style to buttonsscss both aiocontributorlist and aioresourcelist contain groupbuttons element previously global style for groupbuttons were defined in contributorscss ie the style from contributorscss were also applied to groupbuttons in aioresourcelist also contributorscss and resourcesscss defined some duplicate style for groupbuttons this commit move the groupbuttons style to buttonsscss which contains common buttonrelated style pr close ,refactor
1907,docsinfra scope topmenu style to the apptoolbar element this commit ensures that all style for the app topmenu which are defined in topmenuscss only apply to element inside an apptoolbar element this will prevent the style accidentally taking effect on a different part of the app pr close ,refactor
1908,docsinfra merge style rule in topmenuscss this commit clean up the style in topmenuscss by merging together block that target the same element it also make similar change to selector in notificationscss rule that override topmenu style for consistency pr close ,refactor
1909,docsinfra scope navitem style to the aionavitem element this commit ensures that all style for the sidenav navitems which are defined in sidenavscss only apply to element inside an aionavitem element this will prevent the style accidentally taking effect on a different part of the app pr close ,refactor
1910,docsinfra merge style rule in sidenavscss this commit clean up the style in sidenavscss by merging together block that target the same element it also applies the equivalent change in notificationscss rule that override sidenav style pr close ,refactor
1911,docsinfra remove unused style from sidenavscss this commit remove some style from sidenavscss that are no longer used ie either their cs selector do not match any element in the app or they are overridden by other rule pr close ,refactor
1912,docsinfra remove unused style from layoutglobalscss this commit remove some style from layoutglobalscss that are no longer used ie either their cs selector do not match any element in the app or they are overridden by other rule pr close ,refactor
1913,docsinfra scope footer style to the aiofooter element this commit ensures that all style for the page footer which are defined in footerscss only apply to element inside an aiofooter element this will prevent the style accidentally taking effect on a different part of the app pr close ,refactor
1914,docsinfra merge style rule in footerscss this commit clean up the style in footerscss by merging together block that target the same element pr close ,refactor
1915,docsinfra remove unused style from footerscss this commit remove some style from footerscss that are no longer used ie either their cs selector do not match any element in the app or they are overridden by other rule pr close ,refactor
1916,docsinfra remove unused style from contentlayoutscss this commit remove some style from contentlayoutscss that are no longer used ie either their cs selector do not match any element in the app or they are overridden by other rule pr close ,refactor
1917,zonejs settimeout patch should clean tasksbyhandleid cache close currently zonejs patch settimeout and keep a tasksbyhandleid map to keep timerid zonetask relationship this is needed so that when cleartimeouttimerid is called zonejs can find the associated zonetask now zonejs set the tasksbyhandleid map in the scheduletask function but if the settimeout is running in the fakeasynczonespec or any other zonespec with onscheduletask hook the scheduletask in timer patch may not be invoked for example fakeasync settimeout tick in this case the timerid kept in the tasksbyhandleid map is not cleared this is because the fakeasynczonespec in the onscheduletask hook look like this onscheduletaskdelegate task fakeasyncschedulersettimeouttask return task because fakeasynczonespec handle the task itself and it doesnt call parentdelegateonscheduletask therefore the default scheduletask in the timer patch is not invoked in this commit the cleanup logic is moved from scheduletask to settimeout patch entry to avoid the memory leak pr close ,fix
1918,serviceworker copyedit getting started guide fix numbered list for the making change to your application section pr close ,docs
1919,form introduce min and max validators this commit add the missing min and max validators breaking change previously min and max attribute defined on the input typenumber were ignored by form module now presence of these attribute would trigger minmax validation logic in case formcontrol formcontrolname or ngmodel directive are also present on a given input and corresponding form control status would reflect that fix pr close ,feat
1920,devtools resize dark mode and cursor ,fix
1921,devtools update dependency karma to ,build
1922,devtools update angularcli ,build
1923,docsinfra switch code font from droid sans mono to roboto mono droid sans mono didnt look good on some screen fix pr close ,fix
1924,languageservice add command for getting component for a template file this commit add a feature to the angular language service that enables getting the location for component that use a template file part of pr close ,feat
1925,router stop emitting to event observable on destroy no longer emits to routerevents after the router ha been destroyed also return a resolved promise to the navigation method fix pr close ,fix
1926,languageservice pull out interface on package toplevel two motivation behind this change we would like to expose the type of the language service to external user like the vscode extension via the npm package on the top level of the package we would like the view engine and ivy l to share a common interface notably after the inclusion of gettcb the ivy l upholds a strict superset of tslanguageservice previously both ve and ivy l were aligned on tslanguageservice to this end this commit refactors the export on the toplevel of the languageservice package to just be type common to both the ve and ivy language service the ve and ivy build target then import and use these type accordingly and the expectation is that an external user will just import the relevant typing from the toplevel package without diving into either the ve or ivy source follow up on pr close ,refactor
1927,docsinfra upgrade cli command doc source to ede updating angularmaster from clibuildsmaster relevant change in commit range modified helpnewjson pr close ,build
1928,form avoid duplicated code in abstractcontrolstatus directive this commit update abstractcontrolstatus directive code to remove duplicated logic in getters and replaces that logic with a new function that accepts an argument pr close ,refactor
1929,core ensure the type t of eventemittert can be inferred the asyncpipetransformtemitter method must infer the t type from the emitter parameter since we changed the asyncpipe to expect a subscribablet rather than observablet the eventemittersubscribe method need to have a tighter signature otherwise typescript struggle to infer the type and end up making it unknown fix pr close ,fix
1930,compilercli remove the overridecomponenttemplate api the templatetypecheckeroverridecomponenttemplate operation wa originally conceived a a fast path for the language service to react to a template change without needing to go through a full incremental compilation step it served this purpose until the previous commit which switch the l to use the new resourceonly incremental change operation provided by ngcompiler overridecomponenttemplate is now no longer utilized and is known to have several hardtoovercome issue that prevent it from being useful in any other situation a such this commit remove it entirely pr close ,refactor
1931,languageservice update ngcompiler via resourceonly path when able this commit change the language service compiler factory mechanism to leverage the new resourceonly update path for ngcompiler when an incoming change only affect a resource file like a component template or stylesheet going through the new api allows the language service to avoid unnecessary incremental step of the ngcompiler and return answer more efficiently pr close ,perf
1932,docsinfra remove unused style for heading cs class this commit remove some style for the heading cs class which do not have any effect either because they are overridden in other rule or because they do not make any difference note the heading class is kept in the html to make it easier to associate the headingchildren element with it corresponding heading parent pr close ,refactor
1933,docsinfra simplify the cs rule for styling the collapsedexpanded sidenav icon this commit simplifies the styling of the collapsedexpanded icon in sidenav navitems with child by consolidating the cs rule in one block instead of having duplicate block for different level pr close ,refactor
1934,docsinfra fix the styling of the card in doc introduction page this commit fix the layout and appearance of the card shown in the doc introduction page doc in the following way center the card ensure two card are shown per line instead of one the first line and on the second adjust their width to ensure their content fit well in them given that the card have a fixed height use more engaging style to better indicate that the card are clickable a discussed here pr close ,fix
1935,docsinfra clean up style in cardscss this commit clean up the style in cardscss by fixing incosistenct indentationnewlines removing rule for unused selector removing unnecessary style pr close ,refactor
1936,docsinfra improve legibility and focus on content this commit change the layout of the main content to improve legibility especially on wider screen limit main content width to em px by default center main content on the page coauthoredby stefanie fluin sjtrimblegmailcom pr close ,fix
1937,docsinfra improve typography style incl bigger font sizeline height coauthoredby stefanie fluin sjtrimblegmailcom pr close ,fix
1938,docsinfra make content link more prominent on hover coauthoredby stefanie fluin sjtrimblegmailcom pr close ,fix
1939,docsinfra improve heading style this commit includes some general improvement to heading style fontweight marginpadding it also add a horizontal separator above h heading to segment important section more easily a a consequence we can remove several hr element right before h heading coauthoredby stefanie fluin sjtrimblegmailcom pr close ,fix
1940,docsinfra fix padding in sidenav and ensure all navitems have equal height this commit improves the padding navmenus and navitems in the sidenav it also ensures that all navitems have the same height regardless of their level and of whether they have child or not coauthoredby stefanie fluin sjtrimblegmailcom pr close ,fix
1941,docsinfra remove uppercase style from sidenav navitems coauthoredby stefanie fluin sjtrimblegmailcom pr close ,fix
1942,docsinfra update the sidenav background to better distinguish from main content previously we used a boxshadow to indicate that the sidenav is separate from the main content this commits update the sidenav styling to remove the shadow and give it a slightly different background color instead coauthoredby stefanie fluin sjtrimblegmailcom pr close ,fix
1943,devtools update dependency typeschrome to ,build
1944,devtools set proper height of the tree node ,fix
1945,devtools update angularframework ,build
1946,compilercli preserve user line ending in diagnostic template parse normally the template parsing operation normalizes all template line ending to n only this normalization operation cause source mapping error when the original template us rn line ending the compiler already par template again to create a diagnostic template ast with accurate source map to avoid other parsing issue that affect source map accuracy this commit configures this diagnostic parse to also preserve line ending pr close ,fix
1947,router fix several typo in router spec fix a couple typo in router test pr close ,refactor
1948,common parse yyyy string a utc date in bcdfffffffcedfb we fixed the datepipe so that when it parsed date string that looked like yyyymm it created a utc date that wa not affected by the local timezone of the javascript engine this commit doe the same for date string of the form yyyy note that the previous commit mentioned above attempted to fix this case too but the test wa not actually checking the correct input string fix pr close pr close ,fix
1949,common parse yyyymm string a utc date in abab we fixed the datepipe so that when it parsed date string that looked like yyyymmdd it created a utc date that wa not affected by the local timezone of the javascript engine this commit doe the same for date string of the form yyyymm and yyyy fix pr close ,fix
1950,core ngzone coaleascing option should trigger onstable correctly fix when setting ngzoneruncoalescing to true onstable is not emitted correctly the reason is before this commit the code look like this application code call ngzonerun ngzonerun step inside ngzone in the oninvoke hook ngzone try to delay the checkstable function delaychangedetectionforeventszone ngzoneprivate if zonelastrequestanimationframeid step return zonelastrequestanimationframeid zonenativerequestanimationframecallglobal step if zonefaketopeventtask zonefaketopeventtask zonerootscheduleeventtaskfaketopeventtask zonelastrequestanimationframeid step updatemicrotaskstatuszone step checkstablezone step undefined zonefaketopeventtaskinvoke updatemicrotaskstatuszone function updatemicrotaskstatuszone ngzoneprivate ignorecheckrafid false if zonehaspendingmicrotasks zoneshouldcoalesceeventchangedetection zoneshouldcoalescerunchangedetection zonelastrequestanimationframeid step zonehaspendingmicrotasks true else zonehaspendingmicrotasks false function checkstablezone ngzoneprivate if zonenesting zonehaspendingmicrotasks zoneisstable step try zonenesting zoneonmicrotaskemptyemitnull application ref subscribe onmicrotaskempty ngzoneonmicrotaskemptysubscribe ngzonerun step tick and the process is step application call ngzonerun step ngzone delay the checkstable call in a requestanimationframe and also set zonelastrequestanimationframeid step inside the requestanimationframe callback reset zonelastrequestanimationframeid first step update microtask status step if zonelastrequestanimationframeid is that mean no microtask pending step checkstable and trigger onmicrotaskempty emitter step applicationref subscribed onmicrotaskempty so it will call another ngzonerun to process tick step and this new ngzonerun will try to check zonelastrequestanimationframeid in step when trying to delay the checkstable and since the zonelastrequestanimationframeid is already reset to in step so this ngzonerun will run into step again and become a infinite loop so onstable is never emit in this commit the zonelastrequestanimationframeid reset is moved after checkstable call pr close ,fix
1951,devtools update angularframework ,build
1952,devtools update angularcli ,build
1953,use httpstatuscode enum in test now that we have introduced humanreadable http status code we can use it in our test to improve clarity pr close ,test
1954,expose a list of humanreadable http status code they aim to improve code readability since they are defined by const enum they have zero runtime performance impact over just using constant literal fix pr close ,feat
1955,compiler dont set expression text to synthetic implicit when empty when parsing interpolation if we encounter an empty interpolation the current code us a pretend value of implicit for the name a if the interplotion were really implicit this is problematic because the span are then incorrect downstream since they are based off of the implicit text this commit change the interpretation of empty interpolation so that the text is simply an empty string fix fix pr close ,fix
1956,docsinfra implement reviewed tag definition the reviewed tag can be used to specify the date when the document wa last reviewed pr close ,build
1957,devinfra wait for changelog to cherry pick to next branch wait for the cherrypicked changelog to be merged into the next branch before completing the task pr close ,fix
1958,zonejs use npmpackagepack to build the zonejs package previously we could not use npmpackagepack for building the zonejs package due to a bug in window this bug ha been fixed in version of bazelbuildrulesnodejs now that we have updated bazelbuildrulesnodejs to version in we can replace npm pack with npmpackagepack pr close ,build
1959,animation remove unused utils function the mergeanimationoptions function is no longer used since cbbedfaeeaadcebcadda pr close ,refactor
1960,core remove duplicated emptyarray constant the codebase currently contains several emptyarray constant and they can end up in the bundle of an application a recent commit fbe tipped u off a it introduced several noop occurrence in the golden symbol file after investigating with petebacondarwin we decided to remove the duplicated symbol this probably shave only a few byte but this commit remove the duplicated function by always using the one in coresrcutilsempty pr close ,fix
1961,compiler exclude trailing whitespace from element source span if the template parse option leadingtriviachars is configured to consider whitespace a trivia any trailing whitespace of an element would be considered a leading trivia of the subsequent element such that it start span would start after the whitespace this mean that the start span can not be used to mark the end of the current element a it trailing whitespace would then be included in it span instead the full start of the subsequent element should be used to harden the test that for the ivy parser the test utility parser ha been adjusted to use the same configuration for leadingtriviachars a would be the case in it production counterpart parsetemplate this uncovered another bug in offset handling of the interpolation parser where the absolute offset wa computed from the start source span which excludes leading trivia whereas the interpolation expression would include the leading trivia a such the absolute offset now also us the full start span fix pr close ,fix
1962,devtools color and font size and other visuals ,fix
1963,compilercli introduce fast path for resourceonly update this commit add a new incrementalresourcecompilationticket which reuses an existing ngcompiler instance and update it to optimally process templateonly and styleonly change performing this update involves both instructing decoratorhandlers to react to the resource change a well a invalidating templatetypechecker state for the component in question that way querying the templatetypechecker will trigger new tcb generation for the changed template pr close ,perf
1964,compilercli split template parsing into declarationparse step to prepare for the optimization of templateonly change this commit refactors the componentdecoratorhandlers handling of template parsing previously template were extracted from the raw decorator metadata and parsed in a single operation to better handle incremental template update this commit split this operation into a declaration step where the template info is extracted from the decorator metadata and a parsing step where the declared template is read and parsed this allows for rereading and reparsing of the declared template at a future point using the same template declaration extracted from the decorator pr close ,refactor
1965,compilercli introduce compilationticket system for ngcompiler previously the incremental flow for ngcompiler wa simple when creating a new ngcompiler instance the consumer could pas state from a previous compilation which would cause the new compilation to be performed incrementally local information about typescript file which had not changed would be passed from the old compilation to the new and reused while global information would always be recalculated however this flow could be made more efficient in certain case such a when no typescript file are changed in a new compilation in this case all information extracted during the first compilation is reusable doing this involves reusing the previous ngcompiler instance the container for such global information and updating it instead of creating a new one for the next compilation this approach work cleanly but complicates the lifecycle of ngcompiler to prevent consumer from having to deal with the mechanic of reuse v incremental step of ngcompiler a new compilationticket mechanism is added in this commit consumer obtain a compilationticket via one of several code path depending on the nature of the incoming compilation and use the compilationticket to obtain an ngcompiler instance this instance may be a fresh compilation a new ngcompiler for an incremental compilation or an existing ngcompiler thats been updated to optimally process a resourceonly change consumer can use the new ngcompiler without knowledge of it provenance pr close ,refactor
1966,languageservice recognize incomplete pipe binding with whitespace the language service us the source span of ast node to recognize which node a user ha selected given their cursor position in a template this is used to trigger autocompletion the previous source span of bindingpipe node created a problem when the pipe binding had no identifier incomplete or inprogress expression the user typed trailing whitespace after the pipe character for example the expression foo if the cursor preceded the in that expression the language service wa unable to detect that the user wa autocompleting the bindingpipe expression since the span of the bindingpipe ended after the this commit change the expression parser to expand the span of bindingpipe expression with a missing identifier to include any trailing whitespace this allows the language service to correctly recognize this case a targeting the bindingpipe and complete it successfully the namespan of the bindingpipe is also moved to be rightaligned with the end of any whitespace present in the pipe binding expression this change allows for the disabled test in the language service for pipe completion in this case to be reenabled pr close ,fix
1967,devinfra fix substitution string for componentbenchmark correct the substitution made to import ngmodule from angularbazel rather than local to the repository pr close ,fix
1968,languageservice implement realpath to resolve symlinks the languageserviceadapter must implement realpath in order to resolve symlinks in nodemodules local library are often symlinked in nodemodules by adding a local dependency in packagejson fix pr close ,fix
1969,devinfra check and validate npm login state for release publishing check and require logging into npm before beginning the release process pr close ,fix
1970,element add notice about choosing a tag name in element guide this commit add a warning in the element guide about using componentselector a the tag name for the registered custom element see also for context pr close ,docs
1971,element add mdn link for mentioned builtin apis in element guide pr close ,docs
1972,devtools update angularframework ,build
1973,devtools update dependency karma to v ,build
1974,devtools update angularcli ,build
1975,devtools fix case where the state of the change detection checkbox in the flamegraph is lost when the component is destroyed ,fix
1976,devtools align theme to other chrome devtools fix rangleangulardevtools contrast issue fix rangleangulardevtools double scrolling change color to follow chrome devtools tab first pas ,fix
1977,core make defaultiterablediffer keep the order of duplicate previously in mismatch the defaultiterablediffer first check linkedrecords for itemtrackby then check unlinkedrecords this cause the defaultiterablediffer to move later item that match the itemtrackby from the old collection rather than using the earlier one now we check unlinkedrecords first so that the defaultiterablediffer can give a more stable and reasonable result after diffing for example rather than a and a have same trackbyid a b c a b a c a we get a b c a b a c a where a and a retain their original order despite both having the same track by value fix pr close ,fix
1978,zonejs do not error when build zonejs on window in older version of bazelbuildrulesnodejs the npmpackagepack rule doe not work on window this ha been fixed in bazelbuildrulesnodejs but the fix is not available before version currently we use version see workspace in order to allow the zonejsbuilderjs script to work on window this commit switch to using npm pack directly intead of relying on npmpackagepack for reference the version of bazelbuildrulesnodejs wa updated to in pr but this wa later reverted due to ci flake edcccfafebbcccaceb pr close ,build
1979,core fix possible x attack in development through ssr this is a follow up fix for it turn out that comment can be closed in several way all of the above are valid way to close comment per the new fix surround and with zero width space so that it render in the same way but it prevents the comment to be closed eagerly pr close ,fix
1980,compilercli use map rather than object for map of partial linkers previously we were naïvely checking whether a function name wa a partial linker declaration call by testing the map of linkers with linkersname since linkers wa a plain object it also matched function name like tostring this ha been refactored a a map to avoid the problem pr close ,fix
1981,languageservice add diagnostics to suggest turning on strict mode this pr add a way for the language server to retrieve compiler option diagnostics via languageservicegetcompileroptionsdiagnostics this will be used by the language server to show a prompt in the editor if user dont have strict or fulltemplatetypecheck turned on ref pr close ,feat
1982,form allow patchvalue method of formgroup and formarray class to skip null value prior to this commit the patchvalue of the formgroup and formarray class used to throw an exception when the value argument contained a data structure that ha null or undefined a a value for a field that represents an instance of formgroup or formarray for formcontrol it not a problem since it doesnt have nested control since the patchvalue method tried to iterate over provided value to match current data structure this commit update the patchvalue logic in formgroup and formarray class to just ignore null and undefined value without any change to corresponding formgroup and formarray instance this behavior look inline with the patchvalue method goal of doing it best to match the value to the correct control quote from doc fix fix pr close ,fix
1983,form properly cleanup in case when formcontrolname ha no cva pr introduced additional cleanup logic for form control and directive the cleanup logic relies on the presence of controlvalueaccessor instance on formcontrolname and formcontrol directive in general these field are present and there are also check to make sure that the mentioned directive instance are created with cva however some scenario primarily test may invoke the logic in a way that the directive instance would not be fully initialized thus causing cva to be absent a a result the cleanup logic fails while trying to call some method on associated cva instance this commit update the cleanup logic to take into account the situation when cva is not present fix pr close ,fix
1984,localize include meaning in generated arb file the arb format doesnt have a dedicated field for message meaning so these change include it a a customize attribute called xmeaning fix pr close ,fix
1985,compilercli reset in message index in compliance test macro the compliance test runner ha various macro that process the expectation file before actually checking their content among those macro are in helper which us a global message counter to be able to uniquely identify icu variable because of the global nature of this message index it wa susceptible to ordering issue which could result in flaky test although it failed very infrequently this commit reset the global message counter before applying the macro a a result of this change an expectation file had to be updated this is actually a bug fix a said test used to fail if run in isolation if focustest true wa set for that particular testcase pr close ,test
1986,devinfra automatically add label to release pr automatically add provided label to pr created for release pr close ,feat
1987,devinfra write to unique log file for fatalerrors in release tooling write to the unique log file to prevent being overwritten for fatalerror failure in the release tooling this will help to assist in determining where something go wrong in the process a well a being able to resume the action pr close ,fix
1988,devinfra support nobranchprompt to suppress the merge tool branch target confirmation add support for a nobranchprompt flag for the ngdev pr merge tool this flag enables suppression of the confirmation prompt for which branch the specified pr will merge into pr close ,feat
1989,zonejs refactor zone rollup config when migrating zonejs from gulp to bazel some legacy build config file are still there we have rollupesconfigjs and rollupesglobalesconfigjs since in gulp build system build e or esm file are set in the config file but in the bazel world the output format is not config in the configjs file but is required by the downstream bazel target so we dont really need the two rollup config file any longer another difference is in rollupesconfigjs the external and global library name are also config there and these setting are also valid for e build these setting are not in the esconfigjs for some legacy reason so we dont need to keep this difference either pr close ,refactor
1990,devtools update angularcli ,build
1991,serviceworker handle error with consoleerror this commit reverts commit fixserviceworker handle error with errorhandler with angular v and commit fixserviceworker handle error with errorhandler angular start to send all service worker registration error to the angular standard errorhandlerhandleerror interface instead of logging them in the console but user existing errorhandlerhandleerror implementation are not adapted to service worker registration error and it might result in broken apps or bad ui passing to errorhandler is desirable for some and undesirable for others and the same is true for passing to consoleerror but consoleerror wa used for a long time and thus it is preferable to keep it a long a a good solution is not found with errorhandler right now it hard to define a good solution for errorhandler because given the nature of the sw registration error usually outside the control of the developer different error message on each browserversion often quite generic error message etc passing them to the errorhandler is not particularly helpful while errorhandlerhandleerror accepts an argument of type any so theoretically we could pas any object without changing the public api most apps expect an error instance so many apps could break if we changed the shape ideally the angular community want to rethink the errorhandler api and add support for being able to pas additional metadata for each error such a the source of the error or some identifier etc this change however could potentially affect many apps out there so the community must put some thought into it and design it in a way that account for the need of all package not just the sw given that we want to more holistically revisit the errorhandler api any change we make in the short term to address the issue just for the sw will make it more difficultbreaky for people to move to a new api in the future to see the whole explanation see github pr pr close ,fix
1992,devtools update angularcomponents to ,build
1993,devtools update angularframework ,build
1994,core fix possible x attack in development through ssr this is a follow up fix for it turn out that comment can be closed in several way all of the above are valid way to close comment per the new fix surround and with zero width space so that it render in the same way but it prevents the comment to be closed eagerly pr close ,fix
1995,core improve injector debug information in ngdevmode lviewdebug now properly show when tnode ha nonodeinjector provide injectorresolutionpath property debugnode pr close ,fix
1996,compiler support multiple hostcontext selector in viewencapsulationemulated mode the compiler must generate additional combination of selector to handle the hostcontext pseudoclass function previously when there is wa more than one hostcontext selector in a rule the compiler wa generating invalid selector this commit generates all possible combination of selector needed to match the same element a the native hostcontext selector fix pr close ,fix
1997,devtools update angularframework ,build
1998,compilercli handle pseudo cycle in inline sourcemaps when a sourcemap ha an inline source any sourcemap linked from that source should only be loaded if itself is also inline it should not attempt to load a sourcemap from the filesystem otherwise we can find ourselves with inadvertent infinite cyclic dependency for example if a transpiler take a file eg indexjs and generates a new file overwriting the original file capturing the original source inline in the new sourcemap indexjsmap the source file loader might read the inline original file also indexjs and then try to load the indexjsmap file from disk ad infinitum note that the first call to loadsourcefile is special since you can pas in the sourcefile and sourcemap content directly a inmemory strrngs this is common if the transpiler ha just generated these and ha not yet written them to disk when the content are passed into loadsourcefile directly they are not treated a inline for the purpose described above since there is no chance of these inmemory source and sourcemap content being caught up in a cyclic dependency fix pr close ,fix
1999,languageservice view template typecheck block this patch add an api to retrieve the template typecheck block for a template if any at a file location and a selection of the t node in the tcb corresponding to the template node at which the request for a tcb wa made if any probably not something we want to land soon but a useful debugging tool for folk working with tcbs pr close ,feat
2000,migration remove rxjs usage within static query migration rxjs wa only used within one location within the static query migration to workaround a previous limitation that schematic could not directly use a promise however promise support ha been available since this change remove the observable promise wrapping it also remove an any cast that wa previously needed to workaround rxjs version mismatch during compilation pr close ,refactor
2001,common implement appendall method on httpparams add an appendall method to httpparams that can construct the http requestresponse body from an object of parameter and value this avoids calling append multiple time when multiple parameter need to be added fix pr close ,feat
2002,docsinfra upgrade cli command doc source to ceb updating angularmaster from clibuildsmaster relevant change in commit range modified helpbuildjson helpservejson pr close ,build
2003,router fix occasional error when creating url tree in ie and edge for the google cloud console within google we observed error in the shallowequal function for user in ie and edge this patch wa made within google and the error went away this commit upstreams the change into angular pr close ,fix
2004,core verify that token id that exceed the bloom filter size are handled correctly this commits add additional expectation to verify that the bloom filter is able to correctly handle token id that exceed the size of the bloom filter which is currently bit pr close ,test
2005,core simplify bloom bucket computation the injector system us a bloom filter to determine if a token is possibly defined in the node injector tree which is stored across multiple bloom bucket that each represent bit of the full bit wide bloom hash this mean that a computation is required to determine the exact bloom bucket which is responsible for storing any given bit interval which wa previously computed using three bitmask operation and three branch to derive the bloom bucket offset this commit exploit the observation that all bit beyond the low bit of the bloom hash are an accurate representation for the bucket offset if shifted right such that those bit become the least significant bit this reduces the three bitmask operation and three branch with a single shift operation while additionally offering a code size improvement pr close ,perf
2006,languageservice do not mutate the original template node span rather than mutating the span on the template when renaming literal string this commit update the logic to mutate the textspan equivalent that is used by the language service pr close ,refactor
2007,router always stringify matrix parameter fix a case where matrix parameter werent stringified when they are passed a a first command when creating a url tree fix return type in parsematrixparams method because it always return key string string close pr close ,fix
2008,docsinfra move docswatch setting to a base package this new baseauthoringpackage capture all the setting which turn of potentially fatal check in one place this new package is then used a a base for all the docswatch related package rather than dotting the setting in a variety of different package this also ha the benefit that the standard configuration for docgen is fatal on failed check by default pr close ,build
2009,docsinfra fail gently if a changed file is unknown when using docswatch we try to match the changed file to a dgeni package in order to trigger a minimal set of processor previously if the changed file could not be matched we emitted an ugly error now we provide a helpeful message pr close ,build
2010,docsinfra fail if there are unused example region we can define region in our example that can be referenced and rendered in guide a code snippet it is quite hard to ensure that these region are maintained correctly one reason for this is it is hard to know whether a region is being used or not this commit add a new processor that check for unused named region in example and fails if any are found fix pr close ,build
2011,docsinfra improve docswatch example matching in the docswatch job we attempt to guess what additional file need to be processed given a change to a single file previously we were not finding link to example that were defined over multiple line eg codepane headersrcappappcomponenthtml regionherobirthdaytemplate pathpipessrcappappcomponenthtml codepane this commit improves the regular expression to handle these case pr close ,build
2012,docsinfra remove outdated comment the comment referred to pre v angular the package ha now been completely removed pr close ,build
2013,languageservice path on window should be normalized many tslanguageservice apis accept a filename for example t getquickinfoatpositionfilename string position number the requirement is that filename is agnostic to the platform linux mac window etc and is always normalized to typescript internal normalizedpath this is evident from the way these apis are called from the language server t private onhoverparams lsptextdocumentpositionparams const lsinfo thisgetlsandscriptinfoparamstextdocument if lsinfo undefined return const languageservice scriptinfo lsinfo const offset lsppositiontotspositionscriptinfo paramsposition const info languageservicegetquickinfoatpositionscriptinfofilename offset here scriptinfofilename is always a tsservernormalizedpath however accidentally leaked the platformspecific path and caused a mismatch between the incoming path and the path stored in the internal data structure filetocomponent this pr fix the bug by always normalizing the path and updating the type to reflect the format of the underlying data fix pr close ,fix
2014,languageservice deduplicate rename and reference result the initial implementation assumed that the consuming editor would deduplicate rename location in fact vscode treat overlapping rename location a distinct and error when trying to preview the renames this commit update the language service to deduplicate exact filespan match before returning rename and reference location while vscode doe deduplicate reference result it still make sense to deduplicate them on our side when possible to make test more understandable if a template ha instance of a variable it make sense to get get reference result rather than with some duplicate pr close ,refactor
2015,languageservice fix go to definition for template variable and reference the current go to definition is broken for template variable and reference when a template is overridden this is because we get the file url from the source span which us the overridden name overridehtml instead we can retrieve the template file from the compiler in the same manner that is done for reference another way to fix this would have been to use the real template file path when overriding a template but this wa the more straightforward fix since the strategy wa already used in find reference and rename location fix pr close ,fix
2016,form error if control is removed a a result of another one being reset when a form is reset it go through foreachchild to call reset on each of it child the problem is that if a control is removed while the loop is running eg by a subscription the form will throw an error because it built up the list of available control before the loop started these change fix the issue by adding a null check before invoing the callback fix pr close ,fix
2017,core add link to top compiler error add link to compiler error message navigate user to aio new error page for debugging pr close ,refactor
2018,core add link to top runtime error add link to runtime error message navigate user to aio new error page for debugging pr close ,refactor
2019,docsinfra use record type instead of keyvalue use record type instead of keyvalue close pr close ,feat
2020,zonejs add leading space in the license comment of zonejs bundle pr close ,docs
2021,zonejs fesm bundle should also be strict module close fesmzonejs is built to esm bundle with rollup so the use strict statement is not generated in the bundle even we put the use strict in the src code rollup remove the code in the final bundle so if we load the fesmzonejs a a module such a ng serve in the indexhtml script srcpolyfillsjs typemodulescript everything work fine since polyfillsjs is loaded a module so it is always strict but in ng test webpack concat the zonejs and loaded into the karma html for other app and test code they are still strict since they are module because they have exportimport statement but zonejs is a bundle without export it is a side effect bundle so after loaded by webpack it becomes nonstrict which cause some issue such a the root cause is the this context should be undefined but treated a window in nonstrict mode objectprototypetostringapplyundefined should be object undefined but it is object window in nonstrict mode zonejs patched version of tostring objectprototypetostring function in nonstrict mode this is window return originalobjectprototypetostringcallthis so in this commit use strict is always added to the esm bundle pr close ,fix
2022,core fix fakeasync error message fix error message when calling fakeasync without importing zonetestingjs pr close ,fix
2023,devtools update angularframework ,build
2024,languageservice implement getrenameinfo the getrenameinfo action is used by consumer to determine if a location is a candidate for renames determine what text to use a the starting point for the rename pr close ,feat
2025,compiler correct the keyspan for animation event and property we should provide the completion when the cursor is in the attribute name after the and animate but now the keyspan start from the or animate for example the animation event namedonev we can know where the cursor is by the keyspan of namedone exactly it in the event name or in the phase name pr close ,fix
2026,compiler remove unused file in cssparser and corresponding spec test reason for change cssparser cssast and csslexer are not used anywhere and there are no entry point from compilerts tested by building angular and buildingrunning aio with buildlocal pr close ,refactor
2027,router lazy loaded module without routermoduleforchild wont cause an infinite loop when loading a module that doesnt provide routermoduleforchild preloader will get stuck in an infinite loop and throw error error maximum call stack size exceeded the issue is that child module injector will look to it parent injector when it doesnt find any route so it will return route for it parent module instead this will load the child again that return it parent route and so on close pr close ,fix
2028,docsinfra add shortcut for the angulario pwa this commits add some shortcut definition for the angulario pwa the user agent can use them to assemble a context menu to be displayed by the operating system when a user engages with the apps icon in addition shortcut provide an easy way for user to add link to specific page on their home screen see here for more detail on the shortcut property of the pwa manifest the choice of page to create shortcut to wa influenced by the following factscriteria it seems that only the first shortcut are displayed by chrome at least on my android phone since the pwa is mostly used on mobile i omitted page that are le likely to be useful for mobile user such a page related to cli pr close ,feat
2029,docsinfra more some pwamanifestjson key to the top to improve readability this commit move some property with simple string value in pwamanifestjson to the top ie above the more lengthy icon array to make them easier to discover pr close ,refactor
2030,languageservice initial implementation for findrenamelocations this commit lay the groundwork for potentially providing rename location from the ivy native l the approach is very similar to what wa done with the feature to find reference one difference however is that we did not require the reference to be fully correct that is the exact text span did not matter so much a long a we provide a location that logically includes the referenced item an example of a necessary difference between rename location and reference is directive the entire element in the template is a reference of the directive class however it not a valid location to be renamed the same go for aliased inputsoutputs the location in the template directly map to the class property which is correct for reference but would not be correct for rename location which should instead map to the string node fo the alias a an initial approach to address the aforementioned issue with rename location we check that all the rename location node have the same text if any node ha text that differs from the request we do not return any rename location this work a a way to prevent renames that could break the the program by missing some required node in the rename action but allowing other node to be renamed pr close ,feat
2031,core remove the need for explicit static query instruction because the query now ha flag which specify the mode the static query instruction can now be remove it is simply normal query with static flag pr close ,refactor
2032,core querylist should not fire change if the underlying list did not change previous implementation would fire change querylistchangessubscribe whenever the querylist wa recomputed this resulted in artificially high number of change notification a it is possible that recomputing querylist result in the same list when the querylist get recomputed is an implementation detail and it should not be the thing which determines how often change event should fire this change introduces a new emitdistinctchangesonly option for contentchildren and viewchildren export class querycompwithstrictchangeemitparent contentchildrenfoo this option will become the default in the future emitdistinctchangesonly true foos querylistany pr close ,fix
2033,ngcc do not copy file that have been processed when using the newentrypointwriter we must copy over all file from the entrypoint bundle to the new entrypoint but since we are going to write out the modified file directly there is no need to copy those this commit skip copying the file that have been modified pr close ,perf
2034,ngcc copy and update sourcemaps for unmodified source file when using the newentrypointwriter we copy unmodified file over to the new entrypoint in addition to writing out the source file that are processed by ngcc but we were not copying over associated sourcemap file for these unmodified source file leading to warning in downstream tooling now we will also copy over sourcemaps that reside a sibling of unmodified source file we have to make sure that the source of the sourcemap point to the correct file so we also update the sourceroot property of the copied sourcemap fix pr close ,fix
2035,docsinfra error guide in doc add error to doc create formatting for error guide infra pr close ,build
2036,core change url to shadow dom spec the old url is no longer available this commit update to link to mdn instead fix pr close ,docs
2037,core add ivy note to entrycomponents page pr close ,docs
2038,common updated differential loading section pr close ,docs
2039,core make di decorator treeshakable when used for usefactory deps config this commit update the logic that calculates usefactory function argument to avoid relying on instanceof check thus always retaining symbol and relies on flag that di decorator contain a a monkeypatched property another perf benefit is having le megamorphic read while calculating args for the usefactory call we used to check whether a token ha ngmetadataname property time in worst case now we have just megamorphic read in all case close pr close ,perf
2040,docsinfra fail if we attempt to autolink to a private doc previously we only logged a warning if we attempted to autolink to a doc that had no path property which implies that it is private and is not rendered now we fail hard during full docgen although when running the yarn servandsync command it should not fail if change are only made to guide which is what author who use this tool are most likely to do pr close ,build
2041,docsinfra ensure private exported subclass are not rendered previously only the first layer of subclass were filtered to remove private export but on recursing down further level these were not filtered out pr close ,build
2042,docsinfra add default tagdef support this tagdef is being used in the platformserver source code and wa causing warning in the docgen adding support prevents the warning from being shown other than that this change ha no effect on the generated documentation since the default tag is not used in any template pr close ,build
2043,docsinfra do not display stack trace on docgen error this commit update dgeni to the latest version which will now only display the stacktrace after an error if the logger is set to debug fix pr close ,build
2044,compilercli report nontemplate diagnostics report nontemplate diagnotics when calling getdiagnotics function of the language service we only returned template diagnotics this change cause it to return all diagnotics not just diagnostics from the template type checker pr close ,fix
2045,languageservice diagnostic and definition should work for absolute url this commit fix a bug in the view engine implementation of getsemanticdiagnostics and getdefinitionandboundspan for node in the decorator metadata that represents an external url templateurl or styleurls the url could be either relative or absolute but the latter wa not taken into account fix pr close ,fix
2046,compilercli include template source directly inside declaration object the template and isinline field were previously stored in a nested object which wa initially done to accommodate for additional template information to support accurate source map for external template in the meantime the source mapping ha been accomplished in a different way and i feel this flattened structure is simpler and smaller so is preferable over the nested object this change also make the isinline property optional with a default value of false pr close ,refactor
2047,devinfra make tsapiguardian compatible with rulesnodejs version change include remove bazelworkspaces a this is no longer supported due to a single version policy and installbazeldependencies ha been removed enable bazelpatchmoduleresolver since monkeypatch the implementation of require in nodejs is optin more info about the change can be found here blocking pr close ,feat
2048,compiler incorrectly inferring content type of svgspecific title tag the parser ha a list of tag definition that it us when parsing the template each tag ha a contenttype which tell the parser what kind of content the tag should contain the problem is that the browser ha two separate title tag htmltitleelement and svgtitleelement and each of them ha to have a different contenttype otherwise the parser will throw an error further down the pipeline these change update the tag definition so that each tag name can have multiple content type associated with it and the correct one can be returned based on the element prefix fix pr close ,fix
2049,docsinfra add more check to verify contributorsjson data this commit add extra step to verify contributorsjson data such a checking lead and mentor field a well a making sure the list is sorted alphabetically pr close ,build
2050,docsinfra rename contributorscheckpicturesjs to validatedatajs this commit renames contributorscheckpicturesjs to contributorsvalidatedatajs since this file script will also be used to include other check pr close ,refactor
2051,router refactor and simplify router rxjs chain refactor and simplifiy rxjs usage in the router package in order to reduce it size and increase performance pr close ,refactor
2052,router clarify the description of legacy relativelinkresolution pr close ,docs
2053,devtools update angularframework ,build
2054,devtools update dependency typeschrome to ,build
2055,devtools update angularcli ,build
2056,router better ngzone checking for warning do not warn that navigation wa triggered outside angular zone if the router wa created outside angular zone in the first place close pr close ,fix
2057,serviceworker remove workaround for chrome code highlighting bug chrome debugger code highlighting bug ha been fixed so we can remove the workaround see for more detail on the workaround pr close ,refactor
2058,serviceworker allow checking for update when constantly polling the server previously the sw would wait to become idle before executing scheduled task including check for newer app version it wa considered idle when it hadnt received any request for at least second a a result if the app performed polling ie sent request to the server in a shorter than second interval the sw would never detect and update to a newer app version related issue this commit fix this by adding a max delay to idlescheduler to ensure that no scheduled task will remain pending for longer than the specified max delay pr close ,fix
2059,serviceworker simplify driverhandlefetch method this commit refactors the driverhandlefetch method to not have to call eventwaituntilthisidletrigger in multiple place pr close ,refactor
2060,serviceworker avoid unnecessarily creating promise in driverdeleteallcaches this commit refactors driverdeleteallcaches to use arraymap instead of arrayreduce for running async operation in parallel this allows avoiding having to recursively wrap promise with promiseall pr close ,refactor
2061,serviceworker notify client about update in parallel previously client were notified about update sequentially this wasnt necessary this commit change the drivernotifyclientsaboutupdate method to notify the client in parallel by switching from arrayreduce to arraymap and promiseall this also aligns the notifyclientsaboutupdate method with the notifyclientsaboutunrecoverablestate method pr close ,refactor
2062,serviceworker ensure sw stay alive while notifying client about unrecoverable state previously the drivernotifyclientsaboutunrecoverablestate method would not wait for the completion of the promise created to notify the client theoretically this could result in the sw instance getting destroyed by the browser before all client have been notified this is extremely unlikely to happen in practice since the async operation are very quick but it is theoretically possible this commit ensures that the sw instance will remain alive while notifying the client by making notifyclientsaboutunrecoverablestate await the notification promise pr close ,fix
2063,compilercli prevent stack overflow in decorator transform for large number of file the decorator downleveling transform patch tsemitresolverisreferencedaliasdeclaration to prevent elision of value import that occur only in a typeposition which would inadvertently install the patch repeatedly for each source file in the program this could potentially result in a stack overflow when a very large number of file is present in the program this commit fix the issue by ensuring that the patch is only applied once this is also a slight performance improvement a isreferencedaliasdeclaration is no longer repeatedly calling into all prior installed patch function fix pr close ,fix
2064,ngcc compute the correct package path for target entrypoints previously if there were pathmapped entrypoints where one contaied the string of another for example workerclient and worker then the base path were incorrectly computed resulting in the wrong package path for the longer entrypoint this wa because when searching for a matching base path the string were tested using startswith whereas we should only match if the path wa contained in a directory from a filesystem point of view now we not only check whether the target path start with the base path but then also whether the target path is actually contained in the base path using fsrelative fix fix pr close ,fix
2065,router fix minor grammatical issue pr close ,docs
2066,devinfra detect multiple target label a invalid when multiple target label are applied to a pr it should be considered invalid a our tooling doe not support a single pr targetting multiple trainsversions pr close ,fix
2067,docsinfra upgrade cli command doc source to ebcfba updating angularmaster from clibuildsmaster relevant change in commit range modified helpextractinjson helptestjson relevant change in commit range since pr modified helpextractinjson close pr close ,build
2068,router remove usage of objectvalues to avoid the need for a polyfill objectvalues is not supported in ie without a polyfill the quickest most straightfoward fix for this is to simply use objectkeys instead we may want to consider including the polyfill in the cli in the future or just wait until ie support is dropped before using objectvalues pr close ,fix
2069,devtools update angularframework ,build
2070,devtools update angularcli ,build
2071,languageservice log angular compiler option this commit record the angular compiler option in the log file to help debugging pr close ,feat
2072,languageservice reinstate overridden compiler option after change currently the language service ha to force compilenonexportedclasses to true to handle inline ngmodules in test regardless of the value in user tsconfigjson however the override is not reinstated after the compiler option change triggered by a change in tsconfigjson this commit fix the bug pr close ,fix
2073,router clearly document how to retrieve all params in the router tree this commit document how to add a helper function which combine all the params in the router state tree into a single object it provides a starting point for developer to reference if they require a more finetuned approach fix pr close ,docs
2074,zonejs fix typo in zoneexterns this change fix a typo in zonejs extern definition and avoids closure compiler renaming taskcancelschedulerequest unexpectedly pr close ,fix
2075,core memory leak if view container host view is destroyed while view ref is not when we attach a viewref to a viewcontainerref we save a reference to the container onto the viewref so that we can remove it when the ref is destroyed the problem is that if the container hostview is destroyed first the viewref ha no way of knowing that it should stop referencing the container these change remove the leak by not saving a reference at all instead when a viewref is destroyed we clean it up through the lcontainer directly we dont need to worry about the case where the container is destroyed before the view because container automatically clean up all of their view upon destruction fix pr close ,fix
2076,form handle standalone form tag correctly in ngcontrolstatusgroup directive the ngcontrolstatusgroup directive is shared between templatedriven and reactive form module in case when only reactive form module is present the ngcontrolstatusgroup directive is still activated on all form element but if there is no other reactive directive applied such a formgroup corresponding controlcontainer token is missing thus causing exception since ngcontrolstatusgroup directive relies on it to determine the status this commit update the logic to handle the case when no controlcontainer is present effectively making directive logic a noop in this case alternative approach more risky worth considering in the future is to split the ngcontrolstatusgroup into directive with different set of selector and include them into templatedriven and reactive module separately the downside is that these directive might be activated simultaneously on the same element eg form effectively doing the work twice resolve pr close ,fix
2077,devinfra delay checking if a closed pr ha been merged by second delaying the check if a closed pr wa closed by a merge or just closed by second allows for github to have time to update the pr to be associated to the commit which closed the pr without this delay a race condition can exist in which we check for how a pr wa closed before this association is made pr close ,fix
2078,compilercli split up nodejsfilesystem class this class is refactored to extend the new nodejsreadonlyfilesystem which itself extends nodejspathmanipulation these new class allow consumer to create filesystems that provide a subset of the full filesystem pr close ,refactor
2079,localize update to use new filesystem interface now that readonlyfilesystem and pathmanipulation interface are available this commit update the localize package to use these more focussed interface pr close ,refactor
2080,compilercli update to use new filesystem interface now that readonlyfilesystem and pathmanipulation interface are available this commit update the compilercli to use these more focussed interface pr close ,refactor
2081,compilercli split the filesystem interface up this interface now extends readonlyfilesystem which in turn extends pathmanipulation this mean consumer of these interface can be more specific about what is needed and so provider do not need to implement unnecessary method pr close ,refactor
2082,devtools allow ctrlmeta click to selectdeselect multiple frame ,feat
2083,devtools scroll profiler frame info tab independently of active visualizer ,feat
2084,core update test expectation to account for ie anonymous function name the monitoring workflow ha been failing since wa merged due to a saucelabs test failure in internet explorer the issue is with the test expectation which doe not account for ivy instruction invocation to use anonymous instead of the instruction function name this commit change the test expectation to also accept anonymous which wa already the case for similar expectation pr close ,test
2085,compiler recover event parse when animation event name is empty now when the animation trigger output event is missing it phase value name the boundevent will be ignored but it useful for completion in language service pr close ,fix
2086,devtools update angularcli ,build
2087,languageservice add comment about approach to quick info for twoway binding this commit simply add a comment about why quick info only get data for the boundattribute of a twoway binding pr close ,docs
2088,languageservice support completion of twoway binding this commit add special handling to the completion builder by detecting a two way binding context and ensuring that we filter out any input that do not support two way binding pr close ,fix
2089,languageservice support find reference for twoway binding rather than expecting that a position in a template only target a single node this commit simply adjusts the approach to account for two way binding specifically we attempt to get reference for each targeted node and then return the combination of all result or undefined if none of the target node had reference pr close ,fix
2090,languageservice support go to definition for twoway binding rather than expecting that a position in a template only target a single node this commit adjusts the approach to account for two way binding in particular we attempt to get definition for each targeted node and then return the combination of all result or undefined if none of the target node had definition pr close ,fix
2091,languageservice have templatetarget recognize two way binding adjust the visitor logic of the template target a well a the consumption of the visitor result to account for twoway binding this set up downstream consumer for being able to handle the possibility of a template position that target both an input and an output pr close ,refactor
2092,languageservice add type to templatetarget that can indicate multinode target the current template target implementation only allows a way to represent the template position a targeting a single node in the template ast however there is at least one case bananainabox where a given template position refers to two template target this commit expands the context that the templatetarget can return to include support for the bananainabox syntax which ha two logically targetted ast node given a position within the keyspan of the binding pr close ,refactor
2093,compilercli find symbol for output when there is a two way binding this commit fix the template type checker getsymbolofnode so that it is able to retrieve a symbol for the boundevent of a twoway binding previously the implementation would locate the node in the tcb for the input because it appeared first and share the same keyspan a the event binding to fix this the tcb node search now verifies that the located node match the expected name for the output subscription either addeventlistener for a native listener or the class member of the angular output in the case of an angular output a would be the case for twoway binding pr close ,refactor
2094,compiler incorrectly interpreting some hostbinding name currently when analyzing the metadata of a directive we bundle together the binding from host and the hostbinding and hostlistener together this can become a problem later on in the compilation pipeline because we try to evaluate the value of the binding causing something like hostbindingclassfoo public true to be treated the same a host classfoo true while looking into the issue i noticed another one that is closely related we werent treating quoted property name correctly eg hostbindingclassfoo public foobar wa being interpreted a classpropfoo ctxfoo ctxbar due to the same issue where property name were being evaluated these change resolve both of the issue by treating all hostbinding instance a if theyre reading the property from this eg the hostbindingclassfoo public true from above is now being treated a host classfoo thistrue which further down the pipeline becomes classpropfoo ctxtrue this doesnt have any payload size implication for existing code because weve always been prefixing implicit property read with ctx if the property doesnt have an identifier that can be read using dotted access we convert it to a quoted one eg classpropfoo ctxisfoo fix fix fix pr close ,fix
2095,compilercli support external template sourcemapping when linking this commit change the partialcomponentlinker to use the original source of an external template when compiling if available to ensure that the sourcemapping of the final linked code is accurate if the linker is given a filesystem and logger then it will attempt to compute the original source of external template so that the final linked code reference the correct template source pr close ,refactor
2096,compilercli add external template sourcemap test this commit migrates and supplement compliance test that check the sourcemapping of external template pr close ,test
2097,compilercli improve source mapping compliance test failure message now if a sourcemapping compliance test fails the message display both the path to the generated file and more helpfully the path to the expected file pr close ,test
2098,compilercli tidy up the lineending compliance test testcases previously the name of the source and expectation file were often reused which caused potential confusion there is now a single source file for each testcase which is important when they are being compiled with different compiler option since the goldenpartial file will only contain one copy per file name the name of the expectation file have now been changed so that is clearer which testcase they are related to pr close ,test
2099,compilercli fix up import path in test code these import were unnecessrily deep since the file are actually in the same directory pr close ,test
2100,compilercli add file to babel location the filename of the sourcespan is now added to the babel location when setting the sourcemap range in the babelasthost note that the filename is only added if it is different to the main file being processed otherwise babel will generate two entry in it generated sourcemap pr close ,refactor
2101,compilercli do not duplicate repeated sourcefiles in rendered sourcemaps when a sourcemapsourcefile tree ha node that refer to the same file the flattened sourcemap rendering wa those file multiple time rather than consolidating them into a single sourcemap source pr close ,fix
2102,compiler synthesize external template node for partial compilation when partially compiling a component with an external template we must synthesize a new ast node for the string literal that hold the content of the external template since we want to sourcemap this expression directly back to the original external template file pr close ,refactor
2103,router remove usage of objectentries to avoid the need for a polyfill objectentries is not supported in ie without a polyfill the quickest most straightfoward fix for this is to simply use objectkeys instead we may want to consider including the polyfill in the cli in the future or just wait until ie support is dropped before using objectentries pr close ,fix
2104,devtools update angularframework ,build
2105,compilercli return symbol for all matching output this commit ensures that the template type checker return symbol for all output if a template output listener bind to more than one pr close ,refactor
2106,compilercli return symbol for all matching input this commit ensures that the template type checker return symbol for all input if an attribute bind to more than one pr close ,refactor
2107,router correctly deactivate child with componentless parent during route activation a componentless route will not have a context created for it but the logic continues to recurse so that child are still activated this can be seen here the current deactivation logic doe not currently account for componentless route this commit adjusts the deactivation logic so that if a context can not be retrieved for a given route because it is componentless we continue to recurse and deactivate the child using the same parentcontexts in the same way that activation doe fix pr close ,fix
2108,languageservice return all typecheck file via getexternalfiles we need a mean to preserve typecheck file when a project is reloaded otherwise the ivy compiler will throw an error when it unable to find them this commit implement getexternalfiles called by the langauge server to achieve this goal for more info see pr close ,fix
2109,languageservice lsparseconfighostresolve should not concat ab path tsserverserverhostresolvepath is different from angulars filesystemresolve because the signature of the former is t resolvepathpath string string tsserverserverhost whereas the signature of the latter is t resolvepaths string absolutefspath filesystem on compilercli the current implementation call pathjoin to concatenate all the input path and pas the result to tsserverserverhostresolvepath but doing so result in filename like foobarbazfoobarbaztsconfigjson if both input path are absolute tsserverserverhost should not be used to implement the resolve method expected by angulars filesystem we should use node pathresolve instead which will correctly collapse the absolute path fix pr close ,fix
2110,languageservice include compileroptionsrootdir in rootdirs when resolving reference the ivy compiler ha a few strategy it could use for relative path one of strategy is relativepathstrategy ngtscimportsreadmemdrelativepathstrategy this strategy relies on compileroptionsrootdir and compileroptionsrootdirs to perform the resolution but language service only pass rootdirs to the compiler and not rootdir in reality rootdir is very different from rootdirs even though they sound the same according to the official t documentation rootdir specifies the root directory of input file only use to control the output directory structure with outdir rootdirs is a list of root folder whose combined content represent the structure of the project at runtime see module resolution documentation moduleresolutionhtmlvirtualdirectorieswithrootdirs for more detail for now we keep the behavior between compiler and language service consistent but we will revisit the notion of rootdir and how it is used later fix angularvscodenglanguageservice pr close ,fix
2111,compiler incorrectly encapsulating selector with escape sequence cs support escaping in selector eg writing foobar will match an element with the foo class and bar pseudoclass but foobar will match the foobar class our shimmed shadow dom encapsulation always assumes that mean a pseudo selector which break a selector like foobar these change add some extra logic so that escaped character in selector are preserved fix pr close ,fix
2112,core ensure sanitizer work if domparser return null body in some browser notably a mobile version of webkit on ipad the result of calling domparserparsefromstring return a document whose body property is null until the next tick of the browser since this is of no use to u for sanitization we now fall back to the inert document strategy for this case fix pr close ,fix
2113,devinfra fix yarn symbolextractor command the yarn symbolextractorcheck and yarn symbolextractorupdate command dont seem to work currently the script is unable to calculate the list of relevant target running the bazel query command used in the script fails due to the missing quote around the query argument this commit fix the problem by updating the script to wrap query argument into single quote pr close ,fix
2114,devtools update angularcli ,build
2115,form typo word property wa missing word property wa missing in return description of minlength pr close ,docs
2116,compilercli jit compilation of component declaration the ɵɵngdeclarecomponent call are designed to be translated to fully aot compiled code during a build transform but in case this is not done it is still possible to compile the declaration object in the browser using the jit compiler this commit add a runtime implementation of ɵɵngdeclarecomponent which invokes the jit compiler using the declaration object such that a compiled component definition is made available to the ivy runtime pr close ,feat
2117,core tag render test target a ivyonly the render test target are currently also executed for viewengine build even though the render infrastructure only concern ivy infrastructure this commit tag the test target a ivyonly to disable those test for view engine pr close ,test
2118,compilercli ngcc remove outdated link the link to the speedingupngcccompilation url doe not exist it wa removed shortly after it wa added but the link in the ngcc error message wa not updated fix pr close ,fix
2119,devtools set production flag to false in dev environment ,fix
2120,compiler dont report parse error for interpolation inside string in property binding currently we check whether a property binding contains an interpolation using a regex so that we can throw an error the problem is that the regex doesnt account for quote which mean that something like prop foo will be considered an error even though it not actually an interpolation these change build on top of the logic from to account for interpolation character inside quote fix pr close ,fix
2121,core express trusted constant with tagged template literal the trustconstanthtml and trustconstantresourceurl function are only meant to be passed constant string extracted from angular application template a passing other string or variable could introduce x vulnerability to better protect these apis turn them into template tag this make it possible to assert that the associated template literal do not contain any interpolation and thus must be constant also add test for the change to prevent regression pr close ,refactor
2122,core fix typo in component overview there is a sentence that mention stylesurls but should be changed to styleurls pr close ,docs
2123,core fix spelling pr close ,docs
2124,router clarify parent for params inheritance when talking about parameter inheritance one might think that matrix parameter can be inherited from the parent segment or the segment which appears immediately to the left in reality when we talk about a parent in the router we mean the parent route config this config may contain more than one segment and matrix parameter must appear at the end or they do not belong to any config pr close ,docs
2125,router apply redirects should match named outlet with empty path parent there are two part to this commit revert the change from this change had an incomplete view of how thing worked and also diverged the implementation of applyredirects and recognize even more apply the fix from the recognize algorithm to ensure that named outlet with empty path parent can be matched this change also pass all the test that were added in with the added benefit of being a more complete fix that stay inline with the recognize algorithm this wa made possible by using the same approach for split by always creating segment for empty path match previously this wa only done in applyredirects if there wa a redirectto value at the end of the expansion we need to squash all empty segment so that serializing the final urltree return the same result a before fix fix close pr close ,fix
2126,router extract common function for config matching the applyredirects and recognize algorithm have the same overall goal match a urltree with the application route config there are a few key function in these algorithm which can be shared rather than duplicated between the two this also make it easier to see how the two are similar and where they diverge pr close ,refactor
2127,router ensure named outlet with empty path parent are recognized this commit update the recognize algorithm to work with named outlet which have empty path parent for example given the following config const route path child path a outlet aux component auxcomponent the url auxa should match this config in order to do so we need to allow the child of urlsegmentgroups to match a route config for a different outlet in this example the primary when it an empty path this should also only happen if we were unable to find a match for the outlet in the level above that is the matching strategy is to find the first route in the list which match the given outlet if we are unable to do that then we allow empty path from other outlet to match and try to find some child there whose outlet match our segment pr close ,fix
2128,router make recognize synchronous to make the test suite easier to follow recognizeapply can be made into a synchronous function rather than one that return an observable also a a chore remove a many any type a possible pr close ,refactor
2129,router update recognize to return null when there is no match this commit update the recognize algorithm to return null when a segment doe not match a given config rather than throwing an error this make the code much easier to follow because the no match result ha to be explicitly handled rather than catching the error in very specific place pr close ,refactor
2130,router use forof rather than mapchildrenintoarray helper when stepping through the recognize algorithm it is much easier to follow when using a simple forof rather than the helper mapchildrenintoarray with the passed closure the only special thing that mapchildrenintoarray doe is ensure the primary route appears first this change will have no affect on the result because processchildren later call sortactivatedroutesnapshots which doe the same thing pr close ,refactor
2131,devtools update angularcli ,build
2132,form clean up connection between formcontrolformgroup and corresponding directive instance prior to this commit removing formcontroldirective and formgroupname directive instance didnt clear the callback previously registered on fromcontrolformgroup class instance a a result these callback were executed even after formcontroldirective and formgroupname directive instance were destroyed that wa also causing memory leak since these callback also retained reference to dom element this commit update the cleanup logic to take care of properly detaching formcontrolformgroupformarray instance from the view by removing viewspecific callback at destroy time close pr close ,fix
2133,core take host into account while processing usefactory argument di provider can be defined via usefactory function which may have argument configured via deps array the deps array may contain di flag represented by di decorator such a self skipself etc prior to this commit having the host decorator in deps array resulted in runtime error in ivy the problem wa that the host decorator wa not taken into account while usefactory argument list wa constructed the host decorator wa treated a a token that should be looked up this commit update the logic which prepares usefactory argument to recognize the host decorator pr close ,fix
2134,localize ensure extracted message are serialized in a consistent order the cli integration can provide code file in a nondeterministic order which led to the extracted translation file having message in a nonconsistent order between extraction this commit fix this by ensuring that serialized message are ordered by their location fix pr close ,fix
2135,core add schematic to fix invalid route configs route configs with redirectto a well a canactivate are not valid because the canactivate guard will never execute redirects are applied before activation there is no error currently for these configs but another commit will change this so that an error doe appear in dev mode this migration fix the configs by removing the canactivate property pr close ,feat
2136,router produce error message when canactivate is used with redirectto redirects in the router are processed before activation this mean that a canactivate will never execute if a route ha a redirect rather than silently ignoring the invalid config developer should be notified so they know why it doesnt work close the feature request for a functionclass redirect is covered in pr close ,refactor
2137,languageservice do not include event parameter in reference result given the template div clickdosomethingeventdiv if you request reference for the event the result include both event and clickdosomethingevent this happens because in the tcb event is passed to the subscribeaddeventlistener function a an argument so when we ask typescript to give u the reference we get the result from the usage in the subscribe body a well a the one passed in a an argument this commit add an identifier to the event parameter in the tcb so that the result returned from getreferencesatposition can be identified and filtered out fix pr close ,fix
2138,router router should focus element after scrolling according to the spec we should attempt to set the browser focus after scrolling to a fragment note that this change doe not exactly follow the robust step outlined in the spec by finding a fallback target if the original is not focusable instead we simply attempt to focus the element by calling focus on it which will do nothing if the element is not focusable fix pr close ,fix
2139,router update scroller test to use real object the current test in the router scroller are changedetector test and do not ensure the correct behavior of the scroller this commit update the test to assert actual scrolling behavior of the browser pr close ,test
2140,router remove unused property in browserviewportscroller the browserviewportscroller injects but doe not use the errorhandler this commit remove the errorhandler from the constructor pr close ,refactor
2141,devtools update dependency ngxbuildplus to v ,build
2142,devtools update angularcli ,build
2143,docsinfra upgrade cli command doc source to cefcdc updating angularmaster from clibuildsmaster relevant change in commit range modified helpbuildjson helpservejson helptestjson pr close ,build
2144,router fix typo replace the word angualr with angular pr close ,docs
2145,compilercli jit compilation of directive declaration the ɵɵngdeclaredirective call are designed to be translated to fully aot compiled code during a build transform but in case this is not done it is still possible to compile the declaration object in the browser using the jit compiler this commit add a runtime implementation of ɵɵngdeclaredirective which invokes the jit compiler using the declaration object such that a compiled directive definition is made available to the ivy runtime pr close ,feat
2146,compilercli expose function to allow shortcircuiting of linking the linker is implemented using a babel transform such that babel need to parse and walk a source file to find the declaration that need to be compiled if it can be determined that a source file is known not to contain any declaration the parsing and walking can be skipped a a performance improvement this commit add an exposed function for tool that integrate the linker to use to allow shortcircuiting of the linker transform pr close ,feat
2147,core error if detectchanges is called at the wrong time under specific circumstance internally we store lifecycle hook in the format index hook index hook and when iterating over them we check one place ahead to figure out whether weve hit found a hook or an index the problem is that the loop is set up to iterate up to hookslength which mean that we may go out of bound on the last iteration depending on where we started this appears to happen under a specific set of circumstance where a directive call detectchanges from an input setter while it ha ngonchanges and ngafterviewinit hook these change resolve the issue by only iterating up to length which guarantee that we can always look one place ahead this appears to have regressed some time in version fix pr close ,fix
2148,compilercli handle rn lineendings correctly in sourcemapping previously rn wa being treated a a single character in sourcemap line start position which caused segment position to become offset now the r is ignored when splitting leaving it at the end of the previous line which solves the offsetting problem and doe not affect sourcemappings fix fix pr close ,fix
2149,languageservice shorthand syntax with variable this commit fix an issue in the ivy native language service that caused the logic that find a target node given a template position to throw away the result this happened because the source span of a variable node in the shorthand structural directive syntax ie ngif included the entire binding the result wa that we would add the variable node to the path and then later detect that the cursor wa outside the key and value span and throw away the whole result in general we do this because we do not want to show information when the cursor is between a keyvalue inputa¦ however when using the shorthand syntax we run into the situation where we can match an attributebinding a well a the vaariable in ngifsom¦evalue a mylocalvar this commit update the visitor to retain enough information in the visit path to throw away invalid target but keep valid one if there were multiple result on a telement or ttemplate pr close ,fix
2150,compilercli include linker entrypoints in npm package the linker entrypoints were not previously exposed in the npm bazel target so they were omitted from the bundle this commit add the necessary entrypoints to the compilerclis npmpackage target pr close ,refactor
2151,compilercli emit forwardref invocation for forward type reference the type of directive and pipe that are used in a component template may be emitted into the partial declaration wrapped inside a closure which is needed when the type is declared later in the module this pose a problem for jit compilation of partial declaration a this closure is indistinguishable from a class reference itself to mark the forward reference function a such this commit change the partial declaration codegen to emit a forwardref invocation wrapped around the closure which ensures that the closure is properly tagged a a forward reference this allows the forward reference to be treated a such during jit compilation pr close ,refactor
2152,core call ondestroy in production mode a well pr introduced an error where the ondestroy of componentref would only get called if ngdevmode wa set to true this wa because in dev mode we would freeze tcleanup to verify that no more static cleanup would get added to tcleanup array this ensured that tcleanup wa always present in dev mode in production the tcleanup would get created only when needed the resulting cleanup code wa incorrectly indented and would only run if tcleanup wa present causing this issue fix pr close ,fix
2153,devinfra add instruction for updating geckodriver in browsersreadmemd this commit add instruction in devinfrabrowsersreadmemd on how to update the version of geckodriver the webdriver implementation for firefox browser note the gecko driver download url perform redirection so the curl command need to be run with the llocation option to follow redirects i updated all curl command even those that are not used on gecko driver download url for consistency pr close ,docs
2154,devinfra fix command and typo in browsersreadmemd this commit fix the instruction in devinfrabrowsersreadmemd to use the shasum executable instead of sha which doe not exist afaict the commit also fix a couple of typo pr close ,docs
2155,devinfra refactor browsersreadmemd to use one sentence per line this commit refactor the devinfrabrowsersreadmemd file to have one sentence per line this make it consistent with other markdown file in the repository and make diffs for future change more readable this commit also us proper markdown numbered list and fix indentation pr close ,docs
2156,docsinfra update lighthouse to v this commit update lighthouse to version it also add a width attribute to the codeiconsvg image on the homepage which wa pointed out a missing in the lighthouse report explicit widthheight attribute on image help reduce the layout shift of the page pr close ,build
2157,docsinfra upgrade cli command doc source to ebafd updating angularmaster from clibuildsmaster relevant change in commit range modified helplintjson pr close ,build
2158,devtools update angularcli ,build
2159,core remove custom globalthis this is provided by typescript since version pr close ,refactor
2160,docsinfra enable tslint rule for the angulario app signedoffby tasos alexiou tasosarriktocom pr close ,refactor
2161,core set ngdevmode to false when calling enableprodmode the ngdevmode description also mention that calling enableprodmode will set this the value to false which is currently not the case pr close ,fix
2162,core fix possible x attack in development through ssr escape the content of the string so that it can be safely inserted into a comment node the issue is that html doe not specify any way to escape comment end text inside the comment the way you close a comment is with above the is meant to be text not an end to the comment this can be created programmatically through dom apis divinnerhtml divinnerhtml one would expect that the above code would be safe to do but it turn out that because comment text is not escaped the comment may contain text which will prematurely close the comment opening up the application for x attack in ssr we programmatically create comment node which may contain such text and expect them to be safe this function escape the comment text by looking for the closing char sequence and replace it with where the is a zero width space ub the result is that if a comment contains text it will render normally but it will not cause the html parser to close the comment pr close ,fix
2163,devtools update angularframework ,build
2164,devtools set proper directive item and explorer height fix rangleangulardevtools ,fix
2165,devtools highlight element when hovering the breadcrumb close rangleangulardevtools ,feat
2166,docsinfra link to angularpro screencasit pr close ,docs
2167,compiler avoid duplicate in block for in attrs on element with structural directive currently when ɵɵtemplate and ɵɵelement instruction are generated by compiler all static attribute are duplicated for both instruction a a part of this duplication in translation block for static in attribute are generated twice a well causing duplicate entry in extracted translation file when ivy extraction mechanism are used this commit fix this issue by introducing a cache for in translation block for static attribute only also this commit further aligns ɵɵtemplate and ɵɵelement instruction attribute which should help implement more effective attribute deduplication logic close pr close ,fix
2168,devinfra support mode flag for building environment stamp when building the environment stamp support two mode release and snapshot the release mode will always stamp using the current version of in the root packagejson and in snapshot mode will use a version stamp expressing a version based on the tag and the number of commits from the tag pr close ,feat
2169,compilercli move template parse error to templatedata durring analysis we find template parse error this commit change where the type checking context store the parse error previously we stored them on the analysisoutput this commit change the error to be stored on the templatedata which is a property on the shim that way the template parse error can be grouped by template previously if a template had a parse error we poisoned the module and would not procede to find typecheck error this change doe not poison module whose template have typecheck error so that ngtsc can emit typecheck error for template with parse error additionally all template diagnostics are produced in the same place this allows requesting just the template template diagnostics or just other type of error pr close ,refactor
2170,compilercli fix in error test refactors the in error test to be unit test in ngtscspects there is two reason for doing this first is that the test in compliaceold expected an expection to be be thrown but did not fail the test if no exception wa thrown that mean that this test could miss catching a bug it is also a big hacky to call compile directly and expect an exception to be thrown for diagnostics also this can easily be unit tested and an endtoend test is not necessary since we are not making use of the goldfiles for these test it is easier to maintain and le hacky to validate that we get helpful error message when nesting in section by calling getdiagnostics directly pr close ,test
2171,devtools update angularframework ,build
2172,devtools sort directive property by name ,feat
2173,devtools update angularcli ,build
2174,compilercli remove class in dts file from provider check this commit temporarily excludes class declared in dts file from check regarding whether provider are actually injectable such class used to be ignored on accident because the typescriptreflectionhostgetconstructorparameters method did not return constructor parameter from dts file mostly a an oversight this wa recently fixed but caused more provider to be exposed to this check which created a breakage in g this commit temporarily fix the breakage by continuing to exclude such provider from the check until g can be patched pr close ,fix
2175,languageservice completion for structural directive this comit add support for autocompletion of attribute that create structural directive such completion differ from those of normal attribute a the structural directive syntax creates a synthetic ngtemplate node which ha different attribute from the main element pr close ,feat
2176,compilercli identify structural directive this commit introduces an isstructural flag on directive metadata which is true if the directive injects templateref and thus is at least theoretically usable a a structural directive the flag is not used for anything currently but will be utilized by the language service to offer better autocompletion result for structural directive pr close ,refactor
2177,languageservice autocomplete pipe binding expression this commit add autocompletion for pipe expression built on existing apis for checking which pipe are in scope pr close ,feat
2178,languageservice complete attribute on element this commit add attribute completion to the language service it completes from source inputsoutputs of directive currently present on the element inputsoutputsattributes of directive in scope for the element that would become present if the inputoutputattribute wa added dom property and attribute we distinguish between completion of a property binding foo and a completion in an attribute context foo for the latter binding to the attribute are offered a well a a property binding which add the square bracket notation to determine hypothetical match directive which would become present if a binding is added directive in scope are scanned and matched against a hypothetical version of the element which ha the attribute pr close ,feat
2179,compilercli introduce apis to support directive autocompletion this commit add two new apis to the templatetypechecker getpotentialdombindings and getdirectivemetadata together these will support the language service in performing autocompletion of directive inputsoutputs pr close ,refactor
2180,compilercli make typecheckingscoperegistry a general utility the annotation package in the compiler previously contained a registry which track ngmodule scope for template typechecking including unifying all typechecking metadata across class inheritance line this commit generalizes this utility and prepares it for use in the templatetypechecker a well to back apis used by the language service pr close ,refactor
2181,languageservice autocompletion of element tag this commit expands the autocompletion capability of the language service to include element tag name it present both dom element from the angular dom schema a well a any component or directive with element selector that are in scope within the template a option for completion pr close ,feat
2182,languageservice add context to template target system this commit extends the template targeting system which determines the node being referenced given a template position to return additional context if needed about the particular aspect of the node to which the position refers for example a position pointing to an element node may be pointing either to it tag name or to somewhere in the node body this is the difference between div and div foo bar pr close ,refactor
2183,devinfra add vim swp file to gitignore the vim editor produce temporarily file that can end in both swo and swp this commits add swp to the gitignore so we dont accidentaly commit temporary file pr close ,fix
2184,compiler use yarn bazel instead of bazel in error message this commit replaces bazel with yarn bazel in the error message that instructs to regenerate golden file thrown while executing compliance test we use yarn bazel in other place so we use the local version of bazel not the global one pr close ,test
2185,languageservice force compilenonexportedclasses false in l project opened in the l are often larger in scope than the compilation unit seen by the compiler when actually building for example in the l it not uncommon for the project to include both application a well a test file this can create issue when the combination of file result in error that are not otherwise present for example if test file have inline ngmodules that redeclare component a common angular pattern such code is valid when compiling the app only test file are excluded so only one declaration is seen by the compiler or when compiling test only since test run in jit mode and are not seen by the aot compiler but when both set of file are mixed into a single compilation unit the compiler see the double declaration a an error this commit attempt to mitigate the problem by forcing the compiler flag compilenonexportedclasses to false in a l context when test contain duplicate declaration often such declaration are inline in spec and not exported from the top level so this flag can be used to greatly improve the ide experience pr close ,fix
2186,devtools update angularframework ,build
2187,devtools update dependency typeschrome to ,build
2188,compilercli enable pipe information when checktypeofpipesfalse when checktypeofpipes is set to false the configuration is meant to ignore the signature of the pipe transform method for diagnostics however we still should produce some information about the pipe for the templatetypechecker this change refactors the returned symbol for pipe so that it also includes information about the pipe class instance a it appears in the tcb pr close ,refactor
2189,compilercli add flag to tcb for nondiagnostic request the tcb utility function used to find node in the tcb are currently configured to ignore result when an ignore marker is found however these ignore marker are only meant to affect diagnostics request the language service may have a need to find node with diagnostic ignore marker the most common example of this would be finding reference for generic directive the reference appears to the generic directive class appears on the type ctor in the tcb which is ignored for diagnostic purpose these function should only skip result when the request is in the context of a larger request for diagnostics in all other case we should get match even if a diagnostic ignore marker is encountered pr close ,refactor
2190,compilercli rename ignore marker and helper to be more clear the ignore marker is only used to ignore certain node in the tcb for the purpose of diagnostics the marker itself ha been renamed a well a the helper function to see if the marker is present both now indicate that the marker is specifically for diagnostics pr close ,refactor
2191,devtools update angularcli ,build
2192,docsinfra upgrade cli command doc source to ffcde updating angularmaster from clibuildsmaster relevant change in commit range modified helpbuildjson helpeejson helpextractinjson helpservejson helptestjson pr close ,build
2193,router correct equivalent for enabled initial navigation with regard to the code in routermodulets the correct equivalent for enabled should be enabledblocking and not enablednonblocking pr close ,docs
2194,languageservice install angularlanguageservice in root nodemodules changed the structure of the vscodenglanguageservice repository to be a monorepo so angularlanguageservice should be installed in root nodemodules pr close ,build
2195,docsinfra add no upcoming event message this commit add a message that is displayed instead of the event table if there are no upcoming event fix pr close ,feat
2196,languageservice enable get reference for directive and component from template this commit add the ability to find reference for a directive or component from within a component template that is you can find component reference from the element tag mycompmycomp where is the cursor position a well a find reference for directive that match a given attribute div dirdiv pr close ,feat
2197,languageservice prevent matching node after finding a keyspan if weve already identified that we are within a keyspan of a node we exit the visitor logic early it can be the case that we have two node which technically match a given location when the end span of one node touch the start of the keyspan for the candidate node because our iswithin logic is inclusive on both end we can match both node this change exit the visitor logic once weve identified a node where the position is within it keyspan pr close ,fix
2198,languageservice adjust hybrid visitor to not throw away valid result the visitor ha a check in it with the goal of preventing the structural directive parent element from matching when we have already found the candidate we want however this code did not check to ensure that it wa looking at the correct type of node for this case and wa evaluating this logic in place it shouldnt this special check can be more easily done by simply not traversing the template child if weve already found a candidate on the template node itself pr close ,refactor
2199,upgrade fix hmr for hybrid application previously trying to apply a change via hot module replacement hmr in a hybrid app would result in an error this wa caused by not having the angularjs app destroyed and thus trying to bootstrap an angularjs app on the same element twice this commit fix hmr for hybrid apps by ensuring the angularjs app is destroyed when the angular platformref is destroyed in the modulehotdispose callback note for ngupgradelite apps ie those using downgrademodule hmr will only work if the downgraded module ha been bootstrapped and there is at least one angular component present on the page the is due to a combination of two fact the logic for setting up the listener that destroys the angularjs app depends on the downgraded module ngmoduleref which is only available after the module ha been bootstrapped the hmr dispose logic depends on having an angular element identified by the autogeenrated ngversion attribute present in the dom in order to retrieve the angular platformref fix pr close ,fix
2200,upgrade create a helper for cleaning jqlitejquery data this commit move the code for cleaning jqlitejquery data on an element to a reusable helper function this way it is easier to keep the code consistent across all place where we need to clean data now and in the future pr close ,refactor
2201,upgrade remove unused variable this commit remove a couple of unused variable pr close ,refactor
2202,compilercli use ngdevmode guard for setclassmetadata call prior to this change the setclassmetadata call would be invoked inside of an iife that wa marked a pure this allows the call to be treeshaken away in production build a the setclassmetadata call is only present to make the original class metadata available to the testing infrastructure the pure marker is problematic though a the setclassmetadata call doe in fact have the sideeffect of assigning the metadata into class property this ha worked under the assumption that only build optimization tool perform treeshaking however modern bundlers are also able to elide call that have been marked pure so this assumption doe no longer hold instead an ngdevmode guard is used which still allows the call to be elided but only by tooling that is configured to consider ngdevmode a constant false value pr close ,refactor
2203,router add relativeto a an input to routerlink allow configuration of relativeto in the routerlink directive this is related to the clearing of auxiliary route where you need to use relativeto routeparent in order to clear it from the activated auxiliary component itself this is because relativeto route will consume the segment that were trying to clear so there is really no way to do this with routerlink at the moment related issue related internal link pr close ,feat
2204,compiler handle string inside binding that contain binding character currently the compiler treat something like a a a nested binding and throw an error because it doesnt account for quote when it look for binding character these change add a bit of logic to skip over text inside quote when parsing fix pr close ,fix
2205,languageservice autocompletion within expression context this commit add support to the language service for autocompletion within expression context specifically this is auto completion of property read and method call both in normal and safenavigational form pr close ,feat
2206,compilercli produce binding access when checktypeofoutputevents is false when checktypeofoutputevents is false we still need to produce the access to the eventemitter so the language service can still get the type information about the field that is in a template div outputhandleevent we still want to be able to grab information when the cursor is inside the output parens the flag is intended only to affect whether the compiler produce diagnostics for the inferred type of the event pr close ,refactor
2207,compilercli use keyspan for output event lookup pr added the keyspan to the output field access so we no longer need to get there from the call expression and can instead just find the node we want directly pr close ,refactor
2208,compilercli fix and reenable compliance sourcemap test these test started failing because they had typecheck error in their template and a recent commit turned on full template typechecking by default this commit fix those template and update the expected file a necessary pr close ,test
2209,common use table layout for predefined format option easier to read pr close ,docs
2210,docsinfra upgrade cli command doc source to dff updating angularmaster from clibuildsmaster relevant change in commit range modified helpaddjson helpbuildjson helpconfigjson helpdocjson helpeejson helpextractinjson helpgeneratejson helpnewjson helpservejson helptestjson helpupdatejson pr close ,build
2211,compilercli temporary disable source mapping test which have error these test do not pas the typecheck phase of the compiler and fail the option to disable typechecking wa removed recently so these test need to be fixed to be valid application pr close ,test
2212,devtools update angularcli ,build
2213,animation implement getposition in browser animation builder forward getposition to animationgroupplayer pr close ,fix
2214,compilercli remove internal only flag to disable type checking a couple reason to justify removing the flag it add code to the compiler that is only meant to support test case and not any production we should avoid code in thats only meant to support test the flag enables writing test that do not mimic realworld behavior because they allow invalid application pr close ,refactor
2215,compilercli return addeventlistener symbol for native output binding rather than returning null we can provide some useful information to the language service by returning a symbol for the addeventlistener function call when the consumer of a binding a an element pr close ,refactor
2216,devinfra correct the environment variable to skip husky during merge with the migration to husky the environment variable used to skip husky changed from huskyskiphooks to husky to continue skipping husky during the merge process a expected the environment variable used is updated pr close ,fix
2217,devinfra allow buildworker to be used in forked process generates a local copy of the buildworker file to allow it to be loaded at runtime in a forked process pr close ,fix
2218,serviceworker handle error with errorhandler error thrown by calling serviceworkerregister are now passed to the global errorhandler fix pr close ,fix
2219,upgrade avoid memory leak when removing downgraded component previously due to the way the angularjs and angular cleanup process interfere with each other when removing an angularjs element that contains a downgraded angular component the data associated with the host element of the downgraded component wa not removed this data wa kept in an internal angularjs cache which prevented the element and component instance from being garbagecollected leading to memory leak this commit fix this by ensuring the element data is explicitly removed when cleaning up a downgraded component note this is essentially the equivalent of but for downgraded instead of upgraded component fix close pr close ,fix
2220,upgrade remove unused parameterspropertiesvariables this commit remove some unused parameter property and variable in various angularupgrade function pr close ,refactor
2221,compilercli reformat directivepipe metadata extraction the prior usage of a ternary expression caused the code to be formatted in a weird way so this commit replaces the ternary with an if statement pr close ,refactor
2222,compilercli extract parsing of interpolation config prior to this change the interpolation config value wa cast to string string without checking whether there really were two string value available this commit extract the logic of parsing the interpolation config into a separate function and add a check that the array contains exactly two string pr close ,refactor
2223,compilercli carry type information into ast value type this change allows the astobject and astvalue type to provide their represented type a a generic type argument which is helpful for documentation and discoverability purpose pr close ,refactor
2224,compiler add type information to definitionmap this allows the code generation to correspond with a type which is helpful for documentation and discoverability purpose this doe not offer any typesafety with respect to the actually generated code pr close ,refactor
2225,platformbrowser fix spelling of deserialized pr close ,docs
2226,animation a small typo removed two extra closing parenthesis in doc pr close ,docs
2227,compilercli templatetypechecker with checktypeofattributesfalse should still work when the compiler option checktypeofattributes is false we should still be able to produce type information from the templatetypechecker the current behavior ignores all attribute that map to directive input this commit includes those attribute binding in the tcb but add the ignore for diagnostics marker so they do not produce error this way consumer of the ttc the language service can still get valid information about these attribute even when the user ha configured the compiler to not produce diagnosticserrors for them pr close ,refactor
2228,docsinfra upgrade cli command doc source to cede updating angularmaster from clibuildsmaster relevant change in commit range modified helpbuildjson helpgeneratejson helpservejson pr close ,build
2229,devinfra separate retrieving targeted branch from printing them separate retrieving targeted branch from printing the branch to allow for other tool to better integrate with the result pr close ,refactor
2230,core fix typo in the view encapsulation guide in line changed the word component to component in line changed the phrase you never refer to them to you should never refer to them appended the paragraph containing the above phrase in a div with the class alert ishelpful pr close ,docs
2231,devtools update angularframework ,build
2232,compilercli add script to update all golden partial file the golden file for the partial compliance test need to be updated with individual bazel run invocation which is not very ergonomic when a large number of golden file need to updated this commit add a script to query the bazel target that update the goldens and then run those target sequentially pr close ,refactor
2233,compilercli add sourcemap compliance test for inlinetemplates this test migrates sourcemapping test to the new compliance test framework the original test are found in the file at packagescompilerclitestngtsctemplatemappingspects these new test also check the mapping resulting from partial compilation followed by linking after flattening the pair of sourcemaps that each process generates note that there are some difference between the mapping for full compile and linked compile mode due to how typescript and babel use sourcespan information on ast node to accommodate this there are two expectation file for most of these source file pr close ,test
2234,compilercli add support for sourcemap check in compliance test this commit allows compliance testcases to be written that specify sourcemap mapping between the source and generated code to check a mapping add a source comment to the end of a line generated code source sourceurl source code the generated code will still be checked stripped of the source comment a normal by the expectemit helper in addition the sourcemap segment are checked to ensure that there is a mapping from generated code to source code found in the file at sourceurl note the sourceurl should be absolute with the directory containing the testcasesjson file assumed to be whitespace is important and will be included when comparing the segment there is a single space character between each part of the line newlines within a mapping must be escaped since the mapping and comment must all appear on a single line of this file pr close ,test
2235,compilercli improve compliance test compile mode filtering previously one could set a flag in a testcasesjson file to exclude the testcases from being run if the input file were being compiled partially and then linked there are also scenario where one might want to exclude testcases from full compile mode test run this commit change the compliance test tooling to support a new property compilationmodefilter which is an array containing one or more of full compile and linked compile only the test whose compilationmodefilter array contains the current compilation mode will be run pr close ,test
2236,compilercli ensure that golden partial file are parsed accurately previously file were serialized with an extra newline seperator that wa not removed when parsing this caused the parsed file to start with an extra newline that invalidated it sourcemap also the splitting wa producing an empty entry at the start of the extracted golden file which is now ignored pr close ,test
2237,compilercli fix testcasesjson schema the schema accidentally included the expectederrors and extracheck property below the file property instead of below the expectation property pr close ,test
2238,compiler support tagged template literal in code generator add a taggedtemplateexpr to represent tagged template literal in angulars syntax tree more specifically expression in outputastts also update class that implement expressionvisitor to add support for tagged template literal in different context such a jit compilation and conversion to j partial support for tagged template literal had already been implemented to support the localize tag used by angulars in framework where applicable this code wa refactored to support arbitrary tag although completely replacing the inspecific support for the localize tag with the new generic support for tagged template literal may not be completely trivial and is left a future work pr close ,feat
2239,compilercli add test for checktypeofdomreferences false add test for when checktypeofdomreferences false to ensure that we do not regress in behavior at any point the desired behavior for this case is that the templatetypechecker will honor the user configuration and not produce symbol for the dom reference pr close ,test
2240,docsinfra upgrade cli command doc source to ebbfb updating angularmaster from clibuildsmaster relevant change in commit range modified helpanalyticsjson helpbuildjson helpconfigjson helpeejson helpextractinjson helpgeneratejson helplintjson helpnewjson helpservejson helptestjson helpupdatejson pr close ,build
2241,core support extending differs from root ngmodule differs try to inject parent differ in order to support extending this doe not work in the root injector a the provider override the default injector the fix is to just assume standard set of provider and extend those instead pr close issue close cant extend iterablediffers issue close iterablediffersextend is not aot compatible this is fixed because we no longer have an arrow function in the factory but a proper function which can be imported pr close ,fix
2242,devinfra close pull request on merge which do not target master branch previously when a pr which doe not target the master branch in the github ui wa merged it would not close automatically this change detects when this case occurs and close the pr via the github api for example a pr which target the x branch in the github ui ha the target patch label this pr is only pushed into the x branch which doe not trigger githubs reference based action to close the pr pr close ,feat
2243,upgrade run test against angularjs vx a well we intend to run the angularupgrade test against all supported version of angularjs v previously we only ran them against v v and v since angularjs v wa released recently this commit add it to the list of angularjs version we test against pr close ,test
2244,devtools update dependency tsnode to ,build
2245,devtools update angularframework ,build
2246,form use ngdevmode to treeshake ngmodelwarning this commit add ngdevmode guard to call ngmodelwarning only in dev mode similar to how thing work in other part of ivy runtime code the ngdevmode flag help to treeshake this function from production build since it will act a noop in dev mode everything will work a it work right now to decrease production bundle size pr close ,perf
2247,animation use ngdevmode to treeshake warning this commit add ngdevmode guard to show warning only in dev mode similar to how thing work in other part of ivy runtime code the ngdevmode flag help to treeshake this warning from production build in dev mode everything will work a it work right now to decrease production bundle size pr close ,perf
2248,common use ngdevmode to treeshake warning this commit add ngdevmode guard to show warning only in dev mode similar to how thing work in other part of ivy runtime code the ngdevmode flag help to treeshake these warning from production build in dev mode everything will work a it work right now to decrease production bundle size pr close ,perf
2249,core use ngdevmode to treeshake checknochanges this commit add ngdevmode guard to run checknochanges only in dev mode similar to how thing work in other part of ivy runtime code the ngdevmode flag help to treeshake this code from production build in dev mode everything will work a it work right now to decrease production bundle size pr close ,perf
2250,compilercli use semver range checking for partial version the partial compiler will add a version number to the object that are generated so that the linker can select the appropriate partial linker class to process the metadata previously this version matching wa a simple number check now the partial compilation writes the current angular compiler version into the generated metadata and semantic version range are used to select the appropriate partial linker pr close ,refactor
2251,core use ngdevmode to treeshake warning this commit add ngdevmode guard to show sanitization warning only in dev mode similar to how thing work in other part of ivy runtime code the ngdevmode flag help to treeshake these warning from production build in dev mode everything will work a it work right now to decrease production bundle size pr close ,perf
2252,languageservice implement autocompletion for global property ivy this commit add support in the ivy language service for autocompletion in a global context eg a foo completion support is added both for the primary function getcompletionsatposition a well a the detail function getcompletionentrydetails and getcompletionentrysymbol these latter operation are not used yet a an upstream change to the extension is required to advertise and support this capability pr close ,feat
2253,compilercli improve compliance test performance the newly built compliance test runner wa not using the shared source file cache that wa added in bffefafabaddbce which offer a significant performance boost to the compliance test target pr close ,test
2254,languageservice convert ivy diagnostics test from legacy this commit update the test for the diagnostics in the ivy language service to use the new inmemory test environment pr close ,test
2255,languageservice do not treat file uris a general url in the past the legacy vebased language service would use a urlresolver instance to resolve file path primarily for compiler resource like external template the problem with this is that the urlresolver is designed to resolve url in general and so for a path like abc c is treated a hashfragment rather than a part of the path which can lead to unexpected path resolution fx resolveabcdts dhtml would produce abdhtml rather than the expected abcdhtml this commit resolve the issue by using node path module to resolve file path directly which aligns more with how resource are resolved in the ivy compiler the testing story here is not great and the api for validating a file path could be a little bit prettierrobust however since the vebased language service is going into more of a maintenance mode now that there is a clear path for the ivybased l moving forward i think it is okay not to spend too much time here close close pr close ,fix
2256,languageservice create findrenamelocations stub create stub for findrenamelocations for both ve and ivy language service implementation this will prevent failed request when it is implemented on the vscode plugin side pr close ,refactor
2257,core unsubscribe from the onerror when the root view is removed at the moment when creating a root module a subscription to the onerror subject is also created it capture the scope where ngmoduleref is created and prevents it from being garbage collected also note that this ngmoduleref ha a reference to the root module instance eg appmodule which also prevents it from being gcd pr close ,fix
2258,compilercli correct incremental behavior even with broken import when the compiler is invoked via ngc or the angular cli it apis are used under the assumption that angular analysisdiagnostics are only requested if the program ha no typescriptlevel error a result of this assumption is that the incremental engine ha not needed to resolve change via it dependency graph when the program contained broken import since broken import are a typescript error the angular language service for ivy is using the compiler a a backend and exercising it incremental compilation apis without enforcing this assumption a a result the language service ha run into issue where broken import cause incremental compilation to fail and produce incorrect result this commit introduces a mechanism within the compiler to keep track of file for which dependency analysis ha failed and to always treat such file a potentially affected by future incremental step this is tested via the language service infrastructure to ensure that the compiler is doing the right thing in the case of invalid import pr close ,fix
2259,compilercli validate broken external template incrementality previously if a component had an external template with a hard error the compiler would forget the link between that component and it ngmodule additionally the ngmodule would be marked a being in error because the template issue would prevent the compiler from registering the component class a a component so from the ngmodule it would look like a declaration of a nondirectivepipe class a a combined result the next incremental step could fix the template error but would not refresh diagnostics for the ngmodule leading to an incrementality issue the various facet of this problem were fixed in prior commits this commit add a test verifying the above case work now a expected pr close ,test
2260,compilercli track poisoned scope with a flag to avoid overwhelming a user with secondary diagnostics that derive from a root cause error the compiler ha the notion of a poisoned ngmodule an ngmodule becomes poisoned when it declaration contains semantic error declaration which are not component or pipe import which are not other ngmodules etc an ngmodule also becomes poisoned if it import or export another poisoned ngmodule previously the compiler tracked this poisoned status a an alternate state for each scope either a correct scope could be produced or the entire scope would be set to a sentinel error value this meant that the compiler would not track any information about a scope that wa determined to be in error this method present several issue the compiler is unable to support the language service and return result when a component or it module scope is poisoned this is fine for compilation since diagnostics will be produced showing the error but the language service need to still work for incorrect code getcomponentscopes doe not return component with a poisoned scope which interferes with resource tracking of incremental build if the component isnt included in that list then the ngmodule for it will not have it dependency properly tracked and this can cause future incremental build step to produce incorrect result this commit change the tracking of poisoned module scope to use a flag on the scope itself rather than a sentinel value that replaces the scope this mean that the scope itself will still be tracked even if it contains semantic error a test is added to the language service which verifies that poisoned scope can still be used in template typechecking pr close ,fix
2261,compilercli remove the concept of an errored trait previously if a trait analysis step resulted in diagnostics the trait would be considered errored and no further operation including register would be performed effectively this meant that the compiler would pretend the class in question wa actually undecorated however this behavior is problematic for several reason it lead to inaccurate diagnostics being reported downstream for example if a component is put into the error state for example due to a template error the ngmodule which declares the component would produce a diagnostic claiming that the declaration is neither a directive nor a pipe this happened because the compiler wouldnt register the component trait so the component would not be recorded a actually being a directive it can cause incorrect behavior on incremental build this bug is more complex but the general issue is that if the compiler fails to associate a component and it module then incremental build will not correctly reanalyze the module when the component template change failing to register the component a such is one link in the larger chain of issue that result in these kind of issue it lump together diagnostics produced during analysis and resolve step this is not causing issue currently a the dependency graph ensures the right class are reanalyzed when needed instead of showing stale diagnostics however the dependency graph wa not intended to serve this role and could potentially be optimized in way that would break this functionality this commit remove the concept of an errored trait entirely from the trait system instead analyzed and resolved trait have corresponding and separate diagnostics in addition to potentially null analysis result analysis but not resolution diagnostics are carried forward during incremental build operation compilation emit is only performed when a trait reach the resolved state with no diagnostics this change is functionally different than before a the register step is now performed even in the presence of analysis error a long a analysis result are also produced this fix problem above and is part of the larger solution to problem pr close ,fix
2262,compilercli convert component directive compliance test this commit convert the component directive compliance test taken from rcompilercompliancespects to the new test runner pr close ,test
2263,devtools update angularframework ,build
2264,languageservice do not return external template that doe not exist there is a bug in tsserver that cause it to crash when it try to create script info for an external template that doe not exist ive submitted an upstream pr to fix this but before the commit land in the stable release well have to workaround the issue in language service close pr close ,fix
2265,compiler allow trailing comma in array literal allows syntax in angular expression close pr close ,feat
2266,compilercli convert binding compliance test this commit convert the binding compliance test taken from rviewcompilerbindingspects to the new test runner pr close ,test
2267,compilercli log unexpected compilation error in compliance test runner if the testcase ha not specified that error were expected then any error that have occurred should be reported these error may have prevented an output file from being generated which resulted in hard to debug test failure due to missing file pr close ,test
2268,compilercli migrate view compiler directive test migrates the compliance test under rviewcompilerdirectives to the new format pr close ,refactor
2269,core verify ondestroy callback are invoked when componentref is destroyed this commit add a few test to verify that the ondestroy callback are invoked when componentref instance is destroyed and the logic is consistent between viewengine and ivy pr close ,test
2270,core remove application from the testability registry when the root view is removed in the new behavior angular remove application from the testability registry when the root view get destroyed this eliminates a memory leak because before that the testabilityregistry hold reference to html element thus they can not be gced pr close pr close ,fix
2271,compilercli expose ttc method to determine if file is tracked shim the language service find reference currently us the ngtypecheckts suffix to determine if a file is a shim file instead a better api would be to expose a method in the template type checker that doe this verification so that the l doe not have to know about the typecheck suffix this also fix an issue albeit unlikely whereby a file in the user program that actually is named with the ngtypecheckts suffix would have been interpreted a a shim file pr close ,refactor
2272,languageservice add find reference capability to ivy integrated l this commit add find reference functionality to the ivy integrated language service the basic approach is a follows generate shim for all file to ensure we find reference in shim throughout the entire program determine if the position for the reference request is within a template yes it is in a template find which node in the template ast the position refers to then find the position in the shim file for that template node pas the shim file and position in the shim file along to step no the request for reference wa made outside a template forward the file and position to step getreferencesattypescriptposition call the native typescript l getreferencesatposition for each reference that is in a shim file map those back to a template location otherwise return it asis pr close ,feat
2273,compilercli always wrap rh of tcb writes in parens there were two issue with the current tcb the logic for only wrapping the right hand side of the property write if it wa not already a parenthesized expression wa incorrect a parenthesized expression could still have a trailing comment and if that were the case that span comment would still be ambiguous a explained by the comment in the code before wrapfortypechecker the right hand side of keyed writes wa not wrapped in parens at all pr close ,refactor
2274,compilercli add namespan to safepropertyread tcb in order to map the a safe property read method access in the type check block directly back to the property in the template source we need to include the safepropertyreads namespan with the tspropertyaccess for the pipe transform method note that this is specifically relevant to the language service find reference feature a an example with something like avalue when calling find reference on the value we want the text span of the reference to just be value rather than the entire source avalue pr close ,refactor
2275,compilercli include pipe namespan in tcb in order to map the pipe transform method in the type check block directly back to the pipe name in the template source we need to include the bindingpipes namespan with the tsmethodaccess for the pipe transform method note that this is specifically relevant to the language service find reference feature a an example with something like number when calling find reference on the number pipe we want the text span of the reference to just be number rather than the entire binding pipe source number pr close ,refactor
2276,zonejs patch child method that override an already patched method fix a case where if the parent class had already been patched it would not patch the child class in addition to checking if the method is defined in the prototype and not inherited it also doe the same for the unpatched method pr close ,fix
2277,docsinfra reduce ambiguity in deploytofirebasejs test description previously test description used latest to refer to the most recenthighest version this wa ambiguous because latest can also refer to the stable version of a package eg see latest npm tag this commit replaces latest with highest or highest for major to reduce ambiguity discussed in pr close ,test
2278,docsinfra fix redirecting rcangulario to angulario when no active rc currently there is an issue with redirecting rcangulario to angulario when there is no active rc if a user ha visited rcangulario before and ha a serviceworker registered for that subdomain they will never see the redirect to angulario this commit fix the problem by doing an additional deployment from the stable branch to the rcangulariosite firebase site when there is no active rc this additional deployment will ensure that user will be temporarily redirected from rcangulario to angulario user with a registered serviceworker who dont see the redirect will have their serviceworker unregistered on the next visit the content on both site is identical see for more detail on the problem and the solution note a mentioned in for this fix to take affect we need to remove the redirect from rcangulario to angulario in the firebase console for site rcangulariosite fix pr close ,fix
2279,docsinfra do not deploy a archive when major is not lower than stable previously a branch would be deployed a archive even if it had a major version that wa equalhigher than that of the stable branch a long a it wa not the rc branch ie not the most recent minor branch for example with x a the stable branch and x a the rc branch x would be deployed a archive theoretically we should never find ourselves in such a situation typically there will only be at most one minor branch most recent than the stable one and that branch will be the rc branch however it is possible under unusual circumstance this commit add additional check to guard against this problem it also refactors the code in preparation of fixing an issue with rcangulario redirects in the presence of a serviceworker which will require identifying whether there is an active rc version or not see for more detail pr close ,fix
2280,docsinfra avoid unnecessary recomputations in deploytofirebasespecjs previously the latest commit for branch may be computed multiple time in the deploytofirebasejs test this commit avoids the unnecessary recomputations by computing the latest commits for the necessary branch at the beginning and using the computed value throughout the test pr close ,test
2281,docsinfra support multiple deployment per run previously the deploytofirebasejs script would only perform one deployment operation on each run this commit add support for performing multiple deployment operation note in a subsequent commit this will be leveraged fix an issue with rcangulario redirects in the presence of a serviceworker by deploying the same artifact to multiple firebase projectssites see for more detail pr close ,refactor
2282,docsinfra decouple deploying from other operation in deploytofirebasejs previously the deploy function in deploytofirebasejs would also perform other operation beyond deploying such a building the app checking the generated payload size testing the pwa score of the deployed app this commit decouples these operation so that deploying can be performed independently note in a subsequent commit this will be leveraged fix an issue with rcangulario redirects in the presence of a serviceworker by deploying the same artifact to multiple firebase projectssites see for more detail pr close ,refactor
2283,docsinfra add maskable pwa icon this commit add a maskable pwa icon to ensure it look good on different devicesplatforms it also improves the pwa lighthouse score from to by passing the maskable icon audit for reference the maskable icon can be previewed here pr close ,feat
2284,docsinfra update lighthouse to this commit update the lighthouse package to version to take advantage of the latest fix and audit pr close ,build
2285,common fix typo in httpclient doc pr close ,docs
2286,form fix example reset the form group value and disabled status pr close ,docs
2287,compilercli migrate view compliance test migrates the rviewcompiler test to the new format pr close ,test
2288,docsinfra upgrade cli command doc source to cede updating angularmaster from clibuildsmaster relevant change in commit range modified helpbuildjson pr close ,build
2289,compilercli migrate template compliance test migrates the rviewcompilertemplate test to the new format also introduces a new matcher for unique function name pr close ,test
2290,compilercli migrate listener compliance test migrates the rviewcompilerlistener compliance test to the new format pr close ,test
2291,compilercli migrate inputoutput compliance test migrates the rviewcompilerinputoutputs compliance test to the new format pr close ,test
2292,devtools update angularcli ,build
2293,inline httpobserve inline httpobserve for better type safety fix pr close ,refactor
2294,core not invoking object tostring when rendering to the dom currently we convert object to string using value which is quickest but it stringifies the value using it valueof rather than tostring these change switch to using stringvalue which ha identical performance and call the tostring method a expected note that another option wa calling tostring directly but benchmarking showed it to be slower ive included the benchmark i used to verify the performance so we have it for future reference and we can reuse it when making change to renderstringify in the future also for reference here are the result of the benchmark benchmark renderstringify concat n concat with tostring n tostring n tostring with tostring n constructor n constructor with tostring n tostring mono n tostring with tostring mono n fix pr close ,fix
2295,compilercli migrate provider compliance test migrates the rviewcompilerproviders compliance test to the new format pr close ,test
2296,common change httpresponse to httpresponse pr close ,docs
2297,compilercli convert styling compliance test this commit convert the di compliance test taken from rviewcompilerstylingspects to the new test runner pr close ,test
2298,compilercli convert di compliance test this commit convert the di compliance test taken from rviewcompilerdispects to the new test runner pr close ,test
2299,compilercli expand logging when extra compliance check fails previously this would have just printed that false wa not equal to true which although true is not very helpful this commit add detail about which special check failed together with the generated code for easier debugging pr close ,test
2300,devtools update angularframework ,build
2301,devtools update angularcli ,build
2302,devtools update node version and timeout ,ci
2303,core ensure onpush ancestor are marked dirty when event occur we currently only wrap the event listener in the function which ensures ancestor are marked for check when the listener is placed on an element that ha a native method for listening to an event we actually need to do this wrapping in all case so that event that are attached to nonrendered template item ngtemplate and ngcontainer also mark ancestor for check when they receive the event fix pr close ,fix
2304,form deprecate legacy option for formbuildergroup deprecation mark the key string any type for the option property of the formbuildergroup method a deprecated using abstractcontroloptions give the same functionality and is typesafe pr close ,docs
2305,docsinfra display angulararchitectsio in training this add angulararchitectsio to the tranings section in the resourcesjson file for angulario it also add a description for angulararchitectsio pr close ,docs
2306,compilercli add typescript typing integration test this change add a typing test identical to the typescript test but using typescript instead pr close ,test
2307,compilercli add support for using typescript this change enables project to be built with typescript support for typescript is also retained pr close ,feat
2308,compilercli migrate in compliance test this commit provides the machinery for the new filebased compliance test approach for in test and migrates the in test to this new format pr close ,test
2309,compilercli update new compliance test partial rule there is now a dedicated rule for debugging generation of partial golden file the readme ha been updated accordingly pr close ,test
2310,docsinfra upgrade cli command doc source to ef updating angularmaster from clibuildsmaster relevant change in commit range modified helpbuildjson helpdeployjson helpeejson helpextractinjson helprunjson helpservejson helptestjson pr close ,build
2311,animation replace copy of query selector nodelist from spread to for for element query that return sufficiently large nodelist object using spread syntax to populate the result array cause a rangeerror due to the call stack limit being reached this commit update the code to use regular for loop instead fix pr close ,fix
2312,localize support application resource bundle arb translation file format the arb format is a json file containing an object where the key are the message id and the value are the translation it is extensible because it can also contain metadata about each message for example locale messageid translated message string messageid type text description some description text xlocations start line column file somefilets for more information see pr close ,feat
2313,compiler report better error on interpolation in an expression compiler result in weird error message when encounter interpolation inside existing expression context eg ngifname name pr close ,fix
2314,devtools update angularframework ,build
2315,docsinfra disable the selenium promise manager in doc example ee test this commit disables the selenium promise manager when running ee test for doc example in order to more closely align them with new apps created with cli v this change requires that any async operation in test are handled explicitly eg using asyncawait or promisethen pr close ,test
2316,docsinfra remove redundant code from upgrademodule ee test this commit remove some code that is no longer necessary for the upgrademodule doc example ee test to run it used to be necessary in earlier version of protractor but not any more pr close ,test
2317,docsinfra fix the dependencyinjectioninaction ee test previously the test made no meaningful assertion it seems that the intention wa to ensure that some element were present on the page but all the assertion did wa verify that the corresponding elementfinders were defined the elementfinders would always be defined even if there were no corresponding element on the page in fact some of the elementfinder selector were incorrect so they did not match any actual element this commit fix the test by fixing the elementfinder selector and asserting that the element are actually present on the page pr close ,test
2318,docsinfra fix the dynamiccomponentloader ee test previously the test made no meaningful assertion it seems that the intention wa to ensure that some element were present on the page but all the assertion did wa verify that the corresponding elementfinders were defined the elementfinders would always be defined even if there were no corresponding element on the page in fact some of the elementfinder selector were incorrect so they did not match any actual element this commit fix the test by fixing the elementfinder selector and asserting that the element are actually present on the page pr close ,test
2319,docsinfra update doc example to angular v this commit update the doc example to angular v in addition to updating the dependency version it also update the project structure and config to more closely match what a new v cli app would look like see also the diff between a basic v cli app and a v one note i refrained from disabling the selenium promise manager a seen here and switching all ee test to asyncawait because that is a big change and should be done in a separate commitpr pr close ,build
2320,languageservice create getreferencesatposition stub create stub for gettypedefinitionatposition for both ve and ivy language service implementation this will prevent failed request when it is implemented on the vscode plugin side pr close ,refactor
2321,compilercli support for partial compilation of component this commit implement partial compilation of component together with linking the partial declaration into it full aot output this commit doe not yet enable accurate source map into external template this requires additional work to account for escape sequence which is nontrivial inline template that were represented using a string or template literal are transplated into the partial declaration output so their source map should be accurate note however that the accuracy of source map is not currently verified in test this is also left a future work the golden file of partial compilation output have been updated to reflect the generated code for component please note that the current output should not yet be considered stable pr close ,feat
2322,compilercli default enableinlegacymessageidformat to false in compliance test in production mode this flag default to true but the compliance test override this to false unless it is provided a such the linker should also adhere to this default a otherwise the compilation output would not align with the output of the full test there are still test that exercise the value of this flag together with it being undefined to verify the behavior of the actual default value pr close ,test
2323,compilercli skip compliance test that target e for partial compilation test the linker doe not currently support outputting e syntax so any compliance test that request e output can not be run in partial compilation mode this commit mark these test a pending pr close ,test
2324,compilercli prepare linker option for compilation of component this commit add the inuseexternalids option to the linker option a the compliance test exercise compilation result with and without this flag enabled we therefore need to configure the linker to take this option into account a otherwise the compliance test output would not be identical additionally this commit switch away from spread syntax to set the default option this introduced a problem when the userprovided option object did specify the key but with an undefined value this would have prevented the default option from being applied pr close ,refactor
2325,compilercli extract compilation utility for partial compilation of component this commit is a precursor to supporting the partial compilation of component which leverage some of the compilation infrastructure that is in place for directive pr close ,refactor
2326,compilercli allow query metadata to be omitted the metadata specification of query allows for the boolean property first descendant and static to be missing but the linker did not account for their omission this fix is tested in subsequent commits that implement compilation of component at which point this will be covered by the compliance test pr close ,refactor
2327,compilercli allow visiting call expression without an active linker the compilation result of component may have inserted template function into the constant pool which would be inserted into the babel ast upon program exit babel will then proceed with visiting this newly inserted subtree but we have already cleaned up the linker instance when exiting the program any call expression within the template function would then fail to be processed a a file linker would no longer be available since the inserted ast subtree is known not to contain yet more partial declaration it is safe to skip visiting call expression when no file linker is available pr close ,refactor
2328,compilercli workaround for performance cliff in typescript the type checker had to do extensive work in resolving the nodepathget method call for the nodepath that had an intersection type of tsvariabledeclaratorinittexpression the nodepathget method is typed using a conditional type which became expensive to compute with this intersection type a a workaround the original init property is explicitly omitted which avoids the performance cliff this brings down the compile time by s pr close ,test
2329,compilercli fix documentation and json schema reference in compliance test the json schema reference wa offbyone preventing ides from finding the file and offering suggestion and documentation additionally the name of the golden file wa slightly off pr close ,test
2330,core update link to schemajson of schematicsangular close pr close ,docs
2331,core allow passing abstracttype to the inject function this is a type only change that replaces typetinjectiontokent with typetabstracttypetinjectiontokent in the injector pr close ,fix
2332,compilercli report error when a reference target is missing instead of crashing if a template declares a reference to a missing target then referring to that reference from elsewhere in the template would crash the template type checker due to a regression introduced in this commit fix the crash by ensuring that the invalid reference will resolve to a variable of type any fix pr close ,fix
2333,platformbrowser add doubletap hammerjs support enables doubletap support in hammerjs pr close pr close ,feat
2334,core fix typo pr close ,docs
2335,core fix typo for getting component definition function pr close ,docs
2336,devtools update dependency cypress to v ,build
2337,serviceworker correctly handle failed cachebusted request since beedfaabbcedbbcdda a failing cachebusted network request such a request for fetching uncached asset will cause the serviceworker to incorrectly enter a degraded existingclientsonly mode a failing network request could be caused by many reason including the client or server being offline and doe not necessarily signify a broken serviceworker state this commit fix the logic in cachebustedfetchfromnetwork to correctly handle error in network request for more detail on the problem and the implemented fix see fix pr close ,fix
2338,devinfra verify the version of generated build artifact verify the version of the generated build artifact to ensure that the version published to npm is the version we expect pr close ,fix
2339,add mention to default value ok for statustext pr close ,docs
2340,compiler remove unnecessary trustconstantscript function script tag inline event handler and other script context are forbidden or stripped from angular template by the compiler in the context of trusted type this leaf no sink that require use of a trustedscript this mean that trustconstantscript is never used and can be removed pr close ,refactor
2341,compiler only promote trusted type to constant when necessary previously all constant value of securitysensitive attribute and property were promoted to trusted type while this is not inherently bad it is also not optimal use the newly added trusted type schema to restrict promotion to constant that are in a trusted typesrelevant context pr close ,fix
2342,compiler disallow in of securitysensitive attribute to minimize security risk x in particular in the in pipeline disallow in translation of attribute that are trusted type sink add integration test to ensure that such sink can not be translated pr close ,fix
2343,compiler support error reporting in inmetavisitor make it possible to report error from the inmetavisitor parser pr close ,feat
2344,compiler add schema for trusted type sink create a schema with an associated function to classify trusted type sink piggyback a typo fix pr close ,feat
2345,common allow any subscribable in async pipe a only method from the subscribable interface are currently used in the implementation of the async pipe it make sense to make it explicit so that it work successfully with any other implementation instead of only observable pr close ,feat
2346,form verify that an object is not a boxed value if only disabled field is present the value of a formcontrol is treated in a special way called boxed value when it an object with exactly field value and disabled this commit add a test which verifies that an object is not treated a a boxed value when disabled field is present but value is missing pr close ,test
2347,devtools update angularframework ,build
2348,core migration error if program contains file outside of the project currently all of our migration are set up to find the tsconfig path within a project create a program out of each and migrate the file inside of the program the problem is that the program can include file outside of the project and the cli apis that we use to interact with the file system assume that all file are within the project these change consolidate the logic that determines whether a file can be migrated in a single place and add an extra check to exclude file outside of the root fix pr close ,fix
2349,devinfra support squashing fixups in the ngdev pr rebase command adding support for squashing fixup commits during when rebasing can allow for rebasing to better unblock thing like merging pr close ,feat
2350,devinfra move parsecommitmessagesforrange into the parse file when attempting to actually rely on parsecommitmessagesforrange it became apparent that the function really belongs in the parse file rather than utils pr close ,refactor
2351,core meta addtag add incorrect attribute for metaaddtag add a meta tag with attribute instead of when metadefinition contains property pr close ,fix
2352,languageservice include source for ivy l we need to expose the declaration file for ivy source so that they can be consumed by the angular language server angularlanguageserver pr close ,build
2353,router correctly handle string command in outlet there are many place where example use just a string for the command in outlet when using nested outlet we do not correctly handle this case a the type and algorithm always expect an array this pr update the createurltree algorithm to account for the possibility of a string literal a the command for an outlet fix pr close ,fix
2354,compiler tidy up interpolation splitting when parsing for in message interpolated string are split into text and placeholder piece the method that doe this visittextwithinterpolation wa becoming too complex this commit refactors that method along with some associated function that it us pr close ,refactor
2355,compiler ensure that placeholder have the correct sourcespan when the preservewhitespaces is not true the template parser will process the parsed ast node to remove excess whitespace since the generated googgetmsg statement rely upon the ast node after this whitespace is removed the in extraction must make a second pas previously this resulted in innacurrate sourcespans for the in text and placeholder node that were extracted in the second pas this commit fix this by reusing the sourcespans from the first pas when extracting the node in the second pas fix pr close ,fix
2356,compilercli add sourcemapping test helper this helper improves the message given when an expectation fails in a sourcemapping test pr close ,test
2357,core remove unused fakeasyncfallback and asyncfallback zonejs introduces zonetesting bundle and move all fakeasyncasync logic from angularcoretesting to zonejs package but in case some user still using the old version of zonejs an old version of fakeasyncasync logic were still kept inside angularcoretesting package a fallback logic since now angular already use zonejs so those fallback logic is removed pr close ,refactor
2358,animation getanimationstyle cause exception in older browser pr getanimationstyle cause exception in older browser pr close ,fix
2359,router remove duplicated getoutlet function the codebase currently contains two getoutlet function and they can end up in the bundle of an application a recent commit fbedadbabebfcecffca tipped u off a it introduced several noop occurrence in the golden symbol file after investigating with petebacondarwin we decided to remove the duplicated function this probably shave only a few byte but this commit remove the duplicated function by always using the one in routersrcutilsconfig pr close ,fix
2360,devtools prevent directive forest from building twice every time a node is selected in the directive explorer ,perf
2361,devtools prevent highlighter from rebuilding the directive forest every time a node is hovered over in the directive forest ,perf
2362,devtools update angularframework ,build
2363,common prefer to use pagexoffset pageyoffset instance of scrollx scrolly this fix ensures a better crossbrowser compatibility this fix ha been used for angulario pr close ,fix
2364,core move injectattributeimpl to avoid cycle this commit move the injectattributeimpl and other dependent code to avoid circular dependency pr close ,refactor
2365,core support attribute di decorator in deps section of a token this commit fix a bug when attribute di decorator is used in the deps section of a token that us a factory function the problem appeared because the attribute di decorator wa not handled correctly while injecting factory function attribute close pr close ,fix
2366,core add get method to querylist this commit add get method to querylist the method return an item of the internal result by index number pr close pr close ,feat
2367,core rename ivytrustedtypes integration test to trustedtypes since there wont be a viewenginespecific integration test we dont need the ivy prefix pr close ,test
2368,core add ee test to ivytrustedtypes integration test make sure that all trusted typesrelevant sink that can appear in an angular template eg not script since it forbidden continue to work a expected with correct sanitization semantics without introducing trusted type violation pr close ,test
2369,core enforce trusted type in ivytrustedtypes integration test enforce trusted type in the ivytrustedtypes integration test by setting an appropriate csp header in the project angularjson pr close ,test
2370,core enable ivytrustedtypes integration test add ivytrustedtypes to the list of enabled unit test in integrationbuildbazel pr close ,test
2371,core make ivytrustedtypes similar to other integration test angular dependency point to dist use absolute version for other dependency add a yarnlock create cispecific target make karma and protractor use correct chrome binary pr close ,test
2372,core create ivytrustedtypes integration test create an integration test for testing support for trusted type in ivy generated with yarn ng new ivytrustedtypes g skipinstall style cs routing strict pr close ,test
2373,compilercli expose api for mappping from tcb to template location consumer of the templatetypechecker api could be interested in mapping from a shim location back to the original source location in the template one concrete example of this usecase is for the find reference action in the language service this will return location in the typescript shim file and we will then need to be able to map the result back to the template pr close ,refactor
2374,compilercli add additional shim location to reference and variable symbol both referencesymbol and variablesymbol have two location of interest to an external consumer the location for the initializers of the local tcb variable allow consumer to query the typescript language service for information about the initialized type of the variable the location of the local variable itself ie t allows consumer to query the typescript l for reference to that variable from within the template pr close ,refactor
2375,core remove duplicated noop function the codebase currently contains several noop function and they can end up in the bundle of an application a recent commit fbedadbabebfcecffca tipped u off a it introduced several noop occurrence in the golden symbol file after investigating with petebacondarwin we decided to remove the duplicated function this probably shave only a few byte but this commit remove the duplicated function by always using the one in coresrcutilsnoop pr close ,fix
2376,docsinfra support recovering from unrecoverable sw state occasionally the sw would end up in a broken state where some of the eagerly cached resource of an older version were available in the local cache but others such a lazyloaded bundle were not this would leave the app in a broken state and a blank screen would be displayed see for a more detailed discussion this commit take advantage of the newly introduced in v swupdateunrecoverable api to detect these bad state and recover by doing a full page reload whenever an unrecoverablestateevent is emitted partially address note currently swupdateunrecoverable only work if the app ha already bootstrapped ie if only lazyloaded bundle have been purged from the cache that should be fine in practice since the cache entry are removed in leastrecentlyused order thus the eagerly loaded bundle will be the last to be removed from the cache which rarely happens in practice pr close ,fix
2377,docsinfra make swupdatesservice depend on locationservice previously the locationservice depended on the swupdatesservice this felt backwards since locationservice is a more lowlevel and basic service and should not be depending on a service for a higherlevel specific feature serviceworkers this commit inverse the relation making swupdatesservice depend on locationservice instead pr close ,refactor
2378,docsinfra use existing mocklogger class in swupdatesservice test since we have a mocklogger class in srctesting there is no need to create a new mocklogger class for the swupdatesservice unit test this commit switch to using the mocklogger class from srctesting pr close ,test
2379,router migration incorrectly replacing deprecated key in we added a migration to replace the deprecated preservequeryparams option with queryparamshandling however due to a typo we ended up replacing it with queryparamshandler which is invalid fix pr close ,fix
2380,zonejs update zonejs readme for the bundle format there is a typo in zonejs bundle format breaking change part the correct version should be not and add more clear text to explain the new bundle format directory structure pr close ,docs
2381,docsinfra update angularmaterial to this commit update angularcdk and angularmaterial to version pr close ,build
2382,docsinfra update angular to and angularcli to this commit update angular and angularcli and related package to latest x version and respectively see here for a diff between a vrc and a v cli app pr close ,build
2383,docsinfra update angularmaterial to rc this commit update angularcdk and angularmaterial to version rc pr close ,build
2384,docsinfra downgrade karma to v due to regression in v this commit downgrade karma to version because of a regression in version karmarunnerkarma it ha been fixed with karmarunnerkarmadcece on master but the fix is not included in the latest release v pr close ,build
2385,docsinfra update angular and angularcli to rc this commit update angular and angularcli and related package to version rc apart from the automatic migration this commit also try to align aio with new apps generated by the latest cli see here for a diff between a v and a vrc cli app pr close ,build
2386,docsinfra update payload size this commit update the payload size for angulario to reflect the current value this help compare with the change introduced by the following commit the value are taken from these testaio testaiolocal and testaiolocalviewengine ci job pr close ,build
2387,fix emdashes not displaying correctly fix pr close ,docs
2388,devinfra support command line argument for restorecommitmessage allowing command line argument to provide the file and source value to the restorecommitmessage command will assist in the the process of upgrading to husky pr close ,feat
2389,languageservice add renamed deleted test file languageserviceadapterspec wa renamed to adaptersspec a part of dcbbebabbcfadceffddd but i failed to check in adaptersspec thereby just deleting the spec this reintroduces it pr close ,test
2390,devinfra extract the parsing of a range of commits into a util function a utility function to parse a range of commits allows for other tooling to ass a range of commits pr close ,refactor
2391,core clean up circular dependency clean up circular dependency in core by pulling symbol out to their respective file pr close ,refactor
2392,core replace nonnull assertion operator with property initialization reuse the noop function from the common utility pr close ,refactor
2393,docsinfra compute previous version list previously we hand coded the list of previous major version that are displayed in the left navigation now these are generated from the tag in github close pr close ,build
2394,core fix directivets preserving whitespace example comment in directivets file component preserving whitespace example compiled output comment is wrongly written pr close ,docs
2395,common add httpparamsoptions to the public api the httpparamsoptions wa not documented or included in the public api even though it is a constructor argument of httpparams which is a part of the public api this commit add the httpparamsoptions into the export thus making it a part of the public api resolve pr close ,fix
2396,languageservice languageserviceadapter adapter this rename is done because we know have a file system adapter over a project a well a the compiler adapter pr close ,refactor
2397,compilercli provide a host to readconfiguration currently readconfiguration relies on the file system to perform disk utility needed to read determine a project configuration file and read it this pose a challenge for the language service which would like to use readconfiguration to watch and read configuration dependent on extended tsconfigs challenge are at least twofold to test this the langauge service would need to provide to the compiler a mock file system the language service us file system utility primarily through typescript project abstraction in general this should correspond to the underlying file system but it may differ and it is better to go through one channel when possible this patch alleviates the concern by directly providing to the compiler a parseconfigurationhost with readonly file systemlike utilties for the language service this host is derived from the project owned by the language service for more discussion see pr close ,refactor
2398,queue jsonp script tag onload event handler in microtask before this change when trying to load a jsonp script that call the jsonp callback inside a microtask it will fail in internet explorer and edgehtml this commit change the onload cleanup to be queued after the loaded endpoint executed any potential microtask itself this ensures that the aforementioned browser will first evaluate the loaded script calling the jsonp callback and only then run the cleanup inside onload fix pr close ,fix
2399,languageservice introduce new virtual testing environment this commit add new language service testing infrastructure which allows for inmemory testing it solves a number of issue with the previous testing infrastructure that relied on a single integration project across all of the test and also provides for much faster build by using the compilerclis mock version of angularcore and angularcommon a new languageservicetestenvironment class conceptually mirroring the compilercli ngtsctestenvironment control setup and execution of test the filesystem abstraction is used to drive a tsserverserverhost which back the language service infrastructure since many language service test revolve around the template the api is currently optimized to spin up a skeleton project and then override it template for each test the existing quick info test quickinfospects were ported to the new infrastructure for validation the test were cleaned up a bit to remove unnecessary initialization a well a correct legitimate template error which did not affect the test outcome but caused additional validation of test correctness to fail they still utilize a shared project with all field required for each individual unit test which is an antipattern but new test can now easily be written independently without relying on the shared project which wa extremely difficult previously future cleanup work might refactor these test to be more independent pr close ,test
2400,languageservice move existing test to legacy directory in preparation for inmemory testing infrastructure the existing ivy language service test are moved to a legacy directory these existing test rely on a single integration project in testprojectapp which present a number of challenge adding extra fieldsproperties to the integration project for one test can cause others to failflake it especially difficult to test any case that require introducing intentional error a those tend to break other test test load file from disk which is slower test rely on the real built version of angularcore and angularcommon which make them both slow to build and require rebuilds on every compiler change test share a single tsconfigjson making it extremely difficult to test how the language service handle different configuration scenario eg different typechecking flag pr close ,test
2401,compilercli add a fakecommon package alongside fakecore ngtscs testing infrastructure us a mock version of angularcore which allows test to run without requiring the real version of core to be built this commit add a mock version of angularcommon a well a the language service test are written to test against common only a handful of directivespipes from common are currently supported pr close ,test
2402,compilercli move testing utils to separate package ngtsc ha a robust suite of testing utility designed for inmemory testing of a typescript compiler previously these utility lived in the test directory for the compilercli package this commit move those utility to an ngtsctesting package enabling them to be depended on separately and opening the door for using them from the upcoming language server testing infrastructure a part of this refactoring the fakecore package a lightweight api replacement for angularcore is expanded to include functionality needed for language service test use case pr close ,test
2403,compiler use raw byte to represent utf encoded string the result of utf encoding a string wa represented in a string where each individual character represented a single byte according to it character code all usage of this data were interested in the byte itself so this required conversion from a character back to it code this commit simply store the individual byte in array to avoid the conversion this yield a performance improvement for in message id computation pr close ,perf
2404,compiler optimize computation of in message id message id computation make extensive use of big integer multiplication in order to translate the message fingerprint into a numerical representation in large compilation with heavy use of in this wa showing up high in profiler session there are two factor contributing to the bottleneck a suboptimal big integer representation using string which requires repeated allocation and conversion from a character to numeric digit and back repeated computation of the necessary base exponent and their multiplication factor the first bottleneck is addressed using a representation that us an array of individual digit this avoids repeated conversion and allocation overhead is also greatly reduced a adding two big integer can now be done inplace with virtually no memory allocation the second point is addressed by a memoized exponentiation pool to optimize the multiplication of a base exponent a an additional optimization are the two bit word now converted to decimal per word instead of going through an intermediate byte buffer and doing the decimal conversion per byte the result of these optimization depend a lot on the number of in message for which a message should be computed benchmark have shown that computing message id is now x faster for message x faster for message and x faster for message pr close ,perf
2405,devtools update dependency ngpackagr to v ,build
2406,devtools update angularcomponents to v ,build
2407,compilercli incorrectly type checking call to implicit template variable currently when we encounter an implicit method call eg foo and we manage to resolve it receiver to something within the template we assume that the method is on the receiver itself so we generate a type checking code to reflect it this assumption is true in most case but it break down if the call is on an implicit receiver and the receiver itself is being invoked eg div ngforlet fn of function fn div these change resolve the issue by generating a regular function call if the method call receiver is pointing to implicit fix pr close ,fix
2408,compilercli add additional keyvalue span to tcb in order to more accurately map from a node in the tcb to a template position we need to provide more span information in the tcb these change are necessary for the language service to map from a tcb node back to a specific location in the template for action like find reference and refactorrename after the t find reference return result including those in the tcb we need to map specifically to the matching keyvalue span in the template rather than the entire source span this also ha the benefit of producing diagnostics which align more closely with what typescript produce the following example show t code and the diagnostic produced by an invalid assignment to a property let a age number a any aage laksjdf type string is not assignable to type number a corollary to this in a template file would be agesomestring the diagnostic we currently produce for this is type number is not assignable to type string apphello greetingapphello notice that the underlined text includes the entire span if we included the keyspan for the assignment to the property this diagnostic underline would be more similar to the one produced by typescript that is it would only underline “ greeting ” designdiscussion doc pr close ,refactor
2409,core remove isobservable todo this commit remove the todo comment that proposed that we use the builtin rxjs isobservable function this is not a viable approach since the builtin function requires that the obj contains additional method that our observable type such a eventemitter do not necessarily have see for more information pr close ,refactor
2410,core remove circular dependency on applicationref viewref and applicationref had a circular reference this change introduces viewreftracker which is a subset of applicationref for this purpose pr close ,refactor
2411,core remove circular dependency on render jit and viewengine jit need to identify which type is changedetectorref it wa doing so by importing changedetectorref and than comparing the type this creates circular dependency a well a prevents tree shaking the new solution is to brand the class with changedetectorref so that it can be identified without creating circular dependency pr close ,refactor
2412,core remove circular dependency on render and ngmodule extracted ngmodedef into a separate file to break the circular dependency pr close ,refactor
2413,core remove circular dependency between lcontainer and viewref lcontainer store viewrefs this is not quite right a it creates circular dependency between the two type also lcontainer should not be aware of viewref which iv viewengine specific construct pr close ,refactor
2414,core extract dobootstrap to separate file extract dobootstrap interface to a separate file to break circular dependency pr close ,refactor
2415,core cleanup nonstandard injector handling due to historical reason injectorngelementid wa set to this change it to be consistent with other refngelementid construct pr close ,refactor
2416,core cleanup circular dependency between viewengine and ivy renderer renderer is declared in viewengine but it subclassed in ivy this creates a circular dependency between viewengine renderer which need to declare ngelementid and ivy factory which need to create it the workaround used to be to pas the renderer through stack but that created a very convoluted code this refactoring simply bundle the two file together and remove the stack workaround making the code simpler to follow pr close ,refactor
2417,core cleanup circular dependency between viewengine and ivy changedetectorref changedetectorref is declared in viewengine but it subclassed in ivy this creates a circular dependency between viewengine changedetectorref which need to declare ngelementid and ivy factory which need to create it the workaround used to be to pas the changedetectorref through stack but that created a very convoluted code this refactoring simply bundle the two file together and remove the stack workaround making the code simpler to follow pr close ,refactor
2418,core cleanup circular dependency between viewengine and ivy viewcontainerref viewcontainerref is declared in viewengine but it subclassed in ivy this creates a circular dependency between viewengine viewcontainerref which need to declare ngelementid and ivy factory which need to create it the workaround used to be to pas the viewcontainerref through stack but that created a very convoluted code this refactoring simply bundle the two file together and remove the stack workaround making the code simpler to follow pr close ,refactor
2419,core cleanup circular dependency between viewengine and ivy templateref templateref is declared in viewengine but it subclassed in ivy this creates a circular dependency between viewengine templateref which need to declare ngelementid and ivy factory which need to create it the workaround used to be to pas the templateref through stack but that created a very convoluted code this refactoring simply bundle the two file together and remove the stack workaround making the code simpler to follow pr close ,refactor
2420,core cleanup circular dependency between viewengine and ivy elementref elementref is declared in viewengine but it subclassed in ivy this creates a circular dependency between viewengine elementref which need to declare ngelementid and ivy factory which need to create it the workaround used to be to pas the elementref through stack but that created a very convoluted code this refactoring simply bundle the two file together and remove the stack workaround making the code simpler to follow pr close ,refactor
2421,core add shouldcoalescerunchangedetection option to coalesce change detection in the same event loop close now ngzone ha an option shouldcoalesceeventchangedetection to coalesce multiple event handler change detection to one async change detection and there are some case other than event handler have the same issue in the case like this this code result in one change detection occurring per ngzonerun call this is entirely feasible and can be a serious performance issue for let i i i thisngzonerun do something so such kind of case will trigger multiple change detection and now with ivy we have a new markdirty api will schedule a requestanimationframe to trigger change detection and also coalesce the change detection in the same event loop markdirty api doesnt only take care event handler but also all other case syncmacrotask so this pr add a new option to coalesce change detection for all case testcore add test case for shouldcoalesceeventchangedetection option add new test case for current shouldcoalesceeventchangedetection in ngzonespec since currently we only have integration test for this one pr close ,feat
2422,core document setcomponentscope to provide context setcomponentscope wa previously undocumented this commit add a short explanation of what the function doe and add a link to a doc which explains issue with cycle in more detail pr close ,refactor
2423,compilercli setcomponentscope should only list used componentspipes ngtsc will avoid emitting generated import that would create an import cycle in the user program the main way such import can arise is when a component would ordinarily reference it dependency in it component definition directivedefs and pipedefs this requires adding import which run the risk of creating a cycle when ngtsc detects that adding such an import would cause this to occur it instead fall back on a strategy called remote scoping where a side effectful call to setcomponentscope in the component ngmodule file is used to patch directivedefs and pipedefs onto the component since the ngmodule file already import all of the component dependency to declare them in the ngmodule this approach doe not risk adding a cycle it ha several large downside however it break under sideeffects false logic in bundlers including the cli it break treeshaking for the given component and it dependency see this doc for further detail in particular the impact on treeshaking wa exacerbated by the naive logic ngtsc used to employ here when this feature wa implemented at the time of generating the sideeffectful setcomponentscope call the compiler did not know which of the component declared dependency were actually used in it template this meant that unlike the generation of directivedefs in the component definition itself setcomponentscope call had to list the entire compilation scope of the component ngmodule including directive and pipe which were not actually used in the template this made the tree shaking impact much worse since if the component ngmodule made use of any shared ngmodules eg commonmodule every declaration therein would become untreeshakable today ngtsc doe have the information on which directivespipes are actually used in the template but this wa not being used during the remote scoping operation this commit modifies remote scoping to take advantage of the extra context and only list used dependency in setcomponentscope call which should ameliorate the treeshaking impact somewhat pr close ,fix
2424,compilercli convert element related compliance test this commit convert a set of compliance test in the rcompilercompliancespects file to the new testing approach pr close ,test
2425,compilercli create initial linked compile compliance test this commit add bazel rule to test whether linking the golden partial file for test case produce the same output a a full compile of the test case would pr close ,test
2426,compilercli generate golden file for partial compilation this commit add a j script that can generate a partial golden file for test case in the compiler compliance test pr close ,test
2427,compilercli create full compile compliance test rule this commit contains the basic runner logic and a couple of sample test case for the full compile compliance test where source file are compiled to full definition and checked against expectation pr close ,test
2428,compilercli move legacy compliance test to new folder this commit renames the original compliance test directory to complianceold eventually this directory will be deleted once all the test have been migrated to the new test case based compliance test pr close ,refactor
2429,compilercli return the filesystem from initmockfilesystem it is common to want to use the file system once it is initialized so it make sense for this function to return it pr close ,refactor
2430,docsinfra remove link to constructor article remove the link to the article called flaw constructor doe real work by misko fix pr close ,docs
2431,compilercli add keyspan to reference node similar to and we should store the keyspan for reference node so that we can accurately map from a template node to a span in the original file this is most notably an issue at the moment for directive reference refexportas the current behavior for the language service when requesting information for the reference is that it will return a text span that result in highlighting the entire source when it should only highlight ref test added for this case a well pr close ,refactor
2432,compilercli add keyspan to parsed event though we currently have the knowledge of where the key for an event binding appears during parsing we do not propagate this information to the output ast this mean that once we produce the template ast we have no way of mapping a template position to the key span alone the best we can currently do is map back to the sourcespan this present problem downstream specifically for the language service where we can not provide correct information about a position in a template because the ast is not granular enough this is essentially identical to the change from but for event binding rather than input binding pr close ,refactor
2433,compilercli add keyspan to text attribute similar to and though we currently have the knowledge of where the key for an attribute appears during parsing we do not propagate this information to the output ast this mean that once we produce the template ast we have no way of mapping a template position to the key span alone the best we can currently do is map back to the sourcespan this present problem downstream specifically for the language service where we can not provide correct information about a position in a template because the ast is not granular enough pr close ,refactor
2434,compilercli reduce filesystem hit during resource resolution the resource loader us typescript module resolution system to determine at which location it need to look for a resource file a marker string is used to force the module resolution to fail such that all failed lookup location can then be considered for actual resource resolution any filesystem request targeting filesdirectories that contain the marker are known not to exist so no filesystem request need to be done at all pr close ,perf
2435,compilercli define type alias for the required delegation pattern the type alias allows for this pattern to be more easily used in other area of the compiler code the current usage of this pattern have been updated to use the type alias pr close ,refactor
2436,core remove deprecated wtfzonespec from ngzone since wtf is deprecated and removed in v in this pr so in this pr wtfzonespec is also removed from ngzone pr close ,fix
2437,core not inserting viewcontainerref node when inside root of a component when a viewcontainerref is injected we dynamically create a comment node next to the host so that it can be used a an anchor point for inserting view the comment node is inserted through the appendchild helper from nodemanipulationts in most case the problem with using appendchild here is that it ha some extra logic which doesnt return a parent rnode if an element is at the root of a component i think that this is a performance optimization which is used to avoid inserting an element in one place in the dom and then moving it a bit later when it is projected this can break down in some case when creating a viewcontainerref for a noncomponent node at the root of another component like the following root div viewcontainerrefdiv root in this case the viewcontainerref node is at the root of a component so we intentionally dont insert it but since it anchor element wa created manually itll never be projected this will prevent any view added through the viewcontainerref from being inserted into the dom these change resolve the issue by not going through appendchild at all when creating a comment node for viewcontainerref this should work identically since appendchild doesnt really do anything with the t structure anyway it only us them to reach the relevant dom node fix pr close ,fix
2438,form more precise control cleanup currently when an instance of the formcontrolname directive is destroyed the form package invokes the cleanupcontrol to clear all directivespecific logic such a validators onchange handler etc from a bound control the logic of the cleanupcontrol function should revert all setup performed by the setupcontrol function however the cleanupcontrol is too aggressive and remove all callback related to the onchange and disabled state handling this is causing problem when a form control is bound to multiple formcontrolname directive causing other instance of that directive to stop working correctly when the first one is destroyed this commit update the cleanup logic to only remove callback added while setting up a control for a given directive instance the fix is needed to allow adding cleanupcontrol function to other place where cleanup is needed missing this function call in some other place cause memory leak issue pr close ,fix
2439,core handle important in style property value fix that the ivy styling logic wasnt accounting for important in the property value fix that the default dom renderer only set important on a property with a dash in it name account for the flag parameter of setstyle in the server renderer fix pr close ,fix
2440,devtools update angularframework ,build
2441,docsinfra print the git commit when deploying to firebase the commit update the aio deployment script to also print the commit sha this make it easier to check whether a version ha been successfully deployed by comparing the commit sha from the ci job with the sha in the version string in the footer of the aio app pr close ,build
2442,compilercli avoid duplicate diagnostics about unknown pipe tcb generation occasionally transforms binding expression twice which can result in a bindingpipe operation being resolved multiple time when the pipe doe not exist this caused multiple oob diagnostics to be recorded about the missing pipe this commit fix the problem by making the oob recorder track which pipe expression have had diagnostics produced already and only producing them once per expression pr close ,fix
2443,compilercli remove typescript workarounds with this change we remove code which wa used to support both typescript and typescript this code is now no longer needed because g is on typescript pr close ,refactor
2444,compilercli remove typescript test we remove these test because typescript is no longer supported and g is currently on t pr close ,test
2445,element update the view of an onpush component when input change a with regular angular component angular element are expected to have their view update when input change previously angular element view were not updated if the underlying component used the onpush change detection strategy this commit fix this by calling markforcheck on the component view changedetectorref note this is similar to how angularupgrade doe it fix pr close ,fix
2446,element add integration test for angular element using shadowdom previously the project used for running integration test for angular element declared a component that used shadowdom for view encopsulation but it did not include any test to verify that the view wa updated correctly this commit add the missing test pr close ,test
2447,element fix componentngelementstrategy test for component without ngonchanges componentngelementstrategy is supposed to call ngonchanges on the underlying component instance if available but not fail if the component doe not have an ngonchanges method this work a expected however the test used to verify that wa invalid ie the test would pas even if componentngelementstrategy would try to call ngonchanges on a component without such a method this commit replaces the invalid test with a new one that correctly verifies that componentngelementstrategy doe not try to call ngonchanges pr close ,test
2448,element simplify creation of fakecomponentfactorycomponentref previously the componentref property of fakecomponentfactory used in element test wa initialy set to a spy object with all mock property defined a spied method later the property where overwritten to the actual mock value this commit simplifies the creation of componentref by correctly using the argument of jasminecreatespyobj to specify the desired shape of the spy object separating spied property from method and directly providing the mock value pr close ,test
2449,element fix typo in test description even if when even if this commit fix a typo in a test description pr close ,test
2450,core access injected parent value using selfskip in viewengine selfskip would navigate up the tree to get token from the parent node skipping the child this restores that functionality in ivy in viewengine if a special token eg elementref wa not found in the nodeinjector tree the moduleinjector wa also used to lookup that token while special token like elementref make sense only in a context of a nodeinjector we preserved viewengine logic for now to avoid breaking change we identified scenario related to skipself and special token where viewengine behavior wa incorrect and is likely due to bug in ivy this is implemented to provide a more intuitive api the list of scenario can be found below when injector is used in combination with host and skipself on the first component within a module and the injector is defined in the module viewengine will get the injector from the module in ivy it doe not do this and throw instead when retrieving a viewcontainerref while skipself and host are present in viewengine it throw an exception in ivy it return the host viewcontainerref when retrieving a viewcontainerref on an embedded view and skipself is present in viewengine the ref is null in ivy it return the parent viewcontainerref when utilizing viewproviders and provider a child component that is nested within a parent component that ha skipself on a viewprovider value if that provider is provided by the parent component viewproviders and provider viewengine will return that parent viewproviders value which violates how viewproviders visibility should work in ivy it retrieves the value from provider a it should these discrepancy all behave a they should in ivy and are likely bug in viewengine pr close ,fix
2451,compilercli do not drop nonangular decorator when downleveling there is a compiler transform that downlevels angular class decorator to static property so that metadata is available for jit compilation the transform wa supposed to ignore nonangular decorator but it wa actually completely dropping decorator that did not conform to a very specific syntactic shape ie the decorator wa a simple identifier or a namespaced identifier this commit ensures that all nonangular decorator are kepts asis even if they are built using a syntax that the angular compiler doe not understand fix pr close ,fix
2452,languageservice use compiler apis in ivy to get definition for external resource rather than rereading component metadata that wa already interpreted by the ivy compiler the language service should instead use the compiler apis to get information it need about the metadata pr close ,refactor
2453,compiler skipping leading whitespace should not break placeholder sourcespans tokenized text node may have leading whitespace skipped from their sourcespan but the sourcespan is used to compute where there are interpolated block resulting in placeholder node whose sourcespans are offset by the amount of skipped character this fix us the fullstart location of text sourcespans for computing the sourcespan of placeholder so that they are accurate fix pr close ,fix
2454,compiler capture fullstart location when tokenizing this commit ensures that when leading whitespace is skipped by the tokenizer the original start location before skipping is captured in the fullstart property of the token sourcespan pr close ,refactor
2455,compiler store the fullstart location on parsesourcespans the lexer is able to skip leading trivia in the start location of token this make the sourcespan more friendly since thing like element appear to begin at the start of the opening tag rather than at the start of any leading whitespace which could include newlines but some tooling requires the full sourcespan to be available such a when tokenizing a text span into an angular expression this commit simply add the fullstart location to the parsesourcespan class and ensures that place where such span are cloned this property flow through too pr close ,refactor
2456,compiler ensure that in messageparts have the correct sourcespan in an in message two placeholder next to each other must have an empty messagepart to separate them previously the sourcespan for this messagepart wa pointing to the wrong original location this caused problem in the generated sourcemaps and lead to extracted in message from being rendered incorrectly pr close ,fix
2457,devtools update angularframework ,build
2458,zonejs monkey patch queuemicrotask close monkey patch queuemicrotask api so the callback run in the zone when scheduled and also the task is run a microtask zonecurrentfork name queuemicrotask onscheduletask delegate zonedelegate curr zone target zone task task logspushtasktype logspushtasksource return delegatescheduletasktarget task run queuemicrotask expectlogstoequalmicrotask queuemicrotask expectzonecurrentnametoequalqueuemicrotask done pr close ,feat
2459,docsinfra upgrade cli command doc source to defb updating angularmaster from clibuildsmaster relevant change in commit range modified helpbuildjson helptestjson pr close ,build
2460,compilercli resolve test failure narrow down an assertion in one of our test so it le prone to failure due to extra comma pr close ,test
2461,form remove validators while cleaning up a control prior to this commit the cleanupcontrol function responsible for cleaning up control instance wa not taking validators into account a a result these validators remain registered on a detached form control instance thus causing memory leak this commit update the cleanupcontrol function logic to also run validators cleanup a a part of this change the logic to setup and cleanup validators wa refactored and moved to separate function with completely opposite behavior so that they can be reused in the future this commit doesnt add the cleanupcontrol call to all possible place it just fix the case where this function is being called but doesnt fully perform a cleanup the cleanupcontrol function call will be added to other part of code to avoid more memory leak in a followup pr pr close ,fix
2462,docsinfra upgrade cli command doc source to ac updating angularmaster from clibuildsmaster relevant change in commit range modified helpgeneratejson helpnewjson pr close ,build
2463,compilercli rename ngdeclaredirectivengdeclarecomponent to use ɵɵ prefix for consistency with other generated code the partial declaration function are renamed to use the ɵɵ prefix which indicates that it is generated api this commit also remove the declaration from the public api golden file a it not yet considered stable at this point once the linker is finalized will these declaration function be included into the golden file pr close ,refactor
2464,compilercli implement partial directive declaration linking this commit implement the logic to compile a partial declaration of a directive into it full aot compilation output pr close ,feat
2465,compilercli partial compilation of directive this commit implement partial code generation for directive which will be transformed by the linker plugin to fully aot compiled code in followup work pr close ,feat
2466,compilercli run the linker transform in the compliance test prelink target in pr an additional bazel target wa introduced for the compliance test a preparation to run the compliance test in partial compilation mode and then apply the linker transform the linker plugin itself wa not available at the time but ha since been implemented so this commit update the prelink target of the compliance test to apply the linker transform using the babel plugin actually emitting partial compilation to be transformed will be done in followup work pr close ,test
2467,compilercli extend ast object and value helper this introduces astobjecttomap a an alternative to astobject toliteral and add astvaluegetsymbolname to query the symbol name of a value using the encapsulated ast host pr close ,refactor
2468,devinfra run caretaker check asyncronously run each check in the caretaker check process asyncronously pr close ,fix
2469,devinfra provide tooling to check what branch a pr target create a command in the ngdev toolset that allows user to check what branch a pr will merge into based on it targeting pr close ,feat
2470,compilercli generating invalid setclassmetadata call in e for class with custom decorator when a class with a custom decorator is transpiled to e it look something like this var someclass function function someclass var someclass decoratedecorator someclass someclass someclass return someclass the problem is that if the class also ha an angular decorator that refers to the class itself eg provide sometoken useclass someclass the generated setclassmetadata code will be emitted after the iife but will still refer to the intermediate someclass variable from inside the iife this happens because we generate the setclassmetadata call directly from the source ast which contains identifier that t will rename when it emits the e code these change resolve the issue by looking through the metadata ast and cloning any identifier that is referring to the class since t doesnt have reference to the clone it wont rename it when transpiling to e fix pr close ,fix
2471,devtools update angularframework ,build
2472,devinfra run fetch in the git client in quiet mode when fetch is run in normal mode the gitfetchpack plumbing command output progress to stderr since this is unnecessary progress information for ngdev usage it should be suppressed instead pr close ,fix
2473,bazel mention alex eagle article on migration doc alex eagle wrote an external article on our decision to move bazel out of angular repo and it useful for user who want to know more about whats next pr close ,docs
2474,docsinfra ensure that deployment work on ci the actual main part of the script that is executed wa using an uninitialized variable this is fixed and a test is added to check pr close ,build
2475,languageservice refactor hybridvisitor and expand it capability this commit take the hybridvisitor in the language service and give it the ability to return not just a node but the template context in which it appears in the future more context regarding where a node appears in the template might become necessary ex the microsyntax container for binding node and this refactoring enables that in the process hybridvisitor is renamed and the concept of a templatetarget interface is introduced to contain the result of this operation pr close ,refactor
2476,languageservice introduce displayparts abstraction for ivy this commit refactors the quickinfo abstraction shared between the ve and ivy service and used to implement hover tooltips quick info which wa extracted from the ve code in commit faadc the new displayparts abstraction is more general and can be used to extract information needed by various l function eg autocompletion this commit effectively reverts faadc returning the original code to the ve implementation a the ivy code is now diverged pr close ,refactor
2477,docsinfra upgrade firebasetools to v this commit upgrade firebasetools used to deploy angulario to firebase hosting to the latest version this give u access to the latest fixesimprovements and also new feature such a version cloning pr close ,build
2478,docsinfra deploy angulario to new firebase site previously the documentation for each major angular version wa hosted on each own firebase project this required creating a new project for each major release and increased the administrativemaintenance cost now that firebase support hosting multiple website a part of the same project we are switching to deploying all major version to site created on angulario project this is part of the work needed to prepare angulario for our new versioningbranching process also tracked in pr close ,build
2479,docsinfra break up deploytofirebasejs script into function this commit break up the code in deploytofirebasejs script that we use for deploying angulario to production to smaller function instead of a monolithic block this make the script easier to maintain and also make testing individual operation easier the commit also update the deploytofirebasespecjs spec file to take advantage of the standalone function to speed up testing by calling the corresponding function instead of having to spawn a new process and run the deploytofirebasejs script with the dryrun flag note before updating the test i verified that the updated deploytofirebasejs script passed the old test pr close ,refactor
2480,docsinfra add support for rc deployment to deployment script this commit update the angulario deployment script deploytofirebasejs to support deploying releasecandidate version this is part of the work needed to prepare angulario for our new versioningbranching process also tracked in pr close ,build
2481,docsinfra add new angulario build configuration for releasecandidates this commit add a new build configurationdeployment mode rc for deploying releasecandidate version to angulario this is part of the work needed to prepare angulario for our new versioningbranching process also tracked in pr close ,build
2482,docsinfra use sas mixin to simplify the creation of deployment mode theme different deployment mode such a archive and next are identified by the different color used in prominent element of the page such a the topbar and the footer previously the necessary style for creating such a deployment mode theme were duplicated for each mode this commit simplifies the creationmodification of a deployment mode theme by introducing a sas mixin that generates the necessary style when provided with necessary theme color pr close ,refactor
2483,docsinfra ensure deploytofirebase test pas locally previously the deploytofirebasejs script and the accompanying deploytofirebasespecjs spec file were using the origin remote alias in certain command this work fine on ci where origin point to the angularangular github repo but might not work locally this commit ensures that the correct remote is used by explicitly specifying it by the url thus ensuring that the test will behave identically on ci and locally pr close ,test
2484,docsinfra switch deploytofirebasesh script to j this commit switch the deploytofirebasesh script that we use for deploying angulario to production from bash to javascript this make the script easier to maintain for the same reason it also switch the deploytofirebasetestsh script that we use for testing the deploytofirebase script from bash to javascript using jasmine a the test runner finally this commit also update shelljs to the latest version to get better error message including the actual error when exec fails note before switching the test script to j i verified that the new deploytofirebasejs script passed the test with the old deploytofirebasetestsh script pr close ,build
2485,core do not recurse into module that have already been registered when registering an ngmodule based on it id all transitively imported ngmodules are also registered this commit introduces a visited set to avoid traversing into ngmodules that are reachable from multiple import path multiple time fix pr close ,perf
2486,compilercli remove spurious consoleerror call from a test reporting the source file text to the console wa left a a debugging artifact pr close ,test
2487,compilercli only generate template context declaration when used the variable declaration for a template context is only needed when it is referenced from somewhere so the tcb operation to generate the declaration is marked a optional pr close ,perf
2488,compilercli report missing pipe when fulltemplatetypecheck is disabled even if fulltemplatetypecheck is disabled should missing pipe still be reported a wa the case in view engine fix pr close ,fix
2489,router ensure all outlet are used when command have a prefix when there is a primary outlet present in the outlet map and the object is also prefixed with some other command the current logic only us the primary outlet and ignores the others this change ensures that all outlet are respected at the segment level when prefixed with other command pr close ,fix
2490,router small refactor of createurltree and extra test this commit ha a small refactor of some method in createurltreets and add some test case including two that will fail at the moment but should pas a followup commit will make use of the refactorings to fix the test with minimal change pr close ,refactor
2491,compiler preserve thisevent and thisany access in expression currently expression eventfoo and thiseventfoo a well a anyfoo and thisanyfoo are treated a the same expression by the compiler because this is considered the same implicit receiver a when the receiver is omitted this introduces the following issue any time something called any is used itll be stripped away leaving only the first parameter if something called event is used anywhere in a template itll be preserved a event rather than being rewritten to ctxevent causing the value to undefined at runtime this applies to listener property and text binding these change resolve the first issue and part of the second one by preserving anything that is accessed through this even if it one of the special one like any or event furthermore these change only expose the event global variable inside event listener whereas previously it wa available everywhere fix pr close ,fix
2492,common change the weeknumbering year format from r y this commit update the weeknumbering year format from r y based on the description in note this is not a breaking change since the weeknumbering year format wa introduced in vnext and the major version that contains that change wa not released yet pr close ,fix
2493,compilercli store inline template and style in the resource registry the language service is not only interested in external resource but also inline style and template by storing the expression of the inline resource we can more easily determine if a given position is part of the inline templatestyle expression pr close ,refactor
2494,compiler parse binding by hand rather than via regex to support recovery of malformed binding property name like a a or the binding parser need to be more permissive wrt the kind of binding it can detect this is difficult to do maintainably with a regex but is trivial with a handrolled string parser this commit refactors render binding attribute parsing to use this method for multidelimited binding namely via the and syntax making the way recovery of malformed binding in a future patch note that we can keep using a regex for prefixonly binding syntax eg bind ref because validation of the binding is complete once we have matched the prefix and the only thing left to do is check that the binding identifier is nonempty which is trivial part of pr close ,refactor
2495,devtools update angularframework ,build
2496,compiler clean up in attribute generation logic this is followup from an earlier discussion after some testing it look like the type of elementattributes wa correct in specifying that it only ha textattribute instance this mean that the extra check that filter out boundattribute instance from the array isnt necessary there is another loop a bit further down that actually extract the bound in attribute pr close ,refactor
2497,core markdirty should only mark flag when really scheduling tick close fix an issue that markdirty will not trigger change detection the case is for example we have the following component export class appcomponent implement oninit constructorprivate router router ngoninit thisrouterevents pipefiltere e instanceof navigationend subscribe ɵmarkdirtythis export class countercomponent implement oninit ondestroy ngoninit thiscountsubjectpipetakeuntilthisdestroysubscribecount thiscount count ɵmarkdirtythis then the app navigate from appcomponent to countercomponent so there are markdirty call at in a row the st call is from appcomponent when router changed the nd call is from countercomponentngoninit and the markdirtyscheduletick code look like this function scheduletickrootcontext flag const nothingscheduled rootcontextflags empty rootcontextflags flag if nothingscheduled rootcontextclean cleanpromise rootcontextschedule if rootcontextflags rootcontextflagsdetectchanges rootcontextflags rootcontextflagsdetectchanges tickcontext rootcontextclean cleanpromise so in this case the st markdirty will set rootcontextflags before tickcontext reset rootcontextflags inside tickcontext it will call countercomponentngonint so the nd markdirty is called and the nd scheduletick is called nothingscheduled is true but rootcontextclean is not cleanpromise yet since the st markdirty tick is still running so nowhere will reset the rootcontextflags then in the future any other markdirty call will not trigger the tick since nothingscheduled is always false so nothingscheduled mean no tick is scheduled rootcontextclean cleanpromise mean no tick is running so we should set the flag to rootcontext only when no tick is scheudled or running pr close ,fix
2498,compiler recover expression parsing in more malformed pipe case this commit handle the following case incomplete pipe in a pipe chain incomplete argument in a pipe chain incomplete argument provided to a pipe nested pipe the idea is to unconditionally recover on the presence of a pipe which should be okay because expression parsing can be independently between pipe pr close ,feat
2499,core mark trusted type a declaration angularinternal type definition for trusted type were added in when compiled using the closure compiler with certain optimization flag identifier from these type definition such a createpolicy are currently uglified and renamed to shorter string this cause angular application compiled in this way to fail to create a trusted type policy and fall bock to using string to fix this mark the internal trusted type definition a declaration using the declare keyword also convert type to interface for the reason explained in pr close ,fix
2500,form update ngmodel documentation this commit improves the ngmodel doc specifically clarifies purpose of the name attribute in ngmodeloptions clarifies on the interaction with a parent form or lack thereof fix inconsistency with analogy for twoway binding clean up some typo and extra wordiness clarifies language around common property add missing preposition to commit message format origin pr close ,docs
2501,devinfra update generated ngdev compiled output update to the new ngdev generated script pr close ,fix
2502,devinfra clean up output of caretaker check command suppress the logging of the git command executed during the caretaker check process pr close ,fix
2503,devinfra allow suppression of gitclients verbose logging some usage of the gitclient are better served by suppressing the logging of line that express what command are being run many usage of gitclient are contained within tool which are best served by keeping the output clean a mostly read action are occurring pr close ,feat
2504,devtools update angularframework ,build
2505,devtools update dependency typeschrome to ,build
2506,devtools update dependency typesjasmine to ,build
2507,devtools update typescript compiler ,build
2508,core add jessicajaniuk to pullapprove list this just add jessicajessica to the pullapproveyml file pr close ,docs
2509,router fix activationend link activationend go to activationend and not to activationstart section pr close ,docs
2510,docsinfra upgrade cli command doc source to bfa updating angularmaster from clibuildsmaster relevant change in commit range modified helpbuildjson pr close ,build
2511,zonejs update release doc in the current release doc we are using some shortcut of git command such a git ci git co so in this pr we are updating them to the normal command so these command will work event without these shortcut pr close ,docs
2512,compilercli track external component resource in resourceregistry in addition to the template mapping that already existed we want to also track the mapping for external style file we also store the tsexpression in the registry so external tool can look up a resource on a component by expression and avoid reading the value pr close ,refactor
2513,core add top runtime error code add runtimeerror and code enum to improve debugging experience refactor expressionchangedafterithasbeencheckederror to code ng refactor cyclicdependency to code ng refactor no provider to code ng refactor multiplecomponentsmatch to code ng refactor exportnotfound to code ng refactor pipenotfound to code ng refactor bindingnotknown to code ng refactor notknownelement to code ng pr close ,refactor
2514,form move common validatorsrelated logic to the abstractcontroldirective class this commit refactors validatorsrelated logic that is common across most of the directive a couple note on this refactoring common logic wa moved to the abstractcontroldirective class including validator and asyncvalidator getters syncasync validators are now composed in abstractcontroldirective class eagerly when validators are set with setvalidators and setasyncvalidators call and the result is stored in directive instance thus getters return cached version of validator fn this is needed to make sure composed validator function remains the same retains it identity for a given directive instance so that this function can be added and later removed from an instance of an abstractcontrolbased class like formcontrol preserving validator function is required to perform proper cleanup in followup pr of the abstractcontrolbased class when a directive is destroyed pr close ,refactor
2515,core update a typo in the comment of ngzoneeventcoalescing pr close ,docs
2516,compiler do not throw away render ast on error currently render parsetemplate throw away the parsed ast and return an empty list of html node if htmlr translation failed this is not preferrable in some context like that of a language service where we would like a wellformed ast even if it is ha error pr close ,fix
2517,zonejs update doc property to disable intersectionobserver update the property in this documentation to reflect the correct syntax for disabling intersectionobserver pr close ,docs
2518,compiler treat in attribute with no binding a static attribute currently in attribute are treated the same no matter if they have data binding or not this both generates more code since they have to go through the ɵɵinattributes instruction and prevents the translated attribute from being injected using the attribute decorator these change make it so that static translated attribute are treated in the same way a regular static attribute and all other in attribute go through the old code path fix pr close ,fix
2519,compilercli api to get directivespipes in scope this commit introduces two new method to the templatetypechecker which retrieve the directive and pipe that are in scope for a given component template the metadata returned by this api is minimal but enough to power autocompletion of selector and attribute in template pr close ,refactor
2520,compilercli cache symbol in the templatetypecheckerimpl this commit introduces caching of symbol produced by the template type checking infrastructure in the same way that autocompletion result are now cached pr close ,refactor
2521,compilercli move global completion into new completionengine this commit refactors the previously introduced getglobalcompletions api for the template typechecker in a couple way the return type is adjusted to use a map instead of an array and separate out the component context completion position this allows for a cleaner integration in the language service a new completionengine class is introduced which power autocompletion for a single component and can cache completion result the completionengine for each component is itself cached on the templatetypecheckerimpl and is invalidated when the component template is overridden or reset this refactoring simplifies the templatetypecheckerimpl class by extracting the autocompletion logic enables caching for better performance and prepares for the introduction of other autocompletion apis pr close ,refactor
2522,core remove expandostartindex workaround this commit remove a workaround to calculate the expandostartindex value that workaround wa needed because the expandostartindex wa updated previously so it pointed at the wrong location the problem wa fixed in pr and the workaround is no longer needed pr close ,refactor
2523,core do not error when ngdevmode is undeclared in production mode the ngdevmode global may not have been declared this is typically not a problem a optimizers should have removed all usage of the ngdevmode variable this doe however require the bundleroptimizer to have been configured in a certain way a to allow for ngdevmode guarded code to be removed a an example terser can be configured to remove the ngdevmode guarded code using the following configuration j const terseroptions compress globaldefs requireangularcompilercliglobaldefsforterser taken from if this is not done however the bundle should still work albeit with larger code size due to missed treeshaking opportunity this commit add a check for whether ngdevmode ha been declared a it is a toplevel statement that executes before ngdevmode ha been initialized fix pr close ,fix
2524,localize render placeholder type in extracted xliff file the previous viewengine extraction tooling added ctype and type attribute to xliff and translation file respectively this commit add this to the new localize based extraction tooling since the new extraction tooling work from the compiled output rather than having direct access to the template content the placeholder type must be inferred from the name of the placeholder this is considered reasonable since it already doe this to compute opening and closing tag placeholder fix pr close ,fix
2525,core remove unused in placeholder for projection runtime in logic doesnt distinguish ngcontent tag placeholder and regular element tag placeholder in in message so there is no need to have a special marker for projectionbased placeholder and element marker can be used instead pr close ,refactor
2526,form add section under validatorspattern detailing use of global and sticky flag gotcha due to how the global and sticky flag make regexp object stateful add section detailing how it is not recommended to use these flag for control validation pr close ,docs
2527,devinfra ensure hashbang is present in both published and local ngdevs the node hash bang wa incidentally removed in the published ngdev it should be included to allow for the command to be run without having to specify node pr close ,fix
2528,localize serialize all the message location to xliff previously only the first message for each id wa serialized which meant that additional message location information wa lost now all the message location are included in the serialized message fix pr close ,fix
2529,docsinfra ignore docbasepath when generating keywords for each document the generatekeywords dgeni processor automatically generates keywords for each document by extracting word from each string property of a doc object this commit add basepath to the list of ignored property so that it is not considered when generating keywords basepath mostly contains the path to some root directory such a homecirclecingpackages and a such it doe not contain useful keywords for example searching for circleci will match all api doc because it happens to be in the basepath pr close ,build
2530,docsinfra upgrade cli command doc source to ce updating angularmaster from clibuildsmaster relevant change in commit range modified helpgeneratejson pr close ,build
2531,zonejs remove global declaration close remove global declaration in zonets to avoid compile error when upgrade to typesnode v since the new type of global become nodejsglobal typeof globalthis and not compatible with zonets declaration pr close ,fix
2532,bazel only providing stamping information if the stamp flag is used previously the volatile status file wa always provided to the ngrollup action which prevented it from being cacheable remotely this change to only provide this file a an input when the stamp flag is used will allow for the action to be remotely cached and prevent needing to run the action on every ci run pr close ,fix
2533,compilercli support namespaced reference the compiler us a reference abstraction to refer to t node that it need to refer to from other part of the source such reference keep track of any identifier that represent the referenced node prior to this commit the compiler and specifically referenceemitter class assumed that the reference identifier are always free standing in other word a reference identifier would be an expression like foodirective in the expression class foodirective but in umdcommonjs source a reference can actually refer to an export declaration of the form exportsfoodirective in such case the foodirective identifier is not freestanding since it is part of a property access so the referenceemitter should take this into account when emitting an expression that refers to such a reference this commit change the localidentifierstrategy reference emitter so that if the node being referenced is not a declaration itself and is in the current file then it should be used directly rather than trying to use one of it identifier pr close ,refactor
2534,ngcc capture umdcommonjs inner class implementation node correctly previously umdcommonjs class inline declaration of the form t exportsfoo function function foo return foo were capturing the whole iife a the implementation rather than the inner class ie function foo in this case this caused the interpreter to break when it wa trying to access such an export since it would try to evaluate the iife rather than treating it a a class declaration pr close ,fix
2535,core update expected size for clihelloworldivyin integration test update the expected size for clihelloworldivyin after change to in pr close ,fix
2536,docsinfra upgrade cli command doc source to bcd updating angularmaster from clibuildsmaster relevant change in commit range modified helpupdatejson renamed helpextractinjson pr close ,build
2537,core group provider and circular error group together similar error message a part of error code effort providernotfound nodeinjector grouped into throwprovidernotfounderror cyclic dependency error grouped into throwcyclicdependencyerror pr close ,refactor
2538,compiler demonstrate recoverable parsing of unterminated pipe there is no actionable change in this commit other than to prettyprint eof token actual parsing of unterminated pipe is already supported this just add a test for it part of pr close ,test
2539,zonejs add zonejs extern test add back the zonejs extern file test for google closure compiler the test compiles a test program with and without zoneexterns with zoneexterns the code should keep the apis defined in the zoneexterns without zoneexterns the code will not keep these apis pr close ,test
2540,compiler support recovery of malformed property writes this feature is trivial to support since cbcaeededeefadabcff ha landed pr close ,feat
2541,devinfra create ngdev executable locally in the repo rather than running ngdev via tsnode going forward ngdev is generated and run locally via node additionally the generated file is tested on each commit to ensure that the local generated version stay up to date pr close ,refactor
2542,core improve tree shakability of in code tnodeinsertbeforeindex is only populated when in is present this change put all code which read insertbeforeindex behind a dynamically loaded function which are set only when in code executes pr close ,refactor
2543,core add documentation on debugging size regression failure pr close ,docs
2544,core replace expandoinstructions with hostbindingopcodes the expandoinstructions wa unnecessarily convoluted way to solve the problem of calling the hostbindingfunctions on component and directive the code wa complicated and hard to fallow the replacement is a simplified way to achieve the same thing which is also more efficient in space and speed pr close ,refactor
2545,core clean up circular dependency moved code from interfacesints which wa causing circular dependency pr close ,refactor
2546,core use x instead of x which can result in expandoinstructions us negative number by x this ha lead to issue in the paste a is processed a float rather than integer leading to deoptimization pr close ,refactor
2547,core consistent use of headeroffset in ɵɵ instruction only important headeroffset should only be refereed to the in the ɵɵ instruction to translate instruction index into lview index all other index should be in the lview index space and there should be no need to refer to headeroffset anywhere else pr close ,refactor
2548,core cleanup inicu data structure made opcodes array branded for safer type checking simplify inremoveopcodes encoding broke out icucreateopcodes from inmutableopcodes pr close ,refactor
2549,core rename commentmarker to icumarker commentmarker is a generic name which doe not make it obvious that it is used for icu use case icumarker is more explicit a it is used exclusively with icu pr close ,refactor
2550,core rename debugmatch to matchdebug for consistency previous function name debugmatch wa not consistent with other match function pr close ,refactor
2551,core create tnodetypetext to display full template in tview debug when looking at tview debug template only element node were displayed a tnodeelement wa used for both relement and rtext additionally no text wa stored in tnodevalue the result wa that the whole template could not be reconstructed this refactoring creates tnodetypetext and store the text value in tnodevalue the refactoring also change tnodetype into flaglike structure make it more efficient to check many different type at once pr close ,refactor
2552,core remove hack where we ticu wa stored in tagname remove casting where we stored ticu in tnodetagname which wa of type string rather than ticu renamed to tnodevalue in previous commit pr close ,refactor
2553,core change tnametagname to a more generic value name this is a prerequisite for making the tnodevalue a generic storage mechanism for attaching data to tnode pr close ,refactor
2554,core store icu state in lview rather than in tview before this refactoringfix the icu would store the current selected index in tview this is incorrect since if icu is in ngfor it will cause issue in some circumstance this refactoring properly move the state to lview close close close pr close ,fix
2555,core move inspects into in subfolder inspects file wa incorrectly in the render folder rather than renderin pr close ,refactor
2556,core change templatefixture to named parameter templatefixture used to have positional parameter and many test got hard to read a number of parameter reach with many of them null this refactoring change templatefixture to take named parameter which improves usability and readability in test pr close ,refactor
2557,platformserver resolve absolute url from baseurl this commit fix a bug when useabsoluteurl is set to true and serverplatformlocation infers the base url from the supplied url user should explicitly set the baseurl when they turn on useabsoluteurl breaking change if you use useabsoluteurl to setup platformserver you now need to also specify baseurl we are intentionally making this a breaking change in a minor release because if useabsoluteurl is set to true then the behavior of the application could be unpredictable resulting in issue that are hard to discover but could be affecting production environment pr close ,fix
2558,docsinfra upgrade cli command doc source to deacb updating angularmaster from clibuildsmaster relevant change in commit range modified helpbuildjson helpgeneratejson helpservejson helpupdatejson helpxinjson pr close ,build
2559,router incorrect signature for createurltree the type of the navigationextras param wa accidetally changed to the wrong symbol in these change revert it to the correct one pr close ,fix
2560,common update locale using new cldr data update the derived locale based on the new cldr data pr close ,fix
2561,docsinfra upgrade cli command doc source to eced updating angularmaster from clibuildsmaster relevant change in commit range modified helpdeployjson pr close ,build
2562,compiler remove support for typescript this commit remove typescript support breaking change typescript is no longer supported please upgrade to typescript pr close ,refactor
2563,devinfra prompt caretaker to confirm the merge branch on merge perviously it wa not immediately clear what branch a pr would merge into during the merge process this prompt allows for caretaker to understand and acknowledge where the pr will merge to pr close ,feat
2564,compilercli linker add babel plugin filelinker and initial partiallinkers this commit add the basic building block for linking partial declaration in particular it provides a generic filelinker class that delegate to a set of not yet implemented partiallinker class the babel plugin make use of this filelinker providing concrete class for asthost and astfactory that work with babel ast it can be created with the following code t const plugin createeslinkerplugin option pr close ,refactor
2565,docsinfra upgrade cli command doc source to aecbf updating angularmaster from clibuildsmaster relevant change in commit range modified helpgeneratejson helpnewjson pr close ,build
2566,zonejs test zonejs package with tgz zonejs release an empty bundle and now the npmpackage test all target bazel rule npmpackage but not npmpackagepack and these two rule may generate different result for example zonejs s issue is packagejson define file array which make the bundle only include the file in the file array so this pr install the zonejs package from the archive generated from npmpackagepack rule pr close ,test
2567,devtools update dependency typeschrome to ,build
2568,devtools update angularframework ,build
2569,docsinfra fix stricttemplates failure in accessibility doc example fix stricttemplates failure in accessibility doc example pr close ,refactor
2570,languageservice make project service a singleton constructing a project service is expensive making it a singleton could speed up test considerably on my macbook pro test execution went from s to s improvement pr close ,test
2571,languageservice wrap setup in beforeall to speed up fit test test harness setup is expensive in the order of second we could speed up fit test considerably if setup is wrapped in beforeall to avoid running it unnecessarily pr close ,test
2572,languageservice implement go to definition for style and template url this commit enables the ivy language service to go to definition of a templateurl or styleurl which would jump to the templatestyle file itself pr close ,feat
2573,languageservice move some util function to common these function will be useful to the ivy language service a well to provide go to definition functionality for template and style url pr close ,refactor
2574,docsinfra add a tool to create new example this tool can be run from anywhere in the aio folder a sh yarn createexample examplename it will create some basic scaffold file to get the example started after creation the developer should then use yarn boilerplateadd or similar to ensure that the example can be run and tested you can optionally provide an absolute path to a preexisting cli project and it will copy over appropriate file ignoring boilerplate to the newly created example sh yarn createexample examplename pathtoothercliproject fix pr close ,build
2575,core convert legacysanitized value to trusted type use the bypassspecific trusted type policy for automatically upgrade any value from custom sanitizers or the bypasssecuritytrust function to a trusted type update test to reflect the new behavior pr close ,fix
2576,core create a trusted type policy for bypass conversion when an application us a custom sanitizer or one of the bypasssecuritytrust function angular ha no way of knowing whether they are implemented in a secure way it doesnt even know if theyre introduced by the application or by a shady thirdparty dependency thus using angulars main trusted type policy to bless value coming from these two source would undermine the security that trusted type brings instead introduce a trusted type policy called angularunsafebypass specifically for blessing value from these source this allows an application to enforce trusted type even if their application us a custom sanitizer or the bypasssecuritytrust function knowing that compromise to either of these two source may lead to arbitrary script execution in the future angular will provide a way to implement custom sanitizers in a manner that make better use of trusted type pr close ,feat
2577,core make html sanitizer return trustedhtml make angulars html sanitizer return a trustedhtml a it output is trusted not to cause x vulnerability when used in a context where a browser may parse and evaluate html also update test to reflect the new behaviour pr close ,refactor
2578,core allow returning trusted type from sanitizerfn sanitizers in angular currently return string which will then eventually make their way down to the dom eg a the value of an attribute or property this may cause a trusted type violation a a step towards fixing that make it possible to return trusted type from the sanitizerfn interface which represents the internal sanitization pipeline dom renderer interface are also updated to reflect the fact that setattribute and setattributens must be able to accept trusted type pr close ,feat
2579,compiler use trusted type policy in jit compiler the jit compiler us the function constructor to compile arbitrary string into executable code at runtime which cause trusted type violation to address this jitevaluator is instead made to use the trusted type compatible function constructor introduced by angulars trusted type policy for jit pr close ,fix
2580,core create a trusted type policy for jit compiler introduce a trusted type policy for use by angulars jit compiler named angularunsafejit a the compiler turn arbitrary untrusted string into executable code at runtime using angulars main trusted type policy doe not seem appropriate unless it can be ensured that the provided string are indeed trusted until then this jit policy can be allowed by application that rely on the jit compiler but want to enforce trusted type knowing that a compromise of the jit compiler can lead to arbitrary script execution in particular this is required for enabling trusted type in angular unit test since they make use of the jit compiler also export the internal trusted type definition from the core package so that they can be used in the compiler package pr close ,feat
2581,core guard reading of global ngdevmode for undefined when reading globals such a ngdevmode the read should be guarded by typeof ngdevmode otherwise it will throw if not defined in use strict mode pr close ,fix
2582,core renames checknochangesmode to be clearer getchecknochangesmode wa discovered to be unclear a to the purpose of it this refactor is a simple renaming to make it much clearer what that method and property doe pr close ,refactor
2583,languageservice return directive defs when input name is part of selector when an input name is part of the directive selector it would be good to return the directive a well when performing go to definition or go to type definition a an example this would allow go to type definition for ngif to take the user to the ngif directive go to type definition would otherwise return no result because the input is a generic type this would also be the case for all primitive input type pr close ,refactor
2584,docsinfra upgrade cli command doc source to ad updating angularmaster from clibuildsmaster relevant change in commit range modified helpgeneratejson pr close ,build
2585,core fix typo in the template statement guide pr close ,docs
2586,devinfra remove branch created for g comparison previously temporary branch were created to be used for comparison to the g branch instead comparison are now done using the branch latest shas pr close ,refactor
2587,compiler promote constant in template to trusted type angular treat constant value of attribute and property in template a secure this mean that these value are not sanitized and are instead passed directly to the corresponding setattribute or setproperty function in case where the given attribute or property is securitysensitive this cause a trusted type violation to address this function for promoting constant string to each of the three trusted type are introduced to angulars private codegen api the compiler is updated to wrap constant string with call to these function a appropriate when constructing the consts array this is only done for securitysensitive attribute and property a classified by angulars domsecurityschema pr close ,fix
2588,zonejs zonejs should output esm format for fesm bundle zonejs support angular package format since but the fesm bundle are not esm format it still use umd bundle which is not correct in this pr a new esm bundle output is added in rollupbundle rule under tool so zonejs can use the new rule to generate esm bundle pr close ,build
2589,ngcc ensure that inline export can be interpreted correctly previously inline export of the form exportsfoo implementation were being interpreted by the ngtsc partialinterpeter a reference object this is not what is desired since it prevents the value of the export from being unpacked such a when analyzing ngmodule declaration exportsdirectives directive directive ngimportdeclarations exportsdirectives class appmodule in this example the interpreter would think that exportsdirectives wa a reference rather than an array that need to be unpacked this bug wa picked up by the ngccvalidation repository see and pr close ,fix
2590,compilercli visit inline declaration with implementation differently some inline declaration are of the form exportsname implementation in this case the declaration node is exportsname when interpreting such inline declaration we actually want to visit the implementation expression rather than visiting the declaration node this commit add implementation tsexpression to the inlinedeclaration type and update the interpreter to visit these expression a described above pr close ,refactor
2591,element simplify code after ie support removal support for ie is being removed in v pr removed some code that wa no longer needed now that there are no longer multiple codepaths which wa previously needed for ie support this commit simplifies the code further for example to avoid unnecessary function call and to avoid iterating over a component input multiple time pr close ,refactor
2592,languageservice ivy create compiler only when program change this commit fix a bug in which a new ivy compiler is created every time language service receives a new request this is not needed if the tsprogram ha not changed a new class compilerfactory is created to manage compiler lifecycle and keep track of template change so that it know when to override them with this change we no longer need the method getmodifiedresourcefile on the adapter instead we call overridecomponenttemplate on the template type checker this commit also change the incremental build strategy from patchedincrementalbuildstrategy to trackedincrementalbuildstrategy pr close ,fix
2593,core use relative import path in micro benchmark this commit update micro benchmark to use relative path to ivy runtime code keeping absolute location caused issue with build optimizer that retained certain symbol and they appeared in the output twice pr close ,refactor
2594,core add micro benchmark for in scenario this commit add micro benchmark to run micro benchmark for inrelated logic in the following scenario in static attribute in attribute with interpolation in block of static text in block of text interpolation simple icu nested icu first scenario also have baseline scenario nonin so that we can compare in perf with nonin logic pr close ,test
2595,core add initialnavigation schematic add a schematic to update user to the new v initialnavigation option for routermodule this replaces the deprecatedremoved true false legacydisabled and legacyenabled option with the newer enabledblocking and enablednonblocking option pr close ,feat
2596,router add new initialnavigation option to replace legacy a of angular v four of the option for extraoptionsinitialnavigation have been deprecated we intend to remove them in v the final state for these option is enabledblocking enablednonblocking and disabled we plan to remove and deprecate the remaining option in the next two major release new option enablednonblocking same a legacyenabled enabledblocking same a enabled breaking change the initialnavigation property for the option in routermoduleforroot no longer support legacydisabled legacyenabled true or false a valid value legacyenabled the old default is instead enablednonblocking enabled is deprecated a a valid value for the routermoduleforroot initialnavigation option enabledblocking ha been introduced to replace it pr close ,feat
2597,router create schematic for preservequeryparams create a schematic for migrating preservequeryparams to use queryparamshandler instead pr close ,fix
2598,router remove preservequeryparams symbol remove preservequeryparams a it wa deprecated for removal in v use queryparamshandlingpreserve instead breaking change preservequeryparams ha been removed use queryparamshandlingpreserve instead pr close ,fix
2599,ngcc do not rescan program source file when referenced from multiple root file when ngcc is configured to run with the useprogramdependencies flag a is the case in the cli asynchronous processing it will scan all source file in the program starting from the program root file a configured in the tsconfig each individual root file could potentially rescan file that had already been scanned for an earlier root file causing a severe performance penalty if the number of root file is large this would be the case if glob pattern are used in the include specification of a tsconfig file this commit avoids the performance penalty by keeping track of the file that have been scanned across all root file such that no source file is scanned multiple time fix pr close ,perf
2600,core use trusted type policy in namedarraytype address a trusted type violation that occurs in createnamedarraytype during development mode instead of passing string directly to new function use the trusted type compatible function constructor exposed by the trusted type policy pr close ,fix
2601,core add trusted type workaround for function constructor chrome currently doe not support passing trustedscript to the function constructor and instead fails with a trusted type violation when called a the function constructor is used in a handful of place within angular such a in the jit compiler and namedarraytype the workaround proposed on the following page is implemented to be precise it construct a string representing an anonymous function in a way that is equivalent to what the function constructor doe promotes it to a trustedscript and then call eval to facilitate backwards compatibility new function is used directly in environment that do not support trusted type pr close ,feat
2602,devinfra adjust caretaker query the current initial triage doe not include pr this includes them by removing the issue filter the merge assistance label is often applied to pr that do not have statussuccess caretaker should handle these a well pr close ,refactor
2603,zonejs rename several internal apis in fake async zone spec in fakeasynczonespec there are several variable and apis to identify different time and the name are confusing in this commit they are renamed for more clear understanding currentticktime the tick millis advanced getfakebasesystemtime return the fake base system time setfakebasesystemtime set the fake base system time getrealsystemtime get the underlying native system time pr close ,refactor
2604,zonejs jest getrealsystemtime should return native time jestgetrealsystemtime should return native datenow the current implemenation return the wrong value which is the fixed number pr close ,fix
2605,core remove ie reference from browserslist file this commit update browserslist file to exclude ie reference pr close ,test
2606,core remove iesepcific logic from setclassmetadata function this commit simplifies the logic in the setclassmetadata function to avoid the code needed to support ie and ie pr close ,refactor
2607,element remove code to support ie since support for ie and ie browser is removed in v the code that wa added to support these browser is no longer needed pr close ,refactor
2608,core remove ngprovdeffallback needed for ie only this commit remove a workaround previously used for ie and to identify whether injectabledef wa defined on a given class instance since support for ie and is removed this fallback is no longer needed pr close ,refactor
2609,platformbrowser remove ie and ie check from test this commit remove ie and ie check from the browser detection spec also unblocks test that were previously disabled due to issue in ie pr close ,test
2610,core remove code specific to ie and ie this commit update core test and remove the code needed to support ie and ie only the code is no longer needed since ie and ie support is removed in v pr close ,test
2611,core use trusted type policy in inert dom builder when angular is used in an environment that enforces trusted type the inert dom builder raise a trusted type violation due to it use of domparser and elementinnerhtml with plain string since it is only used internally in the html sanitizer and for in icu parsing we update it to use angulars trusted type policy to promote the provided html to trustedhtml pr close ,fix
2612,zonejs update changelog to add jest usefaketimers feature since we are merged pr about integration of jestusefaketimers with fakeasync so the new release should also include this feature this pr updated the zonejs changelog pr close ,docs
2613,devtools update angularframework ,build
2614,core create internal trusted type module add a module that provides a trusted type policy for use internally by angular the policy is created lazily and stored in a modulelocal variable for now the module doe not allow configuring custom policy or policy name and instead creates it own policy with angular a a fixed policy name this is to more easily support treeshakability helper function for unsafely converting string to each of the three trusted type are also introduced with documentation that make it clear that their use requires a security review when trusted type are not available these helper function fall back to returning string pr close ,feat
2615,core depend on type definition for trusted type to facilitate the upcoming trusted type support being added to angular add the typescript type definition for the trusted type browser api a a dependency in the root packagejson and typesdts since theyre needed for compiling the angular package pr close ,feat
2616,core add automated migration to replace async with waitforasync add a migration that find all import and call to the deprecated async function from angularcoretesting and replaces them with waitforasync these change also move a bit of code out of the renderer migration so that it can be reused pr close ,feat
2617,languageservice allow go to definition for directive in ivy for directivescomponents it would be generally more appropriate for go to type definition to be the function which navigates to the class definition however for a better user experience we should do this for go to definition a well pr close ,refactor
2618,devtools update angularcli ,build
2619,router allow undefined input on routerlink this make it coherent with typing of routercreateurltree to which those input are directly forwarded to and hence it allow to pas undefined null or a value to the routerlink directive breaking change in most case this should not break but if you were accessing the value of queryparams fragment or queryparamshandling you might need to relax the typing to also accept undefined and null signedoffby adrien crivelli adriencrivelligmailcom pr close ,fix
2620,devinfra detect all commit message keywords that can close a pr previously the iscommitclosingpullrequest method used in ngdev release to detect whether a commit is closing a pr based on keywords found in the commit message wa only able to detect a subset of the keywords supported by github this is fine currently because the merge script add pr close xyz when merging a pr but it might break in the future this commit make the code more robust by ensuring the method can detect all keywords supported by github for automatically closing a pr based on a commit message original discussion pr close ,fix
2621,devinfra fix error message in invokesetnpmdistcommand function in the commit message string wa accidentally changed from a template literal to a regular string literal this prevented the npmdisttag variable from being correctly displayed in the error message this commit fix it by switching it back to a template literal note this wa pointed out in but the pr wa accidentally merged before the review feedback had been addressed pr close ,fix
2622,devinfra correctly check for commit that close pr the ngdev release publish command need to check whether a commit closed a pull request this is implemented via checking the commit message for specific closing keywords referencing the pull request number the regex used previously failed to correctly ensure that the specified pull request wa referenced for example it would allow to also match for this commit fix the regex pr close ,fix
2623,devinfra several code style and typo fix this commit address comment from my review on pr which wa merged without comment addressed the change are mostly related to code style and typo pr close ,refactor
2624,animation do not assign to innerhtml this should not change behavior but it prevents falsepositive warning in various static analysis tool including tool used internally at google pr close ,refactor
2625,devtools update angularcli ,build
2626,devtools allow user to click on component property of type htmlelement to inspect the element in the browser ,feat
2627,compilercli ensure isnamed helper check name is identity previously the nodename property wa only checked to ensure it wa defined but that meant that it wa a tsbindingname which also includes tsbindingpattern which we do not support but these helper method were forcefully casting the value to tsidentifier now we also check that the nodename is actually an tsidentifier pr close ,refactor
2628,compilercli support namespaced query type in directive previously directive query that relied upon a namespaced type t query mcontent new corecontentchildtest caused an error to be thrown this is now supported pr close ,fix
2629,ngcc support inline export declaration in umd file previously any declaration that were defined inline were not recognised by the umdreflectionhost for example the following syntax wa completely unrecognized t var foo exportsfoo foo function function foo return foo exportsfoo foo decoratesomedecorator foo such inline class were ignored and not processed by ngcc this lack of processing led to failure in ivy application that relied on umd format of library such a syncfusionejangularuicomponents now all known inline umd export are recognized and processed accordingly fix pr close ,fix
2630,ngcc use isnameddeclaration helper to simplify test previously these test were checking multiple specific expression type the new helper function is more general and will also support propertyaccessexpression node for inlinedeclaration type pr close ,test
2631,compilercli implement declarationnode node type previously the concretedeclaration and inlinedeclaration had different property for the underlying node type and the inlinedeclaration did not store a value that represented it declaration it turn out that a natural declaration node for an inline type is the expression for example in umdcommonjs this would be the exportsname property access node so this expression is now used for the node of inlinedeclaration type and the expression property is dropped to support this the codebase ha been refactored to use a new declarationnode type which is a union of tsdeclarationtsexpression instead of tsdeclaration throughout pr close ,refactor
2632,ngcc use isnamedfunctiondeclaration in umd test this make these test more resilient to change in the test code structure for example switching from var someclass implementation exportssomeclass someclass to exportssomeclass implementation pr close ,test
2633,compilercli make the getdeclaration utility more resilient to code format previously getdeclaration would only return the first node that matched the name passed in and then assert the predicate on this single node it also only considered a subset of possible declaration type that we might care about now the function will parse the whole tree collecting an array of all the node that match the name it then filter this array based on the predicate and only error if the filtered array is empty this make this function much more resilient to more esoteric code format such a umd pr close ,test
2634,ngcc simplify and break up e function with helper the protected helper function can then be overridden by subclass of the esmreflectionhost pr close ,refactor
2635,ngcc simplify and rename getclassdeclarationfrominnerdeclaration the new function doe not try to restrict the kind of ast node that it find leaving that to the caller this will make it more resuable in the umd reflection host pr close ,refactor
2636,ngcc handle alias in umd export declaration sometimes umd export appear in the following form exportsmyclass alias alias declaration previously the declaration of the export would have been captured a alias alias declaration which the partialinterpreter would have failed on since it can not handle assignment now we skip over these alias capturing only the declaration expression fix pr close ,fix
2637,ngcc map export to the current module in umd file umd file export value by assigning them to an export variable when evaluating expression ngcc wa failing to cope with expression like exportsmycomponent this commit fix the umdreflectionhostgetdeclarationofidentifier method to map the export variable to the current source file pr close ,fix
2638,ngcc fix incorrect test setup the simpleclassfile contained a childclass that had an internal alias implementation and extended a superclass base class the call to extends wa using the wrong argument for the child class pr close ,test
2639,compilercli move map creation to avoid unnecessary work if the symbol for the given node doe not exist then there is no point in creating the map pr close ,refactor
2640,ngcc rename exportstatement to exportsstatement this clarifies that this is specifically about statement of the form exportsname declaration rather than a general export statement such a export class classname pr close ,refactor
2641,ngcc remove unused import the isassignment and isassignmentstatement are not used in this file pr close ,refactor
2642,compilercli remove unnecessary constraint on isdeclarationreference there is no need to check that the refnode is of any particular type because immediately after this check the entry is tested to see if it pass isclassdeclarationreference the only difference is that the error that is reported is slightly different in the case that it is a ref but not one of the t node type previously value at position idx in the ngmodulearrayname of classname is not a reference now value at position idx in the ngmodulearrayname of classname is not a class arguably the previous message wa wrong since this entry is a reference but is not a class pr close ,refactor
2643,compilercli improve error message if a unit test is bad the message now also report the name of the predicate function that failed pr close ,test
2644,zonejs do not run test on ie and ie since ie and ie were deprecated and support is removed in v this commit update zonejs configs to avoid running test in these browser pr close ,test
2645,docsinfra support passing args to ng serve via serveandsync when working on the doc it is helpful to run a local instance of the angulario app and run script that watch both the doc content and the app build artifact to automatically update the running instance on change typically this is achieved via the start and docswatch npm script a a convenience one can run the serveandsync script which run both in one terminal previously it wa not possible to pas argument to ng nerve which is what the start script run under the hood when running it via serveandsync this commit add support for passing any argument passed to serveandsync through to the start script this can be useful for thing like specifying a custom host or port pr close ,build
2646,docsinfra upgrade cli command doc source to db updating angularmaster from clibuildsmaster relevant change in commit range modified helpnewjson pr close ,build
2647,languageservice add gettypedefinitionatposition go to type definition this commit add the implementation for providing go to type definition functionality in the ivy language service pr close ,feat
2648,element detect matchesselector prototype without iife although in ssr we patch the global prototype with dom globals like element and node this patch doe not occur before the match function is called in angular element this is similar to the behavior in angularupgrade fix pr close ,fix
2649,docsinfra upgrade cli command doc source to ef updating angularmaster from clibuildsmaster relevant change in commit range modified helpgeneratejson helpnewjson pr close ,build
2650,devinfra add github link to caretaker check this commit add link to the prissue for query in the caretaker check pr close ,feat
2651,compiler incorrectly encapsulating import containing colon and semicolon at a high level the current shadow dom shim logic work by escaping the content of a cs rule eg div color red becomes div block using a regex to parse out thing like the selector and the rule body and then readding the content after the selector ha been modified the problem is that the regex ha to be very broad in order capture all of the different use case which can cause it to match string suffixed with a semicolon in some place where it shouldnt like this url from google font most of the time this is fine because the logic that escape the rule content to block will have converted it to something that wont be matched by the regex however it break down for rule like import which dont have a body but can still have quoted content with character that can match the regex these change resolve the issue by making a second pas over the escaped string and replacing all of the remaining quoted content with quoted before parsing it with the regex once everything ha been processed we make a final pas where we restore the quoted content in a previous iteration of this pr i went with a shorter approach which narrowed down the regex so that it doesnt capture rule without a body it fixed the issue but it also ended up breaking some of the more contrived unit test case i decided not to pursue it further because we wouldve ended up with a very long and brittle regex that likely wouldve broken in even weirder way fix pr close ,fix
2652,core remove viewencapsulationnative remove viewencapsulationnative which ha been deprecated for several major version breaking change viewencapsulationnative ha been removed use viewencapsulationshadowdom instead existing usage will be updated automatically by ng update pr close ,feat
2653,core add automated migration to replace viewencapsulationnative add an automated migration that replaces any usage of the deprecated viewencapsulationnative with viewencapsulationshadowdom pr close ,feat
2654,compilercli type checking of expression within icu expression within icu expression in template were not previously typechecked a they were skipped while traversing the element within a template this commit enables type checking of these expression by actually visiting the expression breaking change expression within icu are now typechecked again fixing a regression in ivy this may cause compilation failure if error are found in expression that appear within an icu please correct these expression to resolve the typecheck error fix pr close ,fix
2655,languageservice test icu expression in hybrid visitor this commit add test for locating expression within icu expression pr close ,test
2656,compiler associate accurate source span with icu expression prior to this change expression within icu would have a source span corresponding with the whole icu this commit narrow down the source span of these expression to the exact location in the source file a a prerequisite for reporting type check error within these expression pr close ,refactor
2657,core migrate relative link resolution with single quote this is a roll forward of using tscreateidentifierlegacy a a crossversion compatible way of making a single quoted string literal migrated code now us single quote which is in line with the default linting option so there is no lint error after migration pr close ,fix
2658,languageservice ivy getsemanticdiagnostics for external template this pr enables getsemanticdiagnostics to be called on external template several change are needed to land this feature the adapter need to implement two additional method a readresource load the template from snapshot instead of reading from disk b getmodifiedresourcefiles inform the compiler that external template have changed so that the loader could invalidate it internal cache create scriptinfo for external template in mockhost prior to this mockhost only track change in typescript file now it need to create scriptinfo for external template a well for in order to make sure we dont reload the template if it hasnt changed we need to keep track of it version since the complexity ha increased the adapter is refactored into it own class pr close ,feat
2659,languageservice add module name to directive quick info this commit add the module name a the containername to the quick info for directive pr close ,feat
2660,docsinfra add short url for strict mode guide with this change we add a short url to strict mode guide angulariostrict angularioguidestrictmode this is important because of two reason reduce the clutter in the terminal when we include the strict mode guide url in a prompt easiler to share in conference slide etc pr close ,feat
2661,compilercli temporarily disable integrationtest temporarily disable the packagescompilercliintegrationtestintegrationtest target while continuing to investigate it unknown failure pr close ,test
2662,compilercli wrap rh of property write in parens the right need to be wrapped in parens or we can not accurately match it span to just the rh for example the span in e event is ambiguous it could refer to either the whole binary expression or just the rh we should instead generate e event so we know the span match rh this is specifically needed for the templatetypecheckerlanguage service when mapping template position to item in the tcb pr close ,refactor
2663,docsinfra render optional decorator option with a decorator api page list all their available option in an overview table and also in a detailed view now the rendered syntax of each option will show a after the name if the option is not required this is inline with how class and interface member are rendered pr close ,build
2664,common remove i ignore case regex flag where it is not needed it is not necessary to set ignorecase flag when the regex pattern doe not contain alphabetic character pr close ,refactor
2665,devtools update angularframework ,build
2666,devtools update angularcli ,build
2667,form add migration for abstractcontrolparent access a of the type of abstractcontrolparent can be null which can cause compilation error in existing apps these change add a migration that will append nonnull assertion to existing unsafe access before consolelogcontrolparentvalue after consolelogcontrolparentvalue the migration also try it best to avoid case where the nonnull assertion arent necessary eg if the parent wa null checked already pr close ,feat
2668,compilercli add a global autocompletion api this commit introduces a new api for the templatetypechecker which allows for autocompletion in a global expression context for example in a new interpolation expression such a this api return instance of the type globalcompletion which can represent either a completion result from the template component context or a declaration such a a local reference or template variable the language service will use this api to implement autocompletion within template pr close ,refactor
2669,compiler add getentitiesintemplatescope to template binder the template binding api in angularcompiler expose information about a template that is synthesized from the template structure and it scope associated directive and pipe this commit introduces a new api getentitiesintemplatescope which accepts a template object or null to indicate the root template and return all reference and variable node that are visible at that level of the template including those declared in parent template this api is needed by the template typechecker to support autocompletion apis for the language service pr close ,refactor
2670,languageservice add getdefinitionandboundspan go to definition this commit add the implementation for providing go to definition functionality in the ivy language service pr close ,feat
2671,compilercli attachcomments now expects a defined leadingcomments array previously the value passed to astfactoryattachcomments could be undefined which is counterintuitive since why attach something that doesnt exist now it expects there to be a defined array further it no longer return a statement both these aspect of the interface were designed to make the usage simpler but ha the result of complicating the implemenation the expressiontranslatorvisitor now ha a helper function attachcomments to handle leadingcomments being undefined and also returning the statement this keep the usage in the translator simple while ensuring that the astfactory api is not influenced by how it is used pr close ,refactor
2672,languageservice ivy hybrid visitor should not locate let keyword fixed a boolean logic error that prevented hybrid visitor from returning undefined when a variable doe not have value and cursor is not in the key span pr close ,fix
2673,form improve type of directive constructor argument prior to this change the validators and asyncvalidators field of a few form directive were typed a any this commit update the type and make them consistent for all directive in the form package breaking change directive in the angularforms package used to have any a a type of validators and asyncvalidators argument in constructor now these argument are properly typed so if your code relies on directive constructor type it may require some update to improve type safety pr close ,fix
2674,common add boolean to valid json for testing boolean is a valid json but at present we can not test http request using boolean added support for boolean request fix pr close ,fix
2675,router properly assign extraoptions to router in routertestingmodule previously routertestingmodule only assigned two of the option within extraoptions to the router now it assigns the same option a routermodule doe with the exception of enabletracing via a new shared function assignextraoptionstorouter fix pr close ,fix
2676,devtools fix linting error ,style
2677,devtools remove mutationobserver and rename observer to execution hook ,refactor
2678,languageservice extract common method from ve and ivy to new package rather than having the ivy implementation add the ve code to the deps list create a new common package that both ivy and ve depend on this will make it more straightforward in the future to remove the ve code completely pr close ,refactor
2679,devtools lview parsing when trying to get data from an option fix rangleangulardevtools ,fix
2680,compiler add ngmodule to directive symbol this is needed so that the language service can provide the module name in the quick info for a directivecomponent to accomplish this the compiler localmodulescope is provided to the templatetypecheckerimpl this will also allow the templatetypechecker to provide more completion in the future giving it a way to determine all the directivespipesetc available to a template pr close ,refactor
2681,compiler add test for parsing of malformed property read the expression parser already ha support for recovering on malformed property read but did not have test describing the recovered ast in such case this commit add test to demonstrate such case in particular the recovered ast is a full propertyread but with an empty property name this is likely the most preferred option a it doe not constrain consumer of the ast to what the property name should look like furthermore we can not mark the property name a empty in any other way eg an emptyexpr because the property name a of present is a string field rather than an ast itself note that token past a malformed property read are not preserved in the ast for example in foo is not preserved in the ast this is because the extra token do not belong to the singular expression created by the property read and there is not a meaningful way to interpret a secondary expression in a single parsed expression part of pr close ,test
2682,zonejs add jest faketimers support close support jest faketimers apis integration with fakeasync after enable this feature calling jestusefaketimers will make all test run into fakeasync automatically beforeeach jestusefaketimersmodern aftereach jestuserealtimers testshould run into fakeasync automatically const fakeasynczonespec zonecurrentgetfakeasynctestzonespec expectfakeasynczonespectobetruthy also there are mapping between jest and zone apis jestrunallticks will call flushmicrotasks jestrunalltimers will call flush jestadvancetimersbytime will call tick jestrunonlypendingtimers will call flushonlypendingtimers jestadvancetimerstonexttimer will call ticktonext jestclearalltimers will call removealltimers jestgettimercount will call gettimercount pr close ,feat
2683,common update doc for httpclient method pr close ,docs
2684,devinfra show ci status of all active release train a part of the ngdev caretaker check command show the status of the lastest circleci run for each active release train pr close ,feat
2685,devtools update angularcli ,build
2686,devtools update angularframework ,build
2687,form include null in parent of abstract control it perfectly valid for an abstract control not to have a defined parent yet previously the type were asserting that abstractcontrolparent is not a null value this change correctly reflects the runtime behavior through the type breaking change type of abstractformcontrolparent now includes null null is now included in the type of parent if you dont already have a check for this case the typescript compiler might compain a v migration exists which add the notnull assertion operator where necessary in an unlikely case your code wa testing the parnet against undefined with sitrct equality youll need to change this to null instead since the parent is not explicily initialized with null instead of being left undefined fix pr close ,fix
2688,upgrade expand upon change detection implication for downgraded component pr close ,docs
2689,compiler iteratively parse interpolation this patch refactors the interpolation parser to do so iteratively rather than using a regex doing so prepares u for supporting granular recovery on poorlyformed interpolation for example when an interpolation doe not terminate or is not terminated properly part of pr close ,refactor
2690,compilercli support getting resource dependency for a source file the compiler maintains an internal dependency graph of all resource dependency for application source file this information can be useful for tool that integrate the compiler and need to support file watching this change add a getresourcedependencies method to the ngcompiler class that allows compiler integration to access resource dependency of file within the compilation pr close ,feat
2691,compiler recover on malformed keyed read and keyed writes this patch add support for recovering wellformed and nearcomplete asts for semantically malformed keyed read and keyed writes see the added test for detail on the type of semantics we can now recover in particular notice that some assumption are made about the form of a keyed readwrite intended by a user for example in the malformed expression a we assume that the user meant to write a binary expression for the key of a and assign that key the value in particular we now parse this a a empty expression there are some different interpretation that can be made here but i think this is reasonable the actual change in the parser code are fairly minimal a nice surprise the biggest addition is a writecontext that mark whether the operator can serve a a recovery point after error detection part of pr close ,feat
2692,languageservice add quick info for inline template in ivy add implementation for getquickinfoatposition to the ivy language service which now return tsquickinfo for inline template pr close ,feat
2693,docsinfra better distinguish wrapped heading from other entry in toc previously when a heading wa longer than the table of content toc width and it had to be wrapped into multiple line it wa hard to distinguish the subsequent line from other toc entry ie other heading this commit make it easier to visually distinguish wrapped heading line from other heading by reducing the spacing between wrapped line of the same heading making it more obvious that they belong together pr close ,fix
2694,devtools update angularframework ,build
2695,devinfra correct matching logic for g comparison corrects the matching logic for g comparison check previously more match were found than were correct pr close ,fix
2696,devinfra add a command to verify ngbot yaml config syntax this commit add a new command to the ngdev suite which verifies that the ngbot yaml config is correct it also add this command to the lint circleci job so that we execute this check while running ci this should help prevent syntax error similar to the one introduced in pr close ,feat
2697,docsinfra upgrade cli command doc source to fbd updating angularmaster from clibuildsmaster relevant change in commit range modified helpgeneratejson helpnewjson pr close ,build
2698,core use single quote for relative link resolution migration to align with style guide this update the migration to align with the style guide and work with default lint rule it avoids a lint error on newly migrated project and fix a test in the cli repo pr close ,fix
2699,docsinfra leave todo comment for aligning tslint with cli this commit add some todo comment in tslintjson regardling rule that need to be enabled or removed to more closely align tslintjson with the one generated by the latest angular cli for new apps updating these rule generates a lot of linting failure so fixing them is outside the scope of this pr pr close ,refactor
2700,docsinfra remove the onlyarrowfunctions tslint rule to align with cli this commit remove the onlyarrowfunctions false tslint rule to more closely align tslintjson with the one generated by the latest angular cli for new apps pr close ,build
2701,docsinfra update the objectliteralkeyquotes tslint rule to align with cli this commit update the objectliteralkeyquotes tslint rule to more closely align tslintjson with the one generated by the latest angular cli for new apps pr close ,build
2702,docsinfra remove the nostringliteral tslint rule to align with cli this commit remove the nostringliteral false tslint rule to more closely align tslintjson with the one generated by the latest angular cli for new apps pr close ,build
2703,docsinfra enable the noredundantjsdoc tslint rule to align with cli this commit enables the noredundantjsdoc tslint rule to more closely align tslintjson with the one generated by the latest angular cli for new apps pr close ,build
2704,docsinfra more closely align tslintjson with cli this commit reorganizes the tslintjson configuration file to more closely align with the one generated by the latest angular cli for new apps this make it easier to see the difference with new cli version in the future and keep our tslintjson uptodate while keeping our own rule note this commit only reorder rule and remove redundant one it doe not change the linting behavior pr close ,refactor
2705,compilercli implement babelastfactory and asthosts this commit add the asthost interface along with implementation for both babel and t it also implement the babel vesion of the astfactory interface along with a linker specific implementation of the importgenerator interface these class will be used by the new nglinker to transform prelinked library code using a babel plugin pr close ,refactor
2706,compilercli function declaration must have name the astfactorycreatefunctiondeclaration wa allowing null to be passed a the function name value this is not actually possible since function declaration must always have a name pr close ,refactor
2707,compilercli make typescriptastfactoryspec test resilient to lineendings the test were assuming that newlines were n character but this is not the case on window this wa fixed in but a better solution is to configure the t printer to always use n character for newlines pr close ,test
2708,devinfra run git fetch in quiet mode run git fetch with the q flag during fetch while comparing the master and g branch pr close ,fix
2709,devtools update angularcli ,build
2710,devtools update angularframework ,build
2711,router update getrouteguards to check if the context outlet is activated in certain circumstance error during component constructor the router outlet may not be activated before redirecting to a new route if the new route requires running guard and resolvers the current logic will throw when accessing outletcomponent due to an isactivated check within the property getter this update brings the logic inline with deactivaterouteranditschildren namely checking outletisactivated before trying to access outletcomponent fix pr close ,fix
2712,localize avoid freestanding filesystem function these free standing function rely upon the current filesystem but it is safer to explicitly pas the filesystem into function or class that need it fix pr close ,refactor
2713,compilercli avoid freestanding filesystem function these free standing function rely upon the current filesystem but it is safer to explicitly pas the filesystem into function or class that need it pr close ,refactor
2714,localize add public api marker for cli integration this commit mark the function and class that are used by the cli pr close ,docs
2715,compilercli run compliance test for two compilation mode … to verify the correctness of the linker output we leverage the existing compliance test the plan is to test the linker by running all compliance test using a full round trip of prelinking and subsequently postlinking where the generated code should be identical to a full aot compile this commit add an additional bazel target that run the compliance test in partial mode followup work is required to implement the logic for running the linker round trip pr close ,test
2716,compilercli setup compilation mode to enable generating linker code this is a precursor to introducing the angular linker a an initial step a compiler option to configure the compilation mode is introduced this option is initially internal until the linker is considered ready pr close ,refactor
2717,languageservice add test for multiple bound attribute in microsyntax it used to be the case that all microsyntax binding share the same source span so the second bound attribute would overwrite the first this ha been fixed in this case is added to prevent regression pr close ,test
2718,docsinfra upgrade cli command doc source to eda updating angularmaster from clibuildsmaster relevant change in commit range modified helptestjson pr close ,build
2719,devtools update angularcli ,build
2720,devtools update angularframework ,build
2721,devinfra use common git client for git environment reset for rebase tooling use the gitclients checkout method rather than a custom function doing the same task pr close ,refactor
2722,languageservice create gettypedefinitionatposition stub create stub for gettypedefinitionatposition for both ve and ivy language service implementation this will prevent failed request when it is implemented on the vscode plugin side pr close ,refactor
2723,compiler refactor template symbol builder add templatenode to elementsymbol and templatesymbol so caller can use the information about the attribute on the tmplastelementtmplasttemplate for directive matching remove helper function getsymbolofvariabledeclaration and favor more specific handling for scenario the generic function did not easily handle different scenario for all type of variable declaration in the tcb pr close ,refactor
2724,bazel clean up outstanding failure message for usage of definecompile remove the failure message put in place to catch usage of the old definecompile method of setting which compiler wa to be used pr close ,fix
2725,docsinfra upgrade cli command doc source to dcdb updating angularmaster from clibuildsmaster relevant change in commit range modified helpxinjson pr close ,build
2726,core fix typo change the word weather to whether pr close ,docs
2727,compiler binding parser set binding span a source span in ivy currently it is impossible to determine the source of a binding that generates boundattribute because all bound attribute generated from a microsyntax expression share the same source span for example in html div ngforlet item of item trackby trackbyfndiv source span for all boundattributes generated from microsyntax the boundattribute for both ngforof and ngfortrackby share the same source span a lot of hack were necessary in view engine language service to work around this limitation it wa done by inspecting the whole source span then figuring out the relative position of the cursor with this change we introduce a flag to set the binding span a the source span of the parsedproperty in ivy ast this flag is needed so that we dont have to change ve asts note that in the binding parser we already set bindingspan a the source span for a parsedvariable and keyspan a the source span for a literal attribute this change make the ivy ast more consistent by propagating the binding span to parsedproperty a well pr close ,refactor
2728,docsinfra replace a comma with a period at the end of a sentence in order to keep document consistency this commit replaces a comma with a period at the end of a sentence pr close ,docs
2729,languageservice update appcomponent test project to include more field in preparation for the ivy language service add the same property to appcomponent that appear in templatereference so the inline template can be tested thoroughly pr close ,test
2730,compilercli api for getting component from a template file this commit add an api to ngcompiler a method called getcomponentswithtemplatefile given a filesystem path to an external template file it retrieves a set actually a readonlyset of component declaration which are using this template in most case this will only be a single component this information is easily determined by the compiler during analysis but is hard for a lot of angular tooling eg the language service to infer independently therefore it make sense to expose this a a compiler api pr close ,refactor
2731,docsinfra simplify updating dependency in doc example boilerplate previously when updating the dependency version in aiotoolsexamplessharedpackagejson which contains all dependency used in doc example project one had to manually go through all boilerplate directory and update the packagejson file with the same version this commit simplifies this task by automating it via a nodejs script pr close ,build
2732,docsinfra simplify update workflow for clibased doc example boilerplate when updating the boilerplate for clibased doc example one needed to install dependency inside the aiotoolsexamplessharedboilerplatecli directory which resulted in a nodemodules directory and a yarnlock file these were not supposed to be part of the boilerplate so they had to be manually removed after the boilerplate wa updated this commit simplifies the workflow by allowing boilerplate file to be ignored both by git and the exampleboilerplatejs script via a gitignore file this way it is no longer necessary to manually remove the unneeded directoriesfiles pr close ,build
2733,docsinfra update instruction for updating doc example dependency pr close ,docs
2734,docsinfra apply the onesentenceperline rule to markdown file in aiotools this commit update the markdown file inside the aiotools directory to contain one sentence per line in order to be consistent with how markdown file are formatted in the rest of the repo pr close ,docs
2735,languageservice move twoway binding logic to visitboundevent instead of doing all sort of check in the visit method move check that are specific to boundevent to the visitboundevent method pr close ,refactor
2736,platformwebworker remove platformwebworker and platformwebworkerdynamic remove angularplatformwebworker and angularplatformwebworkerdynamic a they were deprecated in v breaking change angularplatformwebworker and angularplatformwebworkerdynamic have been removed a they were deprecated in v pr close ,fix
2737,devtools update dependency typeschrome to ,build
2738,devtools update angularcli ,build
2739,docsinfra update typescript and other deps to align with latest cli this commit update typescript and other dependency used in angulario to more closely align with new apps created with the latest angular cli it also update tsconfigjson reordering some property around and introducing some more check again to more closely match new cli apps note i skipped updating rxjs from to because it increased the main bundle by b note tslintjson will be updated in a subsequent pr because it requires more extensive change pr close ,build
2740,docsinfra update angularmaterial to this commit update the version of angular component used in angulario to version note the actual size increase for the main bundle in viewengine mode is kb because the actual size before this commit wa b not b a seen in aiopayloadsjson pr close ,build
2741,docsinfra update angular to this commit update the version of angular framework used in angulario to version note the actual size decrease for the main bundle is kb because the actual size before this commit wa b not b a seen in aiopayloadsjson pr close ,build
2742,docsinfra update angularcli to this commit update the version of angular cli used in angulario to version pr close ,build
2743,compilercli fix test to have at least one component with the introduction of incremental type checking in an intermediate tsprogram for type checking is only created if there are any template to check this rendered some test ineffective at avoiding regression a the intermediate tsprogram wa required for the test to fail if the scenario under test would not be accounted for this commit add a single component to these test to ensure the intermediate tsprogram is in fact created pr close ,test
2744,compilercli enable type discovery in incremental rebuilds prior to this fix incremental rebuilds could fail to type check due to missing ambient type from autodiscovered declaration file in type directory or type root in general this wa caused by the intermediary tsprogram that is created for template type checking for which a tscompilerhost wa used which did not implement the optional directoryexists method a a result autodiscovery of type would not be working correctly and this would retain into the tsprogram that would be created for an incremental rebuild this commit fix the issue by forcing the custom tscompilerhost used for type checking to properly delegate into the original tscompilerhost even for optional method this is accomplished using a base class delegatingcompilerhost which is typed in such a way that newly introduced tscompilerhost method must be accounted for fix pr close ,fix
2745,compilercli error when running test on nonposix system we werent resolving a path correctly which resulted in an error on window for reference here the error note the extra slash before c error enoent no such file or directory scandir cbazeloutputrootyxvwdoexternalnpmnodemodulestypescript at objectreaddirsync fsjs pr close ,test
2746,docsinfra enable aot in development mode for all doc example in the past the doc example were configured to not use aot compilation in development mode only in production mode this wa an artifact of when jit wa the default in development mode now that aot is the default even in development mode for new cli apps this commit configures all doc example to always use aot compilation this ha been made possible by fixing the componentinteraction doc example to correctly run in aot mode in an earlier commit pr close ,build
2747,docsinfra fix and enable remaining componentinteraction ee test previously some of the ee test of the componentinteraction doc example were disabled because they were failing this commit fix and reenables them pr close ,test
2748,docsinfra minor refactoring of the componentinteraction ee test this commit refactors the ee test of the componentinteraction doc example to improve readability and make them easier to maintain change include switch from elementallget to element when there is only one such element on the page switch from promisethen to asyncawait move elementfinders at the top of the test instead of having them interleaved with expectation load the page before every test ie in a beforeeach instead of beforeall to prevent state from each test leaking into the subsequent test order import alphabetically pr close ,refactor
2749,docsinfra fix the componentinteraction example ee test to run in prod mode previously the componentinteraction doc example wa configured to run ee test on ci in development mode in contrast to the default for all doc example which is to run ee test in production mode this wa necessary due to the following reason one of the component countdowntimercomponent which is used by countdownlocalvarparentcomponent and countdownviewchildparentcomponent wa triggering a periodic asynchronous task via setinterval which prevented the app from stabilizing and caused test to fail in order to prevent this from happening the example appmodule had special provisioning to not include the problematic component in it declaration when testing since this had to be determined dynamically at runtime via inspecting the url query params the appmodules config could not be statically evaluated in aot compilation this commit fix the example to make it compatible with aot compilation and remove the custom test command from it exampleconfigjson allowing it to be run with the default ee test command ie in production mode pr close ,fix
2750,docsinfra update doc example to angular v this commit update the doc example to angular v in addition to updating the dependency version it also update the project structure and config to more closely match what a new v cli app would look like see also the diff between a basic v cli app and a v one pr close ,build
2751,zonejs rename blacklistedstackframes to internalzonejsstackframes blacklistedstackframes to internalzonejsstackframes along with other related symbol renamed with the same change with appropriate casing style pr close ,refactor
2752,docsinfra add missing test for the rxlibrary doc example this commit add an extra test for the retryonerror snippet of the rxlibrary doc example to ensure it can successfully recover after a couple of failed attempt this commit address comment pr close ,test
2753,docsinfra add unit test for rxlibrary example this commit add missing unit test for all rxlibrary example from the doc close pr close ,test
2754,docsinfra fix the retryonerror example previously the retry example did not work a intended the retry operator wa called before the exception occured thus not retrying the ajax request this commit move the retry operator into the correct order to ensure that the failed request is retried pr close ,fix
2755,compilercli update type checker symbol to include more information this commit update the symbol in the templatetypecheck api and method for retrieving them include iscomponent and selector for directive so caller can determine which attribute on an element map to the matched directive add a new textattributesymbol and return this when requesting a symbol for a textattribute when requesting a symbol for propertywrite and methodcall use the namespan to retrieve symbol add fix to retrieve generic directive attached to elementstemplates pr close ,refactor
2756,core create nodeinjectoroffset type which better describes nodeinjector nodeinjector is store in expando a a list of value in an array the offset constant into the array have been brought together into a single nodeinjectoroffset enum with better documentation explaining their usage pr close ,refactor
2757,core update instruction on updating symbol test pr close ,docs
2758,core renamed previousorparent to currenttnode the previous name of previousorparent wa confusing changed the terminology to currenttnode pr close ,refactor
2759,core change getpreviousorparenttnode to return tnodenull this change make getpreviousorparenttnode return tnodenull rather than just tnode which is more reflective of the reality the getpreviousorparenttnode can be null upon entering the lview pr close ,refactor
2760,core rename tviewnode to tviewdecltnode the value stored in tviewnode is really the declaration tnode therefore renaming to make it more explicit pr close ,refactor
2761,core remove tviewnode a it is no longer used previous commit change the logic to not rely on the tviewnode this change remove it entirely pr close ,refactor
2762,core remove reliance on tnodetypeview tnodetypeview wa created to support inline view that feature did not materialize and we have since removed the instruction for it leave an unneeded tnodetypeview which wa still used in a very inconsistent way this change no longer created tnodetypeview and there will be a follow up chang to completely remove it also simplified the mental model so that lviewhostlviewthost always point to the insertion location of the lview pr close ,refactor
2763,core add injector debug information to lviewdebug extended the lviewdebug to display nodeinjector information for each node pr close ,refactor
2764,core remove host tnode from getorcreatetnode host tnode wa passed into getorcreatetnode just so that we can compute weather or not we are a root node this wa needed because previousorparenttnode could have tnode from tview other then current tview this is confusing mental model previous change ensured that previousorparenttnode must always be part of tview which enabled this change to remove the unneeded argument pr close ,refactor
2765,core ensure that previousorparenttnode always belongs to current tview previousorparenttnode store current tnode due to inconsistent implementation the value stored would sometimes belong to the current tview and sometimes to the parent we have extra logic which account for it a better solution is to just ensure that previousorparenttnode always belongs to current tnode this simplifies the mental model and clean up some code pr close ,refactor
2766,core correct instruction for running component repo locally pr close ,docs
2767,devinfra tool for staging and publishing release creates a tool for staging and publishing release a per the new branching and versioning that ha been outlined in the following document the tool is intended to be used across the organization to ensure consistent branchingversioning and labeling the tool implement the action a outlined in the following initial plan the implementation slightly diverged in so far that it performs staging and publishing together so that releasing is a single convenient command in case of error for which rerunning the full command is not sufficient we want to consider adding recover functionality eg when the staging completed but the actual npm publishing aborted unexpectedly due to build error pr close ,feat
2768,devinfra add release command for setting npm dist tag introduces a new command for ngdev release so that the npm dist tag can be set for all configured npm package this command can be useful in case a manual tag need to be set but it is primarily used by the release tooling when a new stable version is cut and when the previous patch branch need to be set a lts version through a vmajorlts dist tag it is necessary to have this a a command so that the release tool can execute it for old branch where other package might have been configured this is similar to the separate ngdev build command that we created note that we also added logic for spawning a process conveniently with different console output mode this will be useful for other command invocation in the release tool and it generally better than directly using native childprocess a that one doesnt log to the devinfra debug log file pr close ,feat
2769,devinfra add command for building release output add a command for building all release package this command is primarily used by the release tool for building release output in version branch the release tool can not build the release package configured in master a those package could differ from the package available in a given version branch also the build process could have changed so we want to have an api for building release package that is guaranteed to be consistent across branch pr close ,feat
2770,devinfra move existing envstamp command into subfolder move the existing ngdev release envstamp command into a subfolder so that the stagingpublish tool can have it own dedicated folder without being polluted by the envstamp logic every subcommand should be in it own folder pr close ,refactor
2771,devinfra add shared testing utility folder with git mock add a new folder to devinfra where shared testing utility could be placed in this commit already add initial testing utility for dealing with the gitclient and semver version the gitclient in the testing utility simulates actual git behavior in a virtual manner it not complete at all but can be extended based on our need the currently implemented command are the most basic one that wed need for our release tooling pr close ,feat
2772,devinfra add logic for printing active release train add a method for printing active release train for a configured project this is helpful for the release tool that will print the active release train also this can be useful for the caretaker status command where we could print the active version branch ie is there currently a featurefreeze branch pr close ,feat
2773,devinfra add logic for determining active lts branch add logic for determining active lts branch for a given release configuration the active lts branch can be determined by querying npm and matching dist tag against a specific pattern ie vmajorlts this logic will be useful for the release tool that support publishing of active lts version branch pr close ,feat
2774,devinfra cleanup comment in git utility clean up outdated comment in the shared devinfra git utility we also export the graphql client for consistency a we expose the githubclient and gitclient too pr close ,refactor
2775,devinfra move common versioning tooling to shared location we initially added logic for determining active release train into the merge script given we now build more tool that rely on this information we move the logic into a more general versioning folder that can contain common logic following the versioning document for the angular organization pr close ,refactor
2776,devinfra introduce new configuration for release tool introduces a new configuration for the ngdev release command this configuration will be the source of truth for all release package and how they can be built additionally in a temporary manner where each project ha it own way of generating the changelog the changelog generation can be configured this will be removed in the future when there is canonical changelog generation in the devinfra shared package pr close ,feat
2777,devinfra expose logic for dealing with lts branch expose logic for dealing with lts branch so that the release tool can reuse it for cutting lts patch release eventually we can move all of this logic to a more dedicated folder instead of having it inside the merge folder pr close ,refactor
2778,devinfra use shared github repo interface instead of maintaining multiple interface for grouping owner name and repo name we expose a shared interface describing a github repository one unfortunate downside is that the graphql github and rest api diverge slightly with the key for the repository name ie rest us repo for the name of a repository while graphql us name for the name if that would be consistent we could use the rest operator to pas a repository to the octokit rest or graphql api this doe not work so we have a small manual overhead a seen in the branchests file pr close ,refactor
2779,devinfra expose version for determined release train previously the logic for determing the active release train did not return the resolved version of a release train with the publish script being created we need this information and can just pas it through so that we do not need to fetch and parse the packagejson of given branch multiple time pr close ,refactor
2780,devinfra do not print git command in silent mode the git client respect the spawnsyncoptions when a command is executed currently it doe not hide the command info message when command are run in silent mode we fix this a part of this commit so that the command info is only printed to debug if stdio is set to ignore additonally the github token is made public so that it can be used by command if other repository like fork are targeted pr close ,refactor
2781,devinfra share more github code between command instead of repeating the logic for adding the github token to a repository git url we add a shared function for automatically computing the url with token additionally url for updatinggenerating token have been moved to a dedicated file in the utils folder also while being at it the yargs github token helper is also moved into the dedicated gitgithub related util folder pr close ,refactor
2782,common correct typing and implementation of slicepipe even in the overload state that it can accept null and undefined in order to ensure easy composition with async additionally change the implementation to return null on an undefined input for consistency with other pipe breaking change the slice pipe now return null for the undefined input value which is consistent with the behavior of most pipe if you rely on undefined being the result in that case you now need to check for it explicitly pr close ,fix
2783,common correct and simplify typing of keyvaluepipe a shown in the test keyvaluepipetransform can accept undefined in which case it always return null additionally the typing for string key can be made generic so the comparison function is only required to accept the relevant case finally the typing for number record now show that the comparison function and the result entry will actually receive the string version of the numeric key just a shown in the test breaking change the typing of the keyvalue pipe ha been fixed to report that for input object that have number key the result will contain the string representation of the key this wa already the case and the code ha simply been updated to reflect this please update the consumer of the pipe output if they were relying on the incorrect type note that this doe not affect use case where the input value are map so if you need to preserve number this is an effective way pr close ,fix
2784,common correct and simplify typing of inpluralpipe inpluralpipe can actually accept null and undefined which are convenient for composing it with the async pipe but it is currently typed to only accept number pr close ,fix
2785,common stricter type for number pipe make typing of number pipe stricter to catch some misuse such a passing an observable or an array at compile time breaking change the signature of the number pipe now explicitly state which type are accepted this should only cause issue in corner case a any other value would result in runtime exception pr close ,feat
2786,common stricter type for datepipe make typing of datepipe stricter to catch some misuse such a passing an observable or an array at compile time breaking change the signature of the date pipe now explicitly state which type are accepted this should only cause issue in corner case a any other value would result in runtime exception pr close ,feat
2787,common correct and simplify typing of asyncpipe asyncpipetransform will never return undefined even when passed undefined in input in contrast with what wa declared in the overload additionally the actual method signature can be updated to match the most generic case since the implementation doe not rely on wrapper anymore breaking change the async pipe no longer claim to return undefined for an input that wa typed a undefined note that the code actually returned null on undefined input in the unlikely case you were relying on this please fix the typing of the consumer of the pipe output pr close ,fix
2788,common let case conversion pipe accept type union with null the old implementation of case conversion type can handle several value which are not string but the signature did not reflect this the new one report error when falsy nonstring input are given to the pipe such a false or and ha a new signature which instead reflects the behaviour on null and undefined fix breaking change the case conversion pipe no longer let falsy value through they now map both null and undefined to null and raise an exception on invalid input false nan just like most common pipe if your code required falsy value to pas through you need to handle them explicitly pr close ,fix
2789,languageservice hybrid visitor return parent node of boundattribute for the following example the cursor is between keyspan and valuespan of the boundattribute html testcmp foo¦bartestcmp our hybrid visitor will return elementin this case which is the parent node of the boundattribute this is because we only look at the keyspan and valuespan and not the source span the last element in the ast path is element so it get returned in this pr i propose fixing this by adding a sentinel value undefined to the ast path to signal that weve found a source span but the cursor is neither in the key span nor the value span pr close ,fix
2790,docsinfra upgrade cli command doc source to bcc updating angularmaster from clibuildsmaster relevant change in commit range modified helpbuildjson helpservejson pr close ,build
2791,compiler add keyspan to variable node now that we have keyspan for boundattribute implemented in we could do the same for variable this would allow u to distinguish the lh and rh from the whole source span pr close ,feat
2792,docsinfra remove usage of whitelist in aiobuildssetup doc remove the usage of the term whitelist in the aiobuildssetup doc pr close ,docs
2793,docsinfra add upcoming conference pr close ,docs
2794,packaging remove polyfills needed to run test on ie and ie this commit remove polyfills that were needed to run test on ie and ie breaking change in v ie and ie mobile support wa deprecated in v angular framework remove ie and ie mobile support completely supporting outdated browser like these increase bundle size code complexity and test load and also requires time and effort that could be spent on improvement to the framework for example fixing issue can be more difficult a a straightforward fix for modern browser could break old one that have quirk due to not receiving update from vendor pr close ,fix
2795,compilercli load test file into memory only once prior to this change each invocation of loadstandardtestfiles would load the necessary file from disk this function is typically called at the toplevel of a test module in order to share the result across test the packagescompilerclitestngtsc target ha module where this call occurs each loading their own copy of nodemodulestypescript which is mb in size so the memory overhead used to be significant this commit load the individual package into a standalone folder and mount this folder into the filesystem of standard test file such that all file content are no longer duplicated in memory pr close ,test
2796,compilercli improve test performance using shared source file cache some compiler test take a long time to run even using multiple executor a profiling session revealed that most time is spent in parsing source file especially the default library are expensive to parse the default library file are constant across all test so this commit introduces a shared cache of parsed source file of the default library this achieves a significant improvement for several target on my machine packagescompilerclitestcompliance from s to s packagescompilerclitestngtsc from s to s note that the number of shard for the compliance test ha been halved a the extra shard no longer provide any speedup pr close ,test
2797,devtools update angularframework ,build
2798,router adjust type of parameter in navigatebyurl and createurltree to be more accurate routernavigatebyurl and routercreateurltree only use a subset of the navigationextras this commit change the parameter type to use new interface that only specify the property used by those function implementation navigationextras extends both of those interface fix breaking change while the new parameter type allow a variable of type navigationextras to be passed in they will not allow object literal a they may only specify known property they will also not accept type that do not have property in common with the one in the pick to fix this error only specify property from the navigationextras which are actually used in the respective function call or use a type assertion on the object or variable a navigationextras pr close ,refactor
2799,devtools update angularcli ,build
2800,router make relativelinkresolution corrected by default we are changing the default value from legacy to corrected so that new application are automatically optedin to the corrected behavior from breaking change this commit change the default value of relativelinkresolution from legacy to default if your application previously used the default by not specifying a value in the extraoptions and us relative link when navigating from child of empty path route you will need to update your routermodule to specifically specify legacy for relativelinkresolution see for more detail pr close ,fix
2801,core enable test in compiler compliance for namespace uri enables test that wa fixed by resolve pr close ,test
2802,languageservice update hybrid visitor to use keyspan for bound attribute the keyspan in bound attribute provides more finegrained location information and can be used to disambiguate multiple bound attribute in a single microsyntax binding previously this case could not distinguish between the two different attribute because the sourcespans were identical and valuespans would not match if the cursor wa located in a key pr close ,refactor
2803,docsinfra add missing unit test for backoff example this commit add the missing unit test for the backoff example pr close ,test
2804,docsinfra fix the backoff example previously the backoff example did not work a intended more specifically the range maxtries observable would complete immediately after emitting the maxtriesth value causing the overall observable to also complete a a result it would only make maxtries attempt to recover from an error more importantly the outer observable would complete successfully instead of erroring this commit fix the backoff operator by ensuring it make exactly maxtries attempt to recover and it propagates the actual error to the outer observable the test for this change is added in the next commit pr close ,fix
2805,zonejs disable wrap uncaught promise rejection should handle primitive value close zonejs provides a flag disablewrappinguncaughtpromiserejection to let zonejs throw the original error instead of wrap it when uncaught promise rejection found but the rejection value could be anything includes primitive value such a number in that case we should not attach any additional property to the value pr close ,fix
2806,platformbrowser remove usage of blacklist in test naming remove usage of blacklist in test name pr close ,test
2807,compilercli perform dom schema check even in basic mode in g in ivy template typechecking ha mode basic full and strict the primary difference between basic and full mode is that basic mode only check the toplevel template whereas full mode descends into nested template embedded view like ngifs and ngfors ivy applies this approach to all of it template typechecking including the dom schema check which validate whether an element is a valid componentdirective or not view engine ha both the basic and the full mode with the same distinction however in view engine dom schema check happen for the full template even in the basic mode ivy behavior here is technically a fix a it doe not make sense for some check to apply to the full template and others only to the toplevel view however since g relies exclusively on the basic mode of checking and developer there are used to dom check applying throughout their template this commit reenables the nested schema check even in basic mode only in g this is done by enabling the check only when closure compiler annotation are requested outside of g it recommended that application use at least the full mode of checking controlled by the fulltemplatetypecheck flag and ideally the strict mode stricttemplates pr close ,fix
2808,docsinfra remove usage of blacklist in test naming remove usage of blacklist in test naming of processor tranform test pr close ,test
2809,router add relativelinkresolution migration to update default value the default value for relativelinkresolution is changing from legacy to corrected this migration update routermodule configuration that use the default value to now specifically use legacy to prevent breakage when updating pr close ,feat
2810,devinfra simplify runbenchmark make url and params optional in runbenchmark make url optional in openbrowser remove unused code from runbenchmark pr close ,refactor
2811,zonejs remove usage of blacklist related to unpatchedevents remove usage of blacklist around unpatchedevents configuration pr close ,refactor
2812,compiler make keyspan available for boundattributes though we currently have the knowledge of where the key for an attribute binding appears during parsing we do not propagate this information to the output ast this mean that once we produce the template ast we have no way of mapping a template position to the key span alone the best we can currently do is map back to the sourcespan this present problem downstream specifically for the language service where we can not provide correct information about a position in a template because the ast is not granular enough pr close ,refactor
2813,core ensure testbed is not instantiated before override provider there is an inconsistency in overrideprovider behaviour testing documentation say that all override method throw error if testbed is already instantiated however overrideprovider doesnt throw any error but same a other override method doesnt replace provider if testbed is instantiated add testbed instantiation check to overrideprovider method to make it consistent breaking change if you call testbedoverrideprovider after testbed initialization provider override are not applied this behavior is consistent with other override method such a testbedoverridedirective etc but they throw an error to indicate that when the check wa missing in the testbedoverrideprovider function now calling testbedoverrideprovider after testbed initialization also trigger an error thus there is a chance that some test where testbedoverrideprovider is called after testbed initialization will start to fail and require update to move testbedoverrideprovider call before testbed initialization is completed issue mentioned here documentation pr close ,fix
2814,devtools update angularcli ,build
2815,serviceworker add the option to prefer network for navigation request this commit introduces a new option for the service worker called navigationrequeststrategy which add the possibility to force the service worker to always create a network request for navigation request this enables the server redirects while retaining the offline behavior fix pr close ,feat
2816,compilercli make typescriptastfactoryspec test resilient to lineendings the test were assuming that newlines were n character but this is not the case on window pr close ,test
2817,compilercli make the output ast translator generic this commit refactors the expressiontranslatorvisitor so that it is not tied directly to the typescript ast instead it us generic texpression and tstatement type that are then converted to concrete type by the typescriptastfactory this pave the way for a babelastfactory that can be used to generate babel ast node instead of typescript which will be part of the new linker tool pr close ,refactor
2818,compilercli simplify import from compiler to type translator previously each identifier wa being imported individually which made for a very long import statement but also obscurred in the code which identifier came from the compiler pr close ,refactor
2819,compilercli split up translator file this file contains a number of class making it long and hard to work with this commit split the importmanager context and typetranslatorvisitor class along with associated function and type into their own file pr close ,refactor
2820,compilercli generate let statement in e mode when the target of the compiler is e or newer then we should be generating let and const variable declaration rather than var pr close ,fix
2821,compiler use a named type for cookedraw string object using an interface make the code cleaner and more readable this change also add the range property to the type to be used for sourcemapping pr close ,refactor
2822,compilercli remove unused import these import are not used and so are just bloating the code unnecessarily pr close ,refactor
2823,compilercli remove undesirable cast in the type translator the cast to tsidentifier wa a hack that just happened to work the new approach is more robust and doesnt have to undermine the type checker pr close ,refactor
2824,compiler parse and recover on incomplete opening html tag let say we have a code like html divspanspan currently this get parsed into a tree with the element tag divspan this ha at least two downside an incorrect diagnostic that span doesnt close an element is emitted a consumer of the parse tree using it for editor service is unable to provide correct completion for the opening span tag this patch attempt to fix both issue by instead parsing the code into the same tree that would be parsed for divdivspanspan in particular we do this by optimistically scanning an open tag a usual but if we do not notice a terminating we mark the tag a incomplete a parser then emits an error for the incomplete tag and add a synthetic recovered element node to the tree with the incomplete open tag name whats the downside of this for one a breaking change ol li the first breaking change is that symbol that are ambiguously text or opening tag will be parsed a opening tag instead of text in element body take the code html pabp clearly we can not have the best of both world and this patch chooses to swap the parsing strategy to support the new feature of course can still be inserted a text via the lt entity li ol part of pr close ,feat
2825,compilercli reenable dynamic value diagnostic test on window ci this commit reenables some test that were temporarily disabled on window a they failed on native window ci the window filesystem emulation ha been corrected in an earlier commit such that the original failure would now also occur during emulation on linux ci pr close ,test
2826,compilercli fix drive letter casing in window filesystem emulation in native window the drive letter is a capital letter while our window filesystem emulation would use lowercase drive letter this difference may introduce test to behave differently in native window versus emulated window potentially causing unexpected ci failure on window ci after a pr ha been merged resolve fw pr close ,test
2827,form type ngvalueaccessor injection token a array ngvalueaccessor is a multi injection token user can and should expect more than one controlvalueaccessor to be available and this is how it is used in angularforms this is now reflected in the definition of the injection token by typing it a an array of controlvalueaccessor the motivating reason is that using the programmatic injector api will now type injectorget correspondingly fix breaking change ngvalueaccessor is now typed a a readonly array rather than a mutable scalar it is used a a multi injection token and a such it should always be expected that more than one accessor may be returned pr close ,fix
2828,common add iso weeknumbering year format support to formatdate add iso weeknumbering year format r rr rrr rrrr support for formatdate function issue pr close ,feat
2829,compiler simplify visitor logic for attribute the logic for computing identifier specifically for bound attribute can be simplified by using the value span of the binding rather than the source span pr close ,refactor
2830,docsinfra remove scrollbar style for accessibility this commit remove the scrollbar style so that the default style in the browser render this widens the webkit scroll bar this make it easier to grab the scrollbar using assistive technology and device and provides a wider target for those who have dexterity issue by removing these style we will no longer have to maintain custom scrollbars specific to webkit and they will be accessible by default pr close ,fix
2831,docsinfra replace deprecated reflectiveinjector with injector this commit replaces the old and slow reflectiveinjector that wa deprecated in v with the new injector pr close ,test
2832,devtools update angularframework ,build
2833,devtools update angularcli ,build
2834,devtools update dependency jasminespecreporter to v ,build
2835,compiler refactor ast span test to be more human readable the current test print out the span number which are really difficult to verify since it requires manually going to the template string and looking at what character appear within those index the better humanization would be to use the tostring method of the span which print the span text itself pr close ,refactor
2836,fix error message when we call jsonp without importing httpclientjsonpmodule currently when we call jsonp method without importing httpclientjsonpmodule an error message appears saying attempted to construct jsonp request without jsonpclientmodule installed instance of attempted to construct jsonp request without httpclientjsonpmodule installed pr close ,fix
2837,devinfra output the number of new and fixed cycle this commit add a logic to ouput the number of new and fixed cycle after running circular dependency checker this information is useful to better understand an impact of change in case the number of newfixed cycle is relatively big pr close ,feat
2838,core reduce the number of circular deps this commit update several import statement in the core package to decrease the number of cycle detected by the dependency checker tool pr close ,refactor
2839,zonejs should invoke xhr send task when no response error occurs close in the xmlhttprequest patch when get readystatechange event zonejs try to invoke load event listener first then call invoketask to finish the xmlhttprequestsend macrotask but if the request failed because the server can not be reached the load event listener will not be invoked so the invoketask of the xmlhttprequestsend will not be triggered either so we will have a non finished macrotask there which will make the zone not stable also memory leak so in this pr if the xmlhttprequeststatus when we get the readystatechange event that mean something wents wrong before we reached the server we need to invoke the task to finish the macrotask pr close ,fix
2840,devinfra skip husky git commit hook while merging pull request during the merge process all validation have already been completed so git commit hook can be safely skipped this additionally prevents error from occuring which would be caused the commit hook executing such a when yarn update and then yarn command are unable to run within the same process pr close ,fix
2841,core remove unused import this commit remove some unused import from the spec file pr close ,refactor
2842,ngcc fix compilation of changedetectorref in pipe constructor in we changed how ngcc deal with type expression where it would now always emit the original type expression into the generated code a a local type value reference instead of synthesizing new import using an imported type value reference this wa done a a fix to properly deal with renamed symbol however it turn out that the compiler ha special handling for certain imported symbol eg changedetectorref from angularcore the local type value reference prevented this special logic from being hit resulting in incorrect compilation of pipe factory this commit fix the issue by manually inspecting the import of the type expression in order to return an imported type value reference by manually inspecting the import we continue to handle renamed symbol fix pr close ,fix
2843,compiler replace comment node with leadingcomments property common ast format such a t and babel do not use a separate node for comment but instead attach comment to other ast node previously this wa worked around in t by creating a notemittedstatement ast node to attach the comment to but babel doe not have this facility so it will not be a viable approach for the linker this commit refactors the output ast to remove the commentstmt and jsdoccommentstmt node instead statement have a collection of leadingcomments that are renderedattached to the final ast node when being translated or printed pr close ,refactor
2844,zonejs should have better backward compatibility close zonejs introduces a breaking change to adpat angular package format and it break the module loading order before in ie the zonejs e format bundle will be imported but after the fesm format bundle will be imported which cause error and since the only purpose of the dist folder of zonejs bundle is to keep backward compatibility in the original commit i use package redirect to implement that but it is not fully backward compatible we should keep the same dist structure a pr close ,fix
2845,devtools update angularcli ,build
2846,devtools update angularcli ,build
2847,common add params and reportprogress option to httpclientput overload when the response type is json the put overload signature did not have reportprogress and params option this make it difficult to typecheck this overload this commit add them to the overload signature fix pr close ,fix
2848,compiler always return a mutable clone from scoperesolve this change prevents comment from a resolved node from appearing at each location the resolved expression is used and also prevents caller of scoperesolve from accidentally modifying adding comment to the declaration site pr close ,refactor
2849,devinfra handle no caretaker config being defined properly handle case where no caretaker config is provided to ngdev command pr close ,fix
2850,zonejs add breaking change info for zonejs v before zonejs v zonejs provides two format of bundle under dist folder e bundle zonejs and e bundle zoneevergreenjs these bundle are used for differential loading of angular by default the following code import zonejs load the e bundle zonejs from v zonejs follows the angular package format so the folder structure of the zonejs bundle is updated to match angular package format so the same code import zonejs load the e bundle this is a breaking change so if the apps import zonejs in this way the apps will not work in legacy browser such a ie zonejs still provides the same bundle under dist folder to keep backward compatibility after v so the following code in polyfillsts generated by angular cli still work import zonejsdistzone for detail please refer the changelogchangelogmd and the pr pr close ,docs
2851,form fix grammar in first sentence of reset function doc pr close ,docs
2852,router add migration to update call to navigatebyurl and createurltree with invalid parameter in the signature of navigatebyurl and createurltree were updated to exclude unsupported property from their extra parameter this migration look for the relevant method call that pas in an extra parameter and drop the unsupported property before thisrouternavigatebyurl skiplocationchange false fragment foo after thisrouternavigatebyurl removed unsupported property by angular migration fragment skiplocationchange false these change also move the method call detection logic out of the renderer migration and into a common place so that it can be reused in other migration pr close ,feat
2853,bazel fix typo in buildbazel comment update buildbazel pr close ,docs
2854,docsinfra simplify eventscomponent test and add more test case this commit simplifies the test of eventscomponent by introducing a createmockevent helper and getting rid of the irrelevant event field and add test for some more usecases it also make the test more robust by using jasmine clock to mock the current date pr close ,test
2855,docsinfra remove tooltip from link same a name in the eventsjson file most of tooltips are same a name so there were of no use a they were providing no extra information so removed them from the eventsjson file pr close ,refactor
2856,docsinfra created new widget for event page data in event page wa hardcoded and it is manually moved in the table created a new event widget which will automatically move past and upcoming event from eventsjson aiocontentmarketingeventsjson file to the relevant table in the event tab pr close ,feat
2857,docsinfra improve typeahead example and add unit test this commit improves the typeahead example by using the emitted input value it also add a unit test to ensure that the example is working a intended pr close ,test
2858,docsinfra add unit test for rxjs example this commit add missing unit test for all rxjs example from the doc close pr close ,test
2859,devtools update angularframework ,build
2860,devinfra refactor commitmessage file refactor the commitmessage file to be consistent with how other ngdev tooling is structured pr close ,refactor
2861,router fix argument order for call to shouldreuseroute the createorreusechildren function call shouldreuseroute with the previous child value use a the future and the future child value used a the current argument this is incosistent with the argument order in createnode this inconsistent order can make it difficultimpossible to correctly implement the shouldreuseroute function usually this order doesnt matter because simple equality check are made on the args and it doesnt matter which is which more detail can be found in the bug report fix breaking change this change corrects the argument order when calling routereusestrategyshouldreuseroute previously when evaluating child route they would be called with the future and current argument would be swapped if your routereusestrategy relies specifically on only the future or current snapshot state you may need to update the shouldreuseroute implementation use of future and current activateroutesnapshots pr close ,fix
2862,ngcc load standard file only once in the integration test suite of ngcc we load a set of file from nodemodules into memory this includes the typescript package and angular scoped package which account for a large number of large file that need to be loaded from disk this commit move this work to the toplevel such that it doesnt have to be repeated in all test pr close ,test
2863,ngcc reduce maximum worker count recent optimization to ngcc have significantly reduced the total time it take to process nodemodules to such extend that sharding across multiple process ha become le effective previously running ngcc asynchronously would allow for up to worker to be allocated however these worker have to repeat work that could otherwise be shared because ngcc is now able to reuse more shared computation the overhead of multiple worker is increased and therefore becomes le effective a an additional benefit having fewer worker requires le memory and le startup time to give an idea using the following test setup bash npx angularcli new perftest cd perftest yarn ng add angularmaterial nodemodulesbinngcc property e module main firstonly createivyentrypoints we observe the following figure on ci pr sync s s async worker s s async worker s in addition to changing the default number of worker ngcc will now use the environment variable ngccmaxworkers that may be configured to either reduce or increase the number of worker pr close ,perf
2864,ngcc introduce cache for sharing data across entrypoints ngcc creates typically two tsprogram instance for each entrypoint one for processing source and another one for processing the typing the creation of these program is somewhat expensive a it concern module resolution and parsing of source file this commit implement several layer of caching to optimize the creation of program a shared module resolution cache across all entrypoints within a single invocation of ngcc both the source and typing program benefit from this cache sharing the parsed tssourcefile for a single entrypoint between the source and typing program sharing parsed tssourcefiles of typescript default library across all entrypoints within a single invocation some of these default library typing are large and therefore expensive to parse so sharing the parsed source file across all entrypoints offer a significant performance improvement using a bare cli app created using ng new ng add angularmaterial the above change offer a x improvement in ngccs processing time when running synchronously and x improvement for asynchronous run pr close ,perf
2865,devinfra include ci status check in the caretaker check add a ci status check in the ngdev caretaker check command pr close ,feat
2866,devinfra remove ansi escape code from log file output remove the ansi code from the log file output to make the ngdev log file more readable pr close ,fix
2867,devinfra allow local ngdev configuration to error on invalid commit message a part of the commit message conformance check local commit message check are made to be warning rather than failure an additional local option is also in place to allow for the commit message validation failure to be considered error instead pr close ,feat
2868,element convert the ng add command to codeexample the command wa hardly visible currently changing it to shell for visibility pr close ,docs
2869,devtools update angularcli ,build
2870,compilercli optimize computation of typecheck scope information when typechecking a component the declaring ngmodule scope is used to create a directive matcher that contains flattened directive metadata ie the metadata of a directive and it base class this computation is done for all component whereas the typecheck scope is constant per ngmodule additionally the flattening of metadata is constant per directive instance so doesnt necessarily have to be recomputed for each component this commit introduces a typecheckscopes class that is responsible for flattening directive and computing the scope per ngmodule it cache the computed result a appropriate to avoid repeated computation pr close ,perf
2871,compilercli only emit directivepipe reference that are used for the compilation of a component the compiler ha to prepare some information about the directive and pipe that are used in the template this information includes an expression for directivespipes for usage within the compilation output for large ngmodule compilation scope this ha shown to introduce a performance hotspot a the generation of expression is quite expensive this commit reduces the performance overhead by only generating expression for the directivespipes that are actually used within the template significantly cutting down on the compiler resolve phase pr close ,perf
2872,devtools update angularframework ,build
2873,devinfra do not validate config file multiple time currently we validate the configuration file on each getconfig invocation we can only validate once since the configuration is cached also while being at it renames the cache variable to lowercase a those do not represent constant which are conventionwise upper case pr close ,refactor
2874,docsinfra upgrade cli command doc source to ba updating angularmaster from clibuildsmaster relevant change in commit range modified helpbuildjson helpservejson pr close ,build
2875,devtools update dependency typeschrome to ,build
2876,devtools add dark mode styling to flame graph rectangle stroke ,feat
2877,devtools remove unused color scheme object ,refactor
2878,devinfra correct build setup for devinfra corrects the missing dependency and incorrect build dependency for the devinfra bazel target pr close ,fix
2879,router update symbol for routing app this commit update the golden symbol file for the routing app pr close ,build
2880,compiler detect pipe in icu in template binder recent work on compiler internals in led to an unexpected failure where a pipe used exclusively inside of an icu would no longer be emitted into the compilation output this caused runtime error due to missing pipe the issue occurred because the change in would determine the set of used pipe upfront independent from the template compilation using the rtargetbinder however rtargetbinder did not consider expression within icu so any pipe usage within those expression would not be detected this fix unblocks and also concern upcoming linker work given that prelink compilation would not go through full template compilation but only rtargetbinder pr close ,fix
2881,devinfra add default params to runbenchmark use a the default for url use a the default for params use true a the default for ignorebrowsersynchronization pr close ,refactor
2882,zonejs add missing type field in packagejson close in zonejs the type field is missing in the packagejson the reason is in zonejs the file field is used to specify the type but it cause the npm package not contain any bundle issue so zonejs remove the file field which cause the type definition gone this pr concat the zonejsdts zoneconfigurationsapits zoneapiextensionsts type into a single zonedts file pr close ,fix
2883,common mark locale data array a readonly to discourage developer from mutating the array returned from the following method their return type have been marked a readonly getlocaledayperiods getlocaledaynames getlocalemonthnames getlocaleeranames fix breaking change the locale data api ha been marked a returning readonly array rather than mutable array since these array are shared across call to the api if you were mutating them eg calling sort push splice etc then your code will not longer compile if you need to mutate the array you should now take a copy eg by calling slice and mutate the copy pr close ,fix
2884,devtools update angularframework ,build
2885,compiler add back test for renamed input and output corrected the confusion between field and property name so the consumer can now be determined correctly pr close ,test
2886,compiler source span for microsyntax text att should be key span in a microsyntax expression some attribute are not bound after desugaring for example html div ngforlet item of item div get desugared to html ngtemplate ngfor letitems ngforofitems ngtemplate in this case ngfor should be a literal attribute with no rh value therefore it source span should be just the keyspan and not the source span of the original template node this allows language service to precisely pinpoint different span in a microsyntax to provide accurate information pr close ,fix
2887,compilercli add ability to get symbol of reference or variable add templatetypechecker operation to retrieve the symbol of a tmplastvariable or tmplastreference in a template sometimes we need to traverse an intermediate variable declaration to arrive at the correct tssymbol for example loop variable are declared using an intermediate div ngforlet user of user username div getting the symbol of user here from the expression is tricky because the tcb look like var t type of ngforof var t any context of embedded view for ngforof structural directive if ngforofngtemplatecontextguardt t t is now ngforofcontext var t timplicit let user implicit tname username expression just getting the tsexpression for the ast node propreadimplicitreceiver user via the sourcemaps will yield the t expression this function recognizes that t is a variable declared locally in the tcb and actually fetch the tssymbol of it initializer these special handling show the versatility of the symbol interface defined in the api with this when we encounter a template variable we can provide the declaration node a well a specific information about the variable instance such a the tstype and tssymbol pr close ,feat
2888,compilercli add ability to get symbol of ast expression in component template add support to the templatetypechecker to get a symbol of an ast expression in a component template not all expression will have tssymbols eg there is no tssymbol associated with the expression a b but there are for both the a and b node individually pr close ,feat
2889,compilercli add ability to get symbol of template and element in component template add support to the templatetypechecker for retrieving a symbol for tmplasttemplate and tmplastelement node in a component template pr close ,feat
2890,compilercli templatetypechecker operation to get symbol from a template node specifically this commit add support for retrieving a symbol from a tmplastboundevent or tmplastboundattribute other template node will be supported in following commits pr close ,feat
2891,compilercli adjust output of tcb to support templatetypechecker symbol retrieval the statement generated in the tcb are optimized for performance and producing diagnostics these optimization can result in generating a tcb that doe not have all the information needed by the templatetypechecker for retrieving symbol for example a an optimization the tcb will not generate variable declaration statement for directive that have no reference input or output however the templatetypechecker always need these statement to be present in order to provide tssymbols and tstypes for the directive this commit add logic to the tcb generation to ensure the required information is available in a form that the templatetypechecker can consume it also add an option to the ngcompiler that make this generation configurable pr close ,refactor
2892,compilercli define interface to be used for templatetypechecker this commit defines the interface which outline the information the templatetypechecker can return when requesting a symbol for an item in the templateast rather than providing the tssymbol tstype etc information in several separate function the templatetypechecker can instead provide all the useful information it know about a particular node in the templateast and allow the caller to determine what to do with it pr close ,feat
2893,common do not round up fraction of a millisecond in datepipe currently the datepipe via formatdate round fraction of a millisecond to the nearest millisecond this can cause date that are le than a millisecond before midnight to be incremented to the following day the ecmascript specification defines that datetime millisecond should always be rounded down so that m becomes m this change brings formatdate and so datepipe inline with the ecmascript specification fix breaking change when passing a datetime formatted string to the datepipe in a format that contains fraction of a millisecond the millisecond will now always be rounded down rather than to the nearest millisecond most application will not be affected by this change if this is not the desired behaviour then consider preprocessing the string to round the millisecond part before passing it to the datepipe pr close ,fix
2894,localize ensure that formatoptions is optional some lower level apis are used by cli and requiring the formatopions argument at that level is a breaking change this commit make it optional at every level to avoid the breaking change pr close ,fix
2895,core clear the refreshtransplantedview when detached the refreshtransplantedview flag is used to indicate that the view or one of it child is transplanted and dirty so it should still be refreshed a part of change detection this flag is set on the transplanted view itself a well setting a counter on a it parent when a transplanted view is detached and still ha this flag it mean it got detached before it wa refreshed this can happen for backwards reference or transplanted view that are inserted at a location that wa already checked in this case we should decrement the parent counter and clear the flag on the detached view so it not seen a transplanted anymore it is detached and ha no parent counter to adjust fix pr close ,fix
2896,router use ngdevmode to treeshake error message in router this commit add ngdevmode guard to throw some error only in dev mode the ngdevmode flag help to treeshake these error message from production build in dev mode everything will work a it work right now to decrease production bundle size pr close ,perf
2897,router remove defer a it not needed anymore this change contains the test from and also remove defer from the applyredirects logic because the change that introduced concatmap instead of mapconcatall make defer unnecessary pr close ,refactor
2898,core reset remove nextrecord the nextrecord is not neccessary so remove it and use recordnextmoved to iterate pr close ,refactor
2899,upgrade add trycatch when downgrading injectables this commit improves the error thrown by the downgrade module with a more descriptive message on why the downgrade is failing close pr close ,fix
2900,devinfra allow local user ngdev configuration to disable commit message wizard a not all user particularly contributor consistently contributing with a deep understanding of our commit message guideline will not want to rely on the commit message wizard we allow a user to opt out of using this wizard during commit message creation pr close ,feat
2901,devinfra add support for local user ngdev configuration create a utility for loading a local user configuration object to describe local configuration value such a skipping the commit message wizard pr close ,feat
2902,devinfra update commit message validation to return validation result previously the validatecommitmessage function ran validation and logged the result the validatecommitmessage function now return an object containing the validation result and the cli action function are instead responsible for logging the result this is being done a a prefactor for a change which allows for commit message hook validation to be either a blocking error or a warning pr close ,refactor
2903,languageservice ivy remove all marker from test in the test project there are no longer reference marker and location marker so there no need to preprocess the source file to remove them this will make the ivy test cleaner and faster pr close ,test
2904,docsinfra add the deep dive podcast update angular indepth url add the new podcast called the deep dive to the list of podcast resource also replace the name and url for angular indepth a the old url is deprecated pr close ,docs
2905,router fixed preloadallmodules comment typo pr close ,docs
2906,devinfra set build commit message type to allow an optional scope allow optionally a scope to be used with the build type commit message pr close ,fix
2907,compilercli optimize computation of typecheck scope information when typechecking a component the declaring ngmodule scope is used to create a directive matcher that contains flattened directive metadata ie the metadata of a directive and it base class this computation is done for all component whereas the typecheck scope is constant per ngmodule additionally the flattening of metadata is constant per directive instance so doesnt necessarily have to be recomputed for each component this commit introduces a typecheckscopes class that is responsible for flattening directive and computing the scope per ngmodule it cache the computed result a appropriate to avoid repeated computation pr close ,perf
2908,compilercli only emit directivepipe reference that are used for the compilation of a component the compiler ha to prepare some information about the directive and pipe that are used in the template this information includes an expression for directivespipes for usage within the compilation output for large ngmodule compilation scope this ha shown to introduce a performance hotspot a the generation of expression is quite expensive this commit reduces the performance overhead by only generating expression for the directivespipes that are actually used within the template significantly cutting down on the compiler resolve phase pr close ,perf
2909,localize enable whitespace preservation marker in xliff file whitespace can be relevant in extracted xliff translation file some in tool eg cat tool omegat will reformat the file to collapse whitespace if there is no indication to tell it not to this commit add the ability to specify format option that are passed to the translation file serializer the xliff and seralizers have been updated to accept xmlspacepreserve format option which will by added to the file element in the serialized translation file during extraction fix pr close ,fix
2910,router if user are using the alt key when clicking the router link prioritize browser ’ s default behavior in most browser clicking link with the alt key ha a special behavior for example chrome downloads the target resource a with other modifier key the router should stop the original navigation to avoid preventing the browser ’ s default behavior when user click a link while holding the alt key together the browser behave a follows window browser behavior chrome download the target resource firefox prevent navigation and therefore do nothing edge download the target resource ie no impact macos catalina browser behavior chrome download the target resource firefox prevent navigation and therefore do nothing safari download the target resource pr close ,fix
2911,compilercli ensure that a declaration is available in typetovalue conversion the typetovalue conversion could previously crash if a symbol wa resolved that doe not have any declaration eg because it imported from a missing module this would typically result in a semantic typescript diagnostic and halt further compilation therefore not reaching the typetovalue conversion logic in bazel however it turn out that angular semantic diagnostics are requested even if there are semantic typescript error in the program so it would then reach the typetovalue conversation and crash this commit fix the unsafe access and add a test that ignores the typescript semantic error effectively replicating the situation a experienced under bazel fix pr close ,fix
2912,compilercli compute sourcemappings for localized string previously localized string had very limited or incorrect sourcemapping information available now the in ast node and related output ast node include sourcespan information about messageparts and placeholder including closing tag placeholder this information is then used when generating the final localized string asts to ensure that the correct sourcemapping is rendered see comment pr close ,fix
2913,compiler move the messagepiece class into outputastts the messagepiece and derived class literalpiece and placeholderpiece need to be referenced in the localizedstring output ast class so that we can render the sourcespans of each piece pr close ,refactor
2914,compiler track the closing sourcespan of tagplaceholders the tagplaceholder can contain child in which case there are two source span of interest the opening tag and the closing tag this commit now allows the closing tag sourcespan to be tracked so that it can be used later in sourcemapping pr close ,refactor
2915,compiler capture interpolation sourcespans in expression parser the expression parser will split the expression up at the interpolation marker into expression and static string this commit also capture the position of these string in the expression to be used in sourcemapping later pr close ,refactor
2916,zonejs run test in umd format since the defineproperty not swallow error any longer now the test compile source code in commonjs mode and the code generated includes the code like this objectdefinepropertyexports esmodule value true and the export is undefined in some browser but the error is swallowed before this pr and all test run successfully but it is not correct behavior after this pr the code above failed so we need to compile the source code in umd mode pr close ,fix
2917,zonejs defineproperty patch should not swallow error close zonejs monkey patch the objectdefineproperty api long time ago angularzonejsb to resolve issue in very old version of chrome web which override the property of customelements and this is not an issue any longer so we want to remove this monkey patch since it may swallow the error when the user want to define property on unconfigurable or frozen object property but currently there are several apps and test depends on this patch since it also change the configurable property to true by default so in this pr we update the logic to not to swallow error any longer unless the property is the callback of documentregisterelements breaking change zonejs no longer swallow error produced by objectdefineproperty call prior to this change zonejs monkey patched objectdefineproperty and if there is an error such a the property is not configurable or not writable the patched logic swallowed it and only consolelog wa produced this behavior used to hide real error so the logic is now updated to trigger original error if any one exception where the patch remains in place is documentregisterelement to allow smooth transition for codepolyfills that rely on old behavior in legacy browser if your code relies on the old behavior where error were not thrown before you may need to update the logic to handle the error that are no longer masked by zonejs patch pr close ,fix
2918,compiler move parsedtemplate interface to compiler previously this interface wa mostly stored in compilercli but it contains some property that would be useful for compiling the declare component prelink code this commit move some of the interface over to the compiler package so that it can be referenced there without creating a circular dependency between the compiler and compilercli pr close ,refactor
2919,compiler correct confusion between field and property name the rtargetbinder accepts an interface for directive metadata which declares type for input and output object these type convey the mapping between the property name for an input or output and the corresponding property name on the component class due to rtargetbinders requirement this mapping wa specified with property name a key and field name a value however because of duck typing this interface wa accidentally satisifed by the opposite mapping of field name to property name that wa produced in other part of the compiler this form more naturally represents the data model for input rather than accept the field property mapping and invert it this commit introduces a new abstraction for such mapping which is bidirectional eliminating the ambiguous plain object type this mapping us new unambiguous terminology class property name and binding property name and can be used to satisfy both the need of the binder a well a those of the template typechecker field property a new test ensures that the inputoutput metadata produced by the compiler during analysis is directly compatible with the binder via this unambiguous new interface pr close ,fix
2920,core use ngdevmode to treeshake error message this commit add ngdevmode guard to throw some error only in dev mode similar to how thing work in other part of ivy runtime code the ngdevmode flag help to treeshake these error message from production build in dev mode everything will work a it work right now to decrease production bundle size pr close ,perf
2921,ngcc use aliased exported type correctly if a type ha been renamed when it wa exported we need to reference the external public alias name rather than the internal original name for the type otherwise we will try to import the type by it internal name which is not publicly accessible fix pr close ,fix
2922,localize do not expose nodejs typing in localize runtime code a recent change to angularlocalize brought in the absolutefspath type from the angularcompilercli but this brought along with it a reference to nodejs typing specifically the filesystem interface refers to the buffer type from nodejs this affect compilation of angularlocalize code that will be run in the browser for example project that reference loadtranslations the compilation break if the nodejs typing are not included in the build clearly it is not desirable to have these typing included when the project is not targeting nodejs this commit replaces reference to the nodejs buffer type with uintarray which is available across all platform and is actually the superclass of buffer fix pr close ,fix
2923,localize render location in xliff even if there is no metadata previously the location of a translation message in xliff wa only rendered if there were also note for meaning or description now the location will be rendered even if the other metadata is not provided fix pr close ,fix
2924,core remove deprecated ɵɵselect instruction this instruction wa deprecated in eddecbbfbabda and is no longer referenced in any meaningful way so it can be removed pr close ,refactor
2925,router support lazy loading for empty path named outlet in general the router only match and load a single route config tree however named outlet with empty path are a special case where the router can and should actually match two different route and ensure that the module are loaded for each match this change update the applyredirects stage to ensure that named outlet with empty path finish loading their configs before proceeding to the next stage in the routing pipe this is necessary because if the named outlet ha loadchildren but the associated lazy config is not loaded before following stage attempt to match and activate relevant route an error will occur fix pr close ,fix
2926,devinfra change logging of commit message restoration to debug use debug level of logging for message in commit message restoration pr close ,fix
2927,zonejs fix table formatting in markdown pr close ,docs
2928,core update consts to decls this terminology wa changed in dbdbfaeffbbbfc but a few instance were missed pr close ,docs
2929,devtools update angularcomponents to ,build
2930,compilercli make template parsing error into diagnostics previously the compiler wa not able to display template parsing error a true tsdiagnostics that point inside the template instead it would throw an actual error and crash with a stack trace containing the template error not only is this a poor user experience but it cause the language service to also crash a the user is editing a template in actuality the l ha to work around this bug with this commit such parsing error are converted to true template diagnostics with appropriate span information to be displayed contextually along with all other diagnostics this majorly improves the user experience and unblocks the language service from having to deal with the compiler crashing to report error pr close ,refactor
2931,compilercli split out template diagnostics package the template typechecking engine includes utility for creating tsdiagnostics for component template previously only the template type checker itself created such diagnostics however the template parser also produce error which should be represented a template diagnostics this commit prepares for that conversion by extracting the machinery for producing template diagnostics into it own subpackage so that other part of the compiler can depend on it without depending on the entire template typechecker pr close ,refactor
2932,devinfra fix typo in comment arguements argument pr close ,docs
2933,core reset tview between test in ivy testbed tview that is stored on a component def contains information about directive and pipe that are available in the scope of this component patching component scope cause tview to be updated prior to this commit the tview information wa not restoredreset in case component class is not declared in the declaration field while calling testbedconfiguretestingmodule thus causing tview to be reused between test thus preserving scope information between test this commit update testbed logic to preserve tview value before applying scope change and reset it back to the previous state between test close pr close ,fix
2934,localize install angularlocalize in devdependencies by default previously this package wa installed in the default dependency section of packagejson but this meant that it own dependency are treated a dependency of the main project babel for example generally localize is not used at runtime it is compiled out by the translation tooling so there is no need for it to be a full dependency in fact even if it is used at runtime the package itself is only used at devtime since the runtime bit will be bundled into a distributable so putting this package in devdependencies would only prevent library from bringing the package into application project that used them this is probably good in itself since it should be up to the downstream project to decide if it want to include angularlocalize at runtime this commit change the default location of the package to be the devdependencies section but give an option useatruntime to choose otherwise fix pr close ,fix
2935,core remove collectionchangerecord symbol remove collectionchangerecord a it wa deprecated for removal in v use iterablechangerecord instead breaking change collectionchangerecord ha been removed use iterablechangerecord instead pr close ,fix
2936,devtools update dependency karma to ,build
2937,devtools update angularcli ,build
2938,compiler elementsourcespan should span the outerhtml previously the sourcespan and startsourcespan were the same object which meant that you had the following situation element divsome contentdiv sourcespan div startsourcespan div endsourcespan div this made sourcespan redundant and meant that if you wanted a span for the whole element including it content and closing tag it had to be computed now sourcespan is separated from startsourcespan resulting in element divsome contentdiv sourcespan divsome contentdiv startsourcespan div endsourcespan div pr close ,refactor
2939,compiler elementstartsourcespan is required previously the startsourcespan property could be null but in reality it is always well defined except for a legacy case in the old in extractionmerging code where the typing for sourcespans are already being undermined making this property nonnull simplifies code elsewhere in the project pr close ,refactor
2940,compiler move the lineending handling decision previously the lexer wa responsible for deciding whether an inline template should also have it lineendings normalized now this decision is made higher up in the call stack to allow more flexibility in the parserlexer pr close ,refactor
2941,localize render context of translation file parse error previously the position of the error in a translation file when parsing it wa not displayed just the error message now the position line and column and some context is displayed along with the error message fix pr close ,fix
2942,devinfra check servicesstatus information of the repository for caretaker the angular team relies on a number of service for hosting code running ci etc this tool allows for checking the operational status of all service at once a well a the current state of the repository with respect to merge and triage ready issue and pr pr close ,feat
2943,form ensure to emit statuschanges on subsequent value updatevalidations this commit ensures that the updatevalueandvalidity method take the asyncvalidator into consideration to emit on the statuschanges observables this is necessary so that any subsequent change are emitted properly to any subscriber close close breaking change previously if formcontrol formgroup and formarray class instance had async validators defined at initialization time the status change event wa not emitted once async validator completed after this change the status event is emitted into the statuschanges observable if your code relies on the old behavior you can filterignore this additional status change event pr close ,fix
2944,compiler incorrectly inferring namespace for html node inside svg the html parser get an element namespace either from the tag name eg svgrect or from it parent element svgrectsvg which break down when an element is inside of an svg foreignelement because foreign element allow node from a different namespace to be inserted into an svg these change add another flag to the tag definition which tell child node whether to try to inherit their namespaces from their parent it also add a definition for foreignobject with the new flag allowing element placed inside it to infer their namespaces instead fix pr close ,fix
2945,devinfra use a mixin to require a githubtoken for an ngdev command creates a mixin for requiring a github token to be provided to a command this mixin allows for a centralized management of the requirement and handling of the githubtoken pr close ,refactor
2946,serviceworker add link to service worker communication guide pr close ,docs
2947,serviceworker add section to explain unrecoverable state pr close ,docs
2948,serviceworker add unrecoverablestateerror in several occasion it ha been observed when the browser ha evicted eagerly cached asset from the cache and which can also not be found on the server anymore this can lead to broken state where only part of the application will load and others will fail this commit fix this issue by checking for the missing asset in the cache and on the server if this condition is true the broken client will be notified about the current state through the unrecoverablestateerror close pr close ,feat
2949,serviceworker fix condition to check for a cachebusted request previously the condition to make the cache busted wa executing although the network request wa successful however this is not valid the cache should only be marked a busted when the request failed this commit fix the invalid condition pr close ,fix
2950,serviceworker add helper function remove individual cache this commit add a helper method to remove individual cached item pr close ,test
2951,devtools update angularcli ,build
2952,form remove extra space in error message remove extra whitespace at packageformsmodelts error message pr close ,refactor
2953,devinfra improve error message for unexpected version branch currently the merge script default branch configuration throw an error if an unexpected version branch is discovered the error right now assumes to much knowledge of the logic and the document outlining the release train conceptually we change it to something more easy to understand that doesnt require full understanding of the versioninglabelingbranching document that ha been created for the angular organization pr close ,refactor
2954,devtools update angularframework ,build
2955,devinfra write output of command run to ngdev log file creates infrastructure to write output of command run to ngdev log file additionally on command which fail with an exit code greater than an error log file is created with the posix timestamp of the command run time a an identifier pr close ,feat
2956,devinfra remove style type from commit style guide the style commit type is not part of the commit parser config it should be removed from the documentation pr close ,refactor
2957,bazel fix integration test for bazel building update the api used to request a timestamp the previous api we relied on for this test application worldclockapicom no longer serf time and simply s on all request this caused our test to timeout a the http request did not handle a failure case by moving to a new api the http request responds a expected and timeouts are corrected a there is not longer a pending microtask in the queue pr close ,fix
2958,devtools update angularframework ,build
2959,devtools add test for the frame merge algorithm ,test
2960,devtools merge frame in the range ,feat
2961,devtools add selection of multiple frame with shift ,feat
2962,devtools add multiple frame selection pointer ,feat
2963,form exclude internalonly method and property from doc prior to this commit a lot of internalonly class property and method such a ngonchanges of the form package directive were exposed on angulario website these field are not expected to be called externally they are usedinvoked by framework only since they are part of internal implementation of the following interface angular lifecycle hook interface controlvalueaccessor interface validator interface having these internalonly field in doc creates unnecessary noise on directive detail page this commit add the nodoc annotation to these property and method to keep field in the golden file but hide them in doc pr close ,docs
2964,devtools update angularcli ,build
2965,devtools enable the profiler even without zone available ,fix
2966,devtools add demo app which doe not use zone ,feat
2967,docsinfra add command to run the unit test this commit add the necessary custom command to run the test in a node environment pr close ,test
2968,docsinfra add missing test for obserables and promise this commit add missing test for obserables and promise which are both standalone miniapps pr close ,test
2969,devtools update angularframework ,build
2970,devtools add a demo pipe with ngondestroy ,feat
2971,devtools handle lifecycle hook of only component directive ,fix
2972,devtools remove unused default value ,refactor
2973,docsinfra add guard to not render anchor link for private api this commit add a guard that prevents rendering anchor link for private apis close pr close ,fix
2974,devtools update angularframework rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
2975,localize ensure required xliff parameter are serialized when extracting in message from source code the xliff serializers were missing some required attribute on the file element this commit reintroduces the original property to each of xliff and serializers also it add in the required id property for the xliff seralizer fix pr close ,fix
2976,localize render text of extracted placeholder format like xliff allow the text of the original source to be included a metadata this commit fix the message extractor to also render this text when available pr close ,fix
2977,localize add placeholder location in extracted message some translation file format would like to be able to render the text of placeholder taken from the original source file this commit add this information to the extracted message so that it can be used in translation file serializers pr close ,refactor
2978,localize ensure that translate plugin exception are not swallowed previously exception that were not babelparseerrors were just ignored such exception are most likely programming error in the package they are now rethrown to ensure that the error is not hidden pr close ,refactor
2979,localize run the translate plugin test in mock filesystems this commit is a tidy up of the translate plugin unit test but also ensures that the test are run in the context of a mock filesystem this ensures that the test are resilient to future refactors of the plugins that will require a filesystem to be initialized pr close ,refactor
2980,localize include text in original location of extracted message when extracting message sourcemapping information is used to find the original location of the message being extracted this commit will now include the text from the original source in the message location so that it can be serialized into the translation file pr close ,refactor
2981,localize allow parsedmessage to hold additional location data in preparation for supporting equivtext placeholder information in extracted translation file this commit add these optional property to the parsedmessage interface and update parsemessage to be able to store them pr close ,refactor
2982,zonejs zonejs tostring patch should check typeof promise is function close zonejs monkey patch tostring and check the instance is promise or not by using instanceof promise sometimes when promise is not available the instanceof operation fails and throw typeerror righthand side of instanceof is not an object this pr check typeof promise equal to function or not to prevent the error pr close ,fix
2983,devtools update angularframework rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
2984,devtools fixed height for control on flame graph and save button rangleangulardevtools coauthoredby emma twersky emmatwerskygooglecom ,fix
2985,devtools linting error to prevent ci failing rangleangulardevtools ,fix
2986,devtools update angularframework rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
2987,devtools update dependency tsnode to v rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
2988,devtools style change to profiler general color scheme control responsiveness rangleangulardevtools make angular version number copyable make version selectable change instruction and icon in profiler make font size responsive fix move checkbox to control panel fix change loading indicator to match style fix profiler tab style of graph fix version responsive to size fix version color fix flame graph color and change detection coauthoredby emma twersky emmatwerskygooglecom ,fix
2989,compilercli remove usage of tsupdateidentifier with typescript tsupdateidentifier is no longer available calling tsupdateidentifier used to return the same node when typearguments wa undefined because nodetypearguments wa also undefined relevant t code j function updateidentifiernode typearguments return nodetypearguments typearguments updatenodecreateidentifiertsidtextnode typearguments node node pr close ,refactor
2990,compilercli add support for typescript with this change we add support for typescript pr close ,feat
2991,form use internal ngdevmode flag to treeshake error message in prod build this commit add a guard before throwing any form error this will treeshake error message which can not be minified it should also help to reduce the bundle size of the form package in production by close pr close ,perf
2992,localize fix angularjson syntax in chapter internationalization in at section deploy multiple locale the syntax for angularjson is wrong this commit fix the angularjson when specifying the translation file and the basehref for a locale pr close ,docs
2993,languageservice ivy return cursor position in overwritten template in many testing scenario there is a common pattern overwrite template inline or external find cursor position call one of language service apis inspect span in result in order to faciliate this pattern this commit refactors mockhostoverwrite and mockhostoverwriteinlinetemplate to allow a faux cursor symbol ¦ to be injected into the template and the method will automatically remove it before updating the script snapshot both method will return the cursor position and the new text without the cursor symbol this make testing very convenient here a typical example t const position text mockhostoverwritetemplatehtml ti¦tle const quickinfo nglsgetquickinfoatpositiontemplatehtml position const start length quickinfotextspan expecttextsubstringstart start lengthtobetitle pr close ,test
2994,languageservice introduce hybrid visitor to locate ast node this commit introduces two visitor one for template ast and the other for expression ast to allow u to easily find the node that most closely corresponds to a given cursor position this is crucial because many language service apis take in a position parameter and the information returned depends on how well we can find a good candidate node in view engine implementation of language service the search for the node and the processing of information to return the result are strongly coupled this make the code hard to understand and hard to debug because the stack trace is often littered with layer of visitor call with this new feature we could test the searching part separately and colocate all the logic aka hack thats required to retrieve an accurate span for a given node right now only the most narrow node is returned by the main exported function findnodeatposition if needed we could expose the entire ast path or expose other method to provide more context for a node note that due to limitation in the template ast interface there are a few known case where microsyntax span are not recorded properly this will be dealt with in a followup pr pr close ,feat
2995,compiler support unary operator for more accurate type checking prior to this change the unary and operator would be parsed a x and x respectively the runtime semantics of these expression are equivalent however they may introduce inaccurate template type checking error a the literal type is lost for example t component template button disabledisadjacentbutton export class example isadjacentdirection boolean return false would incorrectly report a typecheck error error t argument of type number is not assignable to parameter of type additionally the translated expression for the unary operator would be considered a arithmetic expression with an incompatible lefthand side error t the lefthand side of an arithmetic operation must be of type any number bigint or an enum type to resolve this issue the implicit transformation should be avoided this commit add a new unary ast node to represent these expression allowing for more accurate typechecking fix fix pr close ,feat
2996,compilercli adding reference to const enums in runtime code we had a couple of place where we were assuming that if a particular symbol ha a value then it will exist at runtime this is true in most case but it break down for const enums fix pr close ,fix
2997,devinfra ignore comment when validating commit message when creating a commit with the git cli git prepopulates the editor used to enter the commit message with some comment ie line starting with these comment contain helpful instruction or information regarding the change that are part of the commit a happens with all commit message comment they are removed by git and do not end up in the final commit message however the file that is passed to the commitmsg to be validated still contains these comment this may affect the outcome of the commit message validation in such case the author will not realize that the commit message is not in the desired format until the linting check fail on ci which validates the final commit message and is not affected by this issue usually several minute later possible way in which the commit message validation outcome can be affected the minimum body length check may pas incorrectly even if there is no actual body because the comment are counted a part of the body the maximum line length check may fail incorrectly due to a very long line in the comment this commit fix the problem by removing comment line before validating a commit message fix pr close ,fix
2998,devtools small improvement to property detail view rangleangulardevtools change cursor to indicate editable feild add decorator to inputoutput in detail view fix space convention coauthoredby emma twersky emmatwerskygooglecom ,fix
2999,devtools update angularframework rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
3000,devtools update dependency zonejs to rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
3001,devtools update dependency cypress to v rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
3002,devtools fix all remaining component tab color issue rangleangulardevtools ,fix
3003,devtools update angularcli rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
3004,devtools update dependency prettyquick to v rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
3005,docsinfra fix vertical alignment of external link icon at some place external link icon appear a a subscript for example this commit place external link icon in the middle to improve there positioning in a line pr close ,fix
3006,core fix typo in jsdoc for abstracttypet pr close ,docs
3007,localize extract the correct message id previously if uselegacyids wa enabled the message extractor wa always rendering the legacy message id in translation file even if an explicit custom message id had been provided in the original message pr close ,fix
3008,core remove closing body tag from inert dom builder fix a bug in the html sanitizer where an unclosed iframe tag would result in an escaped closing body tag a the output sanitizehtmldocument iframe ltbodygt this closing body tag come from the domparserhelper where the html to be sanitized is wrapped with surrounding body tag when an opening iframe tag is parsed by domparser which domparserhelper us everything up until it matching closing tag is consumed a a text node in the above example this includes the appended closing body tag by removing the explicit closing body tag from the domparserhelper and relying on the body tag being closed implicitly at the end the above example is sanitized a expected sanitizehtmldocument iframe pr close ,fix
3009,localize parse all part of a translation with nested html previously nested container placeholder ie html element were not being fully parsed from translation file this resulted in bad translation of message that contain these placeholder note that this cause the canonical message id to change for such message currently all message generated from template use legacy message id that are not affected by this change so this fix should not be seen a a breaking change fix pr close ,fix
3010,localize include the last placeholder in parsed translation text when creating a parsedtranslation from a set of message part and placeholder name a textual representation of the message is computed previously the last placeholder and text segment were missing from this computed message string pr close ,fix
3011,compilercli add gettemplateofcomponent to templatetypechecker this commit add a gettemplateofcomponent method to the templatetypechecker api which retrieves the actual node parsed and used by the compiler for template typechecking this is advantageous for the language service which may need to query other apis in templatetypechecker that require the same node used to bind the template while generating the tcb fix pr close ,refactor
3012,router support lazy loading for empty path named outlet in general the router only match and load a single route config tree however named outlet with empty path are a special case where the router can and should actually match two different route and ensure that the module are loaded for each match this change update the applyredirects stage to ensure that named outlet with empty path finish loading their configs before proceeding to the next stage in the routing pipe this is necessary because if the named outlet ha loadchildren but the associated lazy config is not loaded before following stage attempt to match and activate relevant route an error will occur fix pr close ,fix
3013,zonejs zonejs packagejson should not include filesdirectories field close after update to apf the directory and file option are not compatible so we need to remove those fileds to make sure everything work a expected pr close ,fix
3014,devinfra create a wizard for building commit message creates a wizard to walk through creating a commit message in the correct template for commit message in angular repository pr close ,feat
3015,devinfra tooling to check out pending pr creates a tool within ngdev to checkout a pending pr from the upstream repository this automates an action that many developer on the angular team need to do periodically in the process of testing and reviewing incoming pr example usage ngdev pr checkout prnumber pr close ,feat
3016,devtools move highlighter placement no more overlap rangleangulardevtools ,feat
3017,devtools change color rangleangulardevtools change color full accessibility on contrast wcag aaa small font size fix coauthoredby emma twersky emmatwerskygooglecom ,fix
3018,router ensure routerlinkactive update when associated routerlinks change this commit introduces a new subscription in the routerlinkactive directive which trigger an update when any of it associated routerlinks have change routerlinkactive not only need to know when link are added or removed but it also need to know about if a link it already know about change in some way quick note that frommergeall is used instead of just a simple merge or scheduledmergeall to avoid introducing new rxjs operator in order to keep bundle size down fix pr close ,fix
3019,devtools update angularcli ,build
3020,common wrong parameter description on trackby track by function receive the tindex data not the node id trackbyfunction reference description ha the same issue pr close ,docs
3021,devtools update angularframework ,build
3022,ngcc update yargs and typing for yargs updating yargs and typing for the updated yargs module pr close ,refactor
3023,localize update yargs and typing for yargs updating yargs and typing for the updated yargs module pr close ,refactor
3024,devinfra update yargs and typing for yargs updating yargs and typing for the updated yargs module pr close ,refactor
3025,router ensure routerlinkactive update when associated routerlinks change this commit introduces a new subscription in the routerlinkactive directive which trigger an update when any of it associated routerlinks have change routerlinkactive not only need to know when link are added or removed but it also need to know about if a link it already know about change in some way quick note that frommergeall is used instead of just a simple merge or scheduledmergeall to avoid introducing new rxjs operator in order to keep bundle size down fix pr close ,fix
3026,languageservice ivy remove temporary compiler now that ivy compiler ha a proper templatetypechecker interface see we no longer need to keep the temporary compiler implementation the temporary compiler wa created to enable testing infrastructure to be developed for the ivy language service this commit remove the whole ivycompiler directory and move two function createtypecheckingprogramstrategy and getorcreatetypecheckscriptinfo to the languageservice class also reenable the ivy l test since it no longer blocking development pr close ,refactor
3027,ngcc detect synthesized delegate constructor for downleveled e class similarly to the change we landed in the angularcore reflection capability we need to make sure that ngcc can detect passthrough delegate constructor for class using downleveled e output more detail can be found in the preceding commit and in the issue outlining the problem fix pr close ,fix
3028,core detect di parameter in jit mode for downleveled e class in the angular package format we always shipped umd bundle and previously even e module output with v we removed the e module output but kept the umd e output for this we were able to remove our second typescript transpilation instead we started only building e output and then downleveled it to e umd for the npm package this worked a expected but unveiled an issue in the angularcore reflection capability in jit mode angular determines constructor parameter for di using the reflectioncapabilities the reflection capability basically read runtime metadata of class to determine the di parameter such metadata can be either stored in static class property like ctorparameters or within typescript designparams if angular come across a class that doe not have any parameter metadata it try to detect if the given class is actually delegating to an inherited class it doe this naively in jit by checking if the stringified class function in e match a certain pattern eg j function mattable var this superapplythis argument this these pattern are reluctant to change of the class output if a class is not recognized properly the di parameter will be assumed empty and the class is incorrectly constructed without argument this actually happened a part of v now since we downlevel e to e instead of previously compiling source directly to e the class output changed slightly so that angular no longer detects it eg j var this superapplythis spreadarguments this this happens because the e output will receive an autogenerated constructor if the class defines class property this constructor is then already containing an explicit super call j export class mattable extends cdktable constructor superarguments thisdisabled true if we then downlevel this file to e with downleveliteration typescript adjusts the super call so that the spread operator is no longer used not supported in e the resulting super call is different to the super call that would have been emitted if we would directly transpile to e ultimately angular no longer detects such class a having an delegate constructor and di break we fix this by expanding the rather naive regexp pattern used for the reflection capability so that downleveled passthroughdelegate constructor are properly detected there is a risk of a falsepositive a we can not detect whether spread is actually the typescript spread helper but given the reflection pattern already make lot of assumption eg that super is actually the superclass we should be fine making this assumption too the falsepositive would not result in a broken app but rather in unnecessary provider being injected a a noop fix pr close ,fix
3029,localize render icu placeholder in extracted translation file previously placeholder were only rendered for dynamic interpolation expressons in localize tagged string but there are also potentially dynamic value in icu expression too so we need to render these a placeholder when extracting in message into translation file pr close ,fix
3030,compiler add additional in serialization test the addiational test check that icu containing interpolation are serialized correctly pr close ,test
3031,core move generated in statement to the consts field of componentdef this commit update the code to move generated in statement into the consts field of componentdef to avoid invoking localize function before component initialization to better support runtime translation and also avoid problem with lazyloading when in defs may not be present in a chunk where it referenced prior to this change the in statement were generated at the top leve var in if typeof nginclosuremode undefined nginclosuremode var msgx googgetmsg “ … ” in msgx else in localize definecomponent template function apptemplaterf ctx iɵɵin in this commit update the logic to generate the following code instead definecomponent consts function var in if typeof nginclosuremode undefined nginclosuremode var msgx googgetmsg “ … ” in msgx else in localize return in template function apptemplaterf ctx iɵɵin also note that in template instruction now refer to the consts array using an index similar to other template instruction pr close ,fix
3032,compiler in compiler test refactoring this commit refactors in compiler test to avoid code duplication and simplify further maintenance and update pr close ,refactor
3033,devtools update angularcli ,build
3034,devtools update angularcli ,build
3035,devtools update angularcli ,build
3036,devtools update angularframework ,build
3037,common allow scrolling when browser support scrollto this commit fix a regression from fixcommon ensure scrollrestoration is writable that caused scrolling to not happen at all in browser that do not support scroll restoration the issue wa that supportscrollrestoration wa updated to return false if a browser did not have a writable scrollrestoration however the previous behavior wa that the function would return true if windowscrollto wa defined every scrolling function in the viewportscroller used supportscrollrestoration and with the update in bbcfadaacefbdadcef no scrolling would be performed if a browser did not have writable scrollrestoration but did have windowscrollto note that this failure wa detected in the saucelabs test ie doe not support scroll restoration so ie test were failing pr close ,fix
3038,devtools update angularcli ,build
3039,router export defaultroutereusestrategy to router publicapi export defaultroutestrategy class that wa used internally and exposed and add documentation for each one of method pr close ,fix
3040,core fix multiple nested view removal from viewcontainerref when removal of one view cause removal of another one from the same viewcontainerref it trigger an error with view length calculation this commit fix this bug by removing a view from the list of available view before invoking actual view removal which might be recursive and relies on the length of the list of available view fix pr close ,fix
3041,compilercli remove unused constant remove unused constant alldiagnostics pr close ,style
3042,compilercli dont emit template guard when child scope is empty for a template that contains for example span ngiffirstspan there no need to render the ngif guard expression a the child scope doe not have any typechecking statement so any narrowing effect of the guard is not applicable this seems like a minor improvement however it reduces the number of flownode antecedent that typescript need to keep into account for such case resulting in an overall reduction of typechecking time pr close ,perf
3043,compilercli only generate directive declaration when used the template typechecker would always generate a directive declaration even if it type wa never used for example directive without any input nor output binding nor exportas reference dont need the directive to be declared a it type would never be used this commit make the tcbops that are responsible for declaring a directive a optional such that they are only executed when requested from another operation pr close ,perf
3044,compilercli only generate typecheck code for referenced dom element the template typechecker would generate a statement with a call expression for all dom element in a template of the form const t documentcreateelementdiv profiling ha shown that this is a particularly expensive call to perform type inference on a typescript need to perform signature selection of documentcreateelement and resolve the exact type from the htmlelementtagnamemap however it can be observed that the statement by itself doe not contribute anything to the typechecking result if t is not actually used anywhere which is only rarely the caseit requires that the element is referenced by it name from somewhere else in the template consequently the typechecker can skip generating this statement altogether for most dom element the effect of this optimization is significant in several phase le typecheck code to generate le typecheck code to emit and parse again no expensive type inference to perform for the call expression the effect on phase is the most significant here a typechecking is not currently incremental in the sense that only phase and can be reused from a prior compilation the actual typechecking of all template in phase need to be repeated on each incremental compilation so any performance gain we achieve here are very beneficial pr close ,perf
3045,docsinfra remove deprecated reflectiveinjector this commit replaces the old and slow reflectiveinjector that wa deprecated in v with the new injector note this change wa only done in the spec file inside the aio folder while changing this it wa not possible to directly use injectorget to get the correct typing for the mocked class for example typescript locationservice injectorgettestlocationservicelocationservice fails with argument of type typeof locationservice is not assignable to parameter of type typetestlocationservice injectiontokentestlocationservice abstracttypetestlocationservice type typeof locationservice is not assignable to type typetestlocationservice property searchresult is missing in type locationservice but required in type testlocationservice therefore it wa necessary to first convert to unknown and then to testlocationservice typescript locationservice injectorgetlocationservice a unknown a testlocationservice pr close ,test
3046,router add annotation to correct router documentation the hostlistener function and lifecycle hook arent intended to be public api but do need to appear in the dts file or type checking will break adding the nodoc annotation will correctly hide this function on the doc site again note that internal can not be used because the result would be that the function then do not appear in the dts file this would break lifecycle hook because the class would be seen a not implementing the interface correctly this would also break hostlistener because the compiled template would attempt to call the onclick function but those would also not appear in the dts and would produce error like property onclick doe not exist on type routerlinkwithhref pr close ,refactor
3047,core error if cs custom property in host binding ha number in name fix an error if a cs custom property used inside a host binding ha a number in it name the error is thrown because the styling parser only expects character from a to zdashes underscore and a handful of other character fix pr close ,fix
3048,devinfra migrate to unified commit message type in commit message linting previously commit message type were provided a part of the ngdev config in the repository using the ngdev toolset this change remove this configuration expectation and instead predefines the valid type for commit message additionally with this new unified set of type requirement around providing a scope have been put in place scope are either required optional or forbidden for a given commit type pr close ,feat
3049,devinfra update to latest benchpress version we recently updated the benchpress package to have a more loose angular core peer dependency and le other unused dependency we should make sure to use that in the devinfra package so that peer dependency can be satisified in consumer project and so that le unused dependency are brought into project pr close ,feat
3050,devinfra save invalid commit message attempt to be restored on next commit attempt when a commit message fails validation rather than throwing out the commit message entirely the commit message is saved into a draft file and restored on the next commit attempt pr close ,feat
3051,devinfra extract the commit message parsing function into it own file extract the commit message parsing function into it own file pr close ,refactor
3052,devinfra use promptconfirm util in ngdevs formatter use the promptconfirm util instead of manually creating a confirm prompt with inquirer pr close ,refactor
3053,devtools update angularframework ,build
3054,devtools update extension version ,build
3055,devtools revert solutionstyle tsconfig in ee test to align with cli ,build
3056,devtools revert solutionstyle tsconfig to align with cli ,build
3057,devtools update dependency karmajasmine to v ,build
3058,devinfra add support for formatting all staged file add an ngdev formatter option to format all of the staged file this will can be used to format only the staged file during the precommit hook pr close ,feat
3059,devtools remove obsolete hover cs that is causing contrast issue in dark mode and set the header height to match the new search filter height for consistency ,fix
3060,devtools set extension icon and popup only on devtools background message the script handle message globally for all extension running on the page i this case we dont want to do anything if the message doe not come from angular devtools itself ,fix
3061,devtools update angularframework ,build
3062,compilercli add compiler option to report error when assigning to restricted input field the compiler doe not currently report error when there an input for a private protected or readonly directivecomponent class member this change add an option to enable reporting error when a template attempt to bind to one of these restricted input field pr close ,feat
3063,compilercli only use type constructor for directive with generic type prior to this change the template type checker would always use a typeconstructor to instantiate a directive this typeconstructor call serf two purpose infer any generic type for the directive instance from the input that are passed in type check the input that are passed into the directive input the first purpose is only relevant when the directive actually ha any generic type and using a typeconstructor for these case inhibits a typecheck performance penalty a a typeconstructors signature is quite complex and need to be generated for each directive this commit refactors the generated typecheck block to only generate a typeconstructor call for directive that have generic type type checking of input is achieved by generating individual statement for all input using assignment into the directive field even if a typeconstructor is used for typeinference of generic type will the input checking also be achieved using the individual assignment statement this is done to support the rework of the language service which will start to extract symbol information from the typecheck block a a future optimization it may be possible to reduce the number of input passed into a typeconstructor to only those input that contribute the the typeinference of the generic a this is not a necessity at the moment this is left a followup work close pr close ,refactor
3064,compilercli infer quote expression a any type in type checker quote expression are expression that start with an identifier followed by a comma allowing arbitrary syntax to follow these kind of expression would throw a an error in the template type checker which would make them hard to track down a quote expression are not generally used at all the error would typically occur for url that would inadvertently occur in a binding html a href this commit let such binding be inferred a the any type fix resolve fw pr close ,fix
3065,compilercli avoid creating value expression for symbol from typeonly import in typescript support wa added for typeonly import which only brings in the symbol a a type not their value the angular compiler did not yet take the typeonly keyword into account when representing symbol in type position a value expression the class metadata that the compiler emits would include the value expression for it parameter type generating actual import a necessary for typeonly import this should not be done a it introduces an actual import of the module that wa originally just a typeonly import this commit let the compiler deal with typeonly import specially preventing a value expression from being created fix pr close ,fix
3066,compiler evaluate safe navigation expression in correct binding order when using the safe navigation operator in a binding expression a temporary variable may be used for storing the result of a sideeffectful call for example the following template us a pipe and a safe property access html apppersonview enabledenabled firstnameperson asyncnameapppersonview the result of the pipe evaluation is stored in a temporary to be able to check whether it is present the temporary variable need to be declared in a separate statement and this would also cause the full expression itself to be pulled out into a separate statement this would compile into the following pseudocode instruction j var temp null var firstname temp pipeasync ctxperson null null tempname propertyenabled ctxenabledfirstname firstname notice that the pipe evaluation happens before evaluating the enabled binding such that the runtimes internal binding index would correspond with enabled not firstname this introduces a problem when the pipe us wrappedvalue to force a change to be detected a the runtime would then mark the binding slot corresponding with enabled a dirty instead of firstname this result in the enabled binding to be updated triggering setter and affecting how onchanges is called in the pseudocode above the intermediate firstname variable is not strictly necessaryit only improved readability a bitand emitting it inline with the binding itself avoids the outoforder execution of the pipe j var temp null propertyenabled ctxenabled firstname temp pipeasync ctxperson null null tempname this commit introduces a new bindingform that result in the above code to be generated and add compiler and acceptance test to verify the proper behavior fix pr close ,fix
3067,core prevent ngmodule scope being overwritten in jit compiler in jit compiled apps component definition are compiled upon first access for a component class a that extends component class b the b component is also compiled when the inheritdefinitionfeature run during the compilation of a before it ha finalized a problem arises when the compilation of b would flush the ngmodule scoping queue where the ngmodule declaring a is still pending the scope information would be applied to the definition of a but it compilation is still in progress so requesting the component definition would compile a again from scratch this inner compilation is correctly assigned the ngmodule scope but once the outer compilation of a finish it would overwrite the inner compilation definition losing the ngmodule scope information in summary flushing the ngmodule scope queue could trigger a reentrant compilation where jit compilation is nonreentrant to avoid the reentrant compilation a compilation depth counter is introduced to avoid flushing the ngmodule scope during nested compilation fix pr close ,fix
3068,router restore historystate object for navigation coming from angular router when navigation coming from angular router we may have a payload stored in state property when this exists set extra state to the payload pr close ,fix
3069,devinfra update inrelated file location in pullapprove config the change in split renderints file into smaller script but the pullapprove config wa not updated to reflect that this commit update the pullapprove config to reflect the recent change in inrelated file pr close ,fix
3070,core query not matching string injection token query werent matching directive that provide themselves via string injection token because the assumption wa that any string passed to a query decorator refers to a template reference these change make it so we match both template reference and provider while giving precedence to the template reference fix fix pr close ,fix
3071,compilercli preserve quote in class member name when we were outputting class member for setclassmetadata call we were using the string representation of the member name this can lead to u generating invalid code when the name contains dash and is quoted eg output hasdashes new eventemitter because the quote will be stripped for the string representation these change fix the issue by using the original name ast node that wa used for the declaration and which know whether it supposed to be quoted or not fix pr close ,fix
3072,core break ints into smaller file this commit contains no change to code it only break ints file into ints inapplyts inparsets inpostprocessts for easier maintenance pr close ,refactor
3073,router defer loading of wildcard module until needed defer loading the wildcard module so that it is not loaded until subscribed to this fix an issue where it wa being eagerly loaded a an example wildcard module loading should only occur after all other potential match have been exhausted a test case for this wa also added to demonstrate the fix fix pr close ,fix
3074,platformserver remove style added by serverstyleshost on destruction when a serverstyleshost instance is destroyed all of the shared style added to the dom head element by that instance should be removed without this removal over time a large number of style rule will build up and cause extra memory pressure this brings the serverstyleshost in line with the domstyleshost used by the platform browser which performs this same cleanup pr close ,fix
3075,core store the currently selected icu in lview the currently selected icu wa incorrectly being stored it tnode rather than in lview remove ticucontainernodeactivecaseindex add lviewticucurrentcaseindex pr close ,fix
3076,devtools update angularcli ,build
3077,devtools unsubscribe from file upload subscription instead of subject ,fix
3078,devtools export profile to a filename that more closely follows chrome devtools profile export ,refactor
3079,devtools update angularframework ,build
3080,devtools ensure that the dark mode toggle button reflects the current theme on load previously this button would appear toggled independent of the current theme this caused the button to appear to be untoggled in the case when angular devtools detected darkmode in chrome devtools ,fix
3081,devtools remove experimental label from the timing api ,refactor
3082,devtools prevent ngdeep component styling from leaking to child component previously this cs wa causing a styling error in the profiler visualization menu panel ,fix
3083,devtools increase gutter width to px previously it wa too difficult to see and interact with the split gutter ,feat
3084,form get rid of duplicate function this commit performs minor refactoring in form package to get rid of duplicate function it look like the function were duplicated due to a slightly different type signature but their logic is completely identical the logic in retained function remains the same and now these function also accept a generic type to achieve the same level of type safety pr close ,refactor
3085,common use getelementbyid in viewportscrollerscrolltoanchor this commit us getelementbyid and getelementsbyname when an anchor scroll happens to avoid escaping the anchor and wrapping the code in a trycatch block related to pr close ,refactor
3086,core add debug range to lviewdebug with matcher this change provides better typing for the lviewdebug property which is intended to be used by human while debugging the application with ngdevmode turned on in addition this chang also add jasmine matcher for better asserting that lview is in the correct state pr close ,refactor
3087,serviceworker fix the chrome debugger syntax highlighter the chrome debugger is not able to render the syntax properly when the code contains backticks this is a known issue in chrome and they have an open issue for that this commit add the workaround to use double backslash with one backtick at the end of the line this can be reproduced by running the following command yarn bazel test packagesformstest configdebug when opening the chrome debugger tool you should see the correct code highlighting syntax pr close ,fix
3088,compilercli typecheck input that include undefined when there coercion member for attribute binding that target a directive input the template type checker is able to verify that the type of the input expression is compatible with the directive declaration for said input this checking adheres to the strictnullchecks flag a configured in the typescript compilation such that error are reported for expression that include undefined or null in their type if the input declaration doe not include those type there wa a bug with this level of typechecking for directive that also declare coercion member where binding an expression that includes the undefined type to a directive input that doe not include the undefined type would not be reported a error this commit fix the bug by changing the typeconstructor in typecheck code to use an intersection type of regular input and coerced input instead of a union type the union type would inadvertently allow undefined type to be assigned into the regular input a that would still satisfy the characteristic of a union type a a result of this change you may start to see build failure if stricttemplates is enabled and strictinputtypes is not disabled these error are legitimate and some action is required to achieve a successful build update the template for which an error is reported and introduce the nonnull assertion operator at the end of the expression this remove the undefined type from the expression type making it appear a a valid assignment disable strictnullinputtypes in the compiler option this will implicitly add the nonnull assertion operator similar to option but all template in the compilation are affected update the directive input declaration to include the undefined type if the directive is not implemented in an external library pr close ,fix
3089,core extract icuswitchcase icuupdatecase removenestedicu extract icuswitchcase icuupdatecase removenestedicu into separate function to align them with the debug property text pr close ,refactor
3090,core add human readable debug for in in code break up internationalization into opcodes which are then stored in array to make it easier to debug the codebase this pr add debug property to the array which present the data in human readable format pr close ,refactor
3091,serviceworker describe how assetdatagroup order affect request handling the order of asset and datagroups in ngswconfigjson affect how a request is handled by the serviceworker previously this wa not clearly documented this commit describes how the order of assetdatagroups affect request handling close pr close ,docs
3092,docsinfra correctly generate cli command doc when the overview page move previously the processclicommands dgeni processor which is used to generate the doc page for the cli command expected the cli command overview page with a url of cli to exist a a child of a toplevel navigation section cli command if one tried to move the cli command section inside another section processclicommnads would fail to find it and thus fail to generate the cli command doc this problem came up in this commit update the processclicommands processor to be able to find it regardless of the position of the cli command section inside the navigation doc pr close ,fix
3093,compilercli mark eager ngmodulefactory construction a not side effectful roll forward of this allows closure compiler to tree shake unused constructor call to ngmodulefactory which is otherwise considered sideeffectful the angular compiler generates factory object which are exported but typically not used a they are only needed for compatibility with view engine this result in toplevel constructor call such a typescript export const foongfactory new ngmodulefactoryfoo ngmodulefactory ha a sideeffecting constructor so this statement can not be tree shaken even if foongfactory is never imported the ngmodulefactory continues to reference it associated ngmodule and prevents the module and all it unused dependency from being tree shaken making closure build significantly larger than necessary the fix here is to wrap ngmodulefactory constructor with nosideeffects which trick the closure compiler into assuming that the invoked function ha no side effect this allows it to treeshake unused ngmodulefactory constructor when they arent imported since the factory can be removed the module can also be removed if nothing else reference it thus tree shaking unused dependency a expected the one notable edge case is for lazy loaded module internally lazy loading is done a a side effect when the lazy script is evaluated for angular this side effect is registering the ngmodule in ivy this is done by the ngmodulefactory constructor so lazy loaded module can not have their toplevel ngmodulefactory constructor call tree shaken we handle this case by looking for the id field on ngmodule annotation all lazy loaded module include an id when this id is found the ngmodulefactory is generated without with nosideeffects call so closure will not tree shake it and the module will lazyload correctly pr close ,fix
3094,compiler add moduleinfo interface this introduces a new moduleinfo interface to represent some of the statically analyzed data from an ngmodule this get passed into transforms to give them more context around a given ngmodule in the compilation pr close ,refactor
3095,core add nosideeffects a private export this is to enable the compiler to generate nosideeffects call this is a private export gated by ɵ pr close ,refactor
3096,devtools update angularcli ,build
3097,platformbrowser specify return type of parseeventname this commit refactors the argument of the parseeventname function to use an object with named property instead of using an object indexer pr close ,refactor
3098,common ensure scrollrestoration is writable some specialised browser that do not support scroll restoration eg some web crawler do not allow scrollrestoration to be writable we already sniff the browser to see if it ha the windowscrollto method so now we also check whether windowhistoryscrollrestoration is writable too fix pr close ,fix
3099,docsinfra reformat scrollservice file preempting code formatting change when the code is updated in a subsequent commit pr close ,style
3100,router better warning message when a router outlet ha not been instantiated it is confusing when route are successfully activated but a component is not present on a page with this message it more clear pr close ,feat
3101,router prevent calling unsubscribe on undefined subscription in routerpreloader previously the ngondestroy method called unsubscribe regardless of if subscription had been initialized this can lead to an error attempting to call unsubscribe of undefined this change prevents this error and instead only attempt unsubscribe when the subscription ha been defined pr close ,fix
3102,compilercli match wraphost parameter type within plugin interface the tscplugin interface using a type of tscompilerhostpartialunifiedmoduleshost for the host parameter of the wraphost method however prior to this change the interface implementing ngtscplugin class used a type of tscompilerhostunifiedmoduleshost for the parameter this change corrects the inconsistency and allows unifiedmoduleshost member to be optional when using the ngtscplugin pr close ,fix
3103,devinfra provide organizationwide mergetool label configuration previously each angular repository had it own strategyconfiguration for merging pull request and cherrypicking we worked out a new strategy for labelingbranchingversioning that should be the canonical strategy for all actively maintained project in the angular organization this pr provides a ngdev merge configuration that implement the labelingbranchingmerging a per the approved proposal see the following document for the proposal this commit is based on for the merge script labelingbranching the merge tool label configuration can be conveniently accesed within each ngdev configuration and can also be extended if there are special label on individual project this is one of the reason why the label are not directly built into the merge script the script should remain unopinionated and flexible the configuration is conceptually powerful enough to achieve the procedure a outlined in the versioningbranchinglabeling proposal pr close ,feat
3104,devinfra support userfailures when computing branch for target label the merge tool provides a way for configuration to determine the branch for a label lazily this is supported because it allows label to respect the currently selected base branch through the github ui eg if target label is applied on a pr and the pr is based on the patch branch then the change could only go into the selected target branch while if it would be based on master the change would be cherrypicked to master too this allows for convenient backporting of change if they did not apply cleanly to the primary development branch master we want to expand this function so that it is possible to report failure if an invalid target label is appplied eg target major not allowed in some situation or if the github base branch is not valid for the given target label eg if target lts is used but it not based on a lts branch pr close ,feat
3105,devinfra provide github api instance to lazy merge configuration the merge script currently accepts a configuration function that will be invoked only when the ngdev merge command is executed this ha been done that way because the merge tooling usually relies on external request to git or npm for constructing the branch configuration we do not want to perform these slow external query on any ngdev command though so this became a lazily invoked function this commit add support for these configuration function to run asynchronously by returning a promise that will be awaited so that request could also be made to the github api this is benefical a it could avoid dependence on the local git state and the http request are more powerfulfaster additionally in order to be able to perform github api request with an authenticated instance the merge tool will pas through a githubclient instance that us the specified githubtoken or from the environment this ensures that all api request use the same githubclient instance and can be authenticated mitigating potential rate limit pr close ,feat
3106,core update reference and doc to change async to waitasync the last commit change async to waitforasync this commit update all usage in the code and also update aio doc pr close ,feat
3107,core rename async to waitforasync to avoid confusing angularcoretesting provide async test utility but the name async is confusing with the javascript keyword async and in some test case if you want to use both the async from angularcoretesting and asyncawait you may have to write the code like this typescript ittest async operation asyncasync const result await asyncmethod expectresulttoequalexpected so in this pr the async is renamed to waitforasync and also deprecate async pr close ,feat
3108,compiler update unparsable character reference entity error message within an angular template when a character entity is unable to be parsed previously a generic unexpected character error wa thrown this doe not properly express the issue that wa discovered a the issue is actually caused by the discovered character making the whole of the entity unparsable the compiler will now instead inform via the error message what string wa attempted to be parsed and what it wa attempted to be parsed a example for this template p xp p before this change unexpected character p after this change unable to parse entity xp hexadecimal character reference entity must end with fix pr close ,fix
3109,devtools update angularframework ,build
3110,devtools update angularcli ,build
3111,docsinfra update doc example tslintjson to match cli and fix failure this commit update the tslintjson configuration file that is used to lint the doc example to match the one generated for new angular cli apps there are some minimal difference marked with todo comment for thing such a component selector prefix that would require extensive andor difficult to validate change in guide this commit also includes the final adjustment to make the doc example code compatible with the new tslint rule the bulk of the work ha been done in previous commits pr close ,refactor
3112,docsinfra fix doc example for angularspecific tslint rule this commit update the doc example to be compatible with the following angularspecific tslint rule componentselector directiveselector noconflictinglifecycle nohostmetadataproperty noinputrename nooutputnative nooutputrename this is in preparation of updating the doc example tslintjson to match the one generated for new angular cli apps in a future commit pr close ,refactor
3113,docsinfra fix doc example for tslint rule preferconst this commit update the doc example to be compatible with the preferconst tslint rule this is in preparation of updating the doc example tslintjson to match the one generated for new angular cli apps in a future commit pr close ,refactor
3114,docsinfra fix doc example for tslint rule related to underscore in variable name this commit update the doc example to be compatible with the variablename tslint rule without requiring the allowleadingunderscore and allowtrailingunderscore option this is in preparation of updating the doc example tslintjson to match the one generated for new angular cli apps in a future commit pr close ,refactor
3115,docsinfra fix doc example for tslint rule related to variable name this commit update the doc example to be compatible with the noshadowedvariable and variablename tslint rule this is in preparation of updating the doc example tslintjson to match the one generated for new angular cli apps in a future commit pr close ,refactor
3116,docsinfra fix doc example for tslint rule memberordering this commit update the doc example to be compatible with the memberordering tslint rule this is in preparation of updating the doc example tslintjson to match the one generated for new angular cli apps in a future commit pr close ,refactor
3117,docsinfra fix doc example for tslint rule noanglebrackettypeassertion this commit update the doc example to be compatible with the noanglebrackettypeassertion tslint rule this is in preparation of updating the doc example tslintjson to match the one generated for new angular cli apps in a future commit pr close ,refactor
3118,docsinfra fix doc example for tslint rule related to object property this commit update the doc example to be compatible with the nostringliteral objectliteralkeyquotes and objectliteralshorthand tslint rule this is in preparation of updating the doc example tslintjson to match the one generated for new angular cli apps in a future commit pr close ,refactor
3119,docsinfra fix doc example for tslint rule onlyarrowfunctions this commit update the doc example to be compatible with the onlyarrowfunctions tslint rule this is in preparation of updating the doc example tslintjson to match the one generated for new angular cli apps in a future commit pr close ,refactor
3120,docsinfra fix doc example for tslint rule jsdocformat this commit update the doc example to be compatible with the jsdocformat tslint rule this is in preparation of updating the doc example tslintjson to match the one generated for new angular cli apps in a future commit pr close ,style
3121,docsinfra fix doc example for tslint rule semicolon this commit update the doc example to be compatible with the semicolon tslint rule this is in preparation of updating the doc example tslintjson to match the one generated for new angular cli apps in a future commit pr close ,style
3122,docsinfra fix doc example for tslint rule related to whitespace this commit update the doc example to be compatible with the align spacebeforefunctionparen and typedefwhitespace tslint rule this is in preparation of updating the doc example tslintjson to match the one generated for new angular cli apps in a future commit pr close ,style
3123,docsinfra fix doc example for tslint rule importspacing this commit update the doc example to be compatible with the importspacing tslint rule this is in preparation of updating the doc example tslintjson to match the one generated for new angular cli apps in a future commit pr close ,style
3124,docsinfra remove unnecessary use strict from doc example t file by default typescript will emit use strict directive so it is not necessary to include use strict in t file pr close ,refactor
3125,docsinfra remove unused styleguide example the code style rule have been removed from the style guide in bebcffafcbececf this commit remove the corresponding file and related unused code from thestyleguide example project pr close ,refactor
3126,languageservice ivy do not retrieve tsprogram at startup this commit remove compiler instantiation at startup this is because the constructor is invoked during the plugin loading phase in which the project ha not been completely loaded retrieving tsprogram at startup will trigger an updategraph operation which could only be called after the project ha loaded completely without this change the ivy l can not be loaded a a tsserver plugin note that the whole compiler class is temporary so change made there are only for development once we have proper integration with ngtsc the compiler class would be removed pr close ,fix
3127,compiler add pure annotation to getinheritedfactory call currently the getinheritedfactory function is implemented to allow closure to remove the call if the base factory is unused however this method doe not work with terser by adding the pure annotation terser will also be able to remove the call when unused pr close ,fix
3128,compiler metadata should not include method on objectprototype this commit fix a bug in view engine whereby the compiler errorneously think that a method of a component ha decorator metadata when that method is one of those in objectprototype for example tostring this bug is discovered in v of angularlanguageservice after the default bundle format wa switched from e to e e output j if propmetadatapropname decoratorspushapplydecorators spreadpropmetadatapropname e output j if propmetadatapropname decoratorspushpropmetadatapropname the bug wa not discovered in e because the polyfill for the spread operator happily accepts parameter that do not have the iterable symbol j function spread for var ar i i argumentslength i ar arconcatreadargumentsi return ar whereas in e it ’ ll fail since the iterable symbol is not present in propmetadatatostring which evaluates to a function fix pr close ,fix
3129,compilercli disable one typechecker test on window due to path sensitivity issue this commit disables one typechecker test added a a part of which make assertion about the filename while running on window such assertion are currently suffering from a case sensitivity issue pr close ,test
3130,router clarify how base href is used to construct target the documentation is not clear on how the base href and appbasehref are used this commit should help clarify more complicated usecases beyond the most common one of just a pr close ,docs
3131,compiler mark ngmodulefactory construction a not side effectful this allows closure compiler to tree shake unused constructor call to ngmodulefactory which is otherwise considered sideeffectful the angular compiler generates factory object which are exported but typically not used a they are only needed for compatibility with view engine this result in toplevel constructor call such a typescript export const foongfactory new ngmodulefactoryfoo ngmodulefactory ha a sideeffecting constructor so this statement can not be tree shaken even if foongfactory is never imported the ngmodulefactory continues to reference it associated ngmodule and prevents the module and all it unused dependency from being tree shaken this effectively prevents all component from being tree shaken making closure build significantly larger than they should be the fix here is to wrap ngmodulefactory constructor with nosideeffects which trick the closure compiler into assuming that the invoked function ha no side effect this allows it to treeshake unused ngmodulefactory constructor when they arent imported since the factory can be removed the module can also be removed if nothing else reference it thus tree shaking unused component a expected pr close ,fix
3132,compiler wrap large string in function large string constant are now wrapped in a function which is called whenever used this work around a unique limitation of closure where it will always inline string literal at every usage regardless of how large the string literal is or how many time it is usedthe workaround is to use a function rather than a string literal closure ha differently inlining semantics for function where it will check the length of the function and the number of time it is used before choosing to inline it by using a function ngtsc make closure more conservative about inlining large string and avoids blowing up the bundle sizethis optimization is only used if the constant is a large string a wrapping function is not included for other use case since it would just increase the bundle size and add unnecessary runtime performance overhead pr close ,refactor
3133,docsinfra lazyloads svg icon prior to this commit svg icon were all loaded in the constructor of the customiconregistry this commit avoids that and load svg icon on demand pr close ,refactor
3134,docsinfra simplifyimprove copierservice hidden textarea creation this commit simplifies the creation of the temporary hidden textarea element used by copierservice by switching from absolute to fixed positioning and not requiring page scroll offset it also make the following minor improvement make the element invisible via opacity instruct screenreaders to ignore the element via ariahidden true note these improvement are based on angular cdks pendingcopy class and the change proposed in pr angularcomponents pr close ,refactor
3135,docsinfra preserve focus on copy and prevent scrolling to bottom on ie the copierservice is used for copying text to the user clipboard it is for example used in codecomponent to copy example code snippet this is implemented by creating a temporary hidden textarea element setting it value to the text that need to be copied executing the copy command and finally removing the element from the dom previously a a result of copierservices implementation the focused element would lose focus while the temporary textarea element would implicitly gain focus when selecting it content this had an even worse sideeffect on ie which seems to scroll to the bottom of the containing element here body when the focused element is removed this commit fix these issue by keeping track of the previously focused element and restoring it focus after the copy operation note this fix is inspired by angular cdks pendingcopy class fix pr close ,fix
3136,docsinfra improve code readability of copierservice this commit improves the code readability of the copierservice by addingimproving jsdoc comment for method avoiding unnecessary instancewide property fixing indentation to be consistent at two space clearly separating the logic for creating and populating a textarea from the logic for selecting and copying it content pr close ,refactor
3137,compilercli support typechecking a single component this commit add a method getdiagnosticsforcomponent to the templatetypechecker which doe the minimum amount of work to retrieve diagnostics for a single component with the normal reusedprogramstrategy this offer virtually no improvement over the standard getdiagnosticsforfile operation but if the typecheckingprogramstrategy support separate shim for each component this operation can yield a faster turnaround for component that are declared in file with many other component pr close ,refactor
3138,compilercli add templateid to template diagnostics previously a stable template id wa implemented for each component in a file this commit add this id to each templatediagnostic generated from the template typechecker so it can potentially be used for filtration pr close ,refactor
3139,compilercli allow overriding template in the type checker this commit add an overridecomponenttemplate operation to the template typechecker this operation change the template used during template typechecking operation overriding a template cause any previous work for it to be discarded and the template typechecking engine will regenerate the tcb for that template on the next request this operation can be used by a consumer such a the language service to get rapid feedback or diagnostics a the user is editing a template file without the need for a full incremental build iteration close pr close ,refactor
3140,compilercli efficient singlefile type checking diagnostics previously the templatetypechecker abstraction allowed fetching diagnostics for a single file but under the hood would generate type checking code for the entire program to satisfy the request with this commit an optimizefor hint is passed to getdiagnosticsforfile which indicates whether the user intends to request diagnostics for the whole program or is truly interested in just the single file if the latter the templatetypechecker can perform only the work needed to produce diagnostics for just that file thus returning answer more efficiently pr close ,refactor
3141,compilercli allow program strategy to opt out of inlining the template typechecking engine relies on the abstraction interface typecheckingprogramstrategy to create updated tsprograms for template typechecking the basic api is that the typechecking engine request change to certain file in the program and the strategy provides an updated tsprogram typically such change are made to ngtypecheck shim file but certain condition can cause template typechecking to require inline operation which change user t file instead the strategy used by ngc the reusedprogramstrategy support these kind of update but other client such a the language service might not always support modifying user file to accommodate this the typecheckingprogramstrategy interface wa modified to include a supportsinlineoperations flag if an implementation specifies false for inline support the template typechecking system will return diagnostics on component which would otherwise require inline operation close pr close ,refactor
3142,compilercli introduce the templatetypechecker abstraction this commit significantly refactors the typecheck package to introduce a new abstraction the templatetypechecker to achieve this a typecheckapi package is introduced containing common interface that consumer of the template typechecking infrastructure can depend on without incurring a dependency on the template typechecking machinery a a whole interface for templatetypechecker and typecheckcontext are introduced which contain the abstract operation supported by the implementation class templatetypecheckerimpl and typecheckcontextimpl respectively the templatetypechecker interface support diagnostics on a whole program basis to start with but the implementation is purposefully designed to support incremental diagnostics at a perfile or percomponent level templatetypechecker support direct access to the type check block of a component the testing utility is refactored to be a lot more useful and new test are added for the new abstraction pr close ,refactor
3143,compilercli make fileshim split n instead of previously in the template typechecking engine it wa assumed that every input file would have an associated typechecking shim the type check block code for all component in the input file would be generated into this shim this is fine for wholeprogram type checking operation but to support the language service requirement for low latency it would be ideal to be able to check a single component in isolation especially if the component is declared along with many others in a single file this commit remove the assumption that the fileshim mapping is and introduces the concept of componenttoshim mapping any typecheckingprogramstrategy must provide such a mapping to achieve this type checking record information is now split into filelevel data a well a pershim data component are now assigned a stable templateid which is unique to the file in which theyre declared pr close ,refactor
3144,common narrow ngif context variable in template type checker when the ngif directive is used in a template it context variable can be used to capture the bound value this is sometimes used in complex expression where the resulting value is captured in a context variable there two syntax form available binding to ngifcontextngif using the a syntax html span ngifenabled user a uunamespan binding to ngifcontextimplicit using the let syntax html span ngifenabled user let uunamespan because of the semantics of ngif it is known that the captured context variable is truthy however the template type checker would not consider them a such and still report error when strict is enabled this commit update ngifs context guard to make the type of the context variable truthy avoiding the issue based on pr close ,fix
3145,element update api doc for custom element by adding crossreferences to angular element overview guide pr close ,docs
3146,core attribute decorator attributename is mandatory attribute decorator ha defined attributename a optional but actually it mandatory and compiler throw an error if attributename is undefined made attributename mandatory in the attribute decorator to reflect this functionality fix pr close ,fix
3147,core correct someservice to somecomponent pr close ,docs
3148,core unify the signature between ngzone and noopzone now we have two implementation of zone in angular one is ngzone the other is noopzone they should have the same signature includes property method in this pr unify the signature of the two implementation and remove the unnecessary cast pr close ,fix
3149,devtools update angularframework ,build
3150,compilercli add support for string literal class member the current implementation of the typescriptreflectionhost doe not account for member that are string literal ie class a stringliteralprop string pr close ,fix
3151,platformbrowser specify return type of parseeventname this commit refactors the argument of the parseeventname function to use an object with named property instead of using an object indexer pr close ,refactor
3152,core remove unused export this export used to be here to turn this file into an e module this is no longer needed because the file contains import pr close ,refactor
3153,zonejs zone patch rxjs should return null unsubscribe correctly close in some rxjs operator such a retrywhen rxjs internally will set subscriptionunsubscribe method to null and the current zonejs monkey patch didnt handle this case correctly even rxjs set unsubscribe to null zonejs still return a function by finding the prototype chain this pr fix this issue and the following test will pas const errorgenerator return throwerrornew errorerror emit const genericretrystrategy finalizer void attempt observableany attemptspipe mergemaperror i const retryattempt i if retryattempt return throwerrorerror return timerretryattempt finalize finalizer errorgenerator pipe retrywhengenericretrystrategy expectloglengthtobe done catcherrorerror oferror subscribe pr close ,fix
3154,devtools update deps ,build
3155,compiler share identical stylesheets between component in the same file prior to this commit duplicated style defined in multiple component in the same file were not shared between component thus causing extra payload size this commit update compiler logic to use constantpool for the style while generating the style array on component def which enables style sharing when needed when duplicate style are present resolve pr close ,fix
3156,compiler allow string with certain length to be included into constantpool prior to this commit the constantpool ignored all primitive value it turned out that it beneficial to include string above certain length to the pool a well this commit update the constantpool logic to allow such string to be shared across multiple instance if needed for instance this is helpful for component style that might be reused across multiple component in the same file pr close ,refactor
3157,compiler separate compilation and transform phase this commit split the transformation into separate step ivy compilation and actual transformation of corresponding t node this is needed to have all oexpressions generated before any t transforms happen this allows constantpool to properly identify expression that can be shared across multiple component declared in the same file resolve pr close ,refactor
3158,router extract router config utils to a separate file this commit refactors router package to move config utils to a separate file for better organization and to resolve the problem with circular dependency issue resolve pr close ,refactor
3159,devtools update dependency typeschrome to ,build
3160,devtools update angularcomponents to ,build
3161,devtools update dependency jasminecore to ,build
3162,devinfra ensure condition with group do not fail verification there are a few change in this pr to ensure condition that are based on group ie groupspendinglength do not fail the verify task remove the warning when a condition is encountered that depends on the group state the warning will otherwise be printed once for every file that trigger the execution of the condition time add an unverifiable flag to groupcondition interface and set it to true when an error is encountered due to attempting to get the state of group in a condition ignore any unverifiable condition when gathering unmatched condition these should not be considered unmatched for verification purpose print the unverifiable condition by group in the result sample output ┌──────────────────────────────────────────────────────────────────────────────┐ │ pullapprove result by group │ └──────────────────────────────────────────────────────────────────────────────┘ group skipped group matched condition by group group unmatched condition by group group unverifiable condition by group group publicapi lengroupspendingexcluderequiredminimumreview lengroupsrejectedexcluderequiredminimumreview sizetracking lengroupspendingexcluderequiredminimumreview lengroupsrejectedexcluderequiredminimumreview circulardependencies lengroupspendingexcluderequiredminimumreview lengroupsrejectedexcluderequiredminimumreview pr close ,fix
3163,devinfra add phased review to group requiring final signoff after initial review the sizetracking publicapi and circulardependencies group can get a lot of pr to review in addition the member of these group do not always have the necessary context to fully review the pr in question this change ensures that the owner in the group where the change are being made have approve the change ie the arent pending or rejected before requesting final signoff from these three critical group pr close ,feat
3164,devinfra create anchorsaliases for excluded always active group globalapprovers globaldocsapprovers and requiredminimumreview group are always active it useful to have alias for getting group that are activependingrejected while excluding these few pr close ,refactor
3165,zonejs update zonejs bundle doc since the apf change since the pr change the zonejs bundle to angular package format the bundle namelocation are changed so this pr updated the readmemd doc for the zone bundle also add the recent added new bundle zonepatchmessageport doc pr close ,docs
3166,zonejs patch nodejs eventemtterprototypeoff close zonejs nodejs patch should also patch eventemitterprototypeoff a removelistener so off can correctly remove the listener added by eventemitterprototypeaddlistener pr close ,fix
3167,zonejs cleartimeoutclearinterval should call on object global close cleartimeout is patched by zonejs and it finally call the native delegate of cleartimeout the current implemention only call clearnativeid but it should call on object global like clearnativecallglobal id otherwise in some env it will throw error cleartimeout called on an object that doe not implement interface window pr close ,fix
3168,zonejs move mutationobserverfilereader to different module separate eventtarget filereader mutationobserver and intersectionobserver patch into different module so the user can disable those module separately pr close ,feat
3169,core fix incorrectly rendered code example in structural directive guide the code example wa missing a close brace and also incorrectly rendered the template div a an actual div in the page dom pr close ,docs
3170,docsinfra simplify examplezipper by removing packagejsoncustomizer previously examplezipper the tool used for creating zip archive from our doc example used the packagejsoncustomizer to generate packagejson file for each example type this had the following drawback the generated file had to be kept uptodate with the corresponding boilerplate file in aiotoolsexamplessharedboilerplate and there wa no easy way to find out when the file got outofsync the packagejsoncustomizer logic wa nontrivial and difficult to reason about the same information wa duplicated in the boilerplate file and the customizer configuration file this setup wa useful when we used a single packagejson file for all doc example now however each example type can have it own boilerplate packagejson file including script and dependency relevant to the example type therefore it is no longer necessary to generate packagejson file for zip archive this commit eliminates the drawback mentioned above and simplifies the examplezipper tool by removing packagejsoncustomizer and reusing the boilerplate packagejson file for zip archive the change in this commit also fix some zip archive that were previously broken for example due to missing dependency pr close ,build
3171,docsinfra correctly display copy button in ie fix button top portion wa clipped in ie by setting overflow to visible fix pr close ,fix
3172,docsinfra upgrade cli command doc source to bbd updating angularmaster from clibuildsmaster relevant change in commit range modified helpupdatejson pr close ,build
3173,devinfra add support for group in the condition evaluator condition can refer to the group array that is a list of the preceding group this commit add support to the verification for those condition this commit also add some test to the parsing and condition matching to ensure everything work a expected pr close ,refactor
3174,form create sample form app this commit creates a sample form test application to introduce the symbol test it serf a a guard to ensure that any future work on the form package doe not unintentionally increase the payload size pr close ,build
3175,form refactor common validators used in unit test a util file is added to form test package it expose simpleasyncvalidator asyncvalidator and asyncvalidatorreturningobservable validators it refactors simpleasyncvalidator and asyncvalidator to use common promise creation code it expose currentstateof allowing to get the validation state of a list of abstractcontrol close pr close ,refactor
3176,element run strategy method in correct zone default change detection fails in some case for angularelements where component event are called from the wrong zone this fix the issue by running all componentngelementstrategy method in the same zone it wa created in fix pr close ,fix
3177,docsinfra remove boilerplate file listing in exampleboilerplatejs to avoid unnecessary code duplication in doc example we have some boilerplate file for various example type in aiotoolsexamplessharedboilerplate these file are copied to each example project in aiocontentexamples according to the example type a specified in it exampleconfigjson file previously the exampleboilerplatejs which is responsible for copying the boilerplate file had list for file to be copied for each project type and only copied the listed file from the boilerplate directory to the example directory this approach had some drawback file need to be updated in two separate location in the boilerplate directory that includes the file and the file list in exampleboilerplatejs it is easy to add a file in the boilerplate directory but forget to add it in exampleboilerplatejs and not realize that it is not being included in the example project including the generated stackblitz project and zip archive this commit change the approach by removing the boilerplate file listing from exampleboilerplatejs and copying all file from a boilerplate directory to example directory this address the above drawback and simplifies the exampleboilerplatejs script i have verified that the resulting code example doc region a well a the generated stackblitz project and zip archive are identical to the one generated before this commit pr close ,build
3178,docsinfra include gitignore file in clibased doc example previously the gitignore file that is part of the boilerplate file for clibased doc example located in aiotoolsexamplessharedboilerplatecli wa not added to the example project because it wa not included in the boilerplate file list in exampleboilerplatejs this commit fix it by adding the gitignore file to the list this ensures that doc example more closely match cligenerated project pr close ,fix
3179,docsinfra correctly add polyfillsts file a boilerplate for in doc example doc example of type in need a slightly modified version of polyfillsts that import angularlocalizeinit previously this file wa not included in in example project for two reason while the file wa included in the in boilerplate file at aiotoolsexamplessharedboilerplatein it wa not included in the boilerplate file list in exampleboilerplatejs the file wa in the wrong location it wa located at the project root instead of inside the src directory this commit address the above issue ie add the file to the boilerplate file list for in project and move the file inside the src directory pr close ,fix
3180,docsinfra remove obsolete systemjsconfigwebbuildjs file from doc example there were some systemjsconfigwebbuildjs file in the systemjs boilerplate directory that are not used any more in the past these file were used in the plunkerbased live example but we no longer use plunker for live example this commit remove these obsolete file pr close ,build
3181,docsinfra remove obsolete typingsdts file from angulario and doc example there were two typingsdts file with systemjs module definition in aiosrc and aiotoolsexamplessharedboilerplatecli these are remnant from old cli version that used systemjs and are no longer needed for doc example specifically these file were never copied over to example project and thus not included in stackblitz project and zip archive this commit remove these obsolete file pr close ,build
3182,form abstractcontrol to store raw validators in addition to combined validators function this commit refactors the way we store validators in abstractcontrolbased class in addition to the combined validators function that we have we also store the original list of validators this is needed to have an ability to clean them up later at destroy time currently it problematic since they are combined in a single function the change preserve backwards compatibility by making sure public apis stay the same the only public api update is the change to the abstractcontrol class constructor to extend the set of possible type that it can accept and process which should not be breaking pr close ,feat
3183,core rename synthetic host property and listener instruction this commit update synthetic host property and listener instruction name to better align with other instruction the ɵɵupdatesynthetichostbinding instruction wa renamed to ɵɵsynthetichostproperty to match the ɵɵhostproperty instruction name and ɵɵcomponenthostsyntheticlistener wa renamed to ɵɵsynthetichostlistener since this instruction is generated for both component and directive so component is removed from the name this pr is a followup after pr pr close ,refactor
3184,common add readonlymap in place of map in keyvaluepipe readonlymap is a superset of map in keyvaluepipe we do not change the value of the object so readonlypipe work right in this case and we can accomodate more type to accomodate more type added readonlymap in key value pipe fix pr close ,feat
3185,router fix typo pr close ,docs
3186,common fix selector field in ngifas example component pr close ,docs
3187,devinfra update triage label documentation add new type confusing and type usecase label to the triage readme a well a clarify that freq and severity are only required for type bugfix pr close ,refactor
3188,devinfra allow usecase and confusing type to be marked a triaged some issue report dont really fall into any of the current bucket that count towards triage level bugfix feature or refactor some report are working a intended but confusing the label might be type confusing comp doc comp router generally working a originally designed but a usecase could be argued for a different implementation this type of report is a little hard to triage it may be neither a bug nor feature but more of a type usecase these may eventually turn into a bugfix or feature but cant necessarily be put in those bucket immediately pr close ,refactor
3189,compiler properly associate source span for implicitly closed element html is very lenient when it come to closing element so angulars parser ha rule that specify which element are implicitly closed when closing a tag the parser keep track of the nesting of tag name using a stack and parsing a closing tag will pop a many element off the stack a possible provided that the element can be implicitly closed for example consider the following template divbrdiv the br is implicitly closed when parsing div because br is a void element divpdiv the p is implicitly closed when parsing div a p is allowed to be closed by the closing of it parent element ullia libul the first li is implicitly closed when parsing the second li whereas the second li would be implicitly closed when parsing the ul in all the case above the parsed structure would be correct however the source span of the closing div would incorrectly be assigned to the element that is implicitly closed the problem wa that closing an element would associate the source span with the element at the top of the stack however this may not be the element that is actually being closed if some element would be implicitly closed this commit fix the issue by assigning the end source span with the element on the stack that is actually being closed any implicitly closed element that are popped off the stack will not be assigned an end source span a the implicit closing implies that no ending element is present note that there is a difference between selfclosed element such a input and implicitly closed element such a input the former doe have an end source span identical to it start source span whereas the latter doe not fix resolve fw pr close ,fix
3190,compiler remove unused parser method these method are no longer used so they can safely be removed pr close ,refactor
3191,core add note about not mutating multi provider array add a note to the provider doc that user shouldnt mutate an array that is returned from a multi provider because it can cause unforeseen consequence in other part of the app close pr close ,docs
3192,core error due to integer overflow when there are too many host binding we currently use bit to store information about node in a view the bit give u entry in the array but the problem is that while the number is large it can be reached by directive instance with host binding which could realistically happen is a very large view a seen in once we hit the limit we end up overflowing which eventually lead to a runtime error these change bump to using bit which give u around entry in the array or time more than the current amount which could still technically be reached but is much le likely and the user may start hitting browser limitation by that point i picked the bit number since it give u enough buffer over the bit one while not being a massive a a bit or bit ive also added a dev mode assertion so it easier to track down if it happens again in the future fix pr close ,fix
3193,docsinfra correctly display svg icon in ie fix two issue that affected displaying of svg icon in ie all svg icon except for one appeared empty this wa related how the customiconregistry reused the same div element to create all svg element the github and twitter button next to the search bar were not sized properly fix pr close ,fix
3194,docsinfra reformat redundant sentence reformat sentence us the npm package manager since npm is node package manager fix pr close ,docs
3195,languageservice add script to build package locally this commit add a script to build angularlanguageservice locally so that it can be consumed by the angular extension for local development pr close ,build
3196,localize allow duplicate message to be handled during extraction previously the in message extractor just quietly ignored message that it extracted that had the same id it can be helpful to identify these to track down message that have the same id but different message text now the message are checked for duplicate id with different message text any that are found can be reported based on the new duplicatemessagehandling command line option or duplicatemessagehandling api option property ignore no action is taken warning a diagnostic warning is written to the logger error the extractor throw an error and exit fix pr close ,feat
3197,localize remove unnecessary operator the message property always exists so there is no need for the operator pr close ,refactor
3198,languageservice remove typescript from ivy bundle currently the ivy language service bundle is mb because we accidentally included typescript in the bundle with this change the bundle size go down to mb which is even smaller than the view engine bundle mb bash yarn bazel build packageslanguageservicebundlesivy l lh distbinpackageslanguageservicebundlesivyumdjs m jul distbinpackageslanguageservicebundlesivyumdjs pr close ,build
3199,languageservice remove lsrollupbundle lsrollupbundle is no longer needed since we could invoke ngrollupbundle directly background language service run rollup to produce a single file to reduce startup time in the editor however due to the need to load dynamic version of typescript at runtime think the case where user can change typescript version in their editor we hack the banner to export a commonjs default function so that we could dynamically load the typescript module provided at runtime via amd and use it throughout the implementation pr close ,build
3200,core allow modification of lifecycle hook any time before bootstrap currently we read lifecycle hook eagerly during ɵɵdefinecomponent the result is that it is not possible to do any sort of metaprograming such a mixins or adding lifecycle hook using custom decorator since any such code executes after ɵɵdefinecomponent ha extracted the lifecycle hook from the prototype additionally the behavior is inconsistent between aot and jit mode in jit mode overriding lifecycle hook is possible because the whole ɵɵdefinecomponent is placed in getter which is executed lazily this is because jit mode must compile a template which can be specified a templateurl and those we are waiting for it resolution ɵɵdefinecomponent becomes smaller a it no longer need to copy lifecycle hook from prototype to componentdef ɵɵngonchangesfeature feature is now always included with the codebase a it is no longer tree shakable previously we have read lifecycle hook from prototype in the ɵɵdefinecomponent so that lifecycle hook access would be monomorphic this decision wa made before we had t data structure by not reading the lifecycle hook we are moving the megamorhic read form ɵɵdefinecomponent to instruction however the read happen on firsttemplatepass only and are subsequently cached in the t data structure the result is that the overall performance should be same or slightly better a the intermediate componentdef ha been removed remove ɵɵngonchangesfeature from compiler it will no longer be a feature discus the future of feature a they hinder metaprograming fix pr close ,fix
3201,serviceworker fix typo in swregistrationoptions api doc pr close ,docs
3202,core incorrectly validating property on ngcontent and ngcontainer fix the following issue related to how we validate property during jit the invalid property warning wa printing null a the node name for ngcontent the problem is that when generating a template from ngcontent we werent capturing the node name we werent running property validation on ngcontainer at all this used to be supported on viewengine and seems like an oversight in the process of making these change i found and cleaned up a few place where we were passing in lview unnecessarily pr close ,fix
3203,docsinfra increase minimum ay score for various page a part of our ci check we ensure the ay score on certain angulario page do not fall below some threshold this commit increase these threshold based on our current score to ensure we do not regress below current value pr close ,ci
3204,docsinfra upgrade lighthouse to to take advantage of lazy loaded image imgloadinglazy this commit upgrade lighthouse to version close pr close ,build
3205,devinfra add missing build file to devinfrabazelfiles without this build file we were seeing error about the reference to expandtemplatebzl in ngrollupbundlebzl because devinfrabazel wa not considered a package pr close ,fix
3206,devinfra fix broken zonejs substitution for devinfranpmpackage fix substitution that wa broken by pr to match the new import path pr close ,fix
3207,devinfra add bazel firefox browser with rbe compatibility add firefox a browser to devinfrabrowsers with rbe compatibility the default firefox browser is not compatible similar to the default chromium version exposed by ruleswebtesting the angular component repository will use this browser target a it enables rbe support also it give u more flexibility about the firefox version we test against the version provided by ruleswebtesting is very old and most likely not frequently updated based on past experience pr close ,feat
3208,devtools update dependency ngxbuildplus to v ,build
3209,ngcc report a warning if ngcc try to use a solutionstyle tsconfig in cli v there wa a move to use the new solutionstyle tsconfig which became available in t the result of this is that the standard tsconfigjson no longer contains important information such a path mapping which ngcc might need to correctly compute dependency ngcc and ngc and tsc infer the path to tsconfigjson if not given an explicit tsconfig filepath but now that mean it infers the solution tsconfig rather than one that contains the useful information it used to get this commit log a warning in this case to inform the developer that they might not have meant to load this tsconfig and offer alternative option fix pr close ,fix
3210,core fix minor typo in initngdevmode function doc pr close ,docs
3211,form remove unnecessary operator from validators when we added the strict null check the lexer had some operator added to prevent the compilation from failing see pr close ,refactor
3212,form fix typo in templatedriven form tutorial fix two typo in the building a templatedriven form that caused the guide to not be displayed correctly pr close ,docs
3213,form minor fix in form overview guide remove an article from the data flow in form section of the form overview guide the use of the and a together is not syntactically correct pr close ,docs
3214,router fix typo in spotlight on pathmatch pr close ,docs
3215,router fix typo in in angulario it linked to the wrong part of the page pr close ,docs
3216,core fixed typo in type jsdoc updated comment doc in packagescoresrcinterfacetypets pr close ,docs
3217,router ensure duplicate popstatehashchange event are handled correctly the current method of handling duplicate navigation caused by hashchange and popstate event for the same url change doe not correctly handle cancelled navigation because schedulenavigation is called in a settimeout in the location change subscription the duplicate navigation are not flushed at the same time this mean that if the initial navigation hit a guard that schedule a new navigation the navigation for the duplicate event will not compare to the correct transition because we inserted another navigation between the duplicate see fix pr close ,fix
3218,devinfra allow for consumption with rulesnodejs v with rulesnodejs v being in rc phase currently we should make sure that the package is compatible so that we can use it in the component repo in combination with rulesnodejs v in v of the nodejs rule bazel workspace are recommended to no longer be symlinked under a separate repository instead bazel rule and target should be accessed directly from the userselected npm repository usually npm so that the import change to npmangulardevinfraprivate pr close ,refactor
3219,languageservice remove completion for string if the user input a stringeg div ngclassstrcursordiv the completion is useless pr close ,fix
3220,router fix typo containa to contains close pr close ,docs
3221,compilercli ensure filesystem handle mixed window drive the fsrelative method assumed that the filesystem is a single tree which is not the case in window where you can have multiple drive eg c d etc this commit change fsrelative so that it no longer force the result to be a pathsegment and then flow that refactoring through the rest of the compilercli and ngcc the main difference is that now in some case we needed to check whether the result is rooted ie an absolutefspath rather than a pathsegment before using it fix pr close ,fix
3222,devtools remove important directive and move style override this pr introduces the following improvement we no longer override style using the global stylesscss this way we can leak override and have unexpected behavior this allows u to remove the important directive which are considered bad practice few fix in the contrast for some element ,refactor
3223,devtools change the base tsconfig file for ee test ,build
3224,devtools use theming in chrome extension ,fix
3225,devtools use the user preferred color scheme now we set the color scheme of devtools depending on the user preferred color scheme on change of the user preferred color scheme we reflect the update in devtools ,feat
3226,devtools update to latest project structure ,build
3227,devtools update dependency ,build
3228,remove extra semicolon in the http guide an extra semicolon in searchheroes function wa removed in the http guide found in aiocontentguide doc remove extra semicolon in a code example found in the http guide removed extra semicolon in handleerror function in the file located at aiocontentexamples which serf a a source of code example for the http guide replace a comma for a dot in the comment at line to ensure consistency with the rest of the document capitalized and added a dot at the end of the comment at line to ensure consistency with the other comment pr close ,docs
3229,docsinfra ensure the correct file are in the in example the stackblitz and zipfile include docfiles unnecssarily and are missing the locale file this commit update the stackblitzjson to fix this pr close ,build
3230,docsinfra remove unnecessary zipperjson file the zipperjson file is only needed if the example doe not have a stackblitzjson file which this in example doe moreover it appears that having both can cause the generated zip file to be corrupted and not unzippable fix pr close ,build
3231,devtools update dependency typeschrome to ,build
3232,router fix routerlink doc the current content for the routerlink command input doe not make it to aio fix pr close ,docs
3233,compiler check more case for pipe usage inside host binding build on top of to support more case that could be using a pipe inside host binding eg ternary expression or function call fix pr close ,fix
3234,devinfra commit message validation should skip line consisting of url the devinfra commit message validation optionally can check for line to not exceed a given amount of character this is desired for most commit message but sometimes not actionable if a long url is inserted into the commit message with this commit we skip the max line length check for line that start with an url pr close ,feat
3235,devinfra include bazel utility file in npm package we recently added a new folder for common bazel utility to devinfra the ngrollupbundle rule relies on an utility that is provided by this bazel folder unfortunately though it look like this folder is currently not included in the npm package so that the ngrollupbundle rule doe not work a expected this commit fix that by including the bazel utility in the npm package pr close ,fix
3236,bazel ngmodule rule doe not expose flat module information in ivy the ngmodule rule support the generation of flat module bundle in view engine information about this flat module bundle is exposed a a bazel provider this is helpful a other rule like ngpackage could rely on this information to determine entrypoints for the apf with ivy this currently doe not work because the flat module information is not exposed in the provider the reason for this is unclear we should also provide this information in ivy so that rule like ngpackage can also determine the correct entrypoints when a package is built specifically with configivy pr close ,fix
3237,animation added consistency in code example pr close ,docs
3238,devtools update dependency tsickle to ,build
3239,serviceworker use nominal type for normalized url some serviceworker operation and method require normalized url previously the generic string type wa used this commit introduces a new normalizedurl type a special kind of string to make this requirement explicit and use the type system to enforce it pr close ,refactor
3240,serviceworker correctly handle relative base href in some case it is useful to use a relative base href in the app eg when an app ha to be accessible on different url such a on an intranet and the internet see for a related discussion previously the angular serviceworker wa not able to handle relative base hrefs for example when building the with basehref this commit fix this by normalizing all url from the serviceworker configuration wrt the serviceworkers scope fix pr close ,fix
3241,serviceworker make mock implementation more similar to actual one this commit make the mock implementation used is serviceworker test behave more similar to the actual one pr close ,test
3242,serviceworker move asset url normalization to adapter this is in preparation of enabling the serviceworker to handle relative path in ngswjson a discussed in which will require normalizing url in other part of the serviceworker pr close ,refactor
3243,serviceworker correctly serve ngswstate with a nonroot sw scope the angular serviceworker can serve request to a special virtual path ngswstate showing information about it internal state which can be useful for debugging previously this would only work if the serviceworkers scope wa the root directory otherwise eg when building the app with basehrefsomepath the serviceworker would fail to detect a request to somepathngswstate a matching ngswstate and would not serve it with the debugging information this commit fix it by ensuring that the serviceworkers scope is taken into account when detecting a request to ngswstate fix pr close ,fix
3244,devtools update dependency typeschrome to ,build
3245,router get rid of unnecessary line in wildcard route example and fixing wildcard docregions the wildcard example lead to display a page with the pagenotfoundcomponent but before there is a wildcard to redirect to the firstcomponent and because of the route order the firstcomponent will be displayed which it is not the target of the wildcard route example code also fixing some wildcard docregions pr close ,docs
3246,docsinfra update angularcli to this commit update the version of angular cli used in angulario to version it also reverts some change namely commits dfbcf and eeefdea which were made due to an older bug that is fixed in the latest version see for more detail fix pr close ,build
3247,docsinfra avoid material style duplication warning this commit remove some duplicate import of material theme and themingrelated utility while this change doe not have any impact on the size of the generated stylescss file it silence a build warning pointing to avoiding duplicated theming style pr close ,refactor
3248,docsinfra update angularmaterial to this commit update the version of angular component used in angulario to version it also update the angulario app to adapt to breaking change pr close ,build
3249,docsinfra update angularcore to this commit update the version of angular framework used in angulario to version it also feature a commit message with a char long body pr close ,build
3250,core remove duplicated wrappedvalue class before this refactoring we had the wrappedvalue class in separate place packagescoresrcchangedetectionchangedetectionutilts packagescoresrcutilwrappedvaluets this commit remove the duplicate leaving the class that ha the deprecation notice pr close ,refactor
3251,element fix typo you custom element your custom element pr close ,docs
3252,compilercli fix bazel deps rule for ngtsc testing package the ngtsc testing package for filesystem and logging were missing from the bazel deps rule which mean that they were not included in the release pr close ,build
3253,devinfra merge script should link to original commit when cherrypicking with api strategy the merge script us git cherrypick for both the api merge strategy and the autosquash strategy it us cherrypick to push commits to different target branch eg into the x branch those commits never point to the commits that landed in the primary github branch though for the autosquash strategy the pull request number is always included so there is a way to go back to the source on the other hand though for commits cherrypicked in the api merge strategy the pull request number might not always be included due to githubs implementation of the rebase merge method eg for those case wed want to link the cherrypicked commits to the original commits so that the corresponding pr is easier to track down this is not needed for the autosquash strategy a outlined before but it would have been good for consistency unfortunately though this would rather complicate the strategy a the autosquash strategy cherrypicks directly from the pr head so the shas that are used in the primary branch are not known pr close ,feat
3254,devtools update dependency codelyzer to v ,build
3255,devtools update dependency typeschrome to ,build
3256,docsinfra prevent searchbar from overlapping navitems a part of angularios responsive layout the menu shown in the topbar is collapsed into the sidenav on narrow screen at the point where the searchbar on the right side of the topbar would overlap with the menu navitems previously the value used a breakpoint would work on marketing page where the hamburger button is not shown on wide screen however on doc page where the hamburger button is always shown pushing the menu further to the right the searchbar would still overlap the menu navitems on some resolution this commit fix it by raising the screen width threshold at a value that ensures there is no overlap even on page where the hamburger button is visible alongside the topbar menu fix pr close ,fix
3257,docsinfra decouple showing the topmenu in topbar from showing the sidenav a part of angularios responsive layout the following rule are applied on wide screen a menu is shown in the topbar and the sidenav is shown sidebyside with the doc content on narrow screen the topmenu is moved from the topbar to the sidenav and the sidenav is closed by default and float over the content when manually opened previously the breakpoints at which the topmenu wa shown in the topbar and the sidenav wa shown sidebyside with the content were the same using a single variable this commit decouples the two breakpoints to make it possible to use different value in the future pr close ,refactor
3258,docsinfra use sas variable for topbar hamburger button showhide threshold use a sas variable for the screen width breakpoint at which the topbar hamburger button is hiddenshown this allows more easily updating the breakpoint pr close ,refactor
3259,localize expose canparse diagnostics when loading a translation file we ask each translationparser whether it can parse the file occasionally this check can find error in the file that would be useful to the developer for example if the file ha invalid xml this commit deprecates the previous canparse method and replaces it with a new analyze method this return an object that includes a boolean canparse and then either a hint if it can parse the file or a diagnostics object filled with any message that can be used to diagnose problem with the format of the file close pr close ,feat
3260,docsinfra improve applying postinstall patch in aio we have a mechanism to apply patch in a postinstall hook see aiotoolsclipatchesreadmemd for more info previously we had to update aiotoolsclipatchespatchjs to list each patch file separately while working on i found it helpful for the script to automatically pick up patch file this commit update the script to automatically pick up and apply patch file from the aiotoolsclipatches directory if one want to keep a patch file but not apply it they can change the file extension or move it to a subdirectory without having to update the script pr close ,build
3261,core handle space after select and plural icu keywords currently when the plural or select keywords in an icu contain trailing space eg count select these space are also included into the key name in icu var eg varselect these trailing space are not desirable since they will later be converted into symbol while normalizing placeholder name thus causing mismatch at runtime ie placeholder will not be replaced with the correct value this commit update the code to trim these space while generating an object with placeholder to make sure the runtime logic can replace these placeholder with the right value pr close ,fix
3262,devinfra fix typo in ngdev config the logic to exclude certain type of commits specifically doc one wa implemented in the ngdev config wa updated in the followup commit but there wa a typo that prevented the new logic from being activated this commit update the name of the config option in the ngdev config to the right one minbodylengthtypeexcludes pr close ,fix
3263,router properly compare array queryparams for equality queryparams will be judged different if the array do not contain the same frequency of element and the same otherwise pr close ,fix
3264,router apply prioritizedguardvalue operator to optimize canload guard canload guard are processed in asynchronous manner with the following rule if all guard return true operator return true false and urltree value wait for higher priority guard to resolve highest priority false or urltree value will be returned prioritizedguardvalue us combinelatest which in order subscribes to each observable immediately not waiting when previous one completes that concatall do so it make some advantage in order to run them concurrently respectively a time to resolve all guard will be reduced pr close ,perf
3265,router fix navigation ignoring logic to compare to the browser url this pr change the logic for determining when to skip route processing from using the url of the last attempted navigation to the actual resulting url after that transition because guard may prevent navigation and reset the browser url the raw url of the previous transition may not match the actual url of the browser at the end of the navigation process for that reason we need to use urlafterredirects instead other note these check in schedulenavigation were added in the test still pass and more surprisingly pass if the check are removed completely there have likely been change to the navigation handling that handle the test in a different way that said it still appears to be important to keep the check there in some capacity because it doe affect how many navigation event occur this address an issue that came up in this also partially address in fixing history for imperative navigation that are cancelled by guard pr close ,fix
3266,devtools update dependency rxjs to ,build
3267,changelog remove empty section the changelog contains some empty section such a bug fix this change remove these empty section pr close ,docs
3268,changelog remove duplicate entry remove duplicate entry in the changelog keeping only the earliest instance of change that appear multiple time pr close ,docs
3269,compilercli fix memory leak in retained incremental state incremental compilation allows for the output state of one compilation to be reused a input to the next compilation this involves retaining reference to instance from prior compilation which must be done carefully to avoid memory leak this commit fix such a leak with a complicated retention chain trackedincrementalbuildstrategy unnecessarily hang on to the previous incrementaldriver state of the previous compilation once the current compilation completes in general this is unnecessary but should be safe a long a the chain only go back one level if the incrementaldriver doesnt retain any previous trackedincrementalbuildstrategy instance however this doe happen ngcompiler indirectly cause retention of previous ngcompiler instance and thus previous trackedincrementalbuildstrategy instance through accidental capture of the this context in a closure created in it constructor this closure is wrapped in a tsmoduleresolutioncache used to create a moduleresolver class which is passed to the program traitcompiler on construction the incrementaldriver retains a reference to the traitcompiler of the previous compilation completing the reference chain the final retention chain thus look like trackedincrementalbuildstrategy of current program previous incrementaldriver of previous program lastgoodtraitcompiler traitcompiler handlersmoduleresolvermoduleresolutioncache cache via getcanonicalfilename closure ngcompiler incrementalstrategy trackedincrementalbuildstrategy of previous program the closure link is the real leak here ngcompiler is creating a closure for getcanonicalfilename delegating to it thisadaptergetcanonicalfilename for the purpose of creating a tsmoduleresolutioncache the fact that the closure reference ngcompiler thus eventually cause previous ngcompiler iteration to be retained this is also potentially problematic due to the shared nature of tsmoduleresolutioncache which is potentially retained across multiple compilation intentionally this commit fix the first two link in the retention chain the build strategy is patched to not retain a previous pointer and the ngcompiler is patched to not create a closure in the first place but instead pas a bound function this ensures that the ngcompiler doe not retain previous instance of itself in the first place even if the build strategy doe end up retaining the previous incremental state unnecessarily the third link incrementaldriver unnecessarily retaining the whole traitcompiler is not addressed in this commit a it a more architectural problem that will require some refactoring however the leak potential of this retention is eliminated thanks to fixing the first two issue pr close ,perf
3270,docsinfra update to latest dgenipackages this update of dgenipackages to fix the rendering of type initializers for class and interface close pr close ,build
3271,core fakeasyncfallback should have the same logic with fakeasync pr failed when trying to use rxjs delay operator inside fakeasync and the reason are we need to import rxjsfakeasync patch to make the integration work since in angular repo the bazel target toolstestingnode not using zonetesting bundle instead it load zonespec package seperately so it cause one issue which is the zonejstestingfakeasync package is not loaded we do have a fallback logic under packagescoretesting calles fakeasyncfallback but the logic is out of date with fakeasync under zonejs package so this pr i updated the content of fakeasyncfallback to make it consistent with fakeasync and i will make another pr to try to remove the fallback logic pr close ,fix
3272,zonejs patch jasminecreatespyobj to make property enumerable to be true close in jasmine there is a new feature user can pas a property object to jasminecreatespyobj const spy jasminecreatespyobjspy method prop foo expectspyproptoequalfoo this case will not work for angular testbed for example describeappcomponent beforeeach note the third parameter tsignore const someservicespy jasminecreatespyobjsomeservice somefunction aproperty testbedconfiguretestingmodule declaration appcomponent provider provide someservice usevalue someservicespy compilecomponents itshould create the app spyobj will have somefunction but will not have aproperty let spyobj testbedgetsomeservice because jasminecreatespyobj will create the aproperty with enumerablefalse and testbedconfiguretestingmodule will try to copy all the property from spyobj to the injected service instance and because enumerable is false so the property here is aproperty will not be copied this pr will monkey patch the jasminecreatespyobj and make sure the new property enumerabletrue pr close ,feat
3273,ngcc prevent including javascript source outside of the package when ngcc creates an entrypoint program the allowjs option is enabled in order to operate on the javascript source file of the entrypoint a sideeffect of this approach is that external module that dont ship declaration file will also have their javascript source file loaded into the program a the allowjs flag allows for them to be imported this may pose an issue in certain edge case where ngcc would inadvertently operate on these external module this can introduce all sort of undesirable behavior and incompatibility eg the reflection host that is selected for the entrypoints format could be incompatible with that of the external module javascript bundle to avoid these kind of issue module resolution that would resolve to a javascript file located outside of the package will instead be rejected a if the file would not exist this would have been the behavior when allowjs is set to false which is the case in typical angular compilation fix pr close ,fix
3274,ngcc let iswithinpackage operate on path instead of source file change iswithinpackage to take an absolutefspath instead of tssourcefile to allow for an upcoming change to use it when no tssourcefile is available but just a path pr close ,refactor
3275,element fire custom element output event during component initialization previously event listener for component output event attached on an angular custom element before inserting it into the dom ie before instantiating the underlying component didnt fire for event emitted during initialization lifecycle hook such a ngaftercontentinit ngafterviewinit ngonchanges initial call and ngoninit the reason wa that ngelementimpl subscribed to event after calling ngelementstrategyconnect which is where the initial change detection take place running the initialization lifecycle hook this commit fix this by ensuring componentngelementstrategyevents is defined and available for subscribing to even before instantiating the component changing ngelementimpl to subscribe to ngelementstrategyevents if available before calling ngelementstrategyconnect which initializes the component instance if available falling back to the old behavior subscribing to event after calling connect for strategy that do not initialize event before their connect is run note by falling back to the old behavior when ngelementstrategyevents is not initialized before calling ngelementstrategyconnect we avoid breaking existing custom ngelementstrategy implementation with remackgeeks elementzonestrategy being a commonly used example jira issue fw fix pr close ,fix
3276,ngcc ensure lockfile is removed when analyzefn fails previously an error thrown in the analyzefn would cause the ngcc process to exit immediately without removing the lockfile and potentially before the unlocker process had been successfully spawned resulting in the lockfile being orphaned and left behind now we catch these error and remove the lockfile a needed pr close ,fix
3277,devtools update angularcomponents to v ,build
3278,devtools update angularcli ,build
3279,devtools update angularframework ,build
3280,devtools update dependency ngpackagr to v ,build
3281,devtools update dependency typeschrome to ,build
3282,core error when invoking callback registered via viewrefondestroy invoking a callback registered through viewrefondestroy throw an error because we werent registering it correctly in the internal data structure these change also remove the storecleanupfn function because it wa mostly identical to storecleanupwithcontext and wa only used in one place fix pr close ,fix
3283,core dont consider inherited ngelementid during di special di token like changedetectorref and elementref can provide a factory via ngelementid the problem is that we were reading it off the token a tokenngelementid which will go up the prototype chain if it couldnt be found on the current token resulting in the private viewref api being exposed because it extends changedetectorref these change fix the issue by guarding the property access with hasownproperty fix pr close ,fix
3284,core determine required domparser feature availability verify that html parsing is supported in addition to domparser existence this maybe wasnt a important before when domparser wa used just a a fallback on firefox but now that domparser is the default choice we need to be more accurate pr close ,fix
3285,core split inert strategy to separate class the inertdocument member is only needed when using the inertdocument strategy by separating the domparser and inertdocument strategy into separate class we can easily avoid creating the inert document unnecessarily when using domparser pr close ,refactor
3286,core do not trigger csp alertreport in firefox and chrome if innerhtml is used in a component and a contentsecuritypolicy is set that doe not allow inline style then firefox and chrome show the following message content security policy the page ’ s setting observed the loading of a resource at self “ defaultsrc ” a csp report is being sent this message is caused because angular is creating an inline style tag to test for a browser bug that we use to decide what sanitization strategy to use which cause csp violation error if inline cs is prohibited this test is no longer necessary since the domparser is now safe to use and the style based check is redundant in this fix we default to using domparser if it is available and fall back to createhtmldocument if needed this is the approach used by dompurify too the related unit test in htmlsanitizerspects should not allow javascript execution when creating inert document and should not allow javascript hidden in badly formed html to get through sanitization firefox bug are left untouched to assert that the behavior hasnt changed in those scenario fix pr close ,fix
3287,languageservice incorrect autocomplete result on unknown symbol this commit fix a bug whereby the language service would incorrectly return html element if autocomplete is requested for an unknown symbol this is because we walk through every possible scenario and fallback to element autocomplete if none of the scenario match the fix here is to return result from interpolation if we know for sure we are in a bound text this mean we will now return an empty result if there is no suggestion this commit also refactors the code a little to make it easier to understand pr close ,fix
3288,devinfra add support for minbodylengthtypeexcludes to commitmessage validation this feature will allow u to exclude certain commits from the char minbodylength requirement for commit message which is hard to satisfy for commits that make trivial change eg fixing typo in doc or comment pr close ,feat
3289,platformbrowser allow smsurls sm ulr is already supported by googleclosurelibrary and and validation are added to check if the body passed is safe or not you can refer for more detail fix pr close ,feat
3290,core throw more descriptive error message in case of invalid host element this commit replaces an assert with more descriptive error message that is thrown in case ngtemplate or ngcontainer is used a host element for a component resolve pr close ,refactor
3291,compilercli remove any cast for compilerhost this commit remove the fixme for casting compilerhost to any since google is now already on t pr close ,refactor
3292,languageservice reinstate getexternalfiles getexternalfiles is an api that could optionally be provided by a tsserver plugin to notify the server of any additional file that should belong to a particular project this api wa removed in mainly due to performance reason however with the introduction of solutionstyle tsconfig in typescript the angular extension could no longer reliably detect the owning project solely based on the ancestor tsconfigjson in order to support this use case we have to reinstate getexternalfiles fix pr close ,fix
3293,devinfra merge script should not always require full repo permission we recently added oauth scope checking to the devinfra git client and started leveraging it for the merge script we set the repo scope a required for running the merge script we can loosen this requirement a in the angular org where the script is consumed only pull request on public repository are merged through the script this should help with reducing the risk with compromised token a no access had to be granted on repoinvite repodeployment etc pr close ,fix
3294,devinfra support running script from within a detached head script provided in the ngdev command might use local git command for such script we keep track of the branch that ha been checked out before the command ha been invoked we do this so that we can later upon command completion restore back to the original branch we do not want to leave the git repository in a dirty state it look like this logic currently only deal with branch but doe not work properly when a command is invoked from a detached head we can make it work by just checking out the previous revision if no branch is checked out pr close ,fix
3295,docsinfra store j bundle a ci artifact to debug size check flake a reported in the size of the main angulario bundle sometimes end up bigger than expected on ci this usually go away after rerunning the job a couple of time it is unclear what is causing this in order to help debug the issue this commit store the j file that are checked a part of the aio payloadsize check a ci artifact where they can be retrieved from and inspected pr close ,ci
3296,element fixed command that add the package angularelements i wa using schematic with the name parameter instead of the project i did both way before sending and my suspicion about outdated documentation wa confirmed pr close ,docs
3297,compilercli disable dynamicvalue diagnostic test on window this commit disables all diagnostic test for dynamicvalue diagnostics which make assertion about the diagnostic filename while running test on window such assertion are currently suffering from a case sensitivity issue pr close ,test
3298,docsinfra fix deploytofirebasesh for master and vx branch the deployment to aio is currently failing because introduced project entry into the firebasejson which mean that we now need to select the deployment target before deploying to firebase this change fix the issue and refactors the file to be easier to read i also added extra echo statement so that the ci log are easier to read in case we need to troubleshoot future issue pr close ,fix
3299,compilercli fix assertion of diagnostic filename on window several partialevaluator test in the diagnosticsspec check assert correctness of diagnostic filename previously these assertion compared a resolved absolutefrom filename with the typescript tssourcefiles filename string which caused the test to fail on window because the drive letter case differed this commit change the assertion to use absolutefromsourcefile instead of the filename string resulting in an applestoapples comparison of canonicalized path pr close ,test
3300,docsinfra fix typo in the deploytofirebasesh script this typo caused the script to fail on linux interestingly it work fine on mac this is a painful reminder that we should not write any more bash script ever shelljs ftw pr close ,fix
3301,core cleanup dom element when root view is removed currently when bootstrapped component is being removed using componentrefdestroy or ngmodulerefdestroy method dom node may be retained in the dom tree this commit fix that problem by always attaching host element of the internal root view to the component host view node so the cleanup can happen correctly resolve pr close ,fix
3302,platformserver add option for absolute url http support in version next we introduced absolute url support for serverbased http request so long a the fullyresolved url wa provided in the initial config however doing so represents a breaking change for user who already have their own interceptor to model this functionality since our logic executes before all interceptor fire on a request see original pr therefore we introduce a flag to make this change consistent with v behavior allowing user to opt in to this new behavior this commit also fix two issue with the previous implementation if the server wa initiated with a relative url the absolute url construction would fail because needed component were empty if the user absolute url wa on a port the port would not be included pr close ,feat
3303,migration do not incorrectly add todo for injectable or pipe a of v the undecoratedclasseswithdecoratedfields migration generally deal with undecorated class using angular feature we intended to run this migation a part of v again a undecorated class with angular feature are no longer supported in planned v the migration currently behaves incorrectly in some case where an injectable or pipe decorated class us the ngondestroy lifecycle hook we incorrectly add a todo for those class this commit fix that additionally this change make the migration more robust to not migrate a class if it inherits from a component pipe injectable or nonabstract directive we previously did not need this a the undecoratedclasseswithdi migration ran before but this is no longer the case last this commit fix an issue where multiple todos could be added this happens when multiple angular cli build target have an overlap in source file multiple program then capture the same source file causing the migration to detect an undecorated class multiple time ie adding a todo twice fix pr close ,fix
3304,compilercli more accurate reporting of complex function call this commit introduces a dedicated dynamicvalue kind to indicate that a value can not be evaluated statically a the function body is not just a single return statement this allows more accurate reporting of why a function call failed to be evaluated ie we now include a reference to the function declaration and have a tailormade diagnostic message pr close ,refactor
3305,compilercli explain why an expression can not be used in aot compilation during aot compilation the value of some expression need to be known at compile time the compiler ha the ability to statically evaluate expression the best it can but there can be occurrence when an expression can not be evaluated statically for instance the evaluation could depend on a dynamic value or syntax is used that the compiler doe not understand alternatively it is possible that an expression could be statically evaluated but the resulting value would be of an incorrect type in these situation it would be helpful if the compiler could explain why it is unable to evaluate an expression to this extend the static interpreter in ivy keep track of a trail of dynamicvalues which follow the path of node that were considered all the way to the node that cause an expression to be considered dynamic up until this commit this rich trail of information wa not surfaced to a developer so the compiler wa of little help to explain why static evaluation failed resulting in situation that are hard to debug and resolve this commit add much more insight to the diagnostic that is produced for static evaluation error for dynamic value the trail of dynamicvalue instance is presented to the user in a meaningful way if a value is available but not of the correct type the type of the resolved value is shown resolve fw pr close ,feat
3306,compilercli create diagnostics using tsdiagnosticrelatedinformation previously an anonymous type wa used for creating a diagnostic with related information the anonymous type would then be translated into the necessary tsdiagnosticrelatedinformation shape within makediagnostic this commit switch the makediagnostic signature over to taking tsdiagnosticrelatedinformation directly and introduces makerelatedinformation to easily create such object this is done to aid in making upcoming work more readable pr close ,refactor
3307,compilercli fix regression in incremental program reuse commit ed introduced shim reference tagging into the compiler and changed how the typecheckprogramhost worked under the hood during the creation of a template typechecking program this work enabled a more incremental flow for template typechecking but unintentionally introduced several regression in performance caused by poor incrementality during tsprogram creation the typecheckprogramhost wa made to rely on the tscompilerhost to retrieve instance of tssourcefiles from the original program if the host doe not return the original instance of such file but instead creates new instance this ha two negative effect it incurs additional parsing time and it interferes with typescript ability to reuse information about such file during the incremental creation of a tsprogram typescript compare the referencedfiles of tssourcefile instance from the old program with those in the new program if these array differ typescript can not fully reuse the old program the implementation of reference tagging introduced in ed restores the original referencedfiles array after a tsprogram is created which mean that future incremental operation involving that program will always fail this comparison effectively limiting the incrementality typescript can achieve problem exacerbates problem if a new tssourcefile is created by the host after shim generation ha been disabled it will have an untagged referencedfiles array even if the original file referencedfiles wa not restored triggering problem when creating the template typechecking program to fix these issue referencedfiles array are now restored on the old tsprogram prior to the creation of a new incremental program this allows typescript to get the most out of reusing the old program data additionally the typecheckprogramhost now us the original tsprogram to retrieve original instance of tssourcefiles where possible preventing issue when a host would otherwise return fresh instance together these fix ensure that program reuse is a incremental a possible and test have been added to verify this for certain scenario an optimization wa further added to prevent the creation of a typechecking tsprogram in the first place if no typechecking is necessary pr close ,perf
3308,ngcc use entrypointmanifest to speed up noop programbaseentrypointfinder previously the programbasedentrypointfinder wa parsing all the entrypoints referenced by the program for dependency even if all the entrypoints had been processed already now this entrypoint finder will reuse the entrypointmanifest to load the entrypoint dependency when possible which avoids having to parse them all again on every invocation of ngcc previously the entrypointmanifest wa only used in the directorywalkerentrypointfinder which also contained the logic for computing the content of the manifest this logic ha been factored out into an entrypointcollector class both the programbasedentrypointfinder and directorywalkerentrypointfinder now use the entrypointmanifest and the entrypointcollector the result of this change is that there is a small cost on the first run of ngcc to compute and store the manifest the processing take of the processing time before this pr but on subsequent run there is a significant benefit on subsequent run the processing take around of the processing time before this pr pr close ,perf
3309,localize add compile time extraction to integration test the integration test for in now make use of the new extraction tooling from the angularlocalize package rather than the old viewengine extractor pr close ,test
3310,localize implement message extraction tool this tool which can be run from the nodemodules bin folder can parse the source file in your compiled app and generate a translation file formatted with the configured syntax for example nodemodulesbinlocalizeextract s distjs f xliff o distmessagesenxlf pr close ,feat
3311,localize handle location ending correctly previously source location required an ending position but this wa not being computed effectively now ending position is optional and it is computed from an endpath passed to getlocation pr close ,refactor
3312,compilercli only read sourcemap comment from last line sourcemaps can be linked to from a sourcefile by a comment at the end of the file previously the sourcefileloader would read the first comment that matched sourcemappingurl but this is not valid since some bundlers may include embedded sourcefiles that contain such a comment now we only look for this comment in the last nonempty line in the file pr close ,fix
3313,compiler add sourcemap span to localized string previously localized string were not mapped to their original source location so it wa not possible to backtrace them in tool like the in message extractor pr close ,refactor
3314,compilercli ensure sourcemaps can handle webpack protocol webpack and other build tool sometimes inline the content of the source file in their generated sourcemaps and at the same time change the path to be prefixed with a protocol such a webpack this can confuse tool that need to read these path so now it is possible to provide a mapping to where these file originated pr close ,fix
3315,compilercli add sourcefilegetoriginallocation to sourcemaps package this method will allow u to find the original location given a generated location which is useful in fine grained work with sourcemapping eg in localize tooling pr close ,feat
3316,docsinfra update deploytofirebasesh script to support v multisite setup vangulario wa used to pilot the firebase hosting multisites setup for angulario the deployment so far have been done manually to control the deployment process this change automates the deployment for vangulario so that future deployment can be made from the ci see for more info in the process of updating the script i rediscovered a bug in the deploytofirebasesh script that incorrect compared two number a string this previously worked correctly because we were comparing single digit number with the release of v we now compare which behaves differently for string and number the bug wa fixed by switching to an arithmetic comparison of the two variable this bug ha been fixed on the master branch but not on the x branch i realized this during the rebase but found my version to be a bit cleaner so i kept it pr close ,feat
3317,avoid abort a request when fetch operation is completed abort method is calling even if fetch operation is completed fix pr close ,fix
3318,common date pipe give wrong week number date pipe is giving wrong week number when used with the date format w if first weekaccording to iso ha some day in previous year fix pr close ,fix
3319,form correct usage of selectedoptions previously registeronchange used hasownproperty to identify if the property is supported however this doe not work a the selectedoptions property is an inherited property this commit fix this by verifying the property on the prototype instead close pr close ,fix
3320,form handle form groupsarrays own pending async validation introduce a boolean to track form groupsarrays own pending async validation to distinguish between pending state due to child and pending state due to own validation fix pr close ,fix
3321,router add null support for routerlink directive value of undefined passed a segment in routerlink is stringified to string undefined this change introduces the same behavior for value of null pr close ,fix
3322,router fix error when calling parammapget function fix thisparamshasownproperty is not a function in case of creating an object using objectcreate pr close ,fix
3323,router routerlinkactive should run cd when setting isactive when using the routerlinkactive directive inside a component that is using changedetectionstrategyonpush and lazy loaded module route the routerlinkactive directive doe not update after clicking a link to a lazy loaded route that ha not already been loaded also the onpush nav component doe not set routerlinkactive correctly when the default route load the nononpush nav component work fine regression caused by close pr close ,fix
3324,devinfra add a way to pas asset down to a benchmark application add a param called ngassets to the componentbenchmark macro to allow static asset to be provided to the base angular app not just through the tsdevserver pr close ,feat
3325,compilercli exempt compilercli bazel file from devinfra approval previously devinfra approval via pullapprove wa required for all bazel file in the monorepo including those in packagescompilercli the compilercli package is a little special in this sense it not shipped to npm in the apf it us lot of internal subpackages to organize and test it code a a result change to compilercli buildbazel file are not user visible and dont have larger implication for the package published to npm unlike change to other buildbazel file in the repo the requirement for devinfra approval for buildbazel change is overly burdensome because compilercli build file change more rapidly than those of other package this commit exempts the compilerclis build file from the requirement for devinfra approval it will be sufficient for such file to be approved by the normal compiler reviewer pr close ,ci
3326,benchpress bump version to v and update angularcore peer dependency update the version of angularbenchpress to the next patch version ie v additionally the peer dependency on angularcore ha been updated to be satisifed with angular v and v benchpress should be at least compatibe with the next two major version a it doe not rely on any deprecated api from angularcore pr close ,release
3327,ngcc add additional next step to an error the filewriting error in the this commit can also be the result of the ngcc process dying in the middle of writing file this commit improves the error message to offer a resolution in case this is the reason for the error fix pr close ,docs
3328,form change error message error message mention that ngmodel and ngmodelchange will be removed in angular v but right not now sure when it will be removed so changed it to a future version pr close ,fix
3329,docsinfra add end to end test for api reference api search functionality only had unit test gkalpak suggested we should have some ee test too added some end to end test fix pr close ,test
3330,changelog fix v announcement url pr close ,docs
3331,docsinfra disable flaky test i could not figure out the root cause of the flake so disabling the flaky test for now see for more info fix pr close ,ci
3332,compilercli tidy up filesystem buildbazel filesystem reorder the load and package statement make srcs glob more generic remove unnecessary dependency pr close ,refactor
3333,ngcc move sourcemaps into ngtsc the sourcefile and associated code is general and reusable in other project such a angularlocalize moving it to ngtsc make it more easily shared pr close ,refactor
3334,ngcc move logging code into ngtsc the logger interface and it related class are general purpose and could be used by other tooling moving it into ngtsc is a more suitable place from which to share it similar to the filesystem stuff pr close ,refactor
3335,languageservice nonexistent module format in package output the languageservice package currently set the module packagejson property and refers to a folder called fesm the languageservice though doe not build with ngpackage so this folder never existed now with apf v ng package would not generate this folder either we should just remove the property a the primary entrypoint is the umd bundle resolved through main there is no module flavour exposed to the npm package a pkgnpm us the named amd module devmode output that doesnt work for module pr close ,fix
3336,devinfra ngrollupbundle rule should leverage bazelrollup refactors the ngrollupbundle rule to a macro that relies on the bazelrollup package this mean that the rule no longer deal with custom esm flavour output but rather only build prodmode e output this match the common build output in angular project and optimization done in cli where e is the default optimization input the motiviation for this change is not duplicating rollup bazel rule instead leveraging the official rollup rule not dealing with a third t output flavor in bazelthe esm flavour ha the potential of slowing down local development a it requires compilation replaying updating the rule to be aligned with current cli optimization this also fix a bug that surfaced in the old rollup bundle rule code that is unused is not removed properly the new rule fix this by setting the toplevel flag this instructs terser to remove unused definition at toplevel this match the optimization applied in cli project notably the cli doesnt need this flag a code is always wrapped by webpack hence the unused code eliding run by default pr close ,refactor
3337,bazel provide linkablepackageinfo from ngmodule add the linkablepackageinfo to the ngmodule rule this allows the linker to properly link ngmodule target in node runtime action currently this doe not work properly and package like angularcore are not linked so we can not rely on the linker pr close ,feat
3338,bazel cleanup ngpackage rule to not build fesm and esm output a of angular package format v we no longer ship a fesm and fesm output in package we made this change to the ngpackage rule but intentionally did not clean up related build action this followup commit clean this up by no longer building fesm bundle or providing esm output no longer requesting and building a third flavor for esm we can use tsc to downlevel e sourcesprodmode output similarly to how it is done in ngpackagr the third output flavor esm resulted in a build slowdown a we required a full recompilation of source now we only have a single compilation for prodmode output and then downlevel it ondemand to e for the umd bundle here is timing for building the release package in angularangular before this change and afterwards before s min after s min this signifies a time reduction by when running scriptsbuildbuildpackagesdistsh pr close ,refactor
3339,devinfra migrate github api in gitclient to rely on githubclient gitclient now us githubclient for github api interaction githubclient is a class which extends octokit and provides a member which allows for graphql request against the github graphql api a well a providing convenience method for commonrepeated github api request pr close ,refactor
3340,devtools update angularframework ,build
3341,devtools update dependency typeschrome to ,build
3342,ngcc shortcircuit tokenizing in esm dependency host this dependency host tokenizes file to identify all the imported path this commit calculates the last place in the source code where there can be an import path it then exit the tokenization when we get to this point in the file testing with a reasonably large project showed that the tokenizer spends about a much time scanning file for example in a noop hot run of ngcc using the programbased entrypoint finder the percentage of time spent in the scan function of the t tokenizer go down from to pr close ,perf
3343,core correct type for optsread the contentchildren decorator ha a metadata property named read which can be used to read a different token from the queried element the documentation incorrectly say true to read when it should say used to read pr close ,docs
3344,devinfra cleanup shared package dependency clean up the dependency used in the shared devinfra package configuration with the recent benchmarking utility that have been added a lot of peer dependency have been added we decided that we dont want to list every used dependency a peer dependency a that could result in unnecessary churnnoise for consumer of the devinfra package additionally not all part of the devinfra package are necessarily used due to this we want to apply the following rule for the package dependency if a dependency is only used in a shipped bazel macrorule that can be optionally consumed omit it from packagejson bazel report the missing dependency on it own so we want to avoid adding it to the package json file otherwise if the dependency is large and commonly used like buildifier add it to the peerdependencies if not add it to the dependency that are always brought in we consider it a acceptable to bring in a few small dependency that might not be used or not making all of those option would complicate the use of the devinfra package d pr close ,refactor
3345,devinfra use shelljs instead of fsextra for benchmark utils we added a new dependency on fsextra to the devinfra package we can remove this dependency and replace it with shelljs that is extensively used in other place already the motiviation is that we can reduce dependency needed for for consumption of the shared devinfra package pr close ,refactor
3346,router remove parenthesis for primary outlet segment after removing auxiliary outlet segment for url that use auxiliary route outlet in the second or following path segment when removing the auxiliary route segment parenthesis remain for the primary outlet segment this cause the following error when trying to reload an url can not match any route the commit add a check for this scenario serializing the url a ab instead of ab pr close pr close ,fix
3347,devtools update angularcli ,build
3348,devtools styling graph ,style
3349,devtools fixing ee test after theme change ,test
3350,devtools implementing dark mode ,style
3351,devtools fixing code review comment ,fix
3352,devtools seting input filter color ,style
3353,devtools seting directive forest color ,style
3354,devtools themeing breadcrums ,feat
3355,devtools adding material toolbar ,feat
3356,devtools overriding default style ,style
3357,devtools removing default radius ,style
3358,devtools styling metadata link ,style
3359,devtools styling devtools tab header bar ,style
3360,devtools adding theme toggle button ,feat
3361,devtools apply material style to application ,style
3362,devtools adding theme service ,feat
3363,devtools adding light and dark theme ,style
3364,devinfra support for caretaker note label in merge script add support for a caretaker note label to the merge script whenever a configured label is applied the merge script will not merge automatically but instead prompt first in order to ensure that the caretaker paid attention to the manual caretaker note on the pr this help if a pr need special attention pr close ,feat
3365,devtools update angularframework ,build
3366,bazel expose explicit mapping from closure to devmode file this feature is aimed at development tooling that ha to translate production build input into their devmode equivalent the current process involves guessing the devmode filename based on string replace pattern this allows consuming build action to read the known mapping instead this is a change in anticipation of an update to the general typescript build rule to consume this data pr close ,feat
3367,form optimize internal method anycontrols in formgroup the method wa previously looping through all control even after finding at least one that satisfies the provided condition this can be a bottleneck with large form the new version of the method return a soon a a single control which conforms to the condition is found pr close ,perf
3368,devinfra allow for deep merging of pullapprove config alias set the yaml parser to support deep merges of yaml alias to support having a default value for all rule to build upon pr close ,fix
3369,compilercli skip class decorator in tooling constructor parameter transform we recently added a transformer to ngc that is responsible for downleveling angular decorator and constructor parameter type the primary goal wa to mitigate a typescript limitationissue that surface in angular project due to the heavy reliance on type metadata being captured for di additionally this is a prerequisite of making tsickle optional in the angular bazel toolchain see efaebbedabfcad for more context on this another le important goal wa to make sure that the cli can reuse this transformer for it jit mode compilation the cli a outlined in the commit mentioned above already ha a transformer for downleveling constructor parameter we want to avoid this duplication and exported the transform through the toolingprivate compiler entrypoint early experiment in using this transformer over the current one highlighted that in jit class decorator can not be downleveled angular relies on those to be invoked immediately for jit so that factory etc are generated upon loading the transformer we exposed always downlevels such class decorator though so that would break cli jit mode we can address the cli need by adding another flag to skip class decorator this will allow u to continue with the goal of deduplication pr close ,refactor
3370,compilercli make incrementalbuild strategy configurable commit bfdab introduced an ngcompiler which operates on a tsprogram independently of the ngtscprogram the ngcompiler got it incrementaldriver for incremental reuse of angular compilation result by looking at a monkeypatched property on the tsprogram this monkeypatching operation cause problem with the angular indexer specifically it seems to cause the indexer to retain too much of prior program resulting in oom issue to work around this incrementaldriver reuse is now handled by a dedicated incrementalbuildstrategy one implementation of this interface is used by the ngtscprogram to perform the oldstyle reuse relying on the previous instance of ngtscprogram instead of monkeypatching only for ngtscplugin is the monkeypatching strategy used a the plugin sits behind an interface which only provides access to the tsprogram not a prior instance of the plugin pr close ,refactor
3371,serviceworker minor fixesimprovements in the sw communication guide this commit includes various fixesimprovements for the service worker communication guide this partially address pr close ,docs
3372,serviceworker update default value of swregistrationoptionsregistrationstrategy the default value wa changed from registerwhenstable to registerwhenstable in eacffabdcebcc but the decumentation wa not updated to reflect that this commit update the documentation to mention the correct default value pr close ,docs
3373,languageservice wrong completion in conditional operator in a bcursor the l will provide the symbol in the scope of the current template because the pathtail is falseexp whose value is emptyexpr and the span of falseexp is wider than the trueexp so the value of path should be narrowed pr close ,fix
3374,bazel expose explicit mapping from closure to devmode file this feature is aimed at development tooling that ha to translate production build input into their devmode equivalent the current process involves guessing the devmode filename based on string replace pattern this allows consuming build action to read the known mapping instead this is a change in anticipation of an update to the general typescript build rule to consume this data pr close ,feat
3375,devtools update dependency typeschrome to ,build
3376,devtools update angularframework ,build
3377,devtools update angularcli ,build
3378,devtools update angularcli ,build
3379,devtools update dependency karma to ,build
3380,bazel check for renderer flag in ngmodule this check for a bazel flag in ngmodule in the renderer attribute which specifies the renderer to use for the build the main advantage of this flag is that it can be overridden with bazel transition giving much more flexibility for migrating individual application in a bazel workspace to ivy this flag is not intended to replace config ivy or define angularivyenabledtrue although it technically could a a result this flag is not and will not actually be used anywhere in the angularangular repo instead a stringflag is provided internally which set the renderer via a transition see note that this doe not introduce a dependency on skylib for angularangular the dependency isnt actually necessary because buildsettinginfo is not used externally anyways by doing this it is not necessary for downstream external workspace to depend on skylib pr close ,build
3381,devinfra add to outputed list of pr for discovernewconflicts adding in a prepended to each pr number in the list of conflicting pr found by the discovernewconflicts script will allow for user to copy paste the output from the script into a github comment and have the pr automatically link pr close ,feat
3382,common enforce format on newly included file historically file to be formatted were added to a listing via matcher to be included in formatting instead this change begin effort to instead include all file in format enforcement relying instead on an opt out methodology pr close ,style
3383,devinfra enforce format on newly included file historically file to be formatted were added to a listing via matcher to be included in formatting instead this change begin effort to instead include all file in format enforcement relying instead on an opt out methodology pr close ,style
3384,compiler unable to resolve destructuring variable declaration currently the partial evaluator isnt able to resolve a variable declaration that us destructuring in the form of const value value const foo value these change add some logic to allow for u to resolve the variable value fix pr close ,fix
3385,router fix navigation ignoring logic to compare to the browser url this pr change the logic for determining when to skip route processing from using the url of the last attempted navigation to the actual resulting url after that transition because guard may prevent navigation and reset the browser url the raw url of the previous transition may not match the actual url of the browser at the end of the navigation process for that reason we need to use urlafterredirects instead other note these check in schedulenavigation were added in the test still pass and more surprisingly pass if the check are removed completely there have likely been change to the navigation handling that handle the test in a different way that said it still appears to be important to keep the check there in some capacity because it doe affect how many navigation event occur this address an issue that came up in this also partially address in fixing history for imperative navigation that are cancelled by guard pr close ,fix
3386,compiler remove extra import there are some extra import in the compiler package these import are not used anywhere in the file so removed those extra import pr close ,refactor
3387,ngcc correctly get config for package in nested nodemodules previously ngcc would only be able to match an ngcc configuration to package that were located inside the project toplevel nodemodules however if there are multiple version of a package in a project eg a a transitive dependency of other package multiple copy of a package at different version may exist in nested nodemodules directory for example one at projectrootnodemodulessomepackage and one at projectrootnodemodulesotherpackagenodemodulessomepackage in such case ngcc wa only able to detect the config for the first copy but not for the second this commit fix this by returning a new instance of processedngccpackageconfig for each different package path even if they refer to the same package name in these processedngccpackageconfig the entrypoints path have been processed to take the package path into account pr close ,fix
3388,ngcc add packagename property to entrypoint interface this commit add a packagename property to the entrypoint interface in a subsequent commit this will be used to retrieve the correct ngcc configuration for each package regardless of it path pr close ,refactor
3389,ngcc correctly retrieve a package version from it packagejson in order to retrieve the ngcc configuration if any for an entrypoint ngcc ha to detect the containing package version previously ngcc would try to read the version from the entrypoints packagejson file which wa different than the package toplevel packagejson for secondary entrypoints for example it would try to read it from nodemodulesangularcommon for entrypoint angularcommon however the packagejson file for secondary entrypoints are not guaranteed to include a version property this commit fix this by first trying to read the version from the package packagejson falling back to the entrypoints packagejson for example it will first try to read it from angularcommonpackagejson for entrypoint angularcommon pr close ,fix
3390,ngcc refactor how info is retrieved from entrypoint packagejson this commit refactors the way info is retrieved from entrypoint packagejson file to make it easier to extract more info such a the package name in the future it also avoids reading and parsing the packagejson file multiple time a wa happening before pr close ,refactor
3391,ngcc rename entrypointpackage to entrypointpackagepath rename the package property to packagepath on the entrypoint interface this make it more clear that the packagepath property hold the absolute path to the containing package similar to how path hold the path to the entrypoint this will also align with the packagename property that will be added in a subsequent commit this commit also reorder the entrypoint property to group related property together and to match the order of property on instance with that on the interface pr close ,refactor
3392,ngcc correctly get config for subentrypoints when primary entrypoint is ignored previously when an entrypoint wa ignored via an ngcc config ngcc would scan subdirectory for subentrypoints but would not use the correct packagepath for example if angularcommon wa ignored it would look at angularcommon but incorrectly use angularcommon a the packagepath instead of angularcommon a a result it would not retrieve the correct ngcc config for the actual package this commit fix it by ensuring the correct packagepath is used even if the primary entrypoint corresponding to that path is ignored in order to do this a new return value for getentrypointinfo is added ignoredentrypoint this is used to differentiate between directory that correspond to no or an incompatible entrypoint and those that correspond to an entrypoint that could otherwise be valid but is explicitly ignored consumer of getentrypointinfo can then use this info to discard ignored entrypoints but still use the correct packagepath when scanning their subdirectory for secondary entrypoints pr close ,fix
3393,ngcc clean up unused import unused regex parenthesis typo this is a followup to because i didnt manage to finish my review before the pr got merged pr close ,refactor
3394,ngcc fix typo in comment this is a followup to because i didnt manage to finish my review before the pr got merged pr close ,refactor
3395,zonejs remove unused promise overwritten setter logic in the early zonejs version zoneawarepromise did not support symbolspecies so when user used a rd party promise such a espromise and try to load the promise library after import of zonejs the loading promise library will overwrite the patched promise from zonejs and will break promise semantics with respect to zonejs starting with zonejs symbolspecies is supported therefore this will not longer be an issue before the logic in zonejs tried to handle the case in the wrong way it did so by overriding the descriptor of globalpromise to allow the rd party library to override native promise instead of zoneawarepromise this is not the correct solution and since the promisespecies is now supported the rd party solution of overriding globalpromise is no longer needed pr remove the wrong work around logic this will improve the bundle size pr close ,fix
3396,core should fake a top event task when coalescing event to prevent draining microtaskqueue too early close this is a known issue of zonejs window a anyzone a anysymbolsettimeout let log buttonaddeventlistenerclick zonecurrentschedulemicrotasktest log microtask log click buttonclick expectlogtoequalclickmicrotask done since in this case we use native settimeout which is not a zonetask so zonejs consider the button click handler a the top task then drain the microtaskqueue after the click at once which is not correcttoo early this case wa an edge case and not reported by the user until we have the new option ngzoneeventcoalescing since the event coalescing will happen in native requestanimationframe so it will not be a zonetask and zonejs will consider any task happen in the change detection stage a the top task and if there are any microtaskssuch a promisethen happen in the process it may be drained earlier than it should be so to prevent this situation we need to schedule a fake event task and run the change detection check in this fake event task so the task happen in the change detection stage will not be considered a top zonetask pr close ,fix
3397,core support injection token a predicate in query currently angular internally already handle injectiontoken a predicate for query this commit expose this a public api a developer already relied on this functionality but currently use workarounds to satisfy the type constraint eg a any we intend to make this public a it loweffort to support and it a significant key part for the use of lightweight token a described in the upcoming guide in concrete application might use injection token over class for both optional di and query because otherwise such reference cause class to be always retained this wa also an issue in view engine but now with ivy this pattern became worse a factory are directly attached to retained class ultimately ending up in the production bundle while being unused more detail in the lightweight token guide and in close related to pr close ,feat
3398,element add accessor workaround for buildoptimizer buildoptimizer currently us typescript which is unable to resolve an accessor in gettypeofvariableorparameterorpropertyworker unfortunately in build optimizer we can not update the version of typescript because of pr close ,refactor
3399,ngcc use annotateforclosurecompiler option add nocollapse to static property added by ngcc iff annotateforclosurecompiler is true the closure compiler will collapse static property into the global namespace adding this annotation keep the property attached to their respective object which allows them to be referenced via a class constructor the annotation is already added by ngtsc and ngc under the same option this commit extends the functionality to ngcc close pr close ,fix
3400,zonejs move all zone optional bundle to plugins folder zonejs ha a lot of optional bundle such a zonepatchmessageport those bundle are monkey patch for specified apis usually for soem experimental apis or some old apis only available for specified platform those bundle will not be loaded by default in this commit since we have several main sub package such a zone zonenode zonetesting i put all the optional bundle under plugins folder for consistency pr close ,feat
3401,zonejs upgrade zonejs to angular package formatapf close in the current version of zonejs zonejs us it own package format and it is not following the rule of angualr package formatapf so it is not easily to be consumed by angular cli or other bundle tool for example zonejs npm package ha two bundle zonejsdistzonejs this is a e bundle zonejsdistzoneevergreenjs this is a e bundle and angular cli ha to add some hardcoding code to handle this case o this pr upgrade zonejs npm package format to follow apf rule the updated point are in packagejson update all bundle related property main bundleszoneumdjs module fesmzonejs e fesmzonejs fesm fesmzonejs reorganize dist folder for example for zonejs bundle now we have dist bundle zonejs this is the e bundle fesm zonejs this is the e bundle in the old version is zoneevergreenjs have several subpackages zonetesting provide zonetesting bundle include zonejs and testing library zonenode provide zonejs implemention for nodejs zonemix provide zonejs patch for both browser and nodejs all those subpackages will have their own packagejson and the bundle will reference bundle and fesmes keep backward compatibility still keep the zonejsdist folder and all bundle will be redirected to zonejsbundles or zonejsfesm folder pr close ,feat
3402,docsinfra preconnect to analytics origin lighthouse recommends preconnecting to important thirdparty origin see pr close ,fix
3403,ngcc do not scan import expression in dts file it is quite common for the t compiler to have to add synthetic type to function signature where the developer ha not explicitly provided them this result in import expression appearing in typing file for example in ngrxdata there is a class with a getter that ha an implicit type t export declare class entitycollectionservicebase get store return thisdispatcherstore in the dts file for this we get t get store storeimportngrxdataentitycache given that this file is within the ngrxdata package already this caused ngcc to believe that there wa a circular dependency causing it to fail to process the package and in fact crash this commit resolve this problem by ignoring import expression when scanning typing program for dependency this ability wa only introduced very recently in a rc release and so it ha limited benefit given that up till now ngcc ha been able to process library effectively without it moreover in the rare case that a package doe have such a dependency it should get picked up by the sync ngcccli integration point pr close ,fix
3404,languageservice remove html entity autocompletion this commit remove the autocompletion feature for html entity html entites are thing like amp lt etc there are a few reason for the decision it is outside the core functionality of angular l the implementation relies on regex which incurs performance cost there isnt much value if user do not already know which entity they want to use the list that we provide is not exhaustive pr close ,feat
3405,compilercli downlevel angular decorator to static property in v of angular we removed tsickle from the default ngc pipeline this had the negative potential of breaking e output and ssr due to a limitation in typescript typescript by default preserve type information for decorated constructor parameter when emitdecoratormetadata is enabled for example consider this snippet below directive export class mydirective constructorbutton mybutton export class mybutton typescript would generate metadata for the mydirective class it ha a decorator applied this metadata would be needed in jit mode or for library that provide mydirective through npm the metadata would look a followed let mydirective class mydir mydirective decorate directive metadatadesignparamtypes mybutton mydirective let mybutton class mybutton notice that typescript generated call to decorate and metadata these call are needed so that the angular compiler is able to determine whether mydirective is actually an directive and what type are needed for dependency injection the limitation surface in this concrete example because mybutton is declared after the metadata call while metadata actually directly reference mybutton this is illegal though because mybutton ha not been declared at this point this is due to the socalled temporal dead zone in javascript error like followed will be reported at runtime when such filecode evaluates uncaught referenceerror can not access mybutton before initialization a noted this is a typescript limitation because ideally typescript shouldnt evaluate metadatareference mybutton immediately instead it should defer the reference until mybutton is actually declared this limitation will not be fixed by the typescript team though because it a limitation a per current design and they will only revisit this once the tc decorator proposal is finalized currently stage at time of writing given this wontfix on the typescript side and our heavy reliance on this metadata in library and for jit mode we intend to fix this from within the angular compiler by downleveling decorator to static property that dont need to evaluate directly for example mydirectivectorparameters mybutton with this snippet above mybutton is not referenced directly only lazily when the angular runtime need it this mitigates the temporal dead zone issue caused by a limitation in typescript decorator metadata output see in the past a noted before version the angular compiler by default used tsickle that already performed this transformation we moved the transformation to the cli for jit and ngpackager but now we realize that we can move this all to a single place in the compiler so that standalone ngc consumer can benefit too and that we can disable tsickle in our bazel ngcwrapped pipeline that currently still relies on tsickle to perform this decorator processing this transformation also ha another positive sideeffect of making angular applicationlibrary code more compatible with serverside rendering in principle typescript would also preserve type information for decorated class member similar to how it did that for constructor parameter at runtime this becomes an issue when your application relies on native dom globals for decorated class member type eg input panelelement htmlelement your application code would then reference htmlelement directly whenever the source file is loaded in nodejs for ssr htmlelement doe not exist on the server though so that will become an invalid reference one could work around this by providing global mock for these dom symbol but that doesnt match up with other place where dependency injection is used for mocking dombrowser specific symbol more context in this issue the tldr here is that the angular compiler doe not care about type for these class member so it wont ever reference htmlelement at runtime fix fix fix resolve fw resolve fw pr close ,fix
3406,devtools update angularframework ,build
3407,devtools update angularcli ,build
3408,core avoid pulling in jitspecific code in aot bundle in a call to getcompilerfacade wa added to applicationref which pull in a bit of jitspecific code since the code path that call the function cant be hit for an aotcompiled app these change add an ngjitmode guard which will allow for dead code elimination to drop it completely testing it out against a new cli project showed a difference of kb pr close ,perf
3409,devinfra add comment about what the requiredbasecommit is add a comment to describe what the commit wa for the given sha so that we dont have to look it up pr close ,docs
3410,core fix path referenced in comment of both compiler facade interface file previously the comment for these file referenced a path to packagescoresrcrenderjitcompilerfacadeinterfacets that doe not exist in the current codebase this pr corrects the path in these comment pr close ,docs
3411,devinfra local change check not working look like we broke the haslocalchanges check in the git client when we moved it over from the merge script the problem is that we are using git in the first argument of gitrun that mean that we underthehood run git git this commit fix that but also switch to a better variant for ensuring no local change because it exit with nonzero when there are local change pr close ,fix
3412,devinfra rebase pr script not working the devinfra rebase pr script currently doe not work due to the following issue the push refspec is incorrect it refers to the base of the pr and not to the head of the pr the push forcewithlease option doe not work in a detached head a no remotetracking branch is set up pr close ,fix
3413,devinfra incorrect token sanitization when no token is specified we recently moved over the git client from the merge script to the common devinfra utils this made specifying a token optional but it look like the logic for sanitizing message doesnt account for that and we currently add token between every message character eg executing git tokengtokenitokenttoken tokenstokenttokenatokenttokenutokenstoken pr close ,fix
3414,platformserver correctly handle absolute relative url previously we would simply prepend any relative url with the href for the current route pulled from documentlocation however this doe not correctly account for the leading slash url that would otherwise be parsed correctly in the browser or the presence of a base href in the dom therefore we use the builtin url implementation for nodejs which implement the whatwg standard thats used in the browser we also pull the base href from the dom falling back on the full href a the browser would to form the correct request url fix pr close ,fix
3415,common prevent duplicate url change notification prevent duplicate notification from being emitted when multiple url change listener are registered using spylocationonurlchange use internal annotation for the urlchangesubscription property instead of the private access modifier otherwise we get in trouble because of spylocation implement location pr close ,fix
3416,common prefer testbedinject over inject use the strongly typed testbedinject rather than the weakly typed inject test utility function reuse injected dependency variable between sibling test case pr close ,test
3417,languageservice t reference from template item keen and i were talking about what it would take to support getting reference at a position in the current language service since it unclear when more investment in the ivy l will be available getting t reference from a template is trivial we simply need to get the definition of a symbol which is already handled by the language service and ask the t language service to give u the reference for that definition this doesnt handle reference in template but that could be done in a subsequent pas part of pr close ,feat
3418,languageservice improve signature selection by finding exact match the function signature selection algorithm is totally naive itd unconditionally pick the first signature if there are multiple overload this commit improves the algorithm by returning an exact match if one exists pr close ,fix
3419,router fix relative link generation from empty path component partial resubmit of fix incorrect url tree generation for empty path component with child add a test to demonstrate the failure of createurltree for those route fix fix pr close ,fix
3420,docsinfra fix small typo the style guide doc had a typo alert and calllouts callouts is spelled with two l not three this pr fix the typo pr close ,docs
3421,serviceworker add stalewhilerevalidate strategy there is great workaround for implementing stalewhilerevalidate strategy in serviceworker by setting strategy to freshness and timeout to u documented this in service worker config where all other strategy are documented fix pr close ,docs
3422,core assert tnode is not a container when setting attribute on element this pr provides a more helpful error than the one currently present elsetattribute is not a function it is not valid to have directive with host binding on ngtemplate or ngcontainer node ve would silently ignore this while ivy attempt to set the attribute and throw an error because these are comment node and do not have setattribute functionality it is better to throw a helpful error than to silently ignore this because putting a directive with host binding on an ngtemplate or ngcontainer is most often a mistake developer should be made aware that the host binding will have no effect in these case note that an error is already thrown in ivy a mentioned above so this is not a breaking change and can be merged to both master and patch resolve pr close ,refactor
3423,languageservice remove all marker from test project this commit remove all marker from the inline template in appcomponent and external template in templatereference test scenario should be colocated with the test case themselves besides many existing case are invalid for example if we want to test autocomplete for html element the existing test case is like cursor h this doesnt make much sense becasue the language service already see the h tag in the template the correct test case should be cursor imo this reflects the realworld use case better this commit also uncovers a bug in the way html entity autocompletion is done there an offbyone error in which a cursor that immediately trail the ampersand character fails to trigger html entity autocompletion pr close ,test
3424,devtools update angularcli ,build
3425,docsinfra upgrade cli command doc source to b updating angularmaster from clibuildsmaster relevant change in commit range modified helpgeneratejson pr close ,build
3426,ngcc postmerge review tidy up this commit tidy up a few of the code comment from a recent commit to help improve the clarity of the algorithm pr close ,style
3427,serviceworker dont stay locked in existingclientsonly if corrupted data problem after and it still possible to get locked in state existingclientsonly without any possibility to get out even by pushing new update on the server more specifically if control doc latest of ngswdbcontrol once get a bad value then the service worker will fail early and wont be able to overwrite latest with new valid value the one from future update for example once in this state url ngswstate will show ngsw debug info driver state existingclientsonly degraded due to failed initialization invariant violated initialize latest hash b… ha no known manifest error invariant violated initialize latest hash b… ha no known manifest at driveranonymous at generatornext anonymous at fulfilled latest manifest hash b… last update check su with hash b… corresponding to no installed version solution currently when such a case happens the service worker simply fails with an assertion because this failure happens early and is not handled the service worker is not able to update latest to new installed app version i propose to detect this corrupted case a latest hash that doesnt match any installed version a few line above so that the service worker can correctly call it already existing cleaning code this change successfully fix the problem described above unit test written with the help of george kalpakas thank you pr close ,fix
3428,devinfra await setup in runbenchmark fix for issue change runbenchmark into an async function awaits configsetup in runbenchmark pr close ,fix
3429,devtools update angularframework ,build
3430,devtools add developing guide ,docs
3431,devinfra properly determine oauth scope for git client token resubmit of bbdbdabffafdc since bcccdddcfaefcdefab accidentally reverted the fix due to rebasing most likely pr close ,fix
3432,element fire custom element output event during component initialization previously event listener for component output event attached on an angular custom element before inserting it into the dom ie before instantiating the underlying component didnt fire for event emitted during initialization lifecycle hook such a ngaftercontentinit ngafterviewinit ngonchanges initial call and ngoninit the reason wa that that ngelementimpl subscribed to event after calling ngelementstrategyconnect which is where the initial change detection take place running the initialization lifecycle hook this commit fix this by ensuring componentngelementstrategyevents is defined and available for subscribing to even before instantiating the component ensuring ngelementimpl subscribes to ngelementstrategyevents before calling ngelementstrategyconnect which initializes the component instance jira issue fw fix pr close ,fix
3433,element remove unnecessary nonnull assertion and a any typecasts this commit remove some unnecessary nonnull assertion and a any typecasts from the element package pr close ,refactor
3434,devinfra move gitclient to common util move gitclient from merge script into common utils for unified method of performing git action throughout the ngdev toolset pr close ,refactor
3435,ngcc find decorated constructor params on iife wrapped class now in t class in e can be wrapped in an iife this commit ensures that we still find the static property that contain decorator information even if they are attached to the adjacent node of the class rather than the implementation or declaration fix pr close ,fix
3436,devinfra use the exec helper from utilsshelljs whenever possible there is an exec helper provided by utilsshelljsts which is a wrapper around shelljs exec with some default option currently silent true the intention is to avoid having to pas these option to every invocation of the exec function this commit update all code inside devinfra to use this helper whenever possible note for simplicity the utilsshelljs helper doe not support some of the le common call signature of the original exec helper so in some case we still need to use the original pr close ,refactor
3437,common prevent duplicate url change notification prevent duplicate notification from being emitted when multiple url change listener are registered using locationonurlchange pr close ,fix
3438,devinfra correct tslint failure in devinfra directory fix tslint failure in devinfra directory a the directory is now part of the tslint enforced file pr close ,style
3439,devinfra clean up usage within pullapprove tooling clean up pullapprove tooling to use newly created common utils additionally use newly created logging level rather than verbose flagging pr close ,fix
3440,devtools update angularframework ,build
3441,devinfra change required base commit sha update the commit sha to require that pr have been rebased beyond the one which ha new header requirement so we dont get failure after merging pr close ,refactor
3442,devinfra properly determine oauth scope for git client token we recently added a better reporting mechanism for oauth token in the devinfra git util unfortunately the logic broke a part of addressing pr review feedback right now always the empty promise from oauthscopes will be used a getauthscopes considers it a the alreadyrequested api value this is not the case a the default promise is also truthy we should just fix this by making the property nullable pr close ,fix
3443,devinfra add oauth scope check to ensure necessary permission for merge tooling add an assertion that the provided token ha oauth scope permission for repo a this is required for all merge attempt on failure provides detailed error message with remediation step for the user pr close ,feat
3444,ngcc implement a programbased entrypoint finder this finder is designed to only process entrypoints that are reachable by the program defined by a tsconfigjson file it is triggered by calling mainngcc with the findentrypointsfromtsconfigprogram option set to true it is ignored if a targetentrypointpath ha been provided a well it is triggered from the command line by adding the useprogramdependencies option which is also ignored if the target option ha been provided using this option can speed up processing in case where there is a large number of dependency installed but only a small proportion of the entrypoints are actually imported into the application pr close ,feat
3445,ngcc capture dynamic import expression a well a declaration previously we only checked for static import declaration statement this commit also find import path from dynamic import expression also this commit should speed up processing previously we were parsing the source code content into a tssourcefile and then walking the parsed ast to find import path generating an ast is unnecessary work and it is faster and creates le memory pressure to just scan the source code content with the typescript scanner identifying import path from the token pr close ,fix
3446,ngcc move shared code into dependencyhostbase the various dependency host had a lot of duplicated code this commit refactors them to move this into the base class pr close ,refactor
3447,ngcc ensure that more dependency are found by esmdependencyhost previously this host wa skipping file if they had import that spanned multiple line or if the import wa a dynamic import expression pr close ,fix
3448,ngcc cache parsed tsconfig between run this commit will store a cached copy of the parsed tsconfig that can be reused if the tsconfig path is the same this will improve the ngcc noop case where there is no processing to do when the entrypoints have already been processed previously we were parsing this config every time we checked for entrypoints to process which can take up to second in some case resolve pr close ,perf
3449,docsinfra skip deploying rc version when lexicographically smaller than stable the angulario production deployment script deploytofirebasesh compare the major version corresponding to the current branch eg for branch x against the major stable version eg if the current stable version is it then us the result of that comparison to determine whether the current branch corresponds to a newer version than stable ie an rc version and thus should not be deployed or to an older version and thus may need to be deployed to an archive vxangulario project previously the script wa using string comparison to compare the two major version this could produce incorrect result for an rc major version that is numerically greater than the stable but lexicographically smaller for example v is numerically greater but lexicographically smaller than example of a ci job that incorrectly tried to deploy an rc branch to production this commit fix it by switching to an integer comparison ie using the lt operator pr close ,ci
3450,languageservice recover from error in analyzing ng module in place of failing to return analyzed ng module when the analyzer fails return the previouslyanalyzed ng module which may be empty and log an error close pr close ,fix
3451,compilercli extract ngcompileradapter interface ngcompiler is the heart of ngtsc and can be used to analyze and compile angular program in a variety of environment most of these integration rely on ngprogram and the creation of an ngcompilerhost in order to create a tsprogram with the right shape for ngcompiler however certain environment such a the angular language service have their own mechanism for creating tsprograms that dont make use of a tscompilerhost in such environment an ngcompilerhost doe not make sense this commit break the dependency of ngcompiler on ngcompilerhost and extract the specific interface of the host on which ngcompiler depends into a new interface ngcompileradapter this interface includes method from tscompilerhost the extendedtscompilerhost a well a apis from ngcompilerhost a consumer such a the language service can implement this api without needing to jump through hoop to create an ngcompilerhost implementation that somehow wrap it specific environment pr close ,refactor
3452,compilercli use modulewithproviders type if static eval fails when the compiler encounter a function call within an ngmodule import section it attempt to resolve it to an ngmoduleannotated class by looking at the function body and evaluating the statement there this evaluation can only understand simple function which have a single return statement a their body if the function the user writes is more complex than that the compiler wont be able to understand it and previously the partialevaluator would return a dynamicvalue for that import with this change in the event the function body resolution fails the partialevaluator will now attempt to use it foreign function resolvers to determine the correct result from the function type signtaure instead if the function is annotated with a correct modulewithproviders type the compiler will be able to understand the import without static analysis of the function body pr close ,fix
3453,core infinite loop if injectable using inheritance ha a custom decorator if we detect that an injectable class is inheriting from another injectable we generate code that look something like this const basefactory ɵɵgetinheritedfactorychild injectable class parent injectable class child extends parent static ɵfac t basefactoryt child this usually work fine because the ɵɵgetinheritedfactory resolve to the factory of parent but the logic can break down if the child class ha a custom decorator custom decorator can return a new class that extends the original once which mean that the ɵɵgetinheritedfactory call will now resolve to the factory of the child causing an infinite loop these change fix the issue by changing the inherited factory resolution logic so that it walk up the prototype chain classbyclass while skipping class that have the same factory a the class that wa passed in fix pr close ,fix
3454,devinfra small change and fix rename bazel workspace from npmdevinfra to npmangulardevinfraprivate to make it clear that this package is private to angular change driverutilities modulename to match the new bazel workspace name correct a comment by rewording it from deployed version to published version fix merge conflict in tmplpackagejson make packagesbazelsrcesmbzl replacement more generalized so that importing from packagesbazel work deleted devinfra path from modulesbenchmarks tsconfig moved devinfrabenchmarkbrowsers to devinfrabrowsers pr close ,refactor
3455,form use a type guard to get rid of cast use an explicit type guard when checking if a given object is of type abstractcontroloptions instead of a simple function returning a boolean value this allows u to remove manual type casting when using this function relying instead on typescript to infer correct type pr close ,refactor
3456,devtools update angularframework ,build
3457,devtools update to latest flamegraph ,feat
3458,devtools update angularcli ,build
3459,core remove v mention from injectable warning in v we started showing a console warning when instantiating a token that inherited it injectable decorator rather than providing it own this warning said that the pattern would become an error in v however we have decided to wait until at least v to throw in this case so this commit update the warning to be le prescriptive about the exact version when the pattern will no longer be supported pr close ,docs
3460,ngcc allow immediately reporting a stale lock file currently if an ngcc process is killed in a manner that it doesnt clean up it lock file or is killed too quickly the compiler report that it is waiting on the pid of a process that doesnt exist and that it will wait up to a maximum of n second this pr update the locking code to additionally check if the process exists and if it doe not it will immediately bail out and print the location of the lock file so a user may clean it up pr close ,perf
3461,devtools update angularframework ,build
3462,router fix a typo in example code the code in the example doc used testbedconfiguretestmodule instead of testbedconfiguretestingmodule pr close ,docs
3463,core remove looseidentical in favor of builtin objectis remove looseidentical implementation and instead use the e objectis in it place they behave exactly the same way except for looseidentical true objectis false other than the difference noted above this is not be a breaking change because looseidentical is a private api e is listed a a mandatory polyfill in the browser support guide also note that ivy already us objectis in bindingupdated pr close ,refactor
3464,languageservice disable ivy l test on ci this commit disables the test for ivy version of language service on ci because the compiler apis are not yet stable so language service should not assert against it behavipr pr close ,test
3465,ngcc do not inline sourcemaps for noninline typing sourcemaps inline sourcemaps in typing file can impact ide performance so ngcc should only add such map if the original typing file contains inline sourcemaps fix pr close ,fix
3466,core fix typo in decoratorsts relating to the use of objectdefineproperty previously there wa a typo in a comment within the propdecorator function relating to and justifying the use of objectdefineproperty this pr clear up the wording that comment pr close ,docs
3467,devtools update angularframework ,build
3468,core reenable decorator downleveling for angular npm package in we disabled tsickle pass from transforming the tsc output that is used to publish all angular framework and component package angular this change however revealed a bug in the ngc that caused decorate and metadata call to still be emitted in the j code even though we dont depend on them additionally it wa these call that caused code in angularmaterial package to fail at runtime due to circular dependency in the emitted decorator code documeted a this change partially roll back by reenabling the decorator to static field static property downleveling this is just a temporary workaround while we are also fixing root cause in ngc tracked a fw resolve fw related to fw pr close ,fix
3469,devtools update angularframework ,build
3470,bazel mention architect prototype and slack channel this commit add a link to the bazel prototype for orchestrating multiple cli architect and also add a link to the angular channel in the bazel slack workspace pr close ,docs
3471,bazel remove schematic and builder from packagejson this commit remove the field for ngadd schematic and builder from packagejson of angularbazel pr close ,refactor
3472,bazel remove schematic for bazel builder this commit remove ngadd and ngnew schematic for the bazel builder and update the corresponding build file pr close ,refactor
3473,devtools update angularcli ,build
3474,platformserver fix rendermodule usage guidance with ivy before the introduction of the ivy renderer user would compile their application and use the resulting factory for ssr since these postcompilation artifact ensured faster delivery thus using the original module a the rendering entrypoint wa considered suboptimal and wa discouraged however with the introduction of ivy this guidance is no longer applicable since these factory are no longer generated comparable speed is achieved using the factoryless module renderer and so we update the guiance in the doc for the method pr close ,docs
3475,devtools update angularframework ,build
3476,devinfra migrate devinfra config loading to ngdev directory migrate to using ngdev directory for ngdev configuration to better allow management of the configuration using multiple file the intention is to prevent the config file from becoming unruly pr close ,fix
3477,devtools update angularcli ,build
3478,devtools update dependency typeschrome to ,build
3479,devtools update angularcli ,build
3480,devtools update angularframework ,build
3481,devtools update angularcli ,build
3482,devinfra migrate release tool to use new logging system migrate the release tool in ngdev to use new logging system rather than directly calling console to create a better experience for user pr close ,feat
3483,devinfra migrate tscirculardependencies tool to use new logging system migrate the tscirculardependencies tool in ngdev to use new logging system rather than directly calling console to create a better experience for user pr close ,feat
3484,devinfra migrate merge tool to use new logging system migrate the merge tool in ngdev to use new logging system rather than directly calling console to create a better experience for user pr close ,feat
3485,devinfra migrate ngdev utils to use new logging system migrate the ngdev utils to use new logging system rather than directly calling console to create a better experience for user pr close ,feat
3486,devinfra migrate pullapprove tool to use new logging system migrate the pullapprove tool in ngdev to use new logging system rather than directly calling console to create a better experience for user pr close ,feat
3487,devinfra migrate rebase tool to use new logging system migrate the rebase tool in ngdev to use new logging system rather than directly calling console to create a better experience for user pr close ,feat
3488,devinfra migrate discovernewconflicts tool to use new logging system migrate the discovernewconflicts tool in ngdev to use new logging system rather than directly calling console to create a better experience for user pr close ,feat
3489,devinfra migrate commitmessage tool to use new logging system migrate the commitmessage tool in ngdev to use new logging system rather than directly calling console to create a better experience for user pr close ,feat
3490,devinfra migrate format tool to use new logging system migrate the formatting tool in ngdev to use new logging system rather than directly calling console to create a better experience for user pr close ,feat
3491,devinfra add group function to logging system and remove color param add group and groupend function to each of the logging function to allow creating group in the logged output additionally remove the color parameter from logging function in favor of the color being applied to the string at the call site pr close ,feat
3492,docsinfra upgrade cli command doc source to dbccaa updating angularmaster from clibuildsmaster relevant change in commit range modified helpgeneratejson pr close ,build
3493,devinfra expose script for determining merge branch the component repo and framework repository follow the same patch branch concept we should be able to share a script for determining these merge branch additonally the logic ha been improved compared to the old merge script because we no longer consult git lsremote unless really needed currently git lsremote is always consulted even though not necessarily needed this can slow down the merge script and the caretaker process when a couple of pr are merged personally saw around second per merge additionally the new logic is more strict and will ensure in most case that no wrong patchminor branch is determined previously the script just used the lexicographically greatest patch branch this could be wrong when a new patch branch ha been created too early or by accident pr close ,feat
3494,devinfra ensure tsnode is registered with commonjs a module we recently added support for automatic registration of tsnode when the devinfra configuration is loaded in addition to registering tsnode we should also ensure that the commonjs module is set up by default tsnode would use e module import that are not supported by default in nodejs pr close ,fix
3495,core disable tsickle pas when producing apf package a of typescript the tsc emit is not compatible with closure compiler due to there is some hope that this will be fixed by a solution like the one proposed in but currently it unclear if when that will happen since the closure support ha been somewhat already broken and the tsickle pas ha been a source of headache for some time for angular package we are removing it for now while we rethink our strategy to make angular closure compatible outside of google this change ha no effect on our closure compatibility within google which work well because all the code is compiled from source and passed through tsickle this change only disables the tsickle pas but doesnt remove it a follow up pr should either remove all the trace of tscikle or reenable the fixed version breaking change angular npm package no longer contain jsdoc comment to support closure compiler advanced optimization the support for closure compiler in angular package ha been experimental and broken for quite some time a of t closure is unusable with the javascript emit please follow for more information and update if you used closure compiler with angular in the past you will likely be better off consuming angular package built from source directly rather than consuming the version we publish on npm which is primarily optimized for webpackrollup terser build pipeline a a temporary workaround you might consider using your current build pipeline with closure flag compilationlevelsimple this flag will ensure that your build pipeline produce buildable and runnable artifact at the cost of increased payload size due to advanced optimization being disabled if you were affected by this change please help u understand your need by leaving a comment on pr close ,fix
3496,devtools do not attempt to initialize devtools if not ivy ,fix
3497,devtools update angularframework ,build
3498,devinfra create logging utils with support for defined logging level creates common logging function at different level allows for providing logging statement which are actually printed to the console based on the loglevel environment variable pr close ,feat
3499,devinfra ignore devinfra scope while checking for feature in patch branch this commit update the script that check master and patch branch to ignore feature with devinfra scope while verifying that there are no feature commits in patch branch it ok and in fact desirable for devinfra feature to be on the patch branch pr close ,fix
3500,ngcc identifier modulewithproviders function in iife wrapped class in e iife wrapped class the identifier that would reference the class of the ngmodule may be an alias variable previously the esmreflectionhost wa not able to match this alias to the original class declaration this resulted in failing to identify some modulewithproviders function in such case these iife wrapped class were introduced in typescript which is why this issue is only recently appearing since x doe not support t there is no reason to backport this commit to that branch fix pr close ,fix
3501,compilercli expose the walkfordeclaration function this test helper can be useful when searching for node within an iife exporting it here is helpful in ngcc reflection test pr close ,refactor
3502,ngcc give adjacent class identifier a distinct name to better check that the code is working this commit give a distinct name decoratedwrappedclass to the adjacent class declaration in the test pr close ,test
3503,devtools update typescript ,build
3504,devtools update dependency typeschrome to ,build
3505,devtools update angularcli ,build
3506,changelog fix broken link in changelog when pasting over the release note the link for next wa accidentally cut off this commit fix the broken link for next in the changelog ,docs
3507,element do not break when the constructor of an angular element is not called previously the correct behavior of angular custom element relied on the constructor being called and thus the injector property being initialized however some polyfills eg documentregisterelement do not call the constructor of custom element which resulted in the injector property being undefined and the ngelementstrategy failing to be instantiated this commit fix it by being tolerant to the injector property being undefined and falling back to the injector passed to the createcustomelement config note we dont have proper test exercising the situation where the constructor is not called for now this is tested using a google internal test suite which is how this issue wa caught this commit also add a rudimentary unit test to emulate this situation pr close ,fix
3508,element capture input property set before upgrading the element previously if an element started out a a regular htmlelement not a custom element and wa later upgraded to a custom element any property corresponding to component input that were set on the element before upgrading it would not be captured correctly and thus not reflected on the instantiated component this commit fix it by ensuring that such property are captured correctly jira issue fw fix close pr close ,fix
3509,element clean up teststrategy between test previously the teststrategy ngelementstrategy used in createcustomelement test wa created once and reused in each test due to complication related to how customelementsregister work a a result the teststrategy instance state eg input could be polluted from previous test and affect subsequent one this commit ensures the strategy instance is reset before each test pr close ,test
3510,element only declare helper if needed previously helper modulescomponents class were declared even if the test were not run because the environment did not support custom element for example this commit move the declaration of the helper inside the describe block so they are not declared unnecessarily this is in preparation of adding more helper that need to access variable declared inside the describe block pr close ,test
3511,element remove unused import and property remove import that are not used remove private class property that are not used outside of the constructor pr close ,refactor
3512,element simplify accessing ngelementstrategy previously we had to check whether ngelementstrategy had been instantiated before accessing it this wa tedious and error prone since it wa easy to forget to add the check in new call site this commit switch to using a getter so that the check ha to be performed in one place and is transparent to call site including any future one pr close ,refactor
3513,element correctly handle gettingsetting property before connecting the element createcustomelements creates some getterssetters for property corresponding to component input that delegate to the ngelementstrategy however it is not guaranteed that the element ngelementstrategy will have been created when these getterssetters are called because some polyfills eg documentregisterelement do not call the constructor previously trying to getset input property before connecting the element to the dom via connectedcallback would fail due to ngelementstrategy not being created this commit ensures that the ngelementstrategy is always created before used inside the input property getterssetters similar to how it is done for other method of ngelement mentioned in pr close ,fix
3514,devinfra update circlecireadmemd the info about the pw storage is out of date we should really just point the reader to a go link something like goangularpasswords and keep the info about secret there pr close ,docs
3515,devinfra update ngcontainer doc update developer instruction by clarify and adding missing login detail for the hubdockercom image server pr close ,docs
3516,devinfra make commitmessagefilter script executable for merge mark the commitmesagefilterjs file a executable allowing it to be run by git filterbranch during the merge script process pr close ,fix
3517,devinfra register tsnode when reading configuration tsnode is now an optional peer dependency of the shared devinfra package whenever a ngdev command run and a typescriptbased configuration file exists tsnode is set up if available that allows consumer of the package a the component repo to more conveniently use a typescriptbased configuration for devinfra currently command would need to be proxied through tsnode which rather complicates the setup ngdevcommandtsnode nodemodulesangulardevinfraprivateclijs im thinking that it should be bestpractice to use typescript for writing the configuration file given that the tool is used primarily in angular project for which most source are typescript this should be acceptable pr close ,feat
3518,docsinfra remove rev property from resource interface and data the rev property ha been in the initial commit that introduced resourcesjson fdacddbdbfbeab and ha been added to all new entry since always with the value true this field is a remnant from back when this data wa stored in a firebase database and the rev field indicated whether the entry ha been reviewedapproved by a devrel lead or something now that the data is kept in the repository and the reviewing is done a part of the corresponding pr this field is no longer necessary pr close ,refactor
3519,docsinfra upgrade cli command doc source to afa updating angularmaster from clibuildsmaster relevant change in commit range modified helpbuildjson pr close ,build
3520,devtools update angularcli ,build
3521,devtools add animation in the bar chart ,feat
3522,devtools remove dependency on ngxcharts ,refactor
3523,devtools vendor dependency and remove redundancy ,refactor
3524,router corrected minor typo this commit corrects a typo and rephrases the first sentence of the redirectto description to be more understandable pr close ,docs
3525,languageservice remove unused code in test project this commit remove the bootstrap function in the test project since it presence ha no effect on the behavior of language service also remove the explicit cast when instantiating counterdirectivecontext and let type inference take care of that pr close ,test
3526,devinfra create rebasepr tool in ngdev creates a tool in ngdev which rebases a pr automatically and push the rebase commits back to the pr this is meant to be a replacement to the local merge script currently in the repo and currently ha feature parity pr close ,feat
3527,router add doc for routerlink input the routerlink and routerlinkwithhref input do not have any doc this comment add jsdoc comment to the input pr close ,docs
3528,router update type for routerlink to include null and undefined pr added support for null and undefined but the type on the parameter wa not updated this would result in a compilation error if fulltemplatetypecheck is enabled fix pr close ,fix
3529,devinfra incorrect base revision for merge script autosquash a mentioned in the previous commit the autosquash strategy ha not been used in the component repo so we could easily regress after thorough manual testing of the autosquash strategy again now that the merge script will be moved to framework it came to mind that there is a bug with the base revision in the autosquash merge strategy the problem is that the base revision of a given pr is relying on the amount of commits in a pr this is prone to error because the amount of commits could easily change in the autosquash merge strategy because fixup or squash commits will be collapsed basically invalidating the base revision to fix this we fixate the base revision by determining the actual sha this one is guaranteed to not change after the autosquash rebase the current merge script in framework fixates the revision by creating a separate branch but there is no benefit in that compared to just using an explicit sha that doesnt need to be cleaned up pr close ,fix
3530,devinfra merge script autosquash should be interactive the component repo doe not use the autosquash merge strategy so recent change to that seem to broke the autosquash strategy since we dont run the rebase in interactive mode the autosquash flag ha no effect this is by design in git we can make it work by setting the git sequence editor to true so that the rebase seems like an interactive one to git while it isnt one for the user this match conceptually with the merge script currently used in framework the only difference is that we allow a real interactive rebase if the commit message fixup label is applied this allows commit message modification and others if needed pr close ,fix
3531,devinfra integrate merge script into ngdev cli integrates the merge script into the ngdev cli the goal is that caretaker can run the same command across repository to merge a pull request the command is a followed yarn ngdev pr merge number pr close ,feat
3532,devinfra move merge script over from component repo move the merge script from the component repository over to the shared devinfra package the merge script ha been orginally built for all angular repository but we just kept it in the component repo temporarily to test it since everything went well on the component side we now move the script over and integrate it into the devinfra package pr close ,feat
3533,docsinfra refactors createoverviewdump this commit remove the dependency on the lodash module and refactors the createoverviewdump method pr close ,refactor
3534,docsinfra upgrade cli command doc source to dbde updating angularmaster from clibuildsmaster relevant change in commit range modified helpeejson pr close ,build
3535,compilercli ensure logicalfilesystem maintains case in path the work to support casesensitivity in the filesystem went too far with the logicalfilesystem which is used to compute import path that will be added to file processed by ngtsc and ngcc previously all logical path were canonicalised which meant that on caseinsensitive filesystems the path were all set to lower case this resulted in incorrect import being added to file for example import apollo from apollo import selectpipe from selectpipe import a ɵngcc from angularcore import a ɵngcc from selectpipe the import from selectpipe is from the original file while the import from selectpipe is added by ngcc this cause the typescript compiler to complain or worse for path not to be matched correctly now when computing logical path the original absolute path are matched against rootdirs in a canonical manner but the actual logical path that is returned maintains it original casing fix pr close ,fix
3536,devinfra misc fix for the compare master and patch script this commit includes a couple minor fix for the script that compare master and patch branch take only relevant release commit into account while generating the diff fix the initial version display avoid sign from being added remove obsolete parameter that wa needed for vx branch only pr close ,fix
3537,docsinfra refactors extractdecoratedclasses this commit remove the dependency on the lodash module and refactors the extractdecoratedclasses method pr close ,refactor
3538,docsinfra improve doc on creatingupdating the preview server docker image this commit includes the following improvement document that the createimagesh script and by extention the updatepreviewserversh script need to have access to a yarn executable add a note on cron job running in noninteractive nonlogin shell which affect their execution context and have different behavior v running the same command in an interactive login shell change the nodejs and yarn installation instruction to ensure the yarn executable will be available on the path and not require an interactive login shell a happens for example when installing it via nvm this make it easier to set up a cron job that run the updatepreviewserversh script note the equivalent update have been made on the gce vm that host the pr preview server pr close ,docs
3539,docsinfra better detect failed attempt to update the preview server docker container in order to avoid unnecessary operation the updatepreviewserversh script that is used to update the pr preview server docker container will only try to update the docker container if either any file in the aioaiobuildssetup directory have changed since the last update or if a previous update failed a failed previous update is detected by checking whether the temporary aiobuildsprovisional docker image still exists this temporary image is created during the update operation and is renamed to aiobuildslatest if the update go well previously the update script wa not able to detect a previous failed attempt if the operation failed before creating the aiobuildsprovisional docker image such a if the createimagesh script failed this could lead to a situation where the preview server docker container would not be updated after a failed attempt this commit improves the logic for detecting failed attempt to account for this type of failure it doe this by not removing an older aiobuildsprovisional docker image until a new one is successfully created note while this is not fullproof it is an improvement a it eliminates a certain kind of failure pr close ,fix
3540,devtools update angularcli ,build
3541,devtools update angularframework ,build
3542,changelog add breaking change note for modulewithproviders when i made the generic mandatory for modulewithproviders in ccab i forgot to add a formal breaking change note for the changelog this commit add the missing breaking change information pr close ,docs
3543,devinfra create tool to determine conflict created by a pr creates a tool in ngdev to determine the pr which become conflicted by merging a specified pr often the question is brought up of how many pr require a rebase a a result of a change this script allows to determine this impact pr close ,feat
3544,changelog remove duplicate feature and bug fix we have accidentally added the next release information feature and bug fix twice in the changelogmd pr close ,docs
3545,docsinfra refactors checkunbalancedbackticks this commit remove the dependency on the lodash module and refactors the checkunbalancedbackticks method pr close ,refactor
3546,docsinfra remove searchkeywords from content when rendering previously this inlinetagdef wa returning the doc which is rendered to the output a object object obviously not what is intended now it return which effectively strip the tag handler from the rendered output pr close ,build
3547,devtools update dependency typeschrome to ,build
3548,devinfra add github to common config for ngdev configuration typing add a gitub object to the common configuration for ngdev this github configuration provides information needed for making api request to github pr close ,feat
3549,devtools update dependency typeschrome to ,build
3550,devtools update angularframework ,build
3551,core host class should not be fed back into input previously all static styling information including the one from componentdirective host binding would get merged into a single value before it would be written into the inputclassstyle the new behavior specifically excludes host value from the input binding fix pr close ,fix
3552,core rename refreshdynamicembeddedviews to refreshembeddedviews dynamic embedded view were conceptually different from inline embedded view but we have since removed the inline embedded view so we now only have embedded view see related refactoring work to remove inline embedded view in and pr close ,refactor
3553,core inheritance delegate ctor regex updated to work on minified code if one component parent inherit another component base like the following component class base constructorinjectinjectiontoken injector injector component class parent extends base no constructor when creating component parent the dependency injection should work on delegating ctors like above the code parent code above will be compiled into something like class parent extends base constructor superarguments the angular core isdelegatector function will identify the delegation ctor to the base class but when the code above is minified using terser the minified code will compress the space resulting in something like class parent extends baseconstructorsuperarguments the regex will stop working since it wasnt aware of this case so this fix will allow this to work in minified code case pr close ,fix
3554,core remove tviewnode field from viewref the tviewnode field that wa marked a internal on the viewref is not necessery a a reference to a relevant tview is available a a local variable pr close ,refactor
3555,core verify that ivy in work correctly with html namespaces this commit add several test to verify that in logic in ivy handle element with html namespaces correctly related to pr close ,test
3556,devtools update dependency tslib to v ,build
3557,devtools update dependency protractor to v ,build
3558,devtools update angularcli ,build
3559,devtools move dependency to devdeps ,build
3560,devinfra do not require a commit body for release commits release commits do not require a commit body a the context usually provided in commit body is already available in the process of releasing no additional value is gained from adding a body message on these commits pr close ,fix
3561,router update router guide to use urltree for guard redirects the current implementation for redirecting user inside guard wa in place before the feature wa added to allow canactivate and canactivatechild guard to return urltree for redirecting user returning urltree should be the default method a it provides a more desirable redirecting experience when using routernavigate followed by return false the router call reseturltocurrenturltree in the finalize operator before processing the navigation to the new route this can result in an undesirable history if the navigation wa the first navigation in the application that is the route will briefly be reset to just see fix pr close ,docs
3562,router filter the event to subscribe the current code will not work a the e will be an event if we try to access eid and eurl it will throw an exception the correct way is to use map or filter down to specific event pr close ,docs
3563,devinfra add atscott for fwcore approver add atscott andrew scott to the list of approver in the fwcore section of the pullapproveyml file pr close ,refactor
3564,docsinfra correctly handle pseudo class in the code base there are case where there is conceptually a class that is represented by a combination of an interface type declaration and a const value declaration for example export interface someclass counta string number export const someclass class somemethoda string number these were being rendered a interface and also not correctly showing the description and default parameter value in this commit such concept are now rendered a class the class that are affected by this are debugelement debugnode type eventemitter testbed note that while decorator are also defined in this form they have their own rendering type decorator and so are not affecte by this pr close ,build
3565,compilercli compute the correct target output for localize message in some version of typescript the transformation of synthetic localize tagged template literal is broken see we now compute what the expected final output target of the compilation will be so that we can generate e compliant localize call instead of relying upon t to do the downleveling for u this is a workaround for the t compiler bug which could be removed when this is fixed but since it only affect e targeted compilation which is now not the norm it ha limited impact on the majority of angular project so this fix can probably be left in indefinitely pr close ,fix
3566,docsinfra update payload size after t update here are the significant change found in distmainjs for aio tuprov rkbtoken t factory tufac to tuprov rjb token t factory functione return tuface function hstconst em to function fstiftstringttrimreturn const etmatchds return euneetmatchhsfunctiontlet en forlet s stlength sconst rtcharats rneerennreturn entthnconsolewarnwarning sanitizing unsafe style value t see pstconst eys bktp ebprojectionemaptarrayfromt to ifbktfvoid econst tbprojection forlet n nthisngcontentselectorslength n const sen tpushnullsarrayfromsnull return oobservedattributesobjectkeysi nmappropnamett foreacht objectdefinepropertyoprototypet o to return tobservedattributesobjectkeysit return nmappropnamett foreacht objectdefinepropertyoprototypet o pr close ,test
3567,ngcc support defineproperty reexports in commonjs and umd in typescript some reexport syntax have changed to be getter function created by call to objectdefineproperty rather than simple property accessors this commit add support into the commonjs and umd reflection host for this style of reexport syntax pr close ,fix
3568,ngcc viamodule should be null for local import in the commonjs and umd reflection host the logic for computing the viamodule property of declaration object wa not correct for some case when getting the export of module in these case it wa setting viamodule to the path of the local module rather than null pr close ,fix
3569,ngcc tidy up typo etc in comment this file had a few small typo and other issue that have now been fixed in this commit pr close ,docs
3570,ngcc rename reexportstatement to wildcardreexportstatement the term reexportstatement is too general for this particular concept here the reexport actually refers to a wildcard where all the module export are being reexported when we introduce other reexport statement type later this will be confusing pr close ,refactor
3571,ngcc reformat some subject code for test using backtick multiline string lead to confusing layout that doe not fit with the surrounding indentation also it can lead to test fragility due to automated code formatting this commit change just one set of subject code to use a more resilient string concatenation approach pr close ,test
3572,compilercli hande t format in emisson test in typescript the emitted j code ha some difference this commit update the test to be resilient to these change pr close ,test
3573,ngcc move spec to correct describe block the recent test for enum handling were added to the incorrect describe block this commit move them back to the correct block pr close ,test
3574,ngcc ensure rendering formatters work with iife wrapped class after the refactoring of the reflection host to accommodate e class wrapped in iifes the same treatment need to be applied to the rendering formatters pr close ,fix
3575,ngcc ensure reflection host can handle t iife wrapped class in t e output can contain e class that are wrapped in an iife so now e class declaration can look like one of class outerclass let outerclass class innerclass var aliasclass let outerclass aliasclass class innerclass let outerclass class innerclass var aliasclass let outerclass aliasclass class innerclass let outerclass let adjacentclass class innerclass static property or decorator attached to adjacentclass return adjacentclass var aliasclass let outerclass aliasclass let adjacentclass class innerclass static property or decorator attached to adjacentclass return adjacentclass the esmreflectionhost already handle slightly different iife wrapper around functionbased class this can be substantially reused when fixing esmreflectionhost since there is a lot of commonality between the two this commit move code from the esmreflectionhost into the esmreflectionhost and look to share a much a possible between the two host pr close ,fix
3576,ngcc ensure unlocker process work in mock filesystems previously the path to the unlocker process wa being resolved by the current filesystem in the case that this wa a mockfilesystemwindows on a nonwindows operating system this resulted in an incorrect path to the entrypoint now the path to the entrypoint is handcrafted to avoid being broken by whatever filesystem is in use pr close ,refactor
3577,ngcc remove unused import the import import from srcngtscreflection is not being used this commit simply remove this import from the code pr close ,refactor
3578,compilercli delegate hasbaseclass to getbaseclassexpression the previous implementation of hasbaseclass are almost identical to the implementation of getbaseclassexpression there is little benefit in duplicating this code so this refactoring change hasbaseclass to just call getbaseclassexpression this allows the various host that implement this to be simplified pr close ,refactor
3579,compilercli simplify and clarify typescriptreflectionhostisclass the comment in this function confused me so i updated it to clarify that isclass is not true for unnamed class also i took the opportunity to use a helper method to simplify the function itself pr close ,refactor
3580,ngcc simplify the detectknowndeclaration signature a number of overload were added to detectknowndeclaration to allow it to support null being passed through in practice this could easily be avoided which allows the overload to be removed and the method signature and implementation to be simplified pr close ,refactor
3581,languageservice external template update should not invalidate program in typescript the compiler is able to reuse ie not invalidate the previous program if only external template ie no t file have changed pr close ,test
3582,languageservice use empty statement a parent of type node in typescript type node need to exist in the context of a statement this commit ensures that the synthetic type node ha such a parent pr close ,fix
3583,docsinfra refactors addimagedimensionsimpl this commit change the addimagedimensionsimpl method to reduce nesting it will exit early if the condition are not matched pr close ,refactor
3584,devtools update angularframework ,build
3585,common english grammar in english grammar the comma followed by a conjunction is considered incorrect this kind of mistake called comma splice see pr close ,docs
3586,docsinfra reenable upgradephonecathybrid example ee test we recently disabled the ee test for upgradephonecathybdrid because the switch to apf caused it to fail with an uglify error more detail in a dedicated issue here we can reenable the test by switching to terser that properly handle e syntax previously the rollup bundle consisted only of e output a the angular framework package provided e output with apf there is no e output except for the nonoptimizable umd format hence we either need to downlevel code to e or use terser that support e syntax close pr close ,test
3587,core remove activeindexflag from lcontainer the activeindexflag is no longer needed because we no longer have inline embedded view there is only one type of embedded view so we do not need complex tracking for inline embedded view hastransplantedviews now take the place of the activeindex slot a a simple boolean rather than being a shifted flag inside the activeindex bit pr close ,refactor
3588,platformserver use absolute url from location for http currently request from the server that do not use absolute url fail because the server doe not have the same fallback mechanism that browser xhr doe this add that mechanism by pulling the full url out of the documentlocation object if available pr close ,feat
3589,devinfra introduce validators for ngdev config loading introduces infrastructure to validate configuration of the ngdev command at run time allowing for error to be returned to the user running the command pr close ,feat
3590,core remove style sanitization code for stylestyleprop binding in bbececbadbebceb all stylebased sanitization code wa disabled because modern browser no longer allow for javascript expression within cs this patch is a followup patch which remove all trace of style sanitization code both instruction and runtime logic for the style and styleprop binding pr close ,refactor
3591,localize use the filesystem from ngtsc this commit make the leap from it own custom baked fileutils solution to the fully formed filesystem that is used in the compilercli this make testing more straightforward and help to ensure that the tool will work across operatings system also going forward it will allow the localize project access to other useful code from the compilercli such a sourcemap handling pr close ,refactor
3592,compilercli expose loadtestdirectory test helper this helper can be useful in other package to load file from the real disk into a mock file system pr close ,refactor
3593,compilercli support buffer file in filesystem adding readfilebuffer method and allowing writefile to accept a buffer object will be useful when reading and writing nontext file such a is done in the angularlocalize package pr close ,refactor
3594,devtools update angularcli ,build
3595,devtools update dependency typeschrome to ,build
3596,devtools add extra information to popups ,feat
3597,devtools show notangular popup for nonangular apps ,fix
3598,common fix cldr website link in formstyle doc the formstyle enum offer two option and the explanation of the difference between the two can be found on the cldr official website sadly the link changed and the one currently referenced is a deadend this commit fix the link pr close ,docs
3599,platformwebworker remove mention of version the deprecation notice for platformwebworker apis is too prescriptive and note that we will remove the package in version since we are not planning to do this for version this commit update the notice to read a future version of angular pr close ,docs
3600,devtools update angularframework ,build
3601,devinfra cleanup package dependency for shared package a per our discussion in the devinfra sync meeting we dont want to have all dependency show up a peer dependency instead we only want to have larger dependency such a typescript or buildifier a peer dependency tslib is also included for the sake of it being generally a peer dependency of all angular framework package the rationale is that yarn is smart enough to collapse package if all satisfy a given range this mean that we dont necessarily need to have all dependency a peer dependency the initial idea wa to keep all dependency a peer dependency so that we have control over duplication of package a downloading multiple package w different version impact local dev ci and cache at the same time though we dont want to bother with setting up peer dependency all the time not every consumer of the shared devinfra package would like to manually specify yaml or multimatch etc in the project packagejson hence we decided to go with a hybrid approach where only more impactful dependency are peer dependency and other smaller one can be standard depdencies that are usually collapsed by yarn anyway also this commit remove tslib from build target that dont rely on it pr close ,build
3602,form remove rxjs of alias import in form async validator example in the code example of the asyncvalidator example there wa an aliased import for the rxjs operator of to align with the rxjs doc it should just use a plain import of of pr close ,docs
3603,core correct development mode console message the message can be improved by removing the unneeded ‘ the ’ x before angular is running in the development mode call enableprodmode to enable the production mode after angular is running in development mode call enableprodmode to enable production mode close pr close ,fix
3604,devtools remove forgotten marker causing slowdown ,fix
3605,devtools broken virtual scroll layout on resize fix rangleangulardevtools ,fix
3606,languageservice move t utils to separate file this commit refactors tsonly utility function to a separate file so that they could be shared with ivy language service a separate tslibrary rule is created so that there is no dependency on compiler and compilercli to make the compilation fast and lightweight the method getpropertyassignmentfromvalue is modified slightly to improve the ergonomics of the function pr close ,refactor
3607,core rename instructionscontainerts instructionstemplatets prior to this change the template instruction logic wa located in the instructionscontainerts file alongside embedded view instruction since unused embedded view instruction are removed in a previous commit this commit renames containerts templatets since only templaterelated instruction were retained pr close ,refactor
3608,core remove unused embedded view instruction this commit performs a cleanup and remove unused embedded view instruction and corresponding test pr close ,refactor
3609,devtools update angularcli ,build
3610,devtools implement basic configuration ui and use it to toggle timing api ,feat
3611,devtools update angularframework ,build
3612,docsinfra add visual signal for external link clicking on a link may take u to an extenal source which may lead to user leaving angulario unintentionally added visual cue on external link so that user know which link are external and which are intenal to angulario fix pr close ,fix
3613,compiler add name span for property read and method call asts for property read and method call contain information about the entire span of the expression including it receiver use case like a language service and compile error message may be more interested in the span of the direct identifier for which the expression is constructed ie an accessed property to support this this commit add a namespan property on propertyreads safepropertyreads propertywrites methodcalls safemethodcalls the namespan property already existed for bindingpipes this commit also update usage of these expression sourcespans in ngtsc and the langauge service to use namespans where appropriate pr close ,feat
3614,languageservice ivy wrap ngtsc to handle typecheck file this commit add a compiler interface that wrap the actual ngtsc compiler the languageservice specific compiler manages multiple typecheck file using the project interface creating and adding scriptinfos a necessary this commit also add overrideinlinetemplate method to the mock service so that we could test the compiler diagnostics feature pr close ,feat
3615,docsinfra upgrade cli command doc source to edb updating angularmaster from clibuildsmaster relevant change in commit range modified helpgeneratejson helpnewjson removed helpgetjson helpsetjson relevant change in commit range since pr removed helpgetjson helpsetjson close close pr close ,build
3616,devinfra support typescript config file previously ngdev loaded the config through a javascript file this change allows for the loaded file to be either javascript or typescript this enables configuration to be written with type safety pr close ,feat
3617,devtools update angularcli ,build
3618,docsinfra change class to interface where class property not used in resourcemodelts the interface of the resource were defined a class these do not use any class property and are only used for type checking so changed them from class to interface pr close ,refactor
3619,common remove mention of the deprecated web worker platform minor grammarstylistic change inline documentation for the platformlocation service instead mention angularplatformserver typo corrected minor grammar and stylistic change pr close ,docs
3620,devinfra update the config file loading for ngdev to expect j migrating to a j file for providing a configuration allows for more extensive configuration at run time this allows for configs to include logic and move beyond static value found in json file pr close ,fix
3621,devtools update angularframework ,build
3622,devtools preserve the expansion status of moved item ,fix
3623,devtools make sure we are not reference dependant ,fix
3624,compilercli dont try to tag nonts file a shim some project include j source file via the typescript allowjs option previously the compiler would attempt to tag these file for shim which caused error a the regex used to create shim filename assumes a t file this commit fix the bug by filtering out nonts file during tagging pr close ,fix
3625,compiler remove outdated and invalid warning for unresolved di parameter in past version of the view engine compiler we added a warning that is printed whenever the compiler come across an angular declaration with a constructor that doe not match suitable di token the warning mentioned that in vx it will turn into an actual error this actually happened a expected for most case eg the constructor of ngmodule component pipe etc will be checked and an error will be reported if constructor is not di compatible the warning ha never been removed though a it wa still relevant for unprovided injectables or injectables serialized into summary of the angular compiler a of version class that use angular feature need an angular decorator this includes base class of service that use the lifecycles angular feature due to this being a common pattern now we can remove the warning in view engine the warning is not correct and also quite confusing a it mention the planned removal in vx resolve fw pr close ,fix
3626,devtools update angularcli ,build
3627,devtools introduce streamed visualization of the profiling data ,feat
3628,devtools update angularframework ,build
3629,form number input fire valuechanges twice prior to this commit number input field would to fire valuechanges twice once for input event when typing and second for the change event when the field lost focus both event happen at once when using the increment and decrement button on the number field fix breaking change number input no longer listen to the change event test which trigger change event need to be updated to trigger input event instead the change event wa in place to support ie a we found that input event were not fired with backspace or cut action if you need to maintain ie support you will need to add a change event listener to number input and call the onchange method of numbervalueaccessor manually lastly old version of webdriver would synthetically trigger the change event on webelementclear and webelementsendkeys if you are using an old version of webdriver you may need to update test to ensure input event are triggered for example you could use elementsendkeyskeyschordkeyscontrol a keysbackspace in place of elementclear pr close pr close ,fix
3630,devtools node selection with collapsed node ,fix
3631,devtools remove redundant scrollbar ,fix
3632,devtools alignment issue in idle profiler ,fix
3633,compilercli ensure reflection test are not brittle to casesensitivity these test were matching filepaths against what is retrieved from the t compiler but the t compiler path have been canonicalised so the test were brittle on caseinsensitive filesystems pr close ,test
3634,compilercli ensure partialevaluator test are not brittle to casesensitivity these test were matching filepaths against what is retrieved from the t compiler but the t compiler path have been canonicalised so the test were brittle on caseinsensitive filesystems pr close ,test
3635,compilercli ensure indexer test are not brittle to casesensitivity these test were matching filepaths against what is retrieved from the t compiler but the t compiler path have been canonicalised so the test were brittle on caseinsensitive filesystems pr close ,test
3636,compilercli use compilerhost to ensure canonical file path the type checking infrastrure us filepaths that may come from the t compiler such path will have been canonicalized and so the type checking class must also canonicalize path when matching pr close ,fix
3637,compilercli normalize mock window file path correctly since the mockfilesystemwindows is caseinsensitive any drive path that must be added to a normalized path should be lower case to make the path canonical pr close ,fix
3638,compilercli ensure mockfilesystem handle casesensitivity previously this class used the file passed in directly to look up file in the inmemory mock filesystem but this doesnt match the behaviour of caseinsensitive filesystems now the look up is done on the canonical file path pr close ,fix
3639,compilercli iscasesensitive return correct value previously this method wa returning the exact opposite value than the correct one also calling thisexists cause an infinite recursion so the actual filesystem fsexistssync method is used to ascertain the casesensitivity of the filesystem pr close ,fix
3640,compilercli ensure getrootdirs handle casesensitivity previously the getrootdirs function wa not converting the root directory path to their canonical form which can cause problem on caseinsensitive filesystems pr close ,fix
3641,compilercli ensure logicalfilesystem handle casesensitivity the logicalfilesystem wa not taking into account the casesensitivity of the filesystem when caching logical file path pr close ,fix
3642,compilercli fix casesensitivity issue in ngtsccompilerhost the getcanonicalfilename method wa not actually calling the usecasesensitivefilenames method so it always returned a casesensitive canonical filename pr close ,fix
3643,docsinfra do not require abstract directive to declare a ngmodule abstract directive can not be part of a ngmodule but the aio dgeni setup currently enforces this this commit update the logic so that abstract directive are skipped pr close ,build
3644,compilercli report error if undecorated class with angular feature is discovered previously in v we deprecated the pattern of undecorated base class that rely on angular feature we ran a migration for this in version and will run the same on in version again to ensure that project do not regress and start using the unsupported pattern again we report an error in ngtsc if such undecorated class are discovered we keep the compatibility code enabled in ngcc so that library can be still be consumed even if they have not been migrated yet resolve fw pr close ,feat
3645,core undecoratedclasseswithdecoratedfields migration should handle class with lifecycle hook a of v undecorated class using angular feature are no longer supported in v we plan on removing the undecorated class compatibility code in ngtsc this mean that old pattern for undecorated class will result in compilation error we had a migration for this in v already but it look like the migration doe not handle case where class us lifecycle hook this is handled in the ngtsc compatibility code and we should handle it similarly in migration too this ha not been outlined in the migration plan initially but an appendix ha been added for v to the plan document note the migration is unable to determine whether a given undecorated class that only defines ngondestroy is a directive or an actual service this mean that in some case the migration can not do more than adding a todo and printing an failure certainly there are more way to determine the type of such class but it would involve metadata and ngmodule analysis this is out of scope for this migration pr close ,feat
3646,core make generic mandatory for modulewithproviders in v we deprecated the use of modulewithproviders without a generic in v we will be requiring the generic when using modulewithproviders you can read more about the reasoning behind this change in the migration guide pr close ,refactor
3647,docsinfra temporarily disable the upgradephonecathybrid doc example test this is due to issue described in this commit work around the problem rather than trying to solve it in order to unblock the big apf v change pr close ,test
3648,ngcc support for new apf where module point to esm output a of version library following the apf will no longer contain esm output hence test in ngcc need to be updated a they currently rely on the release output of angularcore additionally wed need to support in ngcc that the module property of entrypoints no longer necessarily refers to esm output but instead can also target esm we currently achieve this by checking the path the module property point to we can do this because a per apf the folder name is known for the esm output longterm for more coverage we want to sniff the format by looking for known e construct in the file module refers to pr close ,feat
3649,bazel ngpackage rule should update packagejson of tslibrary target in the past we added support for tslibrary to ngpackage for those target we never can determine the index file unlike ngmodule there is no provider data for flat module bundle so the ngpackage rule assumes that the index file is simply called index this work a expected but we also added logic in the past that doesnt allow ngpackage to add format property eg main module to a packagejson if a package json is handwritten for such a tslibrary target this ha been done that way because we assumed that such packagejson file might want to set format property explicitly to different path due to a faulty index guess we want to change this behavior a most of the time a packagejson file already exists with just the module name in those case the packager should still set the format property we should only warn and skip automatic insertion of the format property if such a packagejson explicitly set format property pr close ,fix
3650,bazel simplify ngpackage by dropping esm and fesm esm and fesm are no longer needed and have been deprecated in the past this commit modifies ngpackage to no longer distribute these two format in npm package built by ngpackage eg angularcore this commit intentionally doesnt fully clean up the ngpackage rule to remove all trace of esm and fems build artifact a that is a bigger cleanup and currently we are narrowing down the scope of this change to the mvp needed for v which in this case is do not put esm and fesm into the npm package more cleanup to follow breaking change esm and fesm format is no longer distributed in angulars npm package eg angularcore if you are not using angular cli to build your application or library and you need to be able to build e artifact then you will need to downlevel the distributed angular code to e on your own angular cli will automatically downlevel the code to e if differential loading is enabled in the angular project so no action is required from angular cli user pr close ,feat
3651,ngcc support modulewithproviders function that delegate in the modulewithproviders type parameter becomes required this expose a bug in ngcc where it can only handle function that have a specific form function forroot return in other word it only accepts function that return an object literal in some library the function instead return a call to another function for example in angularinmemorywebapi inmemorywebapimoduleforfeature function dbcreator option return inmemorywebapimoduleforrootdbcreator option this commit change the parsing of such function to use the partialevaluator which can evaluate these more complex function body pr close ,fix
3652,ngcc move getmodulewithprovidersfunctions into the analyzer previously this method wa implemented on the ngccreflectionhost but really it is asking too much of the host since it actually need to do some static evaluation of the code to be able to support a wider range of function shape also there wa only one implementation of the method in the esmreflectionhost since it ha no format specific code in in this commit move the whole function and supporting helper into the modulewithprovidersanalyzer which is the only place it wa being used this class will be able to do further static evaluation of the function body in order to support more function shape than the host can do on it own the commit remove a whole set of reflection host test but these are already covered by the test of the analyzer pr close ,refactor
3653,devtools update angularframework ,build
3654,core deprecate wrappedvalue the purpose of the wrappedvalue is to allow same object instance to be treated a different for the purpose of change detection it is currently used with async pipe and only with observables the use case which it cover is if the observable produce the same instance of the value but it is desirable to still try to mark it a changed for the purpose of change detection we believe tha the above use case is too rare to warrant special handling in the framework having special handling cause application slowdown for the user and mental load for the developer no replacement is planned for this deprecation pr close ,refactor
3655,devtools update typescript ,build
3656,compilercli perform template typechecking incrementally this optimization build on a lot of prior work to finally make type checking of template incremental incrementality requires two main component the ability to reuse work from a prior compilation the ability to know when change in the current program invalidate that prior work prior to this commit on every typechecking pas the compiler would generate new ngtypecheck file for each original input file in the program build main program empty ngtypecheck file generated for each original input file build typecheck program ngtypecheck content overridden for those which have corresponding component that need typechecked build main program throw away old ngtypecheck file and generate new empty one build typecheck program same a step with this commit the incrementaldriver now track template typechecking metadata for each input file the metadata contains information about source mapping for generated typechecking code a well a some diagnostics which were discovered at typecheck analysis time the actual typechecking code is stored in the typescript ast for typechecking file which is now reused between program a follows build main program empty ngtypecheck file generated for each original input file build typecheck program ngtypecheck content overridden for those which have corresponding component that need typechecked and the metadata registered in the incrementaldriver build main program the typecheckshimgenerator now reuses all ngtypecheck tssourcefile shim from build s typecheck program in the construction of build s main program some of the content of these file might be stale if a component template changed for example but wholesale reuse here prevents unnecessary change in the content of the program at this point and make typescript job a lot easier build typecheck program for those input file which have not logically changed meaning component within are semantically the same a they were before the compiler will reuse the typecheck file metadata from build and not generate a new ngtypecheck shim for component which have logically changed or where the previous ngtypecheck content can not otherwise be reused code generation happens a before pr close ,perf
3657,compilercli split ivy template typechecking into multiple file a a performance optimization this commit split the single ngtypecheckts file which wa previously added to the user program a a container for all template typechecking code into multiple ngtypecheck shim file one for each original file in the user program in larger application the generation parsing and checking of this single typechecking file wa a huge performance bottleneck with the file often exceeding mb in text content particularly in incremental build regenerating this single file for the entire application proved especially expensive this commit introduces a new strategy for template typechecking code which make use of a new interface the typecheckingprogramstrategy this interface abstract the process of creating a new tsprogram to typecheck a particular compilation and allows the mechanism there to be kept separate from the more complex logic around dealing with multiple ngtypecheck file a new templatetypechecker host that logic and interacts with the typecheckingprogramstrategy to actually generate and return diagnostics the typecheckcontext class previously the workhorse of template type checking is now solely focused on collecting and generating typechecking file content a side effect of implementing the new typecheckingprogramstrategy in this way is that the api is designed to be suitable for use by the angular language service a well the l also need to typecheck component but ha it own method for constructing a tsprogram with typechecking code note that this commit doe not make the actual checking of template at all incremental just yet that will happen in a future commit pr close ,perf
3658,compiler switch to referencedfiles for shim generation shim generation wa built on a lie shim are file added to the program which arent original file authored by the user but file authored effectively by the compiler these fall into two category file which will be generated like the ngfactory shim we generate for view engine compatibility a well a file used internally in compilation like the ngtypecheckts file previously shim generation wa driven by the rootfiles passed to the compiler a input these are effectively the file listed in the tsconfigjson each shim generator eg the factorygenerator would examine the rootfiles and produce a list of shim file name which it would be responsible for generating these name would then be added to the rootfiles when the program wa created the fatal flaw here is that rootfiles doe not always account for all of the file in the program in fact it quite rare that it doe user dont typically specify every file directly in file instead they rely on typescript during program creation starting with a few root file and transitively discovering all of the file in the program this happens however during tscreateprogram which is too late to add new file to the rootfiles list a a result shim generation wa only including shim for file actually listed in the tsconfigjson file and not for the transitive set of file in the user program a it should this commit completely rewrite shim generation to use a different technique for adding file to the program inspired by view engine shim generator in this new technique a the program is being created and tssourcefiles are being requested from the ngcompilerhost shim for those file are generated and a reference to them is patched onto the original file tssourcefilereferencedfiles this cause t to think that the original file reference the shim and cause the shim to be included in the program the original referencedfiles array is saved and restored after program creation hiding this little hack from the rest of the system the new shim generation engine differentiates between two kind of shim toplevel shim such a the flat module entrypoint file and ngtypecheckts and perfile shim such a ngfactory or ngsummary file the former are included via rootfiles a before the latter are included via the referencedfiles of their corresponding original file a a result of this change shim are now correctly generated for all file in the program not just the one named in tsconfigjson a few mitigating factor prevented this bug from being realized until now in g file doe include the transitive closure of file in the program in cli apps shim are not really used this change also make use of a novel technique for associating information with source file the use of an ngextension symbol to patch the information directly onto the ast object this is used in several circumstance for shim metadata about a tssourcefiles status a a shim and it origin are held in the extension data for original file the original referencedfiles are stashed in the extension data for later restoration the main benefit of this technique is a lot le bookkeeping around map of tssourcefiles to various kind of data which need to be tracked invalidated a part of incremental build this technique is based on design used internally in the typescript compiler and is serving a a prototype of this design in ngtsc if it work well it could have benefit across the rest of the compiler pr close ,fix
3659,compilercli fix bug tracking indirect ngmodule dependency the compiler need to track the dependency of a component including any ngmodules which happen to be present in a component scope if an upstream ngmodule change any downstream component need to have their template recompiled and retypechecked previously the compiler handled this well for the a b c case where module a import module b which reexports module c however it fell apart in the a b c d case because previously tracking focused on change to componentsdirectives in the scope and not ngmodules specifically this commit introduces logic to track which ngmodules contributed to a given scope and treat them a dependency of any component within this logic also contains a bug which is intentional for now it purposefully doe not track transitive dependency of the ngmodules which contribute to a scope if it did using the current dependency system this would treat all component and directive even those not exported into the scope a dependency causing a major performance bottleneck only those dependency which contributed to the module export scope should be considered but the current system is incapable of making this distinction this will be fixed at a later date pr close ,fix
3660,languageservice ivy add mock service to overwrite file add a mechanism to replace file content for a specific file this allows u to write custom test scenario in code without modifying the test project since we are no longer mocking the language service host the file overwrite need to happen via the project service project service manages a set of script info and overwriting the file is a matter of updating the relevant script info note that the actual project service is wrapped inside a mock service test should not have direct access to the project service all manipulation should take place via the mock service the mockservice provides a reset method to undo temporary overwrites after each test pr close ,test
3661,docsinfra take advantage of latest jasmine feature in preview server test this commit update the preview server test to take advantage of feature supported in the latest version of jasmine that were not supported when the rest were first written change include use asyncawait in test use the new tobeinstanceof and tohavebeencalledbefore matcher use the new toberesolved and toberejected async matcher and their variant use the new withargs method of spy to simplify trained response use the new resolvetorejectwith method of spystrategy and their variant to simplify promisebased spy implement custom async matcher via addasyncmatchers to simplify certain test addasyncmatchers asyncawait rejectwith resolveto tobeinstanceof toberejected toberesolved tohavebeencalledbefore withargs pr close ,refactor
3662,docsinfra enable accidentally disabled preview server test previously some preview server test were only running for public build in the past these test were run for both public and nonpublic build the nonpublic build test were disabled in probably during debugging some failure this commit fix it by ensuring the test are run for both public and nonpublic build pr close ,test
3663,docsinfra remove incorrect preview server test the test wa introduced in but the behavior the test wa verifying doe not match the actual behavior of buildcleanergetopenprnumbers the reason that the test did not fail is that the verification happened asynchronously but the test completed synchronously by accident pr close ,test
3664,docsinfra exit with an error when cleaning up the preview server fails previously when the preview server buildcleanup script failed the error wa logged but not reflected to the command exit code this seems to have been accidentally broken in this commit fix it by ensuring the error is rethrown from the buildcleanercleanup method to allow the process to exit with an error exit code pr close ,fix
3665,docsinfra remove linting from the preview server dev npm script previously the dev npm script in aioaiobuildssetupscriptsjs the pr preview server implementation would run both linting and unit test this wa slow and delayed the feedback loop on each change since the dev script should be run during development and give feedback a fast a possible this commit remove the linting from the dev script and only keep the unit test linting is still run in the test npm script which is more comprehensive also in most case the developer ide will show linting error in real time in the editor pr close ,build
3666,docsinfra update argument order for updatepreviewserversh script update the order in which the updatepreviewserversh script expects it argument and the associated doc to be consistent with the order of argument in other commandsdocs such a vmsetupstartdockercontainermd pr close ,refactor
3667,docsinfra update preview server setup instruction i recently went through the process of setting up a preview server vm again and updated the instruction and reference based on the latest doc for debian docker google compute engine etc pr close ,docs
3668,docsinfra unpin certain dependency of the preview server previously in order to remain a deterministic a possible the dockerfile for the preview server docker image had all dependency pinned to specific version it turn out that some package such a nginx nodejs and openssl potentially others too make older version unavailable on the repository once a newer version is available see for example this commit therefore remove the exact version for these package the latest version will be installed everytime the docker image is built subject to docker caching pr close ,build
3669,docsinfra check tl certificate a part of preview server health check in order to ease local development selfsigned ssltls certificate are created when building the preview server docker image these certificate are valid for day thus it is possible for an old certificate to be reused past it expiration date due to docker caching intermediate layer previously this would lead to hardtodebug failure in the aiohealthcheck and aioverifysetup check even after finding out that the failure were caused by an expired certificate it wa not obvious why that would be the case this commit add an additional check to the aiohealthcheck command that check the certificate expiration date this help surface such error it also print a more helpful message prompting the user to build the docker image with the nocache option to fix the problem with selfsigned certificate pr close ,test
3670,docsinfra upgrade preview server docker image to debian buster previously the preview server docker image wa based on debian stretch this commit upgrade the preview server docker image to debian buster and also upgrade all dependency to latest version including upgrading nodejs from v to v the gce vm running the preview server docker container wa also upgraded from debian to on other change pinned the installed version of curl to make the aiohealthcheck and aioverifysetup check which use curl more deterministic dropped the backports debian repository since they are no longer needed the backports repository were introduced in feeddbdebbe to install nginx from but became obsolete in fabfbbdccfafdbaa which switched to installing nginx from the regular repository again added vim to the list of installed dependency for convenience during debugging pr close ,build
3671,docsinfra upgrade all j dependency to latest version this commit upgrade all dependency in scriptsjs to latest version and also includes all necessary code change to ensure the test are passing with the new dependency version pr close ,build
3672,devtools update angularframework ,build
3673,devtools update dependency waiton to v ,build
3674,devtools update dependency typeschrome to ,build
3675,devtools update angularcli ,build
3676,core add benchmark for transplanted view when insertion is dirty the current benchmark for transplanted view only exercise the path when the declaration location is dirty and the insertion is not this test add a benchmark for when both insertion and declaration are dirty pr close ,test
3677,core properly get root node from embedded view with ngcontent this commit fix separate issue related to root node retrieval from embedded view with ngcontent we did not account for the case where there were no projectable node for a given ngcontent we did not account for the case where projectable node for a given ngcontent were represented a an array of native node happens in the case of dynamically created component with projectable node fix pr close ,fix
3678,docsinfra upgrade cli command doc source to bdeebd updating angularmaster from clibuildsmaster relevant change in commit range modified helpdeployjson helpgeneratejson helpnewjson pr close ,build
3679,languageservice ivy parse angular compiler option parse angular compiler option in angular language service in view engine only typescript compiler option are read angular compiler option are not with ivy there could be different mode of compilation most notably how strict the template should be checked this commit make the behavior of language service consistent with the ivy compiler pr close ,feat
3680,core handle pluralize function that expect a number previously we were passing a string form of the value to pluralize to the getlocalepluralcase function that is extracted from the locale data but some locale have function that rely upon this value being a number not a string now we convert the value to a number before passing it to the locale data function fix pr close ,fix
3681,localize use the new workspace api for ngadd schematic update the angularlocalize ngadd schematic to use the new workspace api and remove dependency on private apis pr close ,refactor
3682,localize ensure getlocation work the getlocation method wa not working a there were typo in the property it wa reading this wa not picked up because there were neither typing for these property nor unit test to check it worked pr close ,fix
3683,docsinfra upgrade doc example to latest angular cli and framework this commit also update the project to more closely match what a newly generated app would look like with the exception of tslintjson file which would create too many linting failure these will be updated in a followup pr pr close ,build
3684,docsinfra remove redundant standalone ngcc run previously in the testaio ci job we ran ngcc before building the app with yarn build this wa supposed to have the benefit of taking advantage of the parallel capability of standalone ngcc v implicitly running it via ng build it turn out that the work done by the standalone ngcc wa thrown away before the ng build resulting in ng build having to run ngcc all over again this happened because the yarn build script run after the standalone ngcc step also run yarn install which essentially clean up nodemodules thus discarding all the work already done by ngcc here is an example ci job where this can be seen in action one can see the compiling somepackage e a esm log in the yarn cwd aio ngcc property e step a the standalone ngcc process the various entrypoints and then see the same log in the yarn cwd aio build progressfalse step a ngcc ha to process the entrypoints all over again this commit remove the redundant standalone ngcc run and let the cli handle ngcc via ng build it is possible to instrument the build process in a way that we can run the standalone ngcc after yarn install and thus take advantage of the performance gain in parallel mode but the latest version of the cli can already run ngcc in parallel mode a a prebuild step so this is unnecessary pr close ,ci
3685,docsinfra update typescript to update typescript for angulario to the latest stable version jira issue fw pr close ,build
3686,docsinfra update angularmaterial to this commit update the angular material package angularcdk and angularmaterial to latest version pr close ,build
3687,docsinfra update angularcli to next update the angular cli and angular framework package to latest next version also update the app to look more closely to how a newly generated app with the latest cli would look like pr close ,build
3688,docsinfra update angulario payload size for reference this commit update all payload size for angulario to make it easier to compare payload size change a a result of upgrading angular package and other dependency in subsequent commits pr close ,build
3689,form handle numeric value properly in the validator previously the behavior of the minlength and maxlength validators caused confusion a they appeared to work with numeric value but did not in fact produce consistent result this commit fix the issue by skipping validation altogether when a numeric value is used breaking change the minlength and maxlength validators now verify that a value ha numeric length property and invoke validation only if thats the case previously falsey value without the length property such a or false value were triggering validation error if your code relies on the old behavior you can include other validators such a min or requiredtrue to the list of validators for a particular field close pr close ,fix
3690,devtools initialization and popup logic rename the popups and introduce a new one supported version but no ivy change the initialization logic to reflect the latest profiling update ,fix
3691,devtools temporarily disable timingg api ,refactor
3692,devtools consider change detection completed after a microtask ,fix
3693,devtools use single change detection tracker ,refactor
3694,devtools observer logic so that we can have a single instance we currently have a single instance of the directive forest observer it shared between the identity tracker and the capturer ,refactor
3695,devtools use different hook mechanism ,refactor
3696,devtools introduce timing api support ,feat
3697,devinfra update format command described in developermd this commit update developermd to describe the latest formatting command ngdev and removed deprecated gulp command fix pr close ,docs
3698,languageservice add method to override inline template this commit add a method overrideinlinetemplate to the mocktypescripthost this allows u to override an inline template in a component without changing the typescript part this method work in a similar way a mocktypescripthostoverride which is used for overriding external template pr close ,test
3699,ngcc speed up the getbasepaths computation this function need to deduplicate the path that are found from the path mapping previously this deduplication wa not linear and also called the expensive relative function many time this commit suggested by joostk reduces the complexity of the deduplication by using a tree structure built from the segment of each path pr close ,perf
3700,ngcc only compute basepaths in targetedentrypointfinder when needed previously the basepaths were computed when the finder wa instantiated this wa a waste of effort in the case that the targeted entrypoint is already processed this change make the computation of basepaths lazy so that the work is only done if they are actually needed fix pr close ,perf
3701,ngcc support t wrapped e class in t the compiler will start to wrap e class in an iife to help with treeshaking when the class ha associated statement eg t let platformlocation class class platformlocation return platformlocation this commit update esmreflectionhost to support this format pr close ,fix
3702,languageservice add new mock host for testing ivy this commit add a new mock host for testing the ivy language service unlike the existing mockhost which mock the languageservicehost the ivy mock host mock just the filesystem interface aka tsserverhost this is because ivy language service requires an actual project to perform operation like adding synthetic typecheck file to the project and by extension to the tsprogram these requirement make the existing mock host unsuitable to be reused this new testing structure also improves test performance because the old mock host copy it actually creates symlinks but still thats relatively expensive due to the sheer number of file involved all angular package along with the typescript package to a temporary nodemodules directory this is done every time setup is called instead this new mock host just load them from a predetermined path in bazel runfiles pr close ,test
3703,devinfra run buildifier formatting and linting via ngdev in an effort to centralize formatting and linting enforcement into one location buildifier is being added a a formatter for ngdevs format command allowing for format enforcement for all bzl bazel workspace and build file pr close ,feat
3704,core log error instead of warning for unknown property and element change the ivy unknown elementproperty message from being logged with consolewarn to consoleerror this should make them a bit more visible without breaking existing apps furthermore a lot of folk filter out warning message in the dev tool console whereas error are usually still shown breaking change warning about unknown element are now logged a error this wont break your app but it may trip up tool that expect nothing to be logged via consoleerror fix pr close ,fix
3705,router cancel navigation when at least one resolver completes with no next emission this change aligns behavior for resolvers which return empty currently empty resolvers have inconsistent behavior one resolver that return empty wont navigate and just end on resolvestart router event two resolvers where both return empty throw error uncaught in promise emptyerror no element in sequence two resolvers where one return a value and the other one return empty navigates successfully with this change any empty resolver will cancel navigation breaking change any resolver which return empty will cancel navigation if you want to allow the navigation to continue you will need to update the resolvers to emit some value ie defaultifempty of etc pr close pr close ,fix
3706,devtools make devtools fail elegantly for view engine apps ,feat
3707,devtools update dependency tsnode to ,build
3708,devtools update dependency karmacoverageistanbulreporter to v ,build
3709,devtools update angularcli ,build
3710,devtools ensure compatibility with angular v ,fix
3711,languageservice make test project a filegroup this commit make the test project a filegroup so that it could be shared with the ivy test also removed projectfoots since it is no longer used pr close ,build
3712,devinfra create environment stamping script in ngdev create a common environment stamping script in the ngdev tooling a to be used in common release task this is the first step in consolidating piece of the release scripting process into a single location to develop a release tool pr close ,feat
3713,ngcc change async locker timeout to sec previously the asynclocker wa configured to only wait xms before timing out this is sec which is often le than a normal run of ngcc so the chance of a timeout flake wa quite high the default is now xms which is sec if this is too high for some project then it can be changed via the ngccconfigjs project file pr close ,refactor
3714,ngcc allow async locking timeouts to be configured the commit add support to the ngccconfigjs file for setting the retryattempts and retrydelay option for the asynclocker an integration test add a new check for a timeout and actually us the ngccconfigjs to reduce the timeout time to prevent the test from taking too long to complete pr close ,feat
3715,ngcc rename configurationgetconfig strictly this method only return config for package so this commit renames it to getpackageconfig which free u up to add other getxxxxconfig method later pr close ,refactor
3716,ngcc remove duplicate test this test is basically duplicated and slightly enhanced in the following test so it is superfluous i suspect it wa the result of a broken rebase pr close ,test
3717,ngcc provide a unique exit code for timeouts when ngcc fails due to a timeout waiting for another process to complete it wa not failing with a unique exit code so that it wa not possible to know if the process can be restarted compared to ngcc failing for some more fatal reason now if ngcc exit because of a timeout the exit code will be pr close ,fix
3718,ngcc improve locker pausing message when ngcc is having to pause and wait for another process it provides a message to the user this commit add the extra information about how to remove the lockfile if desired since this message is not shown if you ctrlc out of the process before the timeout period end pr close ,refactor
3719,di fix typo in advanced di doc pr close ,docs
3720,localize support merging multiple translation file previously only one translation file per locale could be loaded now the user can specify multiple file per locale and the translation from each of these file will be merged together by message id the merging is on a firstwins approach so if to you have three file to be merged axlf bxmb cjson then any message from axlf will be used rather than a message from bxmb or cjson and so on in practice this mean that you should put the file in order of most important first with fallback translation later pr close ,feat
3721,localize hide merging diagnostics message behind a method this commit introduces diagnosticsmergeother which will take the message from other and append them to the message of this the translation loader is updated to use this new method pr close ,refactor
3722,localize simplify adding condition diagnostics previously the missingtranslation option had to be checked before calling warn or error on the diagnostics object now this boilerplate is hidden inside the diagnosticsadd method which will open it up to being used for other conditional diagnostics pr close ,refactor
3723,serviceworker use ignorevary true when retrieving response from cache the angular serviceworker always us a copy of the request without header for caching asset in order to avoid issue with opaque response therefore it wa previously not possible to retrieve resource from the cache if the response contained vary header in addition to that vary header do not work in all browser or work differently and may not work a intended with serviceworker cache see this article and the linked resource for more info this commit avoids the aforementioned issue by making sure the angular serviceworker always set the ignorevary option passed to cachematch to true this allows the serviceworker to correctly retrieve cached response with vary header which wa previously not possible fix breaking change previously vary header would be taken into account when retrieving resource from the cache completely preventing the retrieval of cached asset due to serviceworker implementation detail and leading to unpredictable behavior due to inconsistentbuggy implementation in different browser now vary header are ignored when retrieving resource from the serviceworker cache which can result in resource being retrieved even when their header are different if your application need to differentiate it response based on request header please make sure the angular serviceworker is configured to avoid caching the affected resource pr close ,feat
3724,serviceworker include cachequeryoptions option in ngswconfig previously it wa not possible to provide cachequeryoptions mdn for querying the cache this commit introduces a new parameter called cachequeryoptions for datagroup and assetgroup currently only ignoresearch is supported a ignorevary and ignoremethod would require using the complete request object for matching which is not possible with the current implementation close pr close ,feat
3725,devtools update angularcli ,build
3726,common remove wrappedvalue from asyncpipe asyncpipe only us wrappedvalue when the latest value from the promise or observable is different from the previous one this is already enough to trigger change detection so the wrappedvalue is not necessary fix breaking change this change could result in expressionchangedafterithasbeenchecked error that were not detected before the error could previously have gone undetected because two wrappedvalues are considered equal in all case for the purpose of the check even if their respective unwrapped value are not additionally valobservable asyncsomeproperty will no longer trigger change detection if the value of someproperty is identical to the value in the previous emit if you need to force change detection either update the binding to use an object whose reference change or subscribe to the observable and call markforcheck a needed pr close ,refactor
3727,devtools update dependency uuid to v ,build
3728,devtools update angularcli ,build
3729,core refresh transplanted view at insertion point only only refresh transplanted view at the insertion location in ivy previously ivy would check transplanted view at both the insertion and declaration point this is achieved by adding a marker to the insertion tree when we encounter a transplanted view that need to be refreshed at it declaration we use this marker a an extra indication that we still need to descend and refresh those transplanted view at their insertion location even if the insertion view andor it parent are not dirty this change fix several issue transplanted view refreshed twice if both insertion and declaration are dirty this could be an error if the insertion component change result in data not being available to the transplanted view because it is slated to be removed checkalways transplanted view not refreshed if shielded by nondirty onpush fix transplanted view still refreshed when insertion tree is detached fix pr close ,fix
3730,ngcc move pathmappings to separate file to avoid circular dependency now that ngccsrcngccoptions import filewriter type there is a circular dependency detected by the tscirculardepscheck lint check ngccsrcngccoptionsts → ngccsrcwritingfilewriterts → ngccsrcpackagesentrypointbundlets → ngccsrcngccoptionsts this commit move the pathmappings type and related helper to a separate file to avoid the circular dependency note the circular dependency wa only with taking type into account there wa no circular dependency for the actual j code pr close ,refactor
3731,ngcc handle enomem error in worker process when running in parallel mode worker process forward error thrown during task processing to the master process which in turn exit with an error however there are case where the error is not directly related to processing the entrypoint one such case is when there is not enough memory for example due to all the other task being processed simultaneously previously an enomem error thrown on a worker process would propagate to the master process eventually causing ngcc to exit with an error example failure this commit improves handling of these lowmemory situation by detecting enomem error and killing the worker process thus allowing the master process to decide how to handle that the master process will put the task back into the task queue and continue processing task with the rest of the worker process and thus with lower memory pressure pr close ,fix
3732,ngcc give up respawing crashed worker process after attempt previously when the last worker process crashed the master process would try to respawn it indefinitely this could lead to an infinite loop if for some reason the worker process kept crashing this commit avoids this by limiting the number of respawn attempt to after which ngcc will exit with an error pr close ,fix
3733,ngcc support recovering when a worker process crash previously when running in parallel mode and a worker process crashed while processing a task it wa not possible for ngcc to continue without risking ending up with a corrupted entrypoint and therefore it exited with an error this for example could happen when a worker process received a sigkill signal which wa frequently observed in ci environment this wa probably the result of docker killing process due to increased memory pressure one factor that amplifies the problem under docker which is often used in ci is that it is not possible to distinguish between the available cpu core on the host machine and the one made available to docker container thus resulting in ngcc spawning too many worker process this commit address these issue in the following way we take advantage of the fact that file are written to disk only after an entrypoint ha been fully analyzedcompiled the master process can now determine whether a worker process ha not yet started writing file to disk even if it wa in the middle of processing a task and just put the task back into the task queue if the worker process crash the master process keep track of the transformed file that a worker process will attempt to write to disk if the worker process crash while writing file the master process can revert any change and put the task back into the task queue without risking corruption when a worker process crash while processing a task which can be a result of increased memory pressure or too many worker process the master process will not try to respawn it this way the number or worker process is gradually adjusted to a level that can be accomodated by the system resource example of ngcc being able to recover after a worker process crashed while idling while compiling while writing file jira issue fw fix pr close ,fix
3734,ngcc support reverting a file written by filewriter this commit add a revertfile method to filewriter which can revert a transformed file and it backup if any written by the filewriter in a subsequent commit this will be used to allow ngcc to recover when a worker process crash in the middle of processing a task pr close ,feat
3735,ngcc keep track of transformed file per task with this commit the master process will keep track of the transformed file that each worker process is intending to write to disk in a subsequent commit this info will be used to allow ngcc to recover when a worker process crash in the middle of processing a task pr close ,refactor
3736,ngcc notify master process about transformed file before writing with this commit worker process will notify the master process about the transformed file they are about to write to disk before starting writing them in a subsequent commit this will be used to allow ngcc to recover when a worker process crash in the middle of processing a task pr close ,refactor
3737,ngcc support running callback before writing transformed file this commit enhances the compilefn which is used to process each entrypoint to support running a passedin callback and wait for it to complete before proceeding with writing the transformed file to disk this functionality is currently not used in a subsequent commit it will be used for passing info from worker process to the master process that will allow ngcc to recover when a worker process crash in the middle of processing a task pr close ,refactor
3738,ngcc rename taskqueuemarktaskcompleted to markascompleted rename the marktaskcompleted method to be consistent with the other similar method of taskqueue markasfailed and markasunprocessed pr close ,refactor
3739,ngcc support marking an inprogress task a unprocessed this commit add support for stopping processing an inprogress task and moving it back to the list of pending task in a subsequent commit this will be used to allow ngcc to recover when a worker process crash in the middle of processing a task pr close ,feat
3740,ngcc do not run in parallel mode if there are le than cpu core previously ngcc would run in parallel mode using the clusterexecutor when there were at least cpu core and all other requirement where met on system with just cpu core this meant there would only be one worker process since one cpu core is always reserved for the master process in these case the task would still be processed serially on the one worker process but we would also pay the overhead of communicating between the master and worker process this commit fix this by only running in parallel mode if there are more than cpu core ie at least worker process pr close ,fix
3741,ngcc move compiling log message before starting work on a task previously the compiling entrypoint log message wa printed before starting to analyze and transform file but after creating the entrypointbundle which includes creating the t program since creating the entrypointbundle involves some work it is more accurate to move the log message before creating the bundle pr close ,refactor
3742,languageservice do not invalidate angularcore fix typo and add test case for pr close pr close ,test
3743,core attempt to recover from user error during creation if there an error during the first creation pas of a tview the data structure may be corrupted which will cause framework assertion failure downstream which can mask the user error these change add a new flag to the tview that indicates whether the first creation pas wa successful and if it wasnt we try recreate the tview fix pr close ,fix
3744,ngcc recognize enum declaration emitted in javascript an enum declaration in typescript code will be emitted into javascript a a regular variable declaration with the enum member being declared inside an iife for ngcc to support interpreting such variable declaration a enum declaration with it member ngcc need to recognize the enum declaration emit structure and extract all member from the statement in the iife this commit extends the concretedeclaration structure in the reflectionhost abstraction to be able to capture the enum member on a variable declaration a a substitute for the original tsenumdeclaration a it existed in typescript code the static interpreter ha been extended to handle the extracted enum member a it would have done for tsenumdeclaration fix resolve fw pr close ,fix
3745,devtools update angularframework ,build
3746,devtools change console log messaging to be more informative without exposing message layer abstraction ,refactor
3747,compiler normalize line ending in icu expansion the html parser already normalizes line ending converting rn to n for most text in template but it wa missing the expression of icu expansion in viewengine backticked literal string used to define inline template were already normalized by the typescript parser in ivy we are parsing the raw text of the source file directly so the line ending need to be manually normalized this change ensures that inline template have the line ending of icu expression normalized correctly which match the viewengine in viewengine external template defined in html file the behavior wa different since typescript wa not normalizing the line ending specifically icu expansion expression are not being normalized this is a problem because it mean that in message id can be different on different machine that are setup with different line ending handling or if the developer move a template from inline to external or vice versa the goal is always to normalize line ending whether inline or external but this would be a breaking change since it would change in message id that have been previously computed therefore this commit aligns the ivy template parsing to have the same buggy behavior for external template there is now a compiler option innormalizelineendingsinicus which if set to true will ensure the correct nonbuggy behavior for the time being this option default to false to ensure backward compatibility while allowing optin to the desired behavior this option default will be flipped in a future breaking change release further when this option is set to false any icu expression token which have not been normalized are added to the parseresult from the htmlparserparse method in the future this collection of token could be used to diagnose and encourage developer to migrate their in message id see fw close pr close ,fix
3748,compiler check extracted translation for line ending when there are crlf line ending some translation get different message id this commit add test to track this in viewengine pr close ,test
3749,compiler fix unwanted operator the incomponent wa using for some of it property because it had not initialized them this is now resolved by explictly marking them a optional pr close ,test
3750,compiler simplify tokenizer and parser result move the creation of the result object into the wrapper function this make it easier to reason about what the parser and lexer class are responsible for you create a new object for each tokenization or parsing activity and they hold the state of the activity pr close ,refactor
3751,compiler tighten type of templateparserconsole this property can actually be null when called from the languageservice this change allows u to remove the use of to subvert the type system pr close ,refactor
3752,docsinfra upgrade cli command doc source to ccffd updating angularmaster from clibuildsmaster relevant change in commit range modified helpbuildjson helpservejson helptestjson pr close ,build
3753,devtools update angularcli ,build
3754,core handle synthetic prop in directive host binding correctly prior to this change animationsrelated runtime logic assumed that the hostbinding and hostlistener with synthetic animation prop are used for component only however having hostbinding and hostlistener with synthetic prop on directive is also supported by view engine this commit update the logic to select correct renderer to execute instruction current renderer for directive and subcomponent renderer for component this pr resolve pr close ,fix
3755,router allow canload guard to return urltree a canload guard returning urltree cancel current navigation and redirects this match the behavior available to canactivate guard added in note that this doe not affect preloading a canload guard block any preloading that is any route with a canload guard is not preloaded and the guard are not executed a part of preloading fix pr close ,feat
3756,docsinfra upgrade cli command doc source to c updating angularmaster from clibuildsmaster relevant change in commit range modified helpanalyticsjson pr close ,build
3757,devtools update dependency typeschrome to ,build
3758,devtools update angularcli ,build
3759,devtools update angularframework ,build
3760,devinfra create format tool in angulardevinfraprivate previously we used gulp to run our formatter currently clangformat across our repository this new tool within ngdev allows u to migrate away from our gulp based solution a our gulp solution had issue with memory pressure and would cause oom error with too large of change set pr close ,feat
3761,devtools update angularcli ,build
3762,devtools remove runoutsideangular wrapper on mouse move event ,fix
3763,languageservice disable update the angularcore module after the user edits the file coredts the symbol from the core module will be invalided which only is created when init the language service then the languageservice will crash pr close ,fix
3764,docsinfra upgrade cli command doc source to c updating angularmaster from clibuildsmaster relevant change in commit range modified helpbuildjson helpgeneratejson pr close ,build
3765,core use devinfras componentbenchmark to show poc this change demonstrates how to use the newly created rule in one of our performance test future commits and pr will migrate the remaining test to this new bazel rule pr close ,build
3766,devinfra update packagejson and npmpackage set up devinfras npmpackage to also contain benchmarking suite add benchmarking deps to devinfras packagejson add a bazel workspace to devinfras packagejson this is so that when a project want to use devinfras code and macro they can just import the macro from their nodemodules instead of loading it separately pr close ,build
3767,devinfra exposed new rule componentbenchmark via devinfra move toolsbrotlicli toolsbrowsers toolscomponents toolsngrollupbundle and moduleseeutil to devinfrabenchmarking fix import and reference to moved folder and file set up buildbazel file for moved folder so they can be packaged with devinfras npmpackage pr close ,feat
3768,devinfra properly handle multiline regex of commit body previously the commit message body regex only matched the first line of the body this change corrects the regex to match the entire line pr close ,fix
3769,devinfra pullapprove verify should handle file in condition currently when verifying our pullapprove configuration we dont respect modification to the set of file in a condition eg it not possible to do the following containsanyglobsfilesexclude this prevents u from having codeowner group which match a directory but want to filter out specific sub directory for example fwcore match all file in the core package we want to exclude the schematic from that glob usually we do this by another exclude condition this ha a significant downside though it mean that fwcore will not be requested if a pr change schematic code and actual fwcore code to support these condition the pullapprove verification tool is refactored so that it no longer us regular expression for parsing but rather evaluates the code through a dynamic function this is possible since the condition are written in simple python that can be run in nodejs too with small modificationstransformations pr close ,feat
3770,router fix router test failing on ie this wa originally fixed in but one of the windowscrolly assertion wa missed also updated test to use tobegreaterlessthan to improve failure message pr close ,test
3771,router add candeactivate test for forchild route this pr add test case to cover a failure that wa detected after merging that commit will be reverted and will need a new pr that doe not cause this test to fail pr close ,test
3772,localize remove unused code pr close ,refactor
3773,localize consolidate messagetranslation metadata pr close ,refactor
3774,localize tidy up translation parser test there wa a lot of duplication and multiline backtick string that made it hard to maintain pr close ,test
3775,localize tighten up recognition of simple json translation pr close ,refactor
3776,localize move sourcefileutilsts up this will allow the utility in this file to be shared outside translate code pr close ,refactor
3777,benchpress bump version of benchpress to bumping the version of benchpress a a new version need to be released a part of the effort to set up more benchmarking accross the angularangular and angularcomponents repos pr close ,release
3778,localize include legacy id when describing message previously we only displayed the new localize id which is not currently what most people have in their translation file until people migrate to the new message id system it is confusing not to display the legacy id pr close ,fix
3779,devtools update angularcli ,build
3780,devtools update angularframework ,build
3781,devtools update dependency ngxflamegraph to v ,build
3782,core properly identify module affected by override in testbed when module override via testbedoverridemodule are present it might affect all module that import even transitively an overridden one for all affected module we need to recalculate their scope for a given test run and restore original scope at the end prior to this change we were recalculating module scope only for component that are used in a test without taking into account module hierarchy this commit update ivy testbed logic to calculate all potentially affected module are reset cached scope information for them so that scope are recalculated a needed resolve pr close ,fix
3783,devtools write ee test for displaying component metadata ,test
3784,devtools rename selectedcomponentts to setconsolereferencets to better describe usage ,refactor
3785,core do not use unbound attribute a input to structural directive prior to this commit unbound attribute were treated a possible input to structural directive since structural directive can only accepts input defined using microsyntax expression eg div direxp such unbound attribute should not be considered a input this commit aligns ivy and view engine behavior and avoids using unbound attribute a input to structural directive pr close ,fix
3786,core missinginjectable migration should not migrate ngmodule class based on the migration guide provided class which dont have either injectable directive component or pipe need to be migrated this is not correct a provided class with an ngmodule also have a factory function that can be read by the r injector it unclear in which case the ngmodule decorator is used for provided class but this scenario ha been reported either we fix this in the migration or we make sure to report this a unsupported in the ivy compiler fix pr close ,fix
3787,devtools remove tree node highlight when a component is selected from the highlighter ,fix
3788,devtools update dependency tsnode to ,build
3789,devtools update angularframework ,build
3790,docsinfra refactors autolinkcode pr close ,refactor
3791,devinfra extract commit header before checking commit message validity this commit fix an issue where adding fixup commits wa triggering a lint error the problem wa caused by the fact that we used the entire message body while checking whether fixup commit ha a corresponding parent commit in a range this issue wa found after enforcing a check that exit the process if there is an invalid commit message found pr close ,fix
3792,devtools add ivy check ,feat
3793,devtools inform user that devtools ha limited functionality in production mode ,feat
3794,devtools update angularcli rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
3795,devinfra exit nonzero if commit message validation failed currently the commitmessage validation script doe not exit with a nonzero exit code if the commit message validation failed this mean that invalid commit message are currently not causing ci to be red see pr close ,fix
3796,devtools update angularframework rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
3797,devtools update dependency swimlanengxcharts to v rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
3798,compiler remove unused cachedfilesystem this wa only being used by ngcc but not any longer pr close ,refactor
3799,ngcc do not use cached filesystem the cached filesystem wa implemented to speed up ngcc processing but in reality most file are not accessed many time and there is no noticeable degradation in speed by removing it benchmarking ngcc l debug for aio on a local machine gave a range of second with the cache and second without the cache moreover when running in parallel mode ngcc ha a separate file cache for each process this result in excess memory usage notably the master process which only doe analysis of entrypoints hold on to up to mb for aio when using the cache compared to only around mb when not using the cache finally the filesystem cache being incorrectly primed with file content before being processed ha been the cause of a number of bug for example pr close ,fix
3800,devinfra document limitation in tscirculardeps tool add documentation on discovered limitation in the tscirculardeps tool so that we can reference it when needed pr close ,docs
3801,core pipe injecting viewproviders when used on a component host node the flag that determines whether something should be able to inject from viewproviders is optout and the pipe werent opted out resulting in them being able to see the viewproviders if theyre placed on a component host node fix pr close ,fix
3802,devtools fix lint error in devtools component rangleangulardevtools ,build
3803,docsinfra add to ignored ignoregenericwords previously when a document included the autolinker will try to generate a link eg from coreɵcomponentdef this commit add it to the ignored word to prevent that pr close ,build
3804,docsinfra ensures that only member doc are linked this commit ensures that member doc are only linked if the linking text contains pr close ,build
3805,docsinfra fix autolinkcode to ignore doc without a path previously the auto linker generated link without an href when the api wa private this commit fix this by making sure that the path of the document is not empty close pr close ,build
3806,devtools remove timeout and add new loadingerror state message rangleangulardevtools ,feat
3807,languageservice properly evaluate type in comparable expression this commit fix how the language service evaluates the compatibility of type to work with arbitrary union type a a result compatibility check are now more strict and can catch similarity or difference more clearly numberstring stringnull ok numberstring number ok numberstring null not comparable number string not comparable using ivy a a backend should provide these diagnosis for free but we can backfill them for now close pr close ,fix
3808,ngcc moved shared setup into a single function the maints and workerts had duplicate logic which ha now been moved to a single function called getsharedsetup pr close ,refactor
3809,ngcc simplify cluster packagejsonupdater pr close ,refactor
3810,ngcc create new entrypoint for cluster worker pr close ,refactor
3811,ngcc move pathmapping processing to utils pr close ,refactor
3812,ngcc move analyze and compile function into their own file pr close ,refactor
3813,ngcc move command line option parsing to it own file pr close ,refactor
3814,ngcc display unlocker process output in sync mode the change in eacfdcdbbccb to support sending unlocker process output to the main ngcc console output prevents message require that the main process relinquishes the eventloop to allow the stdouton handler to run this result in none of the message being written when ngcc is run in noasync mode and some message failing to be written if the main process is killed eg ctrlc it appears that the problem with window and detached process is known see but in the meantime this commit is a workaround where nonwindows inherit the main process stdout while on window it reverts to the async handler approach which is better than nothing pr close ,fix
3815,changelog add new line between change pr close ,docs
3816,devtools update angularcli rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
3817,devtools update angularframework ,build
3818,devtools update dependency tslint to ,build
3819,core prevent unknown property check for aotcompiled component prior to this commit the unknown property check wa unnecessarily invoked for aotcompiled component for these component the check happens at compile time this commit update the code to avoid unknown property verification for aotcompiled component by checking whether schema information is present a a way to detect whether this is jit or aot compiled component resolve pr close ,fix
3820,compiler avoid generating in attribute in plain form prior to this change there wa a problem while matching template attribute which mistakenly took in attribute that might be present in attrs array after template one into account this commit update the logic to avoid template attribute matching logic from entering the in section and a a result this also allows generating proper in attribute section instead of keeping these attribute in plain form with their value in attribute array pr close ,fix
3821,docsinfra add test for universal doc example previously there were no test for the universal doc example this meant that the project wa not tested at all not even ensuring that it can be built successfully this commit add ee test for the universal example ported from tohpt and cleaned up and also verifies that the project can be built successfully including the server pr close ,test
3822,docsinfra update typesexpressservestaticcore to avoid error in universal example previously building the universal example failed with nodemodulestypesexpressindexdts error t namespace typesexpressservestaticcoreindex ha no exported member params nodemodulestypesexpressindexdts error t namespace typesexpressservestaticcoreindex ha no exported member paramsdictionary this commit fix the error by upgrading typesexpressservestaticcore to a newer version see definitelytypeddefinitelytyped for more detail pr close ,build
3823,docsinfra update universal example to match latest cli update the universal example and related file to match what would be generated by the latest cli fix pr close ,refactor
3824,docsinfra align universal example with tohpt a mentioned in the universal guide the tohpt example is the starting poitn for the universal example however the two example had become outofsync because some fixeschanges were made to the tourofheroes example this commit port these change to the universal example pr close ,fix
3825,docsinfra update maints in tourofheroes example to match latest cli update the maints file in tourofheroes example to match what would be generated by the latest cli pr close ,refactor
3826,docsinfra clean up tourofheroes example i noticed these minor styling issue while aligning the universal example with the tohpt example in a subsequent commit pr close ,style
3827,docsinfra add missing build npm script for universal doc example zip archive previously the packagejson template used in the zip archive of the universal example that we offer for download missed the build npm script this commit update the template for the universal doc example to include the build npm script note the build npm script is already included in aiotoolsexamplessharedboilerplateuniversalpackagejson but it wa removed by the example zipper pr close ,build
3828,core handle empty translation correctly in certain usecases it useful to have an ability to use empty string a translation currently ivy fails at runtime if empty string is used a a translation since some part of internal data structure are not created properly this commit update runtime in logic to handle empty translation and avoid unnecessary extra processing for such case fix pr close ,fix
3829,common format dayperiods that cross midnight when formatting a time with the b or b format code the rendered string wa not correctly handling day period that spanned midnight instead the logic wa falling back to the default case of am now the logic ha been updated so that it match time that are within a day period that span midnight so it will now render the correct output such a at night in the case of english application that are using either formatdate or datepipe and any of the b or b format code will be affected by this change fix pr close ,fix
3830,devtools add linting to ci rangleangulardevtools chore fix lint error build add linting to ci pipeline ,build
3831,devtools update angularframework ,build
3832,ngcc display output from the unlocker process on window on window the output of a detached process such a the unlocker process used by lockfilewithchildprocess is not shown in the parent process stdout this commit address this by piping the spawned process stdinstdout and manually writing to the parent process stdout pr close ,fix
3833,ngcc do not spawn unlocker process on cluster worker the current ngcc lockfile strategy spawn a new process in order to capture a potential sigint and remove the lockfile for more information see previously this unlocker process wa spawned a soon a the lockfile wa instantiated in order to have it available a soon a possible given that spawning a process is an asynchronous operation since the lockfile wa instantiated and passed to the executor this meant that an unlocker process wa spawned for each cluster worker when running ngcc in parallel mode these process were not needed since the lockfile wa not used in cluster worker but we still had to pay the overhead of each process own memory and v instance note this overhead wa small compared to the memory consumed by ngccs normal operation but still unnecessary this commit avoids the extra process by only spawning an unlocker process when running on the cluster master process and not on worker process pr close ,fix
3834,ngcc force ngcc to exit on error for some reason possibly related to asyncawait promise the ngcc process is not exiting when spawned from the cli when there ha been an error such a when it timesout waiting for a lockfile to become free calling processexit directly fix this fix pr close ,fix
3835,devtools wait for server properly before running cypress test rangleangulardevtools ,test
3836,devtools clicking on element with component inspector enabled will select that component in the directive explorer ,feat
3837,devtools extract control and frame selection logic into seperate component rangleangulardevtools ,refactor
3838,devtools update angularcli rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
3839,devtools update angularframework rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
3840,languageservice clean up and export and consolidate type pr close ,refactor
3841,upgrade update locationshim to handle location change before initialization update the locationshim to receive the most recent location change made even if it happened before initialize is called this is important when angularjs bootstrapping is deferred and there is a delay between when locationshim is constructed and when it is initialized with this change the locationshim will correctly reflect any redirects that occurred between construction and initialization close pr close ,fix
3842,devtools update angularframework rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
3843,devtools update dependency typeschrome to rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
3844,devtools update dependency karma to v rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
3845,docsinfra contribute page not visible correctly on mobile device on mobile device screen size px the contribute page is not visible in correct form changed style to make it visible correctly pr close ,fix
3846,docsinfra fix about page button text being truncated on small screen on small screen eg on mobile the text on some of the button in the about page wa truncated changed the text size margin and padding so that the the whole text is visible on such screen px to px pr close ,fix
3847,zonejs fix typo in ngzone guide code example fix pr close ,docs
3848,devtools update angularcli rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
3849,core undecoratedclasseswithdecoratedfields migration should avoid error if base class ha no value declaration the undecoratedclasseswithdecoratedfields migration relies on the type checker to resolve base class of individual class it could happen that resolved base class have no value declaration eg if they are declared through an interface in the default type currently the migration will throw in such situation because it assumes that tssymbolvaluedeclaration is always present this is not the case but we dont get good typechecking here due to a bug in the typescript type see fix pr close ,fix
3850,ngcc correctly detect external file from nested nodemodules previously when we needed to detect whether a file is external to a package we only checked whether the relative path to the file from the package root started with this would detect external import when the package were sibling eg peer dependency or hoisted to the top of nodemodules by the package manager but would fail to detect import from package located in nested nodemodules a external for example importing nodemodulesfoonodemodulesbar from a file in nodemodulesfoo would be considered internal to the foo package this could result in processinganalyzing more file than necessary more importantly it could lead to error due to trying to analyze nonangular package that were direct dependency of angular package this commit fix it by also verifying that the relative path to a file doe not start with nodemodules jira issue fw fix pr close ,fix
3851,docsinfra fix element example when used with e previously the element doc example only worked in browser that natively supported custom element and e module furthermore it didnt work on stackblitz because stackblitz ignores the specified target in tsconfigjson and us the umd bundle ie e code even on browser that do support e note in the past this wa not a problem because we explicitly did not provide a stackblitz example this ha changed in this commit ensures the example work on all browser and also on stackblitz by providing the necessary custom element polyfills fix pr close ,fix
3852,ngcc only load if it is needed pr close ,perf
3853,ngcc reduce the size of the entrypoint manifest file the base path for package and entrypoints is known so there is no need to store these in the file also this commit avoids storing empty array unnecessarily pr close ,perf
3854,ngcc read dependency from entrypoint manifest previously even if an entrypoint did not need to be processed ngcc would always parse the file of the entrypoint to compute it dependency this can take a lot of time for large nodemodules now these dependency are cached in the entrypoint manifest and read from there rather than computing them every time see fw pr close ,perf
3855,compiler handle type reference to namespaced symbol correctly when the compiler need to convert a type reference to a value expression it may encounter a type that refers to a namespaced symbol such namespaces need to be handled specially a there various form available consider a namespace named n one can refer to a namespace by itself n a namespace is only allowed to be used in a type position if it ha been merged with a class but even if this is the case it may not be possible to convert that type into a value expression depending on the import form more on this later case a below one can refer to a type within the namespace nsfoo an import need to be generated to n from which the foo property can then be read one can refer to a type in a nested namespace within n nsfoobar and possibly even deeper nested the value representation is similar to case but includes additional property access the exact strategy of how to deal with these case depends on the type of import used there two flavor available a a namespaced import like import a n from n that creates a local namespace that is irrelevant to the import that need to be generated a said import would be used instead of the original import if the local namespace n itself is referred to in a type position it is invalid to convert it into a value expression some javascript library publish a value a default export using export myclass syntax however it is illegal to refer to that value using n consequently such usage in a type position must be accompanied by an inject decorator to provide an explicit token b an explicit namespace declaration within a module that can be imported using a named import like import n from n where the n module declares a namespace using declare namespace n in this case it the namespace itself that need to be imported after which any qualified reference into the namespace are converted into property access before this change support for namespaces in the typetovalue conversion wa limited and only worked correctly for a single qualified name using a namespace import case a all other case were either producing incorrect code or would crash the compiler case a crashing the compiler is not desirable a it doe not indicate where the issue is moreover the result of a typetovalue conversion is irrelevant when an explicit injection token is provided using inject so referring to a namespace in a type position case could still be valid this commit introduces logic to the typetovalue conversion to be able to properly deal with all type reference to namespaced symbol fix resolve fw pr close ,fix
3856,common localesglobaljs are not e compliant although this code ha been part of angular x i only noticed this error when upgrading to angular x because historically the source locale data wa not injected when localizing but a of angularangularcli it is now included this tipped me off that my other bundle were not being built properly and this change allows me to build a valid e bundle i have also added a verification step to my build pipeline to alert me if this error appears again in any of my bundle i found the localesglobaljs file path being referenced by the inoptions in angulardevkitbuildangularsrcutilsinoptionsts and following that it look like it is actually loaded and used in angulardevkitbuildangularsrcutilsprocessbundlets i saw the function tersermangle doe appear that it is likely aware of the build being e but im not sure why this is not producing a valid e bundle this change update toolsgulptaskscldrextractjs to produce e compliant localesglobaljs and that fix my issue however i am not sure if angulardevkitbuildangular should be modified to produce a valid e bundle instead or if the file could be typescript rather than javascript file a test that a valid e bundle is produced would be helpful and i hope this is reproducible and not some issue with my config pr close ,fix
3857,form clarify the description of minlength and maxlength previously it wa not clear that the minlength and maxlength validators can only be used with object that contain a length property this commit clarifies this pr close ,docs
3858,router pas correct component to candeactivate check when using two or more sibling routeroutlets fix there an edge case where if i use two or more sibling routeroutlets in two or more child route where their parent route doesnt have a component then preactivation will trigger all candeactivate check with the same component because it will use wrong outletcontext pr close ,fix
3859,devtools update angularcli rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
3860,devinfra fix commit message validation in git worktrees previously the precommitvalidate command used in the commitmsg git hook assumed that the commit message wa stored in gitcommiteditmsg file this is usually true but not when using git worktrees where git is a file containing the path to the actual git directory this commit fix it by taking advantage of the fact that git pass the actual path of the file holding the commit message to the commitmsg hook and husky expose the argument passed by git a huskygitparams note we can not use the environment variable directly in the commitmsg hook command because environment variable need to be referenced differently on window varname v macoslinux varname instead we pas the name of the environment variable and the validation script read the variable value off of processenv pr close ,fix
3861,compiler create a new root bindingscope for each template previously we had a singleton rootscope object from which all bindingscopes derived but this caused ngcc to produce nondeterministic output when running multiple worker in parallel since each process had it own rootscope in reality there is no need for bindingscope reference name to be unique across an entire application or in the case of ngcc across all the library instead we just need uniqueness within a template this commit change the compiler to create a new root bindingscope each time it compiles a component template resolve pr close ,refactor
3862,devtools consistent console reference hint style with chrome devtools ,fix
3863,devtools consistent style across shell dev and chrome ,fix
3864,devtools introduce virtual scrolling in directive explorer ,feat
3865,devtools update angularframework rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
3866,bazel use runfiles helper in tsapiguardian prefractor for future rulesnodejs release when requireresolve patch are removed pr close ,refactor
3867,languageservice remove circular dependency instance pr close ,fix
3868,compiler reformat of codebase with new clangformat version this commit reformats the packagescompiler tree using the new version of clangformat pr close ,style
3869,compilercli reformat of codebase with new clangformat version this commit reformats the packagescompilercli tree using the new version of clangformat pr close ,style
3870,ngcc do not warn if path mapping doe not exist in ccbeffbfdfaaeeda the getbasepaths function wa changed to log a warning if a basepath computed from the path mapping did not exist it turn out this is a common and accepted scenario so we should not log warning in this case fix pr close ,fix
3871,bazel fix runfiles resolve in karmasaucelabsjs after location rootpath cleanup this wasnt caught by ci on the pr a this binary is only run once daily via a monitor job pr close ,build
3872,languageservice inline test case in parsingcasests this commit remove individual component from parsingcasests and colocate them with the actual test this make the test more readable pr close ,test
3873,zonejs add issue number of typesjasmine to the test case some case will still need to use spy a any cast because typesjasmine have some issue the issue jasmine doesnt handle optional method property the issue jasmine doesnt handle overload method correctly pr close ,fix
3874,devtools update angularcli rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
3875,devtools allow user to view change detection strategy and view encapsulation of a component in the property explorer rangleangulardevtools ,feat
3876,devtools debounce dirty notification and ignore vendorchunk rangleangulardevtools on scroll event we can very aggressively request update although we have throttling logic it still can be quite a heavy operation in the front end here we introduce m throttling do not produce vendorchunk in development and production mode ,fix
3877,devtools update angularframework rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
3878,zonejs zonejs patch jest should handle done correctly zonejs support jest testeach method but it introduces a bug which is the done function will not be handled correctly itshould work with done done done will be undefined the reason is the logic of monkey patching test method is different from jasmine patch jasmine patch return testbodylength testproxyzoneruntestbody null done testproxyzoneruntestbody null done jest patch return functionargs return testproxyzoneruntestbody null args the purpose of this change is to handle the following case testeach testeach arg arg expectargtobe expectargtobe so in jest it is a little complex because the testbodys parameter may be bigger than so the logic in jasmine return testbodylength testproxyzoneruntestbody null done testproxyzoneruntestbody null done will not work for testeach in jest so in this pr i created a dynamic function to return the correct length of paramters which is required by jest core to handle normal test with or without done each with parameter with or without done pr close ,fix
3879,compiler resolve enum value in binary operation during static evaluation of expression the partial evaluator may come across a binary operator for which it need to evaluate it operand any of these operand may be a reference to an enum member in which case the enum member value need to be used a literal value not the enum member reference itself this commit fix the behavior by resolving an enumvalue when used a a literal value fix resolve fw pr close ,fix
3880,compiler reformat partial evaluator source tree pr close ,style
3881,ngcc correctly identify relative windowsstyle import path previously isrelativepath assumed path are nixstyle this caused windowsstyle path such a cfoosomepackagesomefilejs to not be recognized a relative import this commit fix this by using the osagnostic isrooted helper and also accounting for both style of path delimiters and pr close ,fix
3882,languageservice use the htmlast to get the span of html tag the html tag may include eg approot so use the htmlast to get the span pr close ,fix
3883,docsinfra removed extra from resourcesscss file there wa a typo in resourcessscss file there wa an extra comma added some space too that were needed for proper styling of the code pr close ,style
3884,docsinfra fix resource page tab text which is not visible on small screen on small mobile screen the top tab bar contains text which wa not visible on small screen changed text size margin and padding so that the text could be contained in these screen px to px pr close ,fix
3885,form remove unnecessary repeating period pr close ,docs
3886,languageservice remove ngforcasests this commit remove ngforcasests and move all test case to inline expression in testtemplate pr close ,test
3887,languageservice remove ngifcasests this commit remove ngifcasests and move all test case to inline expression in testtemplate pr close ,test
3888,router state data missing in routerlink fix router state data is missing on routerlink when used with nonanchor element pr close ,fix
3889,core ngondestroy on multi provider called with incorrect context currently destroy hook are stored in memory a hook hook where the number represent the index at which to find the context and hook is the function to be invoked this break down for multi provider because the value at the index will be an array of provider resulting in the hook being invoked with an array of all the multi provider value rather than the provider that wa destroyed in viewengine ngondestroy wasnt being called for multi provider at all these change fix the issue by changing the structure of the destroy hook to hook hook hook where the index inside the inner array point to the provider inside of the multi provider array note that this is slightly different from the original design which called for the structure to be hook hook hook because in the process of implementing it i realized that we wouldnt get passing the correct context if only some of the multi provider have ngondestroy and others dont ive run the newlyadded viewdestroyhooks benchmark against these change and compared it to master the difference seems to be insignificant between and slower fix pr close ,fix
3890,devtools update angularframework rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
3891,languageservice delete expressioncasests this commit deletes expressioncasests and move the test case to inline expression in testtemplate pr close ,test
3892,ngcc detect nonemitted nonimported typescript helper when typescript downlevels e code to e it us some helper function to emulate some e feature such a spread syntax the typescript compiler can be configured to emit these helper into the transpiled code which is controlled by the noemithelpers option false by default it can also be configured to import these helper from the tslib module which is controlled by the importhelpers option false by default while most of the time the helper will be either emitted or imported it is possible that one configures their app to neither emit nor import them in that case the helper could for example be made available on the global object this is what nativescriptangular vnext doe see for example commonjs ngcc must be able to detect and statically evaluate these helper previously it wa only able to detect emitted or imported helper this commit add support for detecting these helper if they are neither emitted nor imported it doe this by checking identifier for which no declaration either concrete or inline can be found against a list of known typescript helper function name pr close ,fix
3893,languageservice provide service for attribute binding type this commit refactors the process for determining the type of an angular attribute to be use a function that take an attribute name and return the angular attribute kind and name rather than requiring the user to query match the attribute name with the regex and query the matching array this refactor prepares for a future change that will improve the experience of completing attribute in or context pr close ,refactor
3894,zonejs fix lint error after clang update recent zonejsrelated commit update the promisets file but it look like original pr wa not rebased after clang update a a result the lint circleci job started to fail in master after merging that pr this commit update the format of the promisets script according to the new clang rule pr close ,style
3895,form reformat of the form package after clang update pr close ,style
3896,devtools add script for setting manifest version rangleangulardevtools ,build
3897,zonejs should not try to patch fetch if it is not writable close in firefox extension the windowfetch is not configurable that mean const desc objectgetownpropertydescriptorwindow fetch descwritable false so in this case we should not try to patch fetch otherwise it will throw error fetch is readonly pr close ,fix
3898,languageservice move pipe test to testtemplate this commit simplifies the completion test for pipe by moving them to testtemplate pr close ,test
3899,docsinfra renamed ee property of exampleconfigjson to test each doc example ha an exampleconfigjson configuration file among other thing this file can be used to specify what command to run in order to test the example if not specified the runexampleeejs script will run a default yarn ee command previously the property specifying the test command wa called ee this is because in the past only ee test were run for doc example since recently some example may specify command for other type of test such a unit test therefore calling the property that hold the list of test command ee no longer make sense and can be misleading to people looking at the configuration file this commit renamed the property to the more generic test in the future the runexampleeejs script and corresponding npm script should be renamed and refactored to also avoid giving the impression that only ee test are run discussed in pr close ,build
3900,docsinfra update doc example packagejson template wrt corejs the corejs dependency is no longer included in packagejson for clitype example but only for the systemjs one this commit update the packagejson template to reflect that and also update the npmpackages guide accordingly pr close ,build
3901,docsinfra fix unit test and run them for specific doc example on ci previously only ee test were run for doc example on ci a a result unit test which are included in the zipped archive we provide for user to download and play with the example locally were often outdated and broken this commit configures specific doc example that have meaningful unit test to run them on ci via the runexampleeejs script where necessary the unit test are fixed to ensure they pas and reflect the change in the corresponding componentservice this commit also remove some autogenerated unit test that are not meaningful eg make trivial assertion such that a component instance is truthy and are often broken anyway eg because the corresponding component ha been changed in way that make the test fail pr close ,test
3902,docsinfra switch doc example to ivy the doc example are switched to ivy on ci the test are run with both ivy and viewengine partially address fw pr close ,build
3903,devtools allow user to click on function property to inspect that function in the chrome devtools rangleangulardevtools ,feat
3904,devtools show timeline bar color dependant on the framerate ,feat
3905,core avoid migration error when nonexistent symbol is imported in rare case a project with configured rootdirs that ha import to nonexistent identifier could fail in the migration this happens because based on the application code the migration could end up trying to resolve the tssymbol of such nonexistent identifier this isnt a problem usually but due to a upstream bug in the typescript compiler a runtime error is thrown this is because typescript is unable to compute a relative path from the originating source file to the imported source file which should provide the nonexistent identifier an issue for this ha been reported upstream the issue only surface since our migration dont provide an absolute base path that is used for resolving the root directory to fix this we ensure that we never use relative path when parsing tsconfig file more detail can be found in the t issue fix pr close ,fix
3906,ngcc dont crash on cyclic sourcemap reference the sourcemap flattening wa throwing an error when there is a cyclic dependency between source file and sourcemaps the error wa either a custom one describing the cycle or a maximum call stack size exceeded one now this is handled more leniently resulting in a partially loaded source file or sourcemap and a warning logged fix fix fix fix pr close ,fix
3907,ngcc add process title add processtitle so it clearly in the task manager when ngcc is running see pr close ,fix
3908,ngcc support ignoring deepimports via package config recently we added support for ignoring specified deepimport warning by providing set of regular expression within the ngccconfigjs file but this wa only working for the project level configuration this commit fix ngcc so that it will also read these regular expression from package level configuration too fix pr close ,fix
3909,ngcc support simple browser property in entrypoints the browser packagejson property is now supported to the same level a main ie it is sniffed for umd esm and commonjs the browser property can also contain an object with file override but this is not supported by ngcc fix pr close ,fix
3910,ngcc sniff main property for esm format previously main wa only checked for umd or commonjs format now if there are import or export statement in the source file it will be deemed to be in esm format fix pr close ,fix
3911,languageservice reformat using clangformat clangformat wa recently updated and any pr that touch file in the language service will have to reformat all the file instead of changing the formatting in those pr this pr format all file in languageservice package once and for all pr close ,refactor
3912,devinfra use commit message validation from angulardevinfraprivate prior to this change we manage a local version of commit message validation in addition to the commit message validation tool contained in the ngdev tooling by adding the ability to validate a range of commit message together the remaining piece of commit message validation that is in the local version is replicated we use both command provided by the ngdev commitmessage tooling precommitvalidate set to automatically run on an git hook to validate commits a they are created locally validaterange run by ci for every pr testing that all of the commits added by the pr are valid when considered together ensuring that all fixups are matched to another commit in the change pr close ,fix
3913,compilercli pas real source span where they are empty some consumer of function that take parsesourcespans currently pas empty and incorrect source span this fix those case pr close ,fix
3914,ngcc reformat of ngcc after clang update pr close ,style
3915,devtools update angularframework rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
3916,devtools let timeout config default to m rangleangulardevtools ,test
3917,devtools remove render case that is no longer used rangleangulardevtools ,refactor
3918,devtools update angularcli rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
3919,devtools update angularframework ,build
3920,router allow urlmatcher to return null the matcher is allowed to return null per and run yarn gulp format to pick up recent clang format change close breaking change urlmatchers type now reflects that it could always return null if you implemented your own router or recognizer class please update it to handle matcher returning null pr close ,fix
3921,devinfra correct pullapprove global approval regex pr close ,fix
3922,ngcc correctly detect imported typescript helper the ngccreflectionhosts have logic for detecting certain known declaration such a objectassign and typescript helper which allows the partialevaluator to evaluate expression it would not be able to statically evaluate otherwise in delegatingreflectionhost wa introduced which delegate to a typescript reflectionhost when reflecting on typescript file which for ngccs case mean dts file of dependency a a result ngcc lost the ability to detect typescript helper imported from tslib because delegatingreflectionhost wa not able to apply the known declaration detection logic while reflecting on tslibs dts file this commit fix this by ensuring delegatingreflectionhost call the ngccreflectionhosts detectknowndeclaration method a necessary even when using the typescript reflectionhost note the previous commit exposed a bug in ngcc that wa hidden due to the test being inconsistent with how the reflectionhosts are used in the actual program the change in this commit are verified by ensuring the failing test are now passing hence no new test are added pr close ,fix
3923,ngcc use delegatingreflectionhost for testing ngccreflectionhosts in delegatingreflectionhost wa introduced under the hood it delegate another ngccreflectionhost in order to reflect over the program source file while using a different typescript reflectionhost to reflect over dts file which is how external dependency are represented in the program previously the ngccreflectionhosts were used directly in test this doe not exercise them in the way they are exercised in the actual program because when used directly they will also reflect on dts file too instead of delegating to the typescript reflectionhost this could hide bug that would happen on the actual program this commit fix this by using the delegatingreflectionhost in the various ngccreflectionhost test note this change will cause some of the existing test to start failing these failure demonstrate preexisting bug in ngcc that were hidden due to the test being inconsistent with how the reflectionhosts are used in the actual program they will be fixed in the next commit pr close ,test
3924,ngcc move logic for identifying known declaration to method the ngccreflectionhosts have logic for detecting certain known declaration such a objectassign and typescript helper which allows the partialevaluator to evaluate expression it would not be able to statically evaluate otherwise this commit move the logic for identifying these known declaration to dedicated method this is in preparation of allowing ngccs delegatingreflectionhost introduced in to also apply the known declaration detection logic when reflecting on typescript source pr close ,refactor
3925,benchpress fix typing in lviewdebugts installing using benchpress wa throwing typescript error because typing were not defined for the getters in lviewdebugts pr close ,fix
3926,devtools remove tree wrapper height cs to let the height default to how many node are being displayed rangleangulardevtools ,fix
3927,devtools display latest commit sha in application rangleangulardevtools build set latest sha commit a system environment variable for chrome build build set latest sha commit a sys variable for demo build feat create application environment abstraction to reference environment variable inside the ngdevtools library test fix devtools component test ,feat
3928,core undecoratedclasses migration should handle derived abstract class in version undecorated base class that use angular feature need to be decorated explicitly with directive additionally derived class of abstract directive need to be decorated the migration already handle this for undecorated class that are not explicitly decorated but since in v abstract directive can be used we also need to handle this for explicitly decorated abstract directive eg directive export class base need to be decorated by migration when updating from v to v export class wrapped extends base component export class cmp extends wrapped pr close ,feat
3929,core undecoratedclasseswithdecoratedfields migration doe not decorate derived class the undecoratedclasseswithdecoratedfields migration ha been introduced with aedadffbfaf but miss logic for decorating derived class of undecorated class which use angular feature example scenario t export abstract class mybaseclass input someinput true export abstract class baseclasstwo extends mybaseclass component export class mybutton extends baseclasstwo both abstract class would need to be migrated previously the migration only added directive to mybaseclass but with this change it also decorates baseclasstwo this is necessary because the angular compiler requires baseclasstwo to have a directive definition when it flattens the directive metadata for mybutton in order to perform type checking technically not decorating baseclasstwo doe not break at runtime we basically want to enforce consistent use of directive to simplify the mental model see the migration guide fix pr close ,fix
3930,core move schematic import manager to shared utils the import manager ha been created for both the missinginjectable and undecoratedclasseswithdi migration both initial pr brought in the manager class so the manager is duplicated in the schematic in order to reduce this duplication and to expose the manager to other schematicsmigrations we move it into the shared schematic utils pr close ,refactor
3931,core move schematic base class logic into shared utils move the findbaseclassdeclarations method into the shared schematic utility this method will be useful for future migration and for planned change to the undecoratedclasseswithdecoratedfields migration pr close ,refactor
3932,devtools update angularframework ,build
3933,devtools fixing the bar graph height issue ,fix
3934,compiler add nocollapse annotation using a synthetic comment in ivy angular decorator are compiled into static field that are inserted into a class declaration in a typescript transform when targeting closure compiler such field need to be annotated with nocollapse to prevent them from being lifted from a static field into a variable a that would prevent the ivy runtime from being able to find the compiled definition previously there wa a bug in typescript where synthetic comment added in a transform would not be emitted at all so a a workaround a global regexreplace wa done in the emits writefile callback that would add the nocollapse annotation to all static ivy definition field this approach is no longer possible when ngtsc is running a typescript plugin a a plugin can not control emit behavior the workaround is no longer necessary a synthetic comment are now properly emitted likely a of which ha been released with typescript this change is required for running ngtsc a typescript plugin in bazels tslibrary rule to move away from the custom ngcwrapped approach resolve fw pr close ,refactor
3935,zonejs fix typo and align formatting pr close ,docs
3936,devinfra standard cli command using yargs creates a standard model for cli command provided by ngdev allows for u to have any of the toolsscripts extend to be included in the ngdev command or be standalone using the same yargs parser pr close ,feat
3937,devtools remove nggetcomponent call in place it is no longer needed ,refactor
3938,ngcc allow ngcc configuration to match prerelease version of package ngcc support providing a projectlevel configuration to affect how certain dependency are processed and also ha a builtin fallback configuration for some unmaintained package each entry in these configuration could be scoped to specific version of a package by providing a version range if no version range is provided for a package it default to with the intention of matching any version previously the installed version of a package wa tested against the version range using the semver package satisfies function with the default option by default satisfies doe not match prereleases see here for more detail on reasoning while this make sense when determining what version of a dependency to install trying to avoid unexpected breaking change it is not desired in the case of ngcc this commit fix it by explicitly specifying that prerelease version should be matched normally pr close ,fix
3939,platformserver update xhr dependency previous version of xhr used the depreciated new buffer close pr close ,fix
3940,compiler avoid undefined expression in holey array from g bug id the view engine compiler crash when it try to compile a test in jit mode that includes the dscalechromatic library the d package initializes some array using the following pattern j export var scheme new arrayconcat dbfffabac more entry mapcolors the stack trace from the crash is a follows typeerror can not read property visitexpression of undefined at thirdpartyjavascriptangularrcpackagescompilersrcoutputabstractemitterts at jitemittervisitorabstractemittervisitorvisitallobjects thirdpartyjavascriptangularrcpackagescompilersrcoutputabstractemittertsl at jitemittervisitorabstractemittervisitorvisitallexpressions thirdpartyjavascriptangularrcpackagescompilersrcoutputabstractemittertsl at jitemittervisitorabstractemittervisitorvisitliteralarrayexpr thirdpartyjavascriptangularrcpackagescompilersrcoutputabstractemittertsl at literalarrayexprvisitexpression thirdpartyjavascriptangularrcpackagescompilersrcoutputoutputasttsl at thirdpartyjavascriptangularrcpackagescompilersrcoutputabstractemitterts at jitemittervisitorabstractemittervisitorvisitallobjects thirdpartyjavascriptangularrcpackagescompilersrcoutputabstractemittertsl at jitemittervisitorabstractemittervisitorvisitliteralmapexpr thirdpartyjavascriptangularrcpackagescompilersrcoutputabstractemittertsl at literalmapexprvisitexpression thirdpartyjavascriptangularrcpackagescompilersrcoutputoutputasttsl at thirdpartyjavascriptangularrcpackagescompilersrcoutputabstractemitterts at jitemittervisitorabstractemittervisitorvisitallobjects thirdpartyjavascriptangularrcpackagescompilersrcoutputabstractemittertsl at jitemittervisitorabstractemittervisitorvisitallexpressions thirdpartyjavascriptangularrcpackagescompilersrcoutputabstractemittertsl at jitemittervisitorabstractemittervisitorvisitinvokefunctionexpr thirdpartyjavascriptangularrcpackagescompilersrcoutputabstractemittertsl at jitemittervisitorabstractjsemittervisitorvisitinvokefunctionexpr thirdpartyjavascriptangularrcpackagescompilersrcoutputabstractjsemittertsl at invokefunctionexprvisitexpression thirdpartyjavascriptangularrcpackagescompilersrcoutputoutputasttsl this is because the corresponding output ast for the array is of the form t undefined undefined undefined oliteralexpr the output ast is clearly malformed and break the type representation of literalarrayexpr in which every entry is expected to be of type expression this commit fix the bug by using a plain for loop to iterate over the entire length of the holey array and convert undefined element to literalexpr pr close ,fix
3941,ngcc handle bad path mapping when finding entrypoints previously a bad baseurl or path mapping passed to an entrypointfinder could cause the original sourcedirectory to be superceded by a higher directory this could result in none of the sourcedirectory entrypoints being processed now missing basepaths computed from pathmappings are discarded with a warning further if the baseurl is the root directory then a warning is given a this is most likely an error in the tsconfigjson resolve resolve pr close ,fix
3942,devinfra add support for new global approver in pullapprove pullapprove a added a few new feature to allow for u to better execute our expectation for global approval we need to allow for an expectation that our global approver group are not in the list of approved group additionally since approval group apply to all file in the repo the global approval group also do not have condition defined for them which mean pullapprove verification need to allow for no condition need to be defined pr close ,feat
3943,languageservice infer type of element of arraylike object currently the language service only provides support for determining the type of arraylike member when the arraylike object is an array however there are other kind of arraylike object including readonlyarrays and readonlyproperty array this commit add support for retrieving the element type of arbitrary arraylike object close pr close ,fix
3944,devtools decrease refresh throttling to m ,refactor
3945,devtools update angularframework ,build
3946,ngcc handle entrypoints within container folder the previous optimization in to the directorywalkerentrypointfinder were over zealous with regard to package that have entrypoints stored in container directory in the package where the container directory wa not an entrypoint itself now we will also walk such container folder a long a they do not contain j file which we regard a an indicator that the directory will not contain entrypoints fix pr close ,fix
3947,ngcc simplify directorywalkerentrypointfinder this commit simplifies the directorywalkerentrypointfinder intermethod calling to make it easier to follow and also to support controlling walking of a directory based on it child pr close ,refactor
3948,ngcc rename invalidentrypoint to incompatibleentrypoint this name better reflects it meaning pr close ,refactor
3949,zonejs unpatchedevents and passiveevents should be string not boolean zonesymbolunpatchedevents and zonesymbolpassiveevents should be string type not boolean for example const config window a zoneglobalconfigurations configzonesymbolunpatchedevents scroll configzonesymbolpassiveevents scroll pr close ,fix
3950,benchpress update dependency updated added and removed dependency in packagejson added dependency to buildbazel pr close ,fix
3951,devtools reset the timeline component when discarding a recording this way we dont preserve the selected profilerframe across recording ,fix
3952,devtools use weakmap to reduce memory usage when memoizing ,perf
3953,devtools drop the dummy method in bargraphformatter ,refactor
3954,devtools add functionality for visualizing change detection ,feat
3955,devtools dont reformat the same record multiple time use memoization with the memodecorator ,perf
3956,devtools add duration field to the profilerframe this way we open the door for further optimization and make it possible to introduce customization of the output of the formatters per componentlevel ,feat
3957,devtools optionally show change detection duration only when run ,feat
3958,devtools adding parent hierarchy list view ,feat
3959,devtools adding parent hierarchy to bar graph formater ,feat
3960,devtools adding bar graph detail section ,feat
3961,devtools fix expressionchangedafterithasbeencheckederror by manually triggering change detection when parent are set in directive explorer ,fix
3962,devtools add back cs that removed after a rebase ,fix
3963,docsinfra rename duplicate test name when running docstest for the doc generation a warning is printed for a duplicate test this commit fix this issue pr close ,build
3964,zonejs fix bluebird test case for eachmapseries bluebirdeach and bluebirdmapseries will accept a callback with value parameter the value should be the item in the array not array itself for example const arr bluebirdeacharr functionvalue idx consolelogvalue value idx idx the output will be value idx value idx this pr fix the test case for each and mapseries apis pr close ,fix
3965,zonejs update zonejs version to pr close ,build
3966,devtools remove ngxvisjs dependency ,build
3967,devtools remove broken copy to clipboard feature ,refactor
3968,devtools layout when visualizing the profiling data ,fix
3969,devtools remove useless scrollbar from the demo app ,fix
3970,devtools add toplevel element to allow zoom out with multi root ,feat
3971,devtools update ngxflamegraph to ,build
3972,devtools update angularframework ,build
3973,devtools remove unnecessary logic from property editor ,refactor
3974,devtools update angularcli ,build
3975,devtools rename tree graph to tree map ,refactor
3976,core use more narrow querylist import to avoid circular deps issue prior to this commit the packagescoresrcrenderinterfacesqueryts file used to import querylist using linker which contains a lot of reexports and a a result this one import caused a lot of circular deps cycle reported by the tool that check such deps in other place in the code the querylist is imported using more narrow import linkerquerylist so this commit us the same pattern this change allowed to reduce the number of known cycle from to the golden file wa updated accordingly pr close ,refactor
3977,devtools update dependency typeschrome to ,build
3978,devtools remove scrollintoview ponyfill ,refactor
3979,devtools lift breadcrumb up a level on the component tree to avoid using fixed positioning cs ,refactor
3980,devtools remove unused import ,refactor
3981,devtools set spacebeforefunctionparen tslint config to false ,build
3982,devtools use bulit in timeout option to wait for dom update rangleangulardevtools ,test
3983,devtools prevent default behaviour before calculating new scroll position to fix bug when traversing directive forest with arrow key rangleangulardevtools ,fix
3984,devtools set shownode option to show most node in the treegraph rangleangulardevtools ,feat
3985,devtools remove unused ng debug object ,refactor
3986,devtools update angularframework ,build
3987,devtools faster bar chart formatting the array allocation in addspaces wa talking a lot of time we were also recomputing same result very frequently ,perf
3988,devtools use single color in the bar chart lot of folk are confused by the multiple color which dont have meaning at the moment ,refactor
3989,ngcc do not write entrypoint manifest outside nodemodules fix pr close ,fix
3990,ngcc rename workercount to maxworkercount now that we spawn worker lazily a needed this private property is really the upper limit on how many worker we might spawn pr close ,refactor
3991,devtools wait m before checking the tree for a new node ,fix
3992,devtools migrate devtools and demo app to sc for styling ,feat
3993,devinfra fix lint warning for pullapproverelated script the devinfra script were added to the list of source that should be verified with clang but the pullapproverelated script that were merged before doesnt pas these check this commit update a couple script to have a proper formatting pr close ,refactor
3994,devtools update nodejs to v ,build
3995,devtools move all profiler file to be under devtooltabs where the initial profiler component is rendered ,refactor
3996,devtools update angularframework ,build
3997,devtools updating record formatter to get directive value ,feat
3998,devtools updating bargraph formatter ,feat
3999,devtools setting bar graph a default option ,feat
4000,devtools renaming timeline graph option ,feat
4001,devtools adding bargraph visualization to timeline ,feat
4002,devtools adding bargraph visualizer ,feat
4003,devtools adding bargraph formatter ,feat
4004,devtools update nodejs to v rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
4005,devtools drag and drop when selecting input fix console warning on update state error rangleangulardevtools fix console warn correct variable on update state failure fix prevent drag from occuring on property edit input ,fix
4006,devtools webtree sizing rangleangulardevtools ,fix
4007,ngcc do not spawn more process than intended in parallel mode when running in parallel mode ngcc spawn multiple worker processed to process the various entrypoints the number of max allowed process is determined by the number of cpu core available to the o there is also currently an upper limit of the number of active worker is in turn inferred by the number of task assignment in the past counting the entry of clustermastertaskassignments wa enough because worker process were spawned eagerly at the beginning and corresponding entry were created in taskassignments since however worker process are spawned lazily on an a needed basis because there is some delay between spawning a process and inserting it into taskassignments there is a short period of time when taskassignmentsize doe not actually represent the number of spawned process this can result in spawning more than clustermasterworkercount process an example of this can be seen in where the debug log indicate worker process had been spawned all worker are currently busy despite the hard limit of this commit fix this by using clusterworkers to compute the number of spawned worker process clusterworkers is updated synchronously with clusterfork and thus reflects the number of spawned worker accurately at all time pr close ,fix
4008,ngcc correctly identify the package path of secondary entrypoints previously we only searched for package path below the set of basepaths that were computed from the basepath provided to ngcc and the set of pathmappings in some scenario such a hoisted package the entrypoint is not within any of the basepaths identified above for example project package app nodemodules applib depends on lib nodemodules lib depends on lib nodemodules lib depends on libentrypoint lib entrypoint when cli is compiling applib ngcc will be given projectpackagesappnodemodules a the basepath if ngcc is asked to target lib the targetpath will be projectnodemoduleslibnodemoduleslib since lib depends upon libentrypoint ngcc will need to compute the package path for projectnodemoduleslibentrypoint since projectnodemoduleslibentrypoint is not contained in the basepath projectpackagesappnodemodules ngcc failed to compute the packagepath correctly instead assuming that it wa the same a the entrypoint path now we also consider the nearest nodemodules folder to the entrypoint path a an additional basepath if one is found then we use the first directory directly below that nodemodules directory a the package path in the case of our example this extra basepath would be projectnodemodules which allows u to compute the packagepath of projectnodemoduleslib fix pr close ,fix
4009,core run appinitializers before accessing localeid token in ivy testbed prior to this commit ivy testbed wa accessing locale id before appinitializer function were called this execution order is not consistent with the app bootstrap logic in applicationrefts this commit update ivy testbed execution order to call initializers first since they might affect localeid token value and accessing and setting locale id after that fix pr close ,fix
4010,devinfra handle excluding file via glob in pullapprove update the pullapprove verification script to handle case of excluding glob from group pr close ,feat
4011,docsinfra do not include cispecific config in doc example zip archive in a new protractor config file wa introduced in doc example protractorpuppeteerconfjs that wa only supposed to be used on ci and not be shipped with the zip archive provided for user to download and experiment with the doc example locally the logic to ignore the protractorpuppeteerconfjs file wa incorrect resulting in the file being retained in some example eg universal the problem wa not immediately obvious because most example explicitly specify all j file a ignored but for other example the file wa retained in the zip archive this commit fix the logic to ensure the file is excluded from all doc example zip archive pr close ,build
4012,docsinfra remove obsolete property from zipperjson file the removesystemjsconfig and type property present in some zipperjson file are now obsolete and are not taken into account by the example zipper removesystemjsconfig is no longer relevant since most example have been migrated to use the cli type is no longer relevant because the project type is determined based on the projecttype property in exampleconfigjson file this commit remove these property from zipperjson file and update the examplezipper doc to not mention them pr close ,build
4013,serviceworker prevent sw registration strategy from affecting app stabilization previously some of the builtin serviceworker registration strategy namely registerwithdelaytimeout and registerwhenstabletimeout would register potentially longrunning timeout thus preventing the app from stabilizing before the timeouts expired this wa especially problematic for the registerwhenstabletimeout strategy which wait for the app to stabilize because the strategy itself would prevent the app from stabilizing and thus the serviceworker would always be registered after the timeout this commit fix this by subscribing to the registration strategy observable outside the angular zone thus not affecting the apps stabilization pr close ,fix
4014,serviceworker by default register the sw after s even the app never stabilizes previously when using the default serviceworker registration strategy angular would wait indefinitely for the app to stabilize before registering the serviceworker script this could lead to a situation where the serviceworker would never be registered when there wa a longrunning task such a an interval or recurring timeout such task can often be started by a rdparty dependency beyond the developer control or even without them realizing in addition this situation is particularly hard to detect because the serviceworker is typically not used during development and on production build a previous serviceworker instance might be already active this commit fix this by changing the default registration strategy from registerwhenstable to registerwhenstable which will ensure that the serviceworker will be registered after s at the latest even if the app ha not stabilized by then fix pr close ,fix
4015,serviceworker support timeout in registerwhenstable sw registration strategy previously when using the registerwhenstable serviceworker registration strategy which is also the default angular would wait indefinitely for the app to stabilize before registering the serviceworker script this could lead to a situation where the serviceworker would never be registered when there wa a longrunning task such a an interval or recurring timeout such task can often be started by a rdparty dependency beyond the developer control or even without them realizing in addition this situation is particularly hard to detect because the serviceworker is typically not used during development and on production build a previous serviceworker instance might be already active this commit enhances the registerwhenstable registration strategy by adding support for an optional timeout argument which guarantee that the serviceworker will be registered when the timeout expires even if the app ha not stabilized yet for example with registerwhenstable the serviceworker will be registered a soon a the app stabilizes or after second if the app ha not stabilized by then related to pr close ,feat
4016,devtools use parent state in directive forest to optimize the expandparents method called when searching the directive forest rangleangulardevtools ,refactor
4017,devtools fixing itemtracking ee test rangleangulardevtools ,test
4018,devtools renaming app component to app todo component rangleangulardevtools featdemoapp renaming app component to app todo component featdemoapp renaming file ,feat
4019,devtools update dependency typeschrome to rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
4020,devtools update angularframework rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
4021,devtools update angularcli rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
4022,devtools update angularcomponents to rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
4023,devtools update angularframework ,build
4024,devtools update angularcli rangleangulardevtools coauthoredby renovate bot botrenovateappcom ,build
4025,common let keyvaluepipe accept type union with null keyvaluepipe currently accepts null value a well a map and a few others however due to the way in which t overload work a type of tnull will not be accepted by keyvaluepipes signature even though both t and null individually would be to make this work each signature that accepts some type t ha been duplicated with a second one below it that accepts a tnull and includes null in it return type fix pr close ,fix
4026,ngcc use preserve whitespaces from tsconfig if provided previously ngcc never preserved whitespaces but this is at odds with how the viewengine compiler work in viewengine library template are recompiled with the current application tsconfig setting which meant that whitespace preservation could be set in the application tsconfig file this commit allows ngcc to use the preservewhitespaces setting from tsconfig when compiling library template one should be aware that this disallows different project with different tsconfig setting to share the same nodemodules folder with regard to whitespace preservation but this is already the case in the current ngcc since this configuration is hard coded right now fix pr close ,fix
4027,compiler add dependency info and ngcontent selector to metadata this commit augments the factorydef declaration of angular decorated class to contain information about the parameter decorator used in the constructor if no constructor is present or none of the parameter have any angular decorator then this will be represented using the null type otherwise a tuple type is used where the entry at index i corresponds with parameter i each tuple entry can be one of two type if the associated parameter doe not have any angular decorator the tuple entry will be the null type otherwise a type literal is used that may declare at least one of the following property attribute if attribute is present the injected attribute name is used a string literal type or the unknown type if the attribute name is not a string literal self if self is present always of type true skipself if skipself is present always of type true host if host is present always of type true optional if optional is present always of type true a property is only present if the corresponding decorator is used note that the inject decorator is currently not included a it nontrivial to properly convert the token value expression to a type that is valid in a declaration file additionally the componentdefwithmeta declaration that is created for angular component ha been extended to include all selector on ngcontent element within the component template this additional metadata is useful for tooling such a the angular language service a it provides the ability to offer suggestion for directivescomponents defined in library at the moment such tooling extract the necessary information from the metadatajson manifest file a generated by ngc however this metadata representation is being replaced by the information emitted into the declaration file resolve fw pr close ,feat
4028,element correct typo in custom element image fix pr close ,docs
4029,element correctly handle setting input to undefined previously when an input property wa initially set to undefined it would not be correctly recognized a a change and trigger ngonchanges this commit ensures that explicitly setting an input to undefined is correctly handled the same a setting the property to any other value this aligns the behavior of angular custom element with that of the corresponding component when used directly not a custom element pr close ,fix
4030,element correctly set simplechangefirstchange for preexisting input previously when an input property wa set on an ngelement before instantiating the underlying component the simplechange object passed to ngonchanges would have firstchange set to false even if this wa the first change a far a the component instance wa concerned this commit fix this by ensuring simplechangefirstchange is set to true on first change regardless if the property wa set before or after instantiating the component this alignthe behavior of angular custom element with that of the corresponding component when used directly not a custom element jira issue fw fix pr close ,fix
4031,docsinfra upgrade cli command doc source to c updating angularmaster from clibuildsmaster relevant change in commit range modified helpbuildjson helplintjson helptestjson pr close ,build
4032,ngcc use pathmappings from tsconfig in dependency resolution when computing the dependency between package which are not in nodemodules we may need to rely upon pathmappings to find the path to the imported entrypoint this commit allows ngcc to use the pathmappings from a tsconfig file to find dependency by default any tsconfigjson file in the directory above the basepath is loaded but it is possible to use a path to a specific file by providing the tsconfigpath property to mainngcc or to turn off loading any tsconfig file by setting tsconfigpath to null at the command line this is controlled via the tsconfig option fix pr close ,fix
4033,common add test for ngforofcontextcount ngforofcontextcount is the length of the iterable pr close ,test
4034,common add missing entry for ngforofcontextcount count is available in ngforofcontext but it missing in the doc pr close ,docs
4035,core reenable ie test on saucelabs i wa not able to reproduce ie failrue of the disabled test on saucelabs any more i did some cleanup of the test in question but i doubt it wa the root cause of the problem pr close ,test
4036,devinfra use angulardevinfraprivate package for pullapprove verification add devdependency on angulardevinfraprivate and remove the verify script from tool relying instead on the script from ngdev pr close ,fix
4037,devtools update angularcli ,build
4038,devtools update angularframework ,build
4039,devtools enable protocol test ,ci
4040,devtools fix an issue and introduce test for the priority aware message bus ,test
4041,devtools highlighting of newly added node this pr also simplifies the imperative ordering of async method it move the logic into a generic abstraction priorityawaremessagebus ,fix
4042,devtools create consolereferencenode interface to fix typing issue in selectedcomponentts ,feat
4043,devtools only show console reference for the currently selected element to reduce noise ,feat
4044,devtools type node properly simplify logic in selectcomponentts ,refactor
4045,devtools fix test and leave todo related to possible typing refactor ,fix
4046,devtools apply style to console reference key displayed on node ,feat
4047,devtools show the console reference key on each selected element ,feat
4048,devtools catch selection edge case for selecting the same node and selecting a node already in the array ,fix
4049,devtools implement component selection functionality for ng ng similarly to how chrome devtools doe with html element ,feat
4050,devtools enable nounusedvariable lint check with warning severity ,build
4051,docsinfra change applistitem to appitemlist the applistitem component sound like it is used for a single item however it render a list of item there were also several change in the documentation where it wa becoming confusing if the applistitem is using a single item or multiple item this commit fix this issue it renames the component and it respective property to make sure that the intention is very clear close pr close ,fix
4052,localize allow icu expansion case to start with any character except previously an expansion case could only start with an alpha numeric character this commit fix this by allowing an expansion case to start with any character except the icu spec is pretty vague use a select argument to select submessages via a fixed set of keywords it doe not specify what can be a keyword but from looking at the surrounding syntax it appears that it can indeed be any string that doe not contain a character close pr close ,fix
4053,devinfra change circular deps positional params to camelcase change the positional params for the circular deps tooling to use camelcase a it requires being defined in camelcase while in strict mode additionally remove the version call a the boolean arguement doe not exist in current version and throw error on execution pr close ,fix
4054,devinfra prep tscirculardeps to load via nodemodules to run tscirculardeps via installed nodemodules we needed to set the hashbang of the script to be a node environment and discover the project directory based on where the script is run rather than the script file location pr close ,fix
4055,element edge support web component pr close ,docs
4056,core workaround terser inlining bug this variable name change work around which wa causing the jit production test to fail in the angular cli repository pr close ,fix
4057,devtools open expansion panel by default apply styling to expansion header ,feat
4058,devtools replace label array with set because sethas is much faster than arrayincludes ,refactor
4059,devtools type proppointer and drag event properly ,refactor
4060,devtools clean up directive property resolver method ,refactor
4061,devtools pas property update to the correct data source ,fix
4062,devtools remove old unused method from property tab body client event subscriber and directive property resolver ,refactor
4063,devtools implement material expansion panel with drag functionality for each property tree ,feat
4064,devtools pas each datasource through to it own material tree component ,feat
4065,devtools create seperate property data source for inputsoutputsstate ,feat
4066,devtools implement inputoutputstate preview functionality with the reworked property explorer ,feat
4067,devtools organize property explorer component ,refactor
4068,devtools pas inputoutput data through from application to devtools ui ,feat
4069,devtools update dependency jasminespecreporter to v ,build
4070,devtools added more padding to treegraph ,fix
4071,devtools type safe serialization ,refactor
4072,devtools prevent race condition between getting nested prop and refresh ,fix
4073,devtools do not expand html comment and preserve state for selected node ,fix
4074,devtools flicker property when update selected node fix rangleangulardevtools the pr includes few change fix a race condition between two competing async call simplifies the message bus now we have one method for getting the component tree instead of one for getting the component tree and another for getting property similarly to graphql we send a query for exactly what we need fix the way we update property in the ui once we receive new item ,fix
4075,devtools update dependency prettier to v ,build
4076,devtools update dependency tsnode to ,build
4077,devtools making small frame clickable ,feat
4078,devtools update angularframework ,build
4079,devtools proper typing in shellchrome for strictnullchecks ,fix
4080,devtools update angularcli ,build
4081,docsinfra upgrade cli command doc source to fddba updating angularmaster from clibuildsmaster relevant change in commit range modified helpupdatejson pr close ,build
4082,zonejs typo on zonemd file and fix on code example during reading the documentation i found some code example that were refering to the class property via method but without specifying the context this the oninvoke hook wa duplicated a minor typo on zone and execution context section a minor typo on zone and async lifecycle hook section pr close ,docs
4083,docsinfra include correct dependency in stackblitz example previously all stackblitz example included the default dependency for clitype project however different example type may have different packagejson file with different dependency for example the boilerplate packagejson for element example includes an extra dependency on angularelements this commit change stackblitzbuilder to use the dependency that correspond to each example type note manually verified the change jira issue fw pr close ,fix
4084,docsinfra clean up stackblitzbuilderbuilderjs script remove unused dependency change var to constlet change regular function a callback to arrow function remove unnecessary intermediate variable switch from custom existssync implementation to builtin fsexistssync pr close ,refactor
4085,compiler remove whitespace in span and caused a conflict in test after they both got merged to master this pr fix the failed test pr close ,test
4086,devtools enable strictnullchecks rangleangulardevtools ,build
4087,compiler propagate value span of expressionbinding to parsedproperty this commit propagates the correct value span in an expressionbinding of a microsyntax expression to parsedproperty which in turn porpagates the span to the template asts both ve and ivy pr close ,feat
4088,docsinfra fix image name in example close pr close ,fix
4089,devinfra create commitmessage validation scripttooling pr close ,feat
4090,benchpress delete broken code pr close ,refactor
4091,benchpress create componentbenchmark macro create componentbenchmark macro change classbindings benchmark to use componentbenchmark pr close ,feat
4092,compiler record correct end of expression this commit fix a bug with the expression parser wherein the end index of an expression node wa recorded a the start index of the next token not the end index of the current token close close pr close ,fix
4093,core add ispromise generic this commit add generic to ispromise function to help with type inference pr close ,feat
4094,devtools update dependency typeschrome to ,build
4095,devtools update dependency tsnode to ,build
4096,devtools adding bar chart for timeline ,feat
4097,devtools update angularframework ,build
4098,devtools verify that the app can select element with the same name ,test
4099,devtools run ngcc on postinstall synchronously ,ci
4100,devtools prepend node path ,build
4101,devtools add spec for the element property resolver ,test
4102,devtools fix typing error in the spec ,test
4103,devtools proper alignment of nonexpandable prop ,fix
4104,devtools move abstraction to separate file ,refactor
4105,devtools use shared store between parent and child component ,refactor
4106,devtools use di for the messagebus instead of passing it a prop ,refactor
4107,devtools reuse prop instance in the data source ,refactor
4108,devtools do not refresh the ui unless there are update ,fix
4109,core adhere to bootstrap option for jit compiled component when using platformbrowserdynamicbootstrapmodule it is possible to set defaultencapsulation and preservewhitespaces a default configuration to influence how component are compiled when compiling component in jit with ivy these option were not taken into account this commit publishes the option to be globally available so that the lazy compilation of jit component ha access to the configured bootstrap option note that this approach doe not allow changing the option once they have been set a ivy compilation model doe not allow for multiple compilation to exist at the same time for application that bootstrap multiple module it is now required to provide the exact same bootstrap option an error is logged if incompatible bootstrap option are provided in which case the updated option will be ignored fix resolved fw pr close ,fix
4110,ngcc do not crash on overlapping entrypoints when two entrypoints overlap ngcc may attempt to process some file twice previously when this occured ngcc would just exit with an error preventing any other entrypoints from being processed this commit change ngcc so that if erroronfailedentrypoint is false it will simply log an error and continue to process entrypoints this is useful when ngcc is processing the entire nodemodules folder and there are some invalid entrypoints that the project doesnt actually use pr close ,fix
4111,ngcc do not crash on entrypoint that fails to compile previously when an entrypoint contained code that caused it compilation to fail ngcc would exit in the middle of processing possibly leaving other entrypoints in a corrupt state this change add a new erroronfailedentrypoint option to mainngcc that specifies whether ngcc should exit immediately or log an error and continue processing other entrypoints the default is false so that ngcc will not error but continue processing a much a possible this is useful in postinstall hook and async cli integration where we do not have a much control over which entrypoints should be processed the option is forced to true if the targetentrypointpath is provided such a the sync integration with the cli since in that case it is targeting an entrypoint that will actually be used in the current project so we do want ngcc to exit with an error at that point pr close ,fix
4112,ngcc expose the taskdependencies mapping on basetaskqueue later when we implement the ability to continue processing when task have failed to compile we will also need to avoid processing task that depend upon the failed task this refactoring expose this list of dependent task in a way that can be used to skip processing of task that depend upon a failed task it also change the blocking model of the parallel mode of operation so that nontypings task are now blocked on their corresponding typing task previously the nontypings task could be triggered to run in parallel to the typing task since they do not have a hard dependency on each other but this made it difficult to skip task correctly if the typing task failed since it wa possible that a nontypings task wa already in flight when the typing task failed the result of this is a small potential degradation of performance in async parallel processing mode in the rare case that there were not enough unblocked task to make use of all the available worker pr close ,refactor
4113,ngcc abstract ontaskcompleted out of executor moving the definition of the ontaskcompleted callback into mainngcc allows it to be configured based on option passed in there more easily this will be the case when we want to configure whether to log or throw an error for task that failed to be processed successfully this commit also creates two new folder and move the code around a bit to make it easier to navigate the code§ executiontasks specific helper such a task completion handler executiontasksqueues the taskqueue implementation and helper pr close ,refactor
4114,ngcc add message text to task outcome this set up the task execution to be able to report failed compiles pr close ,refactor
4115,devtools adding piechart for profiler ,feat
4116,devtools adding ngxcharts dependency ,build
4117,devtools adding control padding and bold title ,style
4118,devtools fixing title style ,style
4119,devtools setting total time text to bold ,style
4120,upgrade remove outdatednonapplicable aot section from upgrade guide the aot compilation section of the ngupgrade guide wa outdatednonapplicable this commit hide the section to avoid confusion fixing the section and reintroducing it is being tracked in pr close ,docs
4121,docsinfra clean up dependency and npm script in systemjs doc example previously the packagejson file added a boilerplate to doc example project of type systemjs were incorrectoutdated they contained unused dependency and npm script and omitted used dependency this is not a big issue because these example are not offered a live stackblitz example or downloadable zip archive but having incorrect packagejson file is confusing and make it more complicated to update these example this commit update the packagejson template for the systemjs doc example and other configuration file to include used dependency and remove unused one it also remove unused npm script pr close ,build
4122,docsinfra update project structure to cli dependency update dependency also disable aot test for systemjstype example in ivy mode because our current setup doe not work with v see for detail fix fix pr close ,build
4123,docsinfra update project structure to cli angularjson update angularjson pr close ,build
4124,docsinfra update project structure to cli tsconfigjson update tsconfigjson also all make necessary change to ensure the example apps can be successfully built with the new stricter typechecking option pr close ,build
4125,docsinfra update project structure to cli tslintjson update tslintjson pr close ,build
4126,docsinfra update project structure to cli faviconico update faviconico pr close ,build
4127,docsinfra update project structure to cli gitignore protractorconfjs update configs gitignore protractorconfjs pr close ,build
4128,docsinfra update project structure to cli indexhtml update indexhtml mostly remove empty line pr close ,build
4129,docsinfra update project structure to cli polyfillsts update polyfillsts import zoneflagsts import zoneflags pr close ,build
4130,docsinfra update project structure to cli testts update testts pr close ,build
4131,docsinfra update project structure to cli title in a h tag make test description le implementation specific pr close ,build
4132,docsinfra update project structure to cli fixturedebugelementcomponentinstance fixturedebugelementcomponentinstance fixturecomponentinstance pr close ,build
4133,docsinfra update project structure to cli apppots update apppots pr close ,build
4134,docsinfra avoid karma error when loading script from codeangularjsorg in the example apps used in the ngupgrade guide the angularjs file are loaded in indexhtml from latest browser prevent loading the script from a page running on localhost due to cors access to script at from origin ha been blocked by cors policy no accesscontrolalloworigin header is present on the requested resource note loading the file from codeangularjsorg is not mentioned in the guide therefore it is not needed to mention this config change there pr close ,build
4135,docsinfra remove obsolete content from exampleconfigjson file the build and run property in exampleconfigjson are only used in example project of type systemjs in clitype project build and run are ignored pr close ,build
4136,docsinfra remove obsolete content from exampleconfigjson in setup example the unittesting property in exampleconfigjson is a remnant of the setup before aio wa moved into the angularangular repo and ha no effect any more pr close ,build
4137,docsinfra remove unused ngmodulefaq and visualstudio example pr close ,build
4138,docsinfra remove unused testhtml file from testing example this file wa from back when the testing example wa not based on the angular cli and is not used any more pr close ,build
4139,docsinfra remove unused jsconfigjson file pr close ,build
4140,docsinfra use the regular nonivy angular package in testdocsexamplesivy ci job the doc example test are run both with ivy turned off and on when ivy is turned on ngcc is used to convert all dependency including the angular framework package to ivy previously in order to speed thing up the testdocsexamplesivy ci job would use angular package built with ivy from distpackagesdistivyaot this however wa a deviation from what happens in realworld application this commit change the testdocsexamplesivy ci job to always use the regular angular package a published on npm and use ngcc to convert them to ivy relevant discussion pr close ,ci
4141,devtools clean up record formatter constant by removing duplicate object ,refactor
4142,devtools rerender tree on resize to keep tree within view ,feat
4143,devtools create simple unit test for webtreegraph formatter ,test
4144,devtools create mock formatter to sepearte getlabel and getvalue test from flamegraph ,refactor
4145,devtools create webtree graph formatter and pas the formatted data through to the web tree graph visualizer ,feat
4146,devtools create formatter interface move flamegraph formatting logic to class that implement interface ,refactor
4147,devtools write test for record formatter ,test
4148,devtools organize file structure of profiler component ,refactor
4149,devtools split apart visualizing view create new component for each visualizer component ,feat
4150,devtools install webtree graph library ,feat
4151,devtools make sure we dont access position of an undefined parent ,fix
4152,ngcc consistently delegate to typescript host for typing file when ngcc is compiling an entrypoint it us a reflectionhost that is specific to it format eg e e umd or commonjs during the compilation of that entrypoint however the reflector may be used to reflect into external library using their declaration file up until now this wa achieved by letting all reflectionhost class consider their parent class for reflector query thereby ending up in the typescriptreflectionhost that is a common base class for all reflector host this approach ha proven to be prone to bug a failing to call into the base class would cause incompatibility with reading from declaration file the observation can be made that there only two distinct kind of reflection host query the reflector query is about code that is part of the entrypoint that is being compiled or the reflector query is for an external library that the entrypoint depends on in which case the information is reflected from the declaration file the reflectionhost that wa chosen for the entrypoint should serve only reflector query for the first case whereas a regular typescriptreflectionhost should be used for the second case this avoids the problem where a formatspecific reflectionhost fails to handle the second case correctly a it isnt even considered for such reflector query this commit introduces a reflectionhost that delegate to the typescriptreflectionhost for ast node within declaration file otherwise delegating to the formatspecific reflectionhost fix resolve fw pr close ,fix
4153,ngcc use module format property for e bundle the format property for e bundle should be module or esesm but wa main instead the main property is appropriate for commonjs and umd bundle not for e bundle pr close ,test
4154,zonejs update zonejs release process to use googlewombot updated the doc to use the googlewombot release process pr close ,build
4155,bazel transform generated shim in ivy with tsickle currently when angular code is built with bazel and with ivy generated factory shim ngfactory file are not processed via the majority of tsickles transforms this is a subtle effect of the build infrastructure but it boil down to a tsicklehost method shouldskiptsickleprocessing for ngcwrapped build bazel angular this method is defined in the bazeltypescript aka bazel rulestypescript implementation of compilerhost the default behavior is to skip tsickle processing for file which are not present in the original srcs of the build rule in angulars case this includes all generated shim file for view engine factory this is probably desirable a theyre quite complex and theyve never been tested with tsickle ivy factory however are smaller and very straightforward and it make sense to treat them like any other output this commit adjusts two independent implementation of shouldskiptsickleprocessing to enable transformation of ivy shim in angularbazel aka ngcwrapped the upstream bazeltypescript compilerhost is patched to treat ngfactory file the same a their original source file with respect to tsickle processing it is currently not possible to test this change a we dont have any test that inspects tsickle output with bazel it will be extensively tested in g in ngc angulars own implementation is adjusted to allow for the processing of shim when compiling with ivy this enables a unit test to be written to validate the correct behavior of tsickle when given a host thats appropriately configured to process factory shim for ngtscasaplugin a similar fix will need to be submitted upstream in tscwrapped pr close pr close ,feat
4156,devinfra create common config file loading util create a common config file loading utility function and the necessary util directory this util directory can provide common utility function for usage inside of the devinfra package pr close ,feat
4157,languageservice improve noncallable error message this commit improves the context of a noncallable function error message by providing the affected call target and it noncallable type pr close ,feat
4158,devtools update angularframework ,build
4159,devtools dont leak flat and indexed node ,fix
4160,core misc refactoring to support upcoming change to improve synthetic host binding this commit performs a few update to internal function that would be required in upcoming change to support synthetic host binding in directive the elementpropertyinternal function wa refactored to accept renderer a an argument prior to that there wa a function that load the renderer in some specific way for animation binding elementpropertyinternal elementattributeinternal and listenerinternal function were updated to have a fixed set of argument for better performance elementpropertyinternal and elementattributeinternal function were updated to take tnode a an argument instead of passing node index that wa used to retrieve tnode internally in some case we already have tnode available or we can retrieve it from the state the refactoring wa triggered by the need to pas different renderers to the elementpropertyinternal to support synthetic host binding in directive see this comment for additional context pr close ,refactor
4161,compiler propagate source span and value span to variable ast this commit propagates the sourcespan and valuespan of a variablebinding in a microsyntax expression to parsedvariable and subsequently to view engine variable ast and ivy variable ast note that this commit doe not propagate the keyspan because it involves significant change to the template ast pr close ,feat
4162,compiler do not recurse to find static symbol of same module to create the symbol of a module the static symbol resolver first get all the symbol loaded in the module by an export statement for export from modulelike statement all symbol from module must be loaded in case where the exporting module is actually the same module that the export statement is in this cause an unbounded recursive resolution of the same module export of the same module are not needed a their symbol will be resolved when the symbol in the module metadata metadata key is explored this commit resolve the unbounded recursion by loading exporting module only if they differ from the module currently being resolved close pr close ,fix
4163,compiler support directive input with interpolation on ngtemplates prior to this commit ivy compiler didnt handle directive input with interpolation located on ngtemplate element eg ngtemplate dir field that wa the case for regular input a well a input that should be processed via in subsystem eg ngtemplate indir dirhello name this commit add support for such expression for explicit ngtemplates a well a a number of test to confirm the behavior fix pr close ,fix
4164,zonejs zonejs patch rxjs should check null for unsubscribe close zonejs patch rxjs internal subscribe and unsubscribe method but zonejs doesnt do null check so in some operator such a retrywhen the unsubscribe will be set to null and will cause zone patched version throw error in this pr if subscribe and unsubscribe is null will not do the patch pr close ,fix
4165,zonejs make eventtarget method optional in zonejs extension api zonejs added removealllisteners and eventlisteners method in eventtargetprototype but those method only exists when user import zonejs and also enables eventtarget monkey patching if user doe not import zonejs and us noop zone when bootstrapping angular app or disable monkey patching of eventtarget patch by defining zonedisableeventtarget true then removealllisteners and eventlisteners method will not be present pr close ,fix
4166,zonejs add a zone config to allow user disable wrapping uncaught promise rejection close by default zonejs wrap uncaught promise error and wrap it to a new error object with some additional information includes the value of the error and the stack trace consider the following example zonecurrent fork name promiseerror onhandleerror delegate zonedelegate current zone target zone error any boolean consolelogcaught an error error delegatehandleerrortarget error return false run const originalerror new errortesterror promiserejectoriginalerror the promiseerror zone catch a wrapped error object whose rejection property equal to the original error and the message will be uncaught in promise testerror you can disable this wrapping behavior by defining a global configuraiton zonesymboldisablewrappinguncaughtpromiserejection true before importing zonejs pr close ,feat
4167,zonejs monkey patch messageportprototype onproperties monkey patch messageportprototypeonmessage and messageportprototypeonmessageerror to make these property valuecallback function run in the zone when these value are set pr close ,feat
4168,devtools refresh reinitialize on navigation ,fix
4169,devtools update angularframework ,build
4170,core update transplanted view benchpress test to support ve remove us of render internal detectchanges call to allow test to be run against ve code a well a ivy pr close ,test
4171,devtools update dependency uuid to v ,build
4172,docsinfra remove routerlink from topbar close pr close ,fix
4173,ngcc store the position of segmentmarkers to avoid unnecessary computation previously calculation related to the position of and difference between segmentmarkers required extensive computation based around the line line start position and column of each segment pr close ,perf
4174,ngcc link segment marker for faster traversal the merging algorithm need to find for a given segment what the next segment in the source file is this change modifies the generatedsegment property in the mapping so that they have a link directly to the following segment pr close ,perf
4175,ngcc use line start position for computing offset in sourcemap flattening by computing and caching the start of each line rather than the length of each line we can save a lot of duplicated computation in the segmentdiff and offsetsegment function pr close ,perf
4176,ngcc handle multiple original source when flattening sourcemaps previously the list of original segment that wa searched for incoming mapping did not differentiate between different original source file now there is a separate array of segment to search for each of the original source file pr close ,fix
4177,ngcc use binary search when flattening mapping the angularcore package ha a large number of source file and mapping which exposed performance issue in the new sourcemap flattening algorithm this change us a binary search rather than linear when finding matching mapping to merge initial measurement indicate that this reduces processing time for angularcore by about pr close ,perf
4178,ngcc remove unused filesystem variable pr close ,test
4179,core verify parsed icu expression at runtime before executing it prior to this commit in runtime logic relied on the assumption that provided translation is syntactically correct specifically around icu syntax however provided translation might contain some error that lead to parsing failure specifically when translation contains curly brace runtime in logic try to parse them a an icu expression and fails this commit validates icu parsing result making sure it wa parsed correctly and throw an error if parsing error happens the error that is thrown also contains translated message text for easier debugging note the check and the error message introduced in this pr is a safeguard against the problem that led to unhandled in runtime logic crash so the framework behavior remains the same we just improve the error message and it should be safe to merge to the patch branch resolve pr close ,fix
4180,devtools update dependency typeschrome to ,build
4181,devtools update angularcli ,build
4182,devtools implement reload message bus event that call windowlocationreload inside of the dev tool ,feat
4183,devtools get ng debug object whenever it is required through a function to prevent an issue where it would be set to undefined on page refresh ,fix
4184,devtools properly emit shutdown event on cleanup and call change detector ref to update ui into loading state ,fix
4185,devtools implement force refresh when the user press the refresh button ,feat
4186,devtools add comment and remove useless npm script ,refactor
4187,devtools increase ng serve timeout ,ci
4188,devtools show report for replaced node in the same tile and get lifecycle hook name ,fix
4189,devtools show element nested in app element ,fix
4190,devtools show more meaningful warning message to help u debug case ,refactor
4191,devtools remove unused spec ,refactor
4192,devtools get the lifecycle hook name using a more robust approach ,fix
4193,devtools extract root component traversing the dom ,refactor
4194,devtools add dialog to the demo app ,refactor
4195,devtools get the lview from the instance context ,fix
4196,core add benchpress test for transplanted view change detection add a performance benchmark for transplanted view those which are declared in one component and inserted into another pr close ,test
4197,devtools update dependency tsnode to ,build
4198,devtools update dependency cypress to v ,build
4199,devtools give breadcrumb container a zindex higher than to prevent an issue where scrolling on the xaxis may inadvertently scroll the property view tab ,fix
4200,ngcc remove unused lockfilewithsignalhandlers pr close ,refactor
4201,devtools update angularframework ,build
4202,devtools update angularcomponents to ,build
4203,devtools fix edge case where only one item is profiled and where no item are profiled ,fix
4204,devtools update angularframework ,build
4205,zonejs fix zonepatchrxjs bundle to refer to rxjs rather than include it close before zonejs the rollup config would refer to rxjs when bundling zonepatchrxjsjs from zonejs we started to use bazel to build zonepatchrxjsjs and the configuration wa wrongly defined to include a copy of rxjs in the zonepatchrxjsjs pr close ,fix
4206,ngcc support invalidating the entrypoint manifest in some scenario it is useful for the developer to indicate to ngcc that it should not use the entrypoint manifest file and instead write a new one in the ngcc command line tool this option is set by specfying invalidateentrypointmanifest pr close ,feat
4207,ngcc use the entrypointmanifest in directorywalkerentrypointfinder the directorywalkerentrypointfinder ha to traverse the entire nodemodules library everytime it executes in order to identify the entrypoints that need to be processed this is very time consuming several second for big project on window this commit change the directorywalkerentrypointfinder to use the entrypointmanifest to store the path to entrypoints that were found when doing this initial nodemodules traversal in a file to be reused for subsequent call this dramatically speed up ngcc processing when it ha been run once already pr close ,perf
4208,ngcc add entrypoint manifest functionality the new entrypointmanifest class can read and write a manifest file that contains all the path to the entrypoints that have been found in a nodemodules folder this can be used to speed up finding entrypoints in subsequent run the manifest file store the ngcc version and hash of the package lockfile and project config since if these change the manifest will need to be recomputed pr close ,refactor
4209,ngcc show timing in th of a second pr close ,refactor
4210,ngcc expose a hash of the project configuration this will be used in the entrypoint manifest since a change to configuration might change the entrypoints that are found pr close ,refactor
4211,devtools fix renovate package manager ,build
4212,devtools add renovate config ,build
4213,devtools use latest angular build artifact ,build
4214,devtools add renovatejson ,chore
4215,devtools compatibility issue with google ,fix
4216,devtools rename getcomponentname to getdirectivename ,refactor
4217,devtools name of the tile in the profiler graph ,fix
4218,docsinfra add boilerplate path and project type for element example project fix pr close ,fix
4219,languageservice infer implicit value for ngif template context today the language service infers the type of variable bound to the ngif template context member of an ngif directive but doe not do the same for the the implicit context member this commit add support for that fix pr close ,fix
4220,compiler add sourcespan and keyspan to templatebinding this commit add finegrained text span to templatebinding for microsyntax expression source span by convention source span refers to the entire span of the binding including it key and value key span span of the binding key without any whitespace or keywords like let the value span is captured by the value expression ast this is part of a series of pr to fix source span mapping in microsyntax expression for more info see the doc pr close ,feat
4221,bazel update several package for better window support pr close ,fix
4222,bazel prod server doesnt serve file in window in window runfiles are not always available thus we need to use the real location using rlocation related to pr close ,fix
4223,devinfra sort contributor alphabetically in getdatats script the contributingstatsgetdatats script which is used to retrieve orgwide contribution data returned the contributor in retrieval order this commit ensures contributor are ordered alphabetically which make it easier to find the stats for a specific contributor pr close ,fix
4224,docsinfra merge apibody style block this commit merges the two apibody style block removing duplicate style and reordering subblocks to group relevant style together it should not affect styling pr close ,refactor
4225,docsinfra remove duplicate githublinks style pr close ,refactor
4226,docsinfra make api member name bold return api member name bold font weight sc formatting cleanup close pr close ,fix
4227,devinfra do not run the lockclosed github action on fork previously the lockclosed github action which run daily and lock closed inactive issue wa run on each fork of the angularangular repo while the action is a noop on fork it make still fail from time to time generating a confusing notification email for the fork owner this commit configures the lockclosed action to only run on the main angularangular repository using the method suggested here pr close ,fix
4228,devinfra handle async failure in getdatats wrap the await block in a trycatch so not to have unhandled promise rejection pr close ,build
4229,compilercli typescript peer dependency range this commit introduced typescript support however it is not reflected in the peerdependencies section of the compilercli package pr close ,fix
4230,bazel update typescript peer dependency range cfdabdcaabdabdf added support for typescript v since these version are now supported the typescript peer dependency range in angularbazel need to be updated to not report unsatisfied peer dependency pr close ,fix
4231,bazel remove hacky fake angularbazel npm package under toolsnpmangularbazel pr close ,build
4232,ngcc show helpful error when providing an invalid option currently when running the ngcc binary directly and provide an invalid option ngcc will not error out and the user might have a hard time telling why ngcc is behaving not a expected with this change we now output an actionable error yarn ngcc unknownoption option version show version number boolean s source a path relative to the working directory of the nodemodules folder to process default nodemodules p property an array of name of property in packagejson to compile eg module or e each of these property should hold the path to a bundleformat if provided only the specified property are considered for processing if not provided all the supported format property eg fesm fesm e esm esm main module in the packagejson are considered array t target a relative path from the source path to a single entrypoint to process plus it dependency firstonly if specified then only the first matching packagejson property will be compiled boolean createivyentrypoints if specified then new ivyngcc entrypoints will be added to packagejson rather than modifying the one inplace for this to work you need to have custom resolution set up eg in webpack to look for these new entrypoints the angular cli doe this already so it is safe to use this option if the project is being built via the cli boolean legacymessageids render localize message with legacy format id the default value is true only set this to false if you do not want legacy message id to be rendered for example if you are not using legacy message id in your translation file and are not doing compiletime inlining of translation in which case the extra message id would add unwanted size to the final source bundle it is safe to leave this set to true if you are doing compiletime inlining because the extra legacy message id will all be stripped during translation boolean default true async whether to compile asynchronously this is enabled by default a it allows compilation to be parallelized disabling asynchronous compilation may be useful for debugging boolean default true l loglevel the lowest severity logging message that should be output choice debug info warn error invalidateentrypointmanifest if this is set then ngcc will not read an entrypoint manifest file from disk instead it will walking the directory tree a normal looking for entrypoints and then write a new manifest file boolean default false help show help boolean unknown argument unknownoption unknownoption pr close ,fix
4233,localize show helpful error when providing an invalid cli option pr close ,fix
4234,devtools add support for angular element currently we only show which component are angular element we dont visualize them in their position in the component tree but only indicate with different coloring in the profiler we should also somehow show which tile correspond to element we can discus this further in rangleangulardevtools ,feat
4235,devinfra update triage and contributing doc for devinfra pr close ,docs
4236,core take advantage of assert function for ngdevmode asserts a of typescript typescript support assert function this change add assert type to our assert function we cant fully take advantage of this due to assert function do not constraint type when they are guarded by a truthy expression pr close ,refactor
4237,core dont reinvoke pure pipe that throw and argument are the same pure pipe are not invoked again until their argument are modified the same rule should apply to pure pipe that throw an exception this fix ensures that a pure pipe is not reinvoked if it throw an exception and argument are not changed pr close ,fix
4238,devtools integration test for node selection logic after change detection ,test
4239,devtools write unit test for arrayequals function ,test
4240,devtools create sharedutils project library to house function and class that can be used by any other project ,feat
4241,devtools use arrayequals instead of converting to string and checking equality in expandparents method ,refactor
4242,devtools reselect node if it change position after change detection ,fix
4243,devtools do not index on mutation of inspector ,perf
4244,compiler process import first and declaration second while calculating scope prior to this commit while calculating the scope for a module ivy compiler processed declaration field first and import after that that result in a couple issue for pipe with the same name and present in declaration and in an imported module pipe from imported module wa selected in view engine the logic is opposite pipe from declaration field receive higher priority for directive with the same selector and present in declaration and in an imported module we first invoked the logic of a directive from declaration field and after that imported directive logic in view engine it wa the opposite and the logic of a directive from the declaration field wa invoked last in order to align ivy and view engine behavior this commit update the logic in which we populate module scope we first process all import and after that handle declaration field a a result in ivy both usecases listed above work similar to view engine resolve pr close ,fix
4245,compiler add a public api guard for the public compiler option this commit add a public api test which guard against unintentional change to the accepted key in angularcompileroptions pr close ,test
4246,compiler split coreapits into multiple file this commit split the ngtsc core package api entrypoint which previously wa a single apits file into an api directory with multiple file this is done to isolate the part of the api definition pertaining to the publicfacing angularcompileroptions field in tsconfigjson into a single file which will enable a public api guard test to be added in a future commit pr close ,refactor
4247,platformbrowser add missing peerdependency on angularanimations angularplatformbrowseranimations ha a dependency on angularanimations however this is not listed in peerdependencies with this change we add this package a an optional peerdependency a it only required when using the angularplatformbrowseranimations entrypoint fix pr close ,fix
4248,router use pageyoffset in testing when scrolly is not available ie and use the nonstandard name pageyoffset instead of scrolly pr close ,test
4249,compiler optionaloperator consumeoptionaloperator pr close ,refactor
4250,languageservice resolve the variable from the template context first pr close ,fix
4251,languageservice fix calculation of pipe span this commit accomplishes two task fix the span of queried pipe to only be applied on pipe name by consequence fix how pipe are located in argument previously pipe with argument could not be found because the span of a pipe us a relative span while the template position is absolute the screenshots attached to the pr for this commit demonstrate the change close pr close ,fix
4252,devinfra add devinfra to the commit message scope add devinfra to the commit message scope also set the scope to be ignored in changelogs pr close ,feat
4253,devtools add tslint typing rule and fix tslint warning ,refactor
4254,devtools distinguish between item with and without child the big wa caused by the diffing logic we werent updating the routeroutlet because we were getting the same instance although that is true there a special case when the same instance now ha child which should cause rerender of the item it not expandable ,fix
4255,devtools remove obsolete test and fix existing ee test ,refactor
4256,devtools align with latest change and keep consistent frame tree ,fix
4257,devtools dont recompute directive forest frequently ,refactor
4258,devtools use different algorithm for observing the tree to align with the internal traversal ,refactor
4259,devtools use internal ivy data structure for extracting component tree ,refactor
4260,bazel transform generated shim in ivy with tsickle currently when angular code is built with bazel and with ivy generated factory shim ngfactory file are not processed via the majority of tsickles transforms this is a subtle effect of the build infrastructure but it boil down to a tsicklehost method shouldskiptsickleprocessing for ngcwrapped build bazel angular this method is defined in the bazeltypescript aka bazel rulestypescript implementation of compilerhost the default behavior is to skip tsickle processing for file which are not present in the original srcs of the build rule in angulars case this includes all generated shim file for view engine factory this is probably desirable a theyre quite complex and theyve never been tested with tsickle ivy factory however are smaller and very straightforward and it make sense to treat them like any other output this commit adjusts two independent implementation of shouldskiptsickleprocessing to enable transformation of ivy shim in angularbazel aka ngcwrapped the upstream bazeltypescript compilerhost is patched to treat ngfactory file the same a their original source file with respect to tsickle processing it is currently not possible to test this change a we dont have any test that inspects tsickle output with bazel it will be extensively tested in g in ngc angulars own implementation is adjusted to allow for the processing of shim when compiling with ivy this enables a unit test to be written to validate the correct behavior of tsickle when given a host thats appropriately configured to process factory shim for ngtscasaplugin a similar fix will need to be submitted upstream in tscwrapped pr close ,feat
4261,localize merge translation from all xliff file element xliff translation file can contain multiple file element each of which contains translation in viewengine all these translation are merged into a single translation bundle previously in ivy only the translation from the last file element were being loaded now all the translation from each file are merged into a single translation bundle fix pr close ,fix
4262,benchpress remove benchmarksexternal from pullapproveyml pr close ,refactor
4263,benchpress delete unused code pr close ,refactor
4264,compiler type templateast value a astwithsource templateast value are currently typed a the base class ast but they are actually constructed with astwithsource type them a such because astwithsource give more information about the consumed expression ast to downstream customer namely the expression ast source unblocks pr close ,feat
4265,localize improve matching and parsing of xtb translation file this commit improves the canparse method to check that the file is valid xml and ha the expected root node previously it wa relying upon a regular expression to do this pr close ,fix
4266,localize improve matching and parsing of xliff translation file previously the xlifftranslationparser only matched file that had a narrow choice of extension eg xlf and also relied upon a regular expression match of an optional xml namespace directive this commit relaxes the requirement on both of these and instead relies upon parsing the file into xml and identifying an element of the form xliff version which is the minimal requirement for such file pr close ,fix
4267,localize improve matching and parsing of xliff translation file previously the xlifftranslationparser only matched file that had a narrow choice of extension eg xlf and also relied upon a regular expression match of an optional xml namespace directive this commit relaxes the requirement on both of these and instead relies upon parsing the file into xml and identifying an element of the form xliff version which is the minimal requirement for such file pr close ,fix
4268,localize allow hint from canparse to parse this enables complex work to be done in translationparsercanparse without duplicating the work in translationparserparse pr close ,refactor
4269,localize add support for translationparser diagnostics this modifies the internal but shared with cli api for loadingparsing translation file now the parser will return a new diagnostics object along with any translation and locale extracted from the file it is up to the caller to decide what to do about this if there are error it is suggested that an error is thrown which is what the translationloader class doe pr close ,refactor
4270,zonejs tickoptionss processnewmacrotaskssynchronously should default to true when flag omitted calling tick null default processnewmacrotaskssynchronously flag to true however calling tick null default processnewmacrotaskssynchronously to undefined this is undesirable behavior since unless the flag is set explicitly it should still default to true pr close ,fix
4271,bazel do not use manifest path for generated import within compilation unit currently the ngmodule rule incorrectly us manifest path for generated import from the angular compiler this break packaging a prodmode output ie esnext is copied in various target e and e to the npm package output eg import are generated like nodemodulesmypkgesimportspublicapijs t import a i from angularpackagesbazeltestngpackageexampleimportssecond while it should be actually t import a i from second the import can and should be relative so that the file are selfcontained and do not rely on custom module resolution pr close ,fix
4272,docsinfra use local version of zonejs when testing against local package in some case we want to test the aio app or doc example against the locally built angular package for example to ensure that the change in a commit do not introduce a breaking change in order to achieve this we have the ngpackagesinstaller script that handle updating a project packagejson file to use the locally built angular package and appropriate version for their devpeerdependencies previously ngpackagesinstaller would only consider the locally built angular package from distpackagesdist however given that zonejs is now part of the angularangular repo it make sense to also use the locally built zonejs package from distzonejsdist otherwise the test might fail for commits that update both the angular package and related doc example and the zonejs package an example of such a simultaneous change that would have broken test is this commit update the script to install the locally built zonejs package in addition to the angular one the commit ensures that the zonejs package will always be available alongside the angular package ie that the zonejs package will be built by the same script that build the angular package and that the distzonejsdist directory will be cached on ci note this problem wa discovered while enabling doc example unit test in pr close ,build
4273,zonejs update coments of zone configuration api definition pr close ,docs
4274,zonejs update comment and chapter format of ngzone doc pr close ,docs
4275,core undecoratedclasseswithdi migration should handle library generated with cli version past v the option for flatmoduleid and flatmoduleoutfile had been removed in the cli from generated library with this ha been done because ngpackagr which is used to build the library automatically set these option inmemory when it compiles the library no migration ha been created for this because there wa no actual need to get rid of this keeping the option in the library tsconfig doe not cause any problem unless the tsconfig is used outside of ngpackagr this wa not anticipated but is now commonly done in ng update migration the ng update migration try to create an instance of the angularcompilerprogram by simply parsing the tsconfig the migration make the valid assumption that tsconfig file are not incompleteinvalid they definitely are in the file system though it just work for library because ngpackagr inmemory completes the invalid tsconfig file so that they can be passed to the angularcompilercli we cant have this logic in the ng update migration because it outofscope for individual migration to distinguish between library and application also it would be outofscope to parse the ngpackagr configuration and handle the tsconfig inmemory completion a a workaround though we can remove the flatmodule bundle option inmemory when creating the compiler program this is acceptable since we dont emit the program and the flat module bundle are not needed fix pr close ,fix
4276,compiler rename parseastoptionalcharacter templatebindingexpression this commit renames parseastoptionalcharacter consumeoptionalcharacter templatebindingexpression value pr close ,refactor
4277,languageservice resolve the real path for symlink when aot resolve the module name it will preserve the path of the symlink but the tsserver will return the real path for symlink pr close ,fix
4278,zonejs set rollupbundle to use the silent flag in karma test pr close ,test
4279,ngcc a new lockfile implementation that us a childprocess this version of lockfile creates an unlocker childprocess that monitor the main ngcc process and deletes the lock file if it exit unexpectedly this resolve the issue where the main process could not be killed by pressing ctrlc at the terminal fix pr close ,fix
4280,ngcc move locking code into it own folder pr close ,refactor
4281,ngcc separate asyncsynclocker and lockfile the previous implementation mixed up the management of locking a piece of code both sync and async with the management of writing and removing the lockfile that is used a the flag for which process ha locked the code this change split these two concept up apart from avoiding the awkward base class it allows the lockfile implementation to be replaced cleanly pr close ,refactor
4282,ngcc expose logging level on the logger pr close ,refactor
4283,compiler break up parsetemplatebindings for microsyntax this commit is purely a refactoring of the logic in parsetemplatebindings method for parsing the microsyntax expression this is done to enable the introduction of keyspan and valuespan in subsequent pr for a detailed explanation of this work and the subsequent work item please see pr close ,refactor
4284,docsinfra in page some text is not visible in pr color were not properly set if we type wrong url in the browser and we are directed to the page there some text is set to white color which a not visible set it to dark gray for visibility pr close ,fix
4285,ngcc reduce directory traversing this reduces the time that findentrypoints take from m to m by reducing the file operation done reference pr close ,perf
4286,devtools check if nodechildren is undefined before trying to convert it into an array ex node is a text node ,fix
4287,devtools index new node before firing callback to fix issue where some callback rely on the newly indexed node ,fix
4288,router state data missing in routerlink fix pr close ,fix
4289,devtools adding cypress test for search in component tree ,test
4290,devtools use material dialog instead of browser confirm when profiler version is incorrect ,refactor
4291,devtools add versioning to importexport functionality ,feat
4292,devtools implement importexport json functionality for profiler ,feat
4293,devtools fix bug in component tree observer that prevented nested added node from having their id set properly ,fix
4294,docsinfra ensure that cli option are included in search pr close ,build
4295,docsinfra format file pr close ,style
4296,compilercli suppress extrarequire error in closure compiler this is needed to support because it will add an extra require on tslib pr close ,fix
4297,docsinfra use local version of zonejs when testing against local package in some case we want to test the aio app or doc example against the locally built angular package for example to ensure that the change in a commit do not introduce a breaking change in order to achieve this we have the ngpackagesinstaller script that handle updating a project packagejson file to use the locally built angular package and appropriate version for their devpeerdependencies previously ngpackagesinstaller would only consider the locally built angular package from distpackagesdist however given that zonejs is now part of the angularangular repo it make sense to also use the locally built zonejs package from distzonejsdist otherwise the test might fail for commits that update both the angular package and related doc example and the zonejs package an example of such a simultaneous change that would have broken test is this commit update the script to install the locally built zonejs package in addition to the angular one the commit ensures that the zonejs package will always be available alongside the angular package ie that the zonejs package will be built by the same script that build the angular package and that the distzonejsdist directory will be cached on ci note this problem wa discovered while enabling doc example unit test in pr close ,build
4298,docsinfra simplify ngpackagesinstaller and speed up local package detection previously ngpackagesinstaller would only look for angular local package and do so by listing all deeply nested file in distpackagesdist and looking for packagejson file nested two level deep ie distpackagesdistpackagejson thus it would unnecessarily check a large number of file this commit change the package detection logic to instead look for a packagejson file directly inside each subdirectory of distpackagesdist which speed up the operation it also refactors the code to make it easier to look for package in other directory besides distpackagesdist this will be useful in a subsequent commit to look for and use the locally built zonejs package from distzonejsdist pr close ,refactor
4299,core log error instead of warning for unknown property and element change the ivy unknown elementproperty message from being logged with consolewarn to consoleerror this should make them a bit more visible without breaking existing apps furthermore a lot of folk filter out warning message in the dev tool console whereas error are usually still shown fix pr close ,fix
4300,zonejs set rollupbundle to use the silent flag using the silent flag prevents the spammy logging message in the bazel execution log info from bundling javascript packageszonejsdistzonerollupumdjs rollup bazeloutkfastbuildbinpackageszonejslibbrowserrolluplegacymainmjs → bazeloutkfastbuildbinpackageszonejsdistzonerollupumdjs created bazeloutkfastbuildbinpackageszonejsdistzonerollupumdjs in m pr close ,build
4301,compiler typechecking error for duplicate variable in template it an error to declare a variable twice on a specific template html div ngforlet i of item let i index div this commit introduces a template typechecking error which help to detect and diagnose this problem fix pr close ,fix
4302,core unable to ngmodulerefinjector in module constructor this is a follow up to which resolved a similar issue for componentfactoryresolver but not the root cause when a ngmoduleref is created it instantiates an injector internally which in turn resolve all of injector type this can result in a circular call that result in an error because the module is one of the injector type being resolved these change work around the issue by allowing the constructor to run before resolving the injector type fix fix pr close ,fix
4303,animation allow computestyle to work on element created in node this patch is a followup patch to cfdcfdfdececeebbecc it change the computestyle function to handle situation where non string based value are returned from windowgetcomputedstyle this situation usually ocurrs in nodebased test environment where the element or windowgetcomputedstyle is mocked out pr close ,fix
4304,docsinfra add top level folder into toplevelfolders close pr close ,fix
4305,core add micro benchmark for destroy hook invocation add a micro benchmark which excercises the logic that invokes ngondestroy hook pr close ,perf
4306,common switch http guide example to testbedinject testbedget ha been deprecated in v in favor of testbedinject in the http guide wording ha been updated to mention testbedinject instead of testbedget but the associated code snippet extracted from the example were not this commit update the http guide example to also use testbedinject fix pr close ,docs
4307,core remove side effect from ɵɵgetinheritedfactory ɵɵgetinheritedfactory is called from generated code for a component which extends another class this function is detected by closure to have a side effect and is not able to tree shake the component a a result marking it with nosideeffects tell closure it can remove this function under the relevant tree shaking condition pr close ,fix
4308,core remove side effect from ɵɵngonchangesfeature ɵɵngonchangesfeature would set nginherit which is a side effect and also not necessary this wa pulled out to module scope so the function itself can be pure since it only curry another function the call is entirely unnecessary updated the compiler to only generate a reference to this function rather than a call to it and removed the extra curry indirection pr close ,fix
4309,core add nosideeffects to ɵɵdefinecomponent this mark the function are pure and eligible to be tree shaken by closure without this initializing ngdevmode is considered a side effect which prevents this function from being tree shaken and also any component which call it pr close ,fix
4310,core add nosideeffects to makedecorator function this cause all the makedecorator function to be considered pure and to be eligible for associated tree shaking by closure pr close ,fix
4311,core update nosideeffects to return the result of the inner function this is useful for propagating return value without them being converted to a string it still provides the same guarantee to closure which will assume that the function invoked is pure and can be treeshaken accordingly pr close ,refactor
4312,languageservice modularize error message this commit performs a modularization of the language service existing diagnostic message such a modularization ha two primary advantage centralization and decoupling of error message from the code that generates them make it easy to adddeleteedit diagnostic message and allows for independent iteration of diagnostic message and diagnostic generation prepares for additional feature like annotating the location where a diagnostic is generated and enabling the configuration of which diagnostics should be reported by the language service although it would be preferable to place the diagnostics registry in an independent json file for ease of typing diagnostic type a an enum variant of tsdiagnosticcategory the registry is stored a an object part of pr close ,feat
4313,devtools rename invalidarrowevent method for dampness ,refactor
4314,devtools allow arrow key event to fire when focusing on an input ,fix
4315,core allow null undefined value in query result before this change ngivy implementation of query would throw upon encountering null undefined query result collected from an embedded view it turn out that we might have a provider that explicitly provides a null undefined value in a place of a token queried for this commit remove a check from the ngivy query implementation that wa asserting on a query result to be defined fix pr close ,fix
4316,devtools add overflowx auto to breadcrumb tab ,feat
4317,devtools remove unused enums ,refactor
4318,core treat class and classname a unrelated binding before this change class and classname were both converted into ɵɵclassmap the implication of this is that at runtime we could not differentiate between the two and a a result we treated inputclass and inputclassname a equivalent this change make class and classname distinct the implication of this is that class becomes ɵɵclassmap instruction but classname becomes ɵɵproperty instruction this mean that classname will no longer participate in styling and will overwrite the dom class value fix pr close ,fix
4319,compiler support in attribute on ngtemplate tag prior to this commit in attribute defined on ngtemplate tag were not processed by the compiler this commit add the necessary logic to handle in attribute in the same way how these attrs are processed for regular element pr close ,fix
4320,animation process shorthand margin and padding style correctly prior to this patch the margin and padding property were not detected properly by firefox due to them being shorthand property this patch ensures that both margin and padding are converted read a top right bottom left in the event that the shorthand property detection fails for autostyling in angular animation fix fw pr close ,fix
4321,ngcc only create task for nonprocessed format change the behaviour in analyzeentrypoints to only create task for nonprocessed format pr close ,perf
4322,ngcc spawn worker lazily with this change we spawn worker lazily based on the amount of work that need to be done before this change we spawned the maximum of worker possible however in some case there are le task than the max number of worker which resulted in created unnecessary worker reference pr close ,perf
4323,docsinfra add proxy to fake image in test previously when running the unit test for aio on window many s are logged for image resulting in progress log being spread over multiple line this commit fix this by adding a proxy to point the fake image to a real image within the src folder close pr close ,test
4324,bazel ngpackage rule creates incorrect umd module export the ngpackage rule currently creates incorrect umd module export if an entrypoint ha a module name with number included for example consider an entrypoint called angularcdkay the umd module name should be ngcdkay instead ngpackage currently generates an umd module export called ngcdkay this is because the logic for converting dashcase to camel case is invalid a it us starlarks title method the title method convert text to title case while we actually just want to capitalize the first letter of a dashcase segment fix angularcomponents pr close ,fix
4325,devtools type return of insertion trie method ,refactor
4326,core use multiple directive in host binding micro benchmark this commit update the host binding micro benchmark to run test with mutliple directive where each directive contains host binding the number of directive is configurable a a constant in the micro benchmark file this change is needed to have an ability to measurecompare perf in different scenario pr close ,perf
4327,core handle ngtemplate with local ref in in block this commit extends the range of tnode type that may have local ref to include tnodetypecontainer to account for ngtemplates original change in didnt include that type and a a result an error is thrown at runtime in case an in block contains an ngtemplate with local ref pr close ,fix
4328,core remove debugger statement when assert is thrown fix fix fw pr close ,fix
4329,core remove debugger statement fix pr close ,fix
4330,devtools enabling cypress to run on circleci ,ci
4331,devtools adding cypress video screenshots to git ignore ,test
4332,devtools removing cypress recording ,test
4333,ivy narrow ngif context variable in template type checker when the ngif directive is used in a template it context variable can be used to capture the bound value this is typically used together with a pipe or function call where the resulting value is captured in a context variable there two syntax form available binding to ngifcontextngif using the a syntax html span ngifuser async a userusernamespan binding to ngifcontextimplicit using the let syntax html span ngifuser async let userusernamespan because of the semantics of ngif it is known that the captured context variable is nonnullable however the template type checker would not consider them a such and still report error when strictnulltypes is enabled this commit update ngifs context guard to make the type of the context variable nonnullable avoiding the issue fix pr close ,fix
4334,compiler remove nullastvisitor and visitastchildren this commit remove the nullastvisitor and visitastchildren exported from packagescompilersrcexpressionparserastts because they contain duplicate and buggy implementation and their use case could be sufficiently covered by recursiveastvisitor if the latter implement the visit method this use case is only needed in the language service with this change any visitor that extends recursiveastvisitor could just define their own visit function and the parent class will behave correctly a bit of historical context in language service we need a way to tranverse the expression ast in a selective manner based on where the user cursor is this mean we need a filtering function to decide which node to visit and which node to not visit instead of refactoring recursiveastvisitor to support this visitastchildren wa created visitastchildren duplicate the implementation of recursiveastvisitor but introduced some bug along the way for example in visitkeyedwrite it visit obj key obj instead of obj key value moreover because of the following line visitorvisit visitorvisitast context astvisitvisitor context visitastchildren visit every node twice pr close ,refactor
4335,docsinfra fix redirect in angular version selector close pr close ,fix
4336,languageservice differentiate feature and internal infra test this commit differentiates language service feature and language service infrastructure test this is primarily to make testing of different component at the development level easier this commit continues a small effort to expand our test coverage and normalize testing structure also add test coverage to language service test we have quite a bit to go on that front slightlysmilingface pr close ,test
4337,devtools decrease width of split pane to match the rest of the application ,feat
4338,devtools add margin to tree node so that they are not stacked on each other directly ,feat
4339,devtools fix issue where last node would be hidden behind breadcrumb ,fix
4340,devtools tab stop scroll occuring at tab level ,fix
4341,devtools reorient split pane when screen width go under px ,feat
4342,ivy support dynamic query token in aot mode for view and content query the ivy compiler attempt to statically evaluate the predicate token so that string predicate containing commaseparated reference name can be split into an array of string during compilation when the predicate is a dynamic value that can not be statically interpreted at compile time the compiler would previously produce an error this behavior break a usecase where an injectiontoken is being used a query predicate a the usage of the new keyword prevents such predicate from being statically evaluated this commit change the behavior to no longer produce an error for dynamic value instead the expression is emitted a is into the generated code postponing the evaluation to happen at runtime fix resolve fw pr close ,fix
4343,core use proper configuration to compile injectable in jit prior to this change the logic that compiles injectable in jit mode used incorrect configuration that trigger a problem when changedetectorref is used a a dependency this commit update the logic to generate correct inject instruction to add the changedetectorref dependency in case it requested in injectable class pr close ,fix
4344,core adding micro benchmark for host binding this commit add micro benchmark for host binding so that we can ass the impact of change related to host binding for example pr pr close ,perf
4345,ngcc guard against a crash if sourcemap flattening fails sourcemaps in the wild could be badly formatted causing the sourcemap flattening processing to fail unexpectedly rather than causing the whole of ngcc to crash we gracefully fallback to just returning the generated sourcemap instead pr close ,refactor
4346,ngcc handle mapping outside the content when flattening sourcemaps previously when rendering flattened sourcemaps it wa assumed that no mapping would come from a line that is outside the line of the actual source content it turn out this is not a valid assumption now the code that render flattened sourcemaps will handle such mapping with the additional benefit that the rendered sourcemap will only contain mapping line up to the last mapping rather than a mapping line for every content line fix pr close ,fix
4347,ngcc handle missing source when flattening sourcemaps if a package ha a sourcemap but it doe not provide the actual content of the source then the sourcemap flattening wa crashing now we ignore such mapping that have no source since we are not able to compute the merged mapping if there is no source file fix pr close ,fix
4348,devtools adding highlighter test ,test
4349,devtools adding textsummary for code coverage ,test
4350,docsinfra add useful link if landed on page and no search result found added additional link which can help user find the thing they are looking for when there are no search result when searching or on a page note this commit increase the main bundle payload size due to the extra content of the aiosearchresults component fix pr close ,feat
4351,docsinfra increase aio viewengine payload size limit in the payload size limit for ivy build wa bumped to account for small incremental increase in recent pr the viewengine size ha also increased similarly b but it wa not updated in because it total increase wa just below the b error threshold by b this commit bump the viewengine size limit too note any investigation for the ivy size increase a a followup to will most likely also apply to viewengine since the size wa increased by the same amount pr close ,ci
4352,ngcc allow deepimport warning to be ignored this commit add a new ngcc configuration ignorabledeepimportmatchers for package this is a list of regular expression matching deep import that can be safely ignored from that package deep import that are not ignored cause a warning to be logged fw fix pr close ,fix
4353,docsinfra fix test with new topic property pr close ,test
4354,docsinfra add searchkeywords preprocessor this commit add a new preprocessor to use searchkeywords allowing the doc to use a list of custom search phrase that will be prioritized over the keywords found in the content close pr close ,feat
4355,devtools add ee testing for property editing feature ,test
4356,devtools fix issue that prevented booleans from being parsed properly ,fix
4357,devtools set a min width for the property view split tab to prevents styling issue when tab is too small ,fix
4358,devtools make edit functionality compatible with new getdirectiveforest api ,fix
4359,devtools allow user to edit prop ,feat
4360,ivy injecting incorrect provider when reproviding injectable with useclass if an injectable ha a useclass ivy injects the token in useclass rather than the original injectable if the injectable is reprovided under a different token the correct behavior is that it should inject the reprovided token no matter whether it ha useclass fix pr close ,fix
4361,animation remove ɵanimationdriver from private export ɵanimationdriver can be safely removed from private export a animationdriver is already a public export since it already available we can safely remove it declaration and migrate it only usage in our repo to rely on the public animationdriver symbol pr close ,fix
4362,ngcc remove redundant await inside an async function return await is not needed since the return value of an async function is always wrapped in promiseresolve pr close ,refactor
4363,bazel enable ivy template typechecking in g template typechecking within the ivy compiler ha been disabled internally in g until compatibility with the whole codebase could be verified a that verification is now complete and template typechecking is known to be compatible with g this commit enables it pr close ,feat
4364,languageservice normalize hover test this commit normalizes hover and util test in the language service this is part of a small effort to simplify and normalize the language service testing structure which currently contains spec that are largely created and left without relation to other test pr close ,refactor
4365,ivy better inference for circularly referenced directive type it possible to pas a directive a an input to itself consider html somecmp ref valueref since the template typechecker attempt to infer a type for somecmp using the value of it input this creates a circular reference where the type of the value input is used in it own inference typescript var t somecmpngtypectorvalue t obviously this doesnt work to resolve this the template typechecker used to generate a null expression when a reference would otherwise be circular typescript var t somecmpngtypectorvalue null this effectively asks typescript to infer a value for this context and work well to resolve this simple cycle however if the template instead try to use the circular value in a larger expression html somecmp ref valuerefprop the checker would generate typescript var t somecmpngtypectorvalue nullprop in this case typescript cant figure out any way null could have a prop key and so it infers never a the type neverprop is thus a type error this commit implement a better fallback pattern for circular reference to directive type like this instead of generating a null in place for the reference a type is inferred by calling the type constructor again with null a it input this infers the widest possible type for the directive which is then used to break the cycle typescript var t somecmpngtypectornull var t somecmpngtypectorvalue tprop this ha the desired effect of validating that prop is legal for the directive type the type of ref while also avoiding a cycle fix fix fix pr close ,fix
4366,ivy provide a more detailed error message for ngng ngng are error produced when an ngmodule being compiled ha an imported or exported type which doe not have the proper metadata that is it doesnt appear to be an ngmodule or directive etc depending on context previously this error message wa a bit sparse however github issue show that this is the most common error user receive when for whatever reason ngcc wasnt able to handle one of their library or they just didnt run it so this commit change the error message to offer a bit more useful context instructing user differently depending on whether the class in question is from their own project from npm or from a monorepostyle local dependency pr close ,fix
4367,core support sanitizer value in the style binding when binding to style we correctly sanitizedunwrapped property but we did not do it for the object itself hostbindingstyle style safestyle thissanitizerbypasssecuritytruststyle background red color white display block above code would fail since the style would not unwrap the safevalue and would treat it a object resulting in incorrect behavior fix fw pr close ,fix
4368,docsinfra do not break when cooky are disabled in the browser whenever cooky are disabled in the browser windowlocalstorage is not avaialable to the app ie even trying to access windowlocalstorage throw an error to avoid breaking the app we use a noop storage implementation if windowlocalstorage is not available this is similar to but for localstorage instead of sessionstorage fix pr close ,fix
4369,docsinfra add entrypoint label on api endpoint doc on api doc page for angular package eg we show all primary and secondary entrypoints following a link to one of the secondary entrypoints eg navigates the doc page for the secondary entrypoint where it is incorrectly and misleadingly labelled a package and not a an entrypoint implemented a new entrypoint label and add support for correctly differentiating between entrypoints and package fix pr close ,feat
4370,ngcc implement sourcemap flattening the library used by ngcc to update the source file magicstring is able to generate a sourcemap but it is not able to account for any previous sourcemap that the input text is already associated with there have been various attempt to fix this but none have been very successful since it is not a trivial problem to solve this commit contains a novel approach that is able to load up a tree of sourcefiles connected by sourcemaps and flatten them down into a single sourcemap that map directly from the final generated file to the original source referenced by the intermediate sourcemaps pr close ,feat
4371,core check dependency in extended child related to pr close ,test
4372,common update ngfortrackby error url old url is redirected to which is not exactly pr close ,docs
4373,core correct insertbefores description update the description of refchild based on pr close ,docs
4374,core describe your change according to put cleanup logic in ngondestroy the logic that must run before angular destroys the directive pr close ,docs
4375,devtools check if nodenativeelement is an instance of an htmlelement before calling nggetcomponent on it rangleangulardevtools ,fix
4376,ivy error when accessing ngmodulerefcomponentfactoryresolver in constructor currently we resolve the ngmodulerefcomponentfactoryresolver by going through the injector but the problem is that componentfactoryresolver ha a dependency on ngmoduleref which mean that if the module thats attached to the ref try to inject componentfactoryresolver in it constructor well create a circular dependency which throw at runtime these change resolve the issue by creating the componentfactoryresolver manually ahead of time without going through the injector we can do this safely because the only dependency for the resolver is the current module ref which is providing it aside from fixing the issue another advantage to this approach is that it should reduce the amount of generated j because it remove a getter and a provider definitio fix pr close ,fix
4377,packaging add repositorydirectory field to packagejsons pr close ,build
4378,platformbrowser hoist function to workaround optimization bug technically function definition can live anywhere because they are hoisted however in this case closure optimization break when exported function definition are referred in another static object that is exported the bad pattern is export const obj f export function f which turn to the following in closure module system googmodulem exportsobj f function f exportsf f which badly optimizes to note module object are collapsed var b a var a function now b is undefined this is an optimizer bug and should be fixed in closure but in the meantime this change is a noop and will unblock other change we want to make pr close ,refactor
4379,languageservice get the right elementast in the nested html tag for example divp stringmodelcursorpdiv when provide the hover info for stringmodel the pathhead is root tag div use the parent of pathtail instead pr close ,fix
4380,core avoid recursive scope recalculation when testbedoverridemodule is used currently if testbed detects that testbedoverridemodule wa used for module x transitive scope are recalculated recursively for all module that x import and previously calculated data stored in cache is ignored this behavior wa introduced in to fix stale transitive scope issue cache wa not updated if module override are present the perf issue come from a diamond problem where module x is overridden which import module a and b which both import module c under previous logic module c get it transitive deps recomputed multiple time during the recompute for both a and b for deep graph and big commonshared module this can be super costly this commit update the logic to recalculate ransitive scope for the overridden module while keeping previously calculated scope of other module untouched pr close ,perf
4381,serviceworker treat a offline prior to this commit the service worker only treated error a effectively offline this commit change the behaviour to treat both service unavailable and a offline fix pr close ,fix
4382,compiler add correct use case of ngfor in r ast the only test case for ngfor exercise an incorrect usage which cause two bound attribute to be generated this commit add a canonical and correct usage to show the difference between the two pr close ,test
4383,devtools use cascading view childchildren to fix regression caused by refactor rangleangulardevtools ,fix
4384,devtools stop filter input from scrolling with the component forest rangleangulardevtools ,fix
4385,devtools fix regression that broke node expansion rangleangulardevtools ,fix
4386,devtools fix regression that broke assignment of selected node to ng variable rangleangulardevtools ,fix
4387,devtools refactor breadcrumb into it own component rangleangulardevtools ,refactor
4388,devtools fix typo in file name rangleangulardevtools ,fix
4389,router removed unused applicationref dependency a a part of the process of setting up router provider we use applicationref a a dependency while providing router token the thing is that applicationref is actually unused all referenced were removed in but it still listed a dependency this is causing problem in case router is used a a dependency for factory function provided a appinitializers multitoken causing cyclic dependency this commit remove unused applicationref dependency in router so it can be used without causing cyclic dependency issue pr close ,fix
4390,devtools applying consistent styling ,feat
4391,ngcc capture pathmapped entrypoints that start with same string previously if there were two pathmapped library that are in different directory but the path of one started with same string a the path of the other we would incorrectly return the shorter path eg distmylib and distmylibsecond this wa because the list of basepaths wa searched in ascending alphabetic order and we were using startswith to match the path now the basepaths are searched in reverse alphabetic order so the longer path will be matched correctly fw fix pr close ,fix
4392,localize improve placeholder mismatch error message the original error message wa confusing since often it is the translation that is at fault not the message pr close ,fix
4393,devtools address review comment ,refactor
4394,devtools address review comment ,refactor
4395,devtools handle corner case when a component aim to replace an existing one ,fix
4396,devtools proper tracking without overwriting previous ref ,fix
4397,devtools get proper change detection trigger ,fix
4398,devtools remove jumping when adding node ,fix
4399,devtools prevent node overwriting ,fix
4400,devtools disable two spec temporarily ,test
4401,devtools proper calculation of the lifecycle hook duration ,fix
4402,devtools detect directive added to nonelements ,feat
4403,devtools show proper lifecycle hook name ,fix
4404,devtools do not highlight node during initial rendering ,fix
4405,devtools patch life cycle hook ,feat
4406,devtools proper timing for operation ,fix
4407,devtools remove unused component ,refactor
4408,devtools make sure we dont fail on null element ,fix
4409,devtools remove time travel and aggregated timeline ,refactor
4410,devtools remove debugging left over ,refactor
4411,devtools fix broken timetravel test ,test
4412,devtools introduce directive record ,feat
4413,devtools type safe profiler record ,refactor
4414,devtools proper diffing with unique id ,fix
4415,devtools update yarnlock ,build
4416,devtools move the component tree identification to a better named file ,refactor
4417,devtools remove cyclic dependency ,refactor
4418,devtools show new item using a class ,fix
4419,devtools identity tracker ,refactor
4420,devtools implement proper diffing in the explorer ,feat
4421,devtools keep unique index for all component and directive ,feat
4422,devtools rename id to position ,refactor
4423,devtools use proper terminology for the observer ,refactor
4424,devtools verify we can add top node ,test
4425,devtools move identity tracking to separate abstraction ,refactor
4426,devtools dont create object when dont have to ,refactor
4427,devtools use flamegraph in timeline and aggregated view ,feat
4428,devtools proper diffing and expansion of new item ,fix
4429,ivy error in aot when pipe inherits constructor from injectable that us di when a pipe inherits it constructor and a a result it factory from an injectable in aot mode it can end up throwing an error because the inject implementation hasnt been set yet these change ensure that the implementation is set before the pipe factory is invoked note that this isnt a problem in jit mode because the factory inheritance work slightly differently hence why this test isnt going through testbed fix pr close ,fix
4430,ivy add strictliteraltypes to align ivy ve checking of literal under view engine default nonfulltemplatetypecheck checking object and array literal which appear in template are treated a having type any this allows a number of pattern which would not otherwise compile such a indexing an object literal by a string html a b value where value is string ivy meanwhile ha always inferred strong type for object literal even in it compatibility mode this commit fix the bug and add the strictliteraltypes flag to specifically control this inference when the flag is false in compatibility mode object and array literal receive the any type pr close ,fix
4431,ivy emulate a view engine typechecking bug with safe navigation in it default compatibility mode the ivy template typechecker attempt to emulate the view engine default mode a accurately a is possible this commit address a gap in this compatibility that stem from a view engine typechecking bug consider two template expression html objfield fnfield and suppose that the type of obj and fn are the same both return either null or an object with a field property under view engine these typecheck differently the obj case will catch if the object type when not null doe not have a field property while the fn case will not this is due to how view engine represents safe navigation typescript for the obj case obj null null a any objfield for the fn case let tmp any tmp fn null null a any tmpfield because view engine us the same code generation backend a it doe to produce the runtime code for this expression it us a ternary for safe navigation with a temporary variable to avoid invoking fn twice the type of this temporary variable is any however which cause the tmpfield check to be meaningless previously the ivy template typechecker in compatibility mode assumed that fnfield would always check for the presence of field on the nonnull result of fn this commit emulates the view engine bug in ivy compatibility mode so an any type will be inferred under the same condition a part of this fix a new format for safe navigation operation in template typechecking code is introduced this is based on the realization that ternary based narrowing is unnecessary for the fn case in strict mode ivy now generates typescript null a any fnfield undefined this effectively us the ternary operator a a type or operation the resulting type will be a union of the type of fnfield with undefined for the fn case in compatibility mode ivy now emulates the bug with typescript fn a anyfield the cast expression includes the call to fn and allows it to be checked while still returning a type of any from the expression for the obj case in compatibility mode ivy now generates typescript objfield a any this cast expression still return any for it type but will check for the existence of field on the type of obj pr close ,fix
4432,languageservice provide hover for interpolation in attribute value i think the bug is introduced in my pr for example modeltitle the attribute value can not be parsed by parsetemplatebindings pr close ,fix
4433,languageservice infer context type of structural directive pr close ,fix
4434,ngcc correctly detect emitted t helper in e in e code typescript requires certain helper such a spreadarrays to be able to support e feature these helper can be either imported from tslib by setting the importhelpers t compiler option to true or emitted inline by setting the importhelpers and noemithelpers t compiler option to false which is the default value for both ngtscs staticinterpreter which is also used during ngcc processing is able to statically evaluate some of these helper currently assign spread and spreadarrays a long a reflectionhostgetdefinitionoffunction correctly detects the declaration of the helper for this to happen the lefthand side of the corresponding call expression ie spread or tslibspread must be evaluated a a function declaration for getdefinitionoffunction to be called with in the case of imported helper the tslibsomehelper expression wa resolved to a function declaration of the form export declare function somehelperargs any any which allows getdefinitionoffunction to correctly map it to a t helper in contrast in the case of emitted helper and regardless of the module format commonjs esnext umd etc the somehelper identifier wa resolved to a variable declaration of the form var somehelper this thissomehelper function which upon further evaluation wa categorized a a dynamicvalue prohibiting further evaluation by the getdefinitionoffunction a a result of the above emitted typescript helper were not evaluated in e code this commit change the detection of t helper to leverage the existing knownfn feature previously only used for builtin function esmreflectionhost is changed to always return knowndeclarations for t helper both imported getexportsofmodule a well a emitted getdeclarationofidentifier similar change are made to commonjsreflectionhost and umdreflectionhost the knowndeclarations are then mapped to knownfns in staticinterpreter allowing it to statically evaluate call expression involving any kind of t helper jira issue pr close ,fix
4435,compilercli rename the builtinfn type to the more generic knownfn this is in preparation of using the knownfn type for known typescript helper in addition to builtin functionsmethods this will in turn allow simplifying the detection of both imported and emitted typescript helper pr close ,refactor
4436,ngcc handle import in dts file when processing commonjs when statically evaluating commonjs code it is possible to find that we are looking for the declaration of an identifier that actually came from a typing file rather than a commonjs file previously the commonjs reflection host would always try to use a commonjs specific algorithm for finding identifier declaration but when the id is actually in a typing file this resulted in the returned declaration being the containing file of the declaration rather than the declaration itself now the commonjs reflection host will check to see if the file containing the identifier is a typing file and use the appropriate stategy note this is the equivalent of but for commonjs pr close ,fix
4437,ivy incorrectly generating shared pure function between null and object literal in we made it so that we generate pure function for objectarray literal in order to avoid having them be shared across elementsviews the problem this introduced is that further down the line the contantpool us the generated literal in order to figure out whether to share an existing factory or to create a new one constantpool determines whether to share a factory by creating a key from the ast node and using it to look it up in the factory cache however the key generation function didnt handle function invocation and replaced them with null this mean that the key for foo purefunction and foo null are the same these change rework the logic so that instead of generating a null key for function invocation we generate a variable called unknown which shouldnt be able to collide with anything fix pr close ,fix
4438,ivy remove unused event argument in listener instruction currently ivy always generates the event function argument even if it isnt being used by the listener expression this can lead to unnecessary byte being generated because optimizers wont remove unused argument by default these change add some logic to avoid adding the argument when it isnt required pr close ,perf
4439,ivy add styleexp based interpolation fix add support for interpolation in style a shown div stylecolor exp width exp pr close ,fix
4440,languageservice provide completion for the structural directive that only injects the viewcontainerref the completion list dont include the ngtemplateoutlet the directive is a structural directive when it ha injected the templateref or viewcontainerref pr close ,fix
4441,ngcc add default config for angularhighcharts the package is deprecated and thus not going to have a new release but still ha weekly downloads fix pr close ,fix
4442,ngcc correctly detect outer aliased class identifier in e in e and e class identifier may have alias previously the ngccreflectionhosts recognized the following format e j var myclass function function innerclass innerclass innerclass e j let myclass myclass class myclass in addition to the above this commit add support for recognizing an alias outside the iife in e class which wa previously not supported j var myclass myclass function jira issue fw partially address pr close ,fix
4443,ngcc tighten method parameter type to avoid redundant check esmreflectionhostgetinnerfunctiondeclarationfromclassdeclaration wa already called with tsdeclaration not tsnode so we can tighten it parameter type and get rid of a redundant check getiifebody called inside getinnerfunctiondeclarationfromclassdeclaration will check whether the given tsdeclaration is a tsvariabledeclaration pr close ,refactor
4444,compiler use fataldiagnosticerror to generate better error message prior to this commit decorator handling logic in ngtsc used error to throw error this commit replaces most of these instance with fataldiagnosticerror class which provider a better diagnostics error including location of the problematic code pr close ,fix
4445,localize support minified e localize call some minification tooling modifies localize call to contain a comma sequence of item where the cooked and raw value are assigned to variable this change improves our ability to recognize these structure fix pr close ,fix
4446,docsinfra highlight the currently active node in topbar related to and pr close ,fix
4447,docsinfra use tooltip in aiotopmenu item the topmenu item have both a title and a tooltip property the title is used a text content so there is little point in using it a tooltip via the htmlelements title property too this commit switch to using the tooltip property to populate the title note that in many case the tooltip property is derived from title anyway so there is no practical change in behavior in these case pr close ,fix
4448,animation false positive when detecting node in webpack build we have to do some extra work in the animation module when we identify a node environment which we determine based on the process global the problem is that by default webpack will polyfill the process causing u to incorrectly identify it these change make it so that the check isnt thrown off by webpack fix pr close ,fix
4449,docsinfra upgrade cli command doc source to aacc updating angularmaster from clibuildsmaster relevant change in commit range modified helpeejson pr close ,build
4450,docsinfra improve focus style in topnav and footer fix pr close ,fix
4451,core make subclass inherit developerdefined data pr close ,fix
4452,devtools stream record incrementally so that they do not get sent all at once ,perf
4453,devtools separate object creation concern from state serializer api rangleangulardevtools ,refactor
4454,devtools adding icon popups displaying app status rangleangulardevtools ,feat
4455,devtools implement split pane so that user can resize property view tab rangleangulardevtools ,feat
4456,ngcc pause async ngcc processing if another process ha the lockfile ngcc us a lockfile to prevent two ngcc instance from executing at the same time previously if a lockfile wa found the current process would error and exit now when in async mode the current process is able to wait for the previous process to release the lockfile before continuing itself pr close ,feat
4457,compilercli add invalidatecaches to cachedfilesystem this is needed by ngcc when reading volatile file that may be changed by an external process eg the lockfile pr close ,refactor
4458,ivy add attribute and class to host element based on selector in view engine host element of dynamically created component received attribute and class extracted from component selector for example if component selector is attr class the attr attribute and class class will be add to host element this commit add similar logic to ivy to make sure this behavior is aligned with view engine pr close ,fix
4459,ivy query should match element inside ngcontainer with the descendant false option before this change content query with the descendant false option a implemented in ivy would not descendinto ngcontainer element this behaviour wa different from the way the view engine worked this change alligns ngivy and ve behaviour when it come to query and the ngcontainer element and fix a common bug where a query target wa placed inside the ngcontainer element with a directive on it before html needstarget ngcontainer ngifcondition div targetdiv this node would not match ngcontainer needstarget after html needstarget ngcontainer ngifcondition div targetdiv this node will match ngcontainer needstarget fix pr close ,fix
4460,ivy wrong context passed to ngondestroy when resolved multiple time when the same provider is resolved multiple time on the same node the first invocation had the correct context but all subsequent one were incorrect because we were registering the hook multiple time under different index in destroyhooks fix pr close ,fix
4461,docsinfra set thtd to proper width previously the table on the event page were misaligned this commit fix this by setting the width of all tds and th pr close ,fix
4462,docsinfra properly format file pr close ,style
4463,docsinfra preserve query and hash when switching angular version previously when switching angular version through the version selector in the sidenav the query and hash is lost the user ha to manually navigate to the original location again this commit fix this issue and preserve the query and hash when navigating between different version close pr close ,fix
4464,core better handing of icu outside of in block currently the logic that handle icu located outside of in block may throw exception at runtime the problem is caused by the fact that we store incorrect tnode index for previous tnode index that includes headeroffset and do not store a flag whether this tnode is a parent or a sibling node a a result the logic that assembles the final output us incorrect tnodes and in some case throw exception when incompatible structure is extracted from tviewdata due to the incorrect index this commit adjusts the index and capture whether tnode is a parent to make sure underlying logic manipulates correct tnode pr close ,fix
4465,docsinfra add fallback to web font so downloading doe not block rendering light house wa reporting that ensure text remains visible during webfont load solution to this problem wa adding swap to the end of web font this lead to our first text showing before webfont download and improves the performance of site link to article pr close ,fix
4466,docsinfra use puppeteer to get a browser for doc example test in integration and aio test were changed to use the browser provided by puppeteer in test this commit switch the doc example test to use the same setup implementation note the example are used to create zip archive that doc user can download to experiment with since we want the downloaded project to resemble an angularcli generated project we do not want to affect the project protractor configuration in order to use puppeteer to achieve this a second protractor configuration is created which is ignored when creating the zip archive that extends the original one and pass the approperiate argument to use the browser provided by puppeteer this new configuration protractorpuppeteerconfjs is used when running the doc example test on ci or locally during development pr close ,build
4467,upgrade separate angularjs material typing to it own block pr close ,docs
4468,upgrade add instruction for more angularjs related typing angulararia is a core angularjs module packaged separately and angularmaterial is it own thing entirely pr close ,docs
4469,devtools seperate component concern into separate file type all method ,refactor
4470,devtools nowrap for the material tree item ,fix
4471,devtools set proper type of the prop in the clipboard copy feature ,fix
4472,devtools cache timeline frame so that the timetraveler doesnt have to process the same frame multiple time ,perf
4473,devtools use flamechart with a better layout ,feat
4474,devtools make sure we invoke getcomponent with an element ,fix
4475,devtools use flamegraph in timeline and aggregated view ,feat
4476,form remove outdated ngform selector deprecation notice in we removed support for the ngform selector in the ngform directive we deleted most of the deprecation notice in that pr but we missed a paragraph of documentation in the api doc for ngform this commit remove the outdated paragraph that make it seem like the selector is still around and deprecated a opposed to removed a it might confuse user pr close ,docs
4477,core correctly concatenate static and dynamic binding to class when shadowed given div class classnull ngclassexp notice that class binding is not a string a a result the existing logic would not concatenate class with class the resulting falsy value would than be sent to ngclass which would promptly clear all style on the div the new logic correctly handle falsy value for class binding fix pr close ,fix
4478,core remove support for mapset in classstyle binding close fw pr close ,fix
4479,ivy lframe need to release memory on leaveview root cause is that for perf reason we cache lframe so that we dont have to allocate it all the time to be extra fast we clear the lframe on enterview rather that on leaveview the implication of this strategy is that the deepest lframe will retain object until the lframe allocation depth match the deepest object the fix is to simply clear the lframe on leaveview rather then on enterview fix pr close ,fix
4480,devtools add mit license rangleangulardevtools ,feat
4481,docsinfra update payload limit the update to angular appears to have lowered the mainjs file slightly while the current master build of angular appears to have gone up slightly pr close ,ci
4482,docsinfra update to latest angular material pr close ,build
4483,docsinfra pin webcomponentscustomelements to the previous range allowed the version to be installed which caused the e polyfillsjs file to increase in size unwantedly pr close ,build
4484,docsinfra update aio to angular pr close ,build
4485,docsinfra update to latest dgenipackages after the previous update to yarnlock a problem surfaced with the mkdirpromise package the latest version of dgenipackages fix this problem pr close ,build
4486,docsinfra refresh yarnlock this file had not been updated for some time and lot of the dependency have new version this is actually necessary because at least on osx there is a problem with chokidar and fsevent that is solved by bumping the version here pr close ,build
4487,ivy error if directive with synthetic property binding is on same node a directive that injects viewcontainerref in the loadrenderer we make an assumption that the value will always be an lview but if there a directive on the same node which injects viewcontainerref the lview will be wrapped in an lcontainer these change add a call to unwrap the value before we try to read the value off of it fix pr close ,fix
4488,devtools update yarnlock rangleangulardevtools ,build
4489,devtools show frame drop in the timeline rangleangulardevtools ,feat
4490,form change arrayreduce usage to arrayforeach there is currently a bug in chrome that make arrayreduce not work according to spec the functionality in form that retrieves control from formgroups and formarrays formget relied on arrayreduce so the chrome bug broke form for many user this commit refactors our form code to rely on arrayforeach instead of arrayreduce to fix form while we are waiting for the chrome fix to go live see pr close ,fix
4491,devtools use factory pattern to clean up componenttreeobserver callback in recordingindexts rangleangulardevtools ,refactor
4492,element schematic fails with schemajson not found error fix pr close ,fix
4493,devtools create copy to clipboard button for property view wrapper rangleangulardevtools add snack bar notification ,feat
4494,languageservice suggest and operator on nullable receiver under strict mode the language service fails to typecheck nullable symbol that have already been verified to be nonnull this generates incorrect false positive and confusing diagnostics for user to work around this issue in the short term this commit change the diagnostic message from an error to a suggestion and prompt user to use the safe navigation operator or nonnull assertion operator for example instead of typescript optional optionaltostring the following is cleaner typescript optionaltostring optionaltostring note that with this change user who legitimately make a typo in their code will no longer see an error i think this is acceptable since false positive is worse than false negative however if user follow the suggestion add or to their code then the error will be surfaced this seems a reasonable tradeoff reference safe navigation operator nonnull assertion operator pr close pr close pr close ,fix
4495,devtools install prettyquick package configure packagejson rangleangulardevtools ,build
4496,compiler report error for missing binding name currently wouldbe binding attribute that are missing binding name are not parsed a binding and fall through a regular attribute in some case this can lead to a runtime error trying to assign a a dom attribute in an element like in div div fails because is not a valid attribute name attribute composed of binding prefix but not defining a binding should be considered invalid a this almost certainly indicates an unintentional elision of a binding by the developer this commit introduces error reporting for attribute with a binding name prefix but no actual binding name close pr close ,fix
4497,devtools remove unnecessary call to handshakewithbackend and unused syn event rangleangulardevtools ,refactor
4498,ngcc add missing umdreflectionhostgetexportsofmodule test support for reexports in umd were added in efbfdb this commit add some test for reexports similar to the one used for commonjsreflectionhost pr close ,test
4499,devtools clean up method so that each one operates at one level of abstraction rangleangulardevtools ,refactor
4500,devtools change cursor to pointer when hovering change bkg colour and add border radius rangleangulardevtools ,style
4501,devtools remove console logging event rangleangulardevtools ,refactor
4502,form update the ngform deprecation notice we should be documenting when an api is eligible for removal and not when it will be removed the actual removal depends on many factor eg if we were able to automate the refactoring to the recommended api in time or not pr close ,docs
4503,docsinfra lighthouse reporting link to crossorigin destination are unsafe light house wa reporting in best practice that our cross origin link are a unsafe so aded relnoopener according to light houe suggestion link to the article pr close ,fix
4504,devtools implement shutdown event to prevent memory leak when reopening devtools rangleangulardevtools ,fix
4505,devtools select dom element on double click of node rangleangulardevtools ,feat
4506,devtools updating libs to angular release version rangleangulardevtools ,build
4507,ivy set namespace for host element of dynamically created component prior to this change element namespace wa not set for host element of dynamically created component that resulted in incorrect rendering in a browser this commit add the logic to pick and set correct namespace for host element when component is created dynamically pr close ,fix
4508,benchpress delete outdatedunused folder pr close ,refactor
4509,benchpress added tsconfig to tslibrary rule and awaited floating promise note we specify our own tsconfig bc the default tsconfig we provide for tslibrary disables the mustusepromises rule pr close ,refactor
4510,benchpress linted pr close ,refactor
4511,benchpress made all it callback async pr close ,refactor
4512,devtools added prettier for formatting code on precommit rangleangulardevtools featprettier added prettier for formatting code on precommit and linted file featprettier formatted code after merge ,feat
4513,devtools add view source button to property view tab rangleangulardevtools ,feat
4514,ivy repeat template guard to narrow type in event handler in ivy template type checker event binding are checked in a closure to allow for accurate type inference of the event parameter because of the closure any narrowing effect of template guard will no longer be in effect when checking the event binding a typescript assumes that the guard outside of the closure may no longer be true once the closure is invoked for more information on typescript control flow analysis please refer to in angular template it is known that an event binding can only be executed when the view it occurs in is currently rendered hence the corresponding template guard is known to hold during the invocation of an event handler closure a such it is desirable that any narrowing effect from template guard are still in effect within the event handler closure this commit tweak the generated typecheck block tcb to repeat all template guard within an event handler closure this achieves the narrowing effect of the guard even within the closure fix pr close ,fix
4515,devtools synchronizing highlight between source application and component in presentation tree rangleangulardevtools rangleangulardevtools highlight from the component tree to the application rangleangulardevtools highlight from the application to the component tree when using inspector fix on broken unit test added all file to coverage report setting test default to always generate coverage report rangleangulardevtools added basic test for component inspector featfrontend moving component hover to tree to avoid passing messagebus rangleangulardevtools featfrontend sync hover from inspector to component tree rangleangulardevtools featfrontend rename function to retrieve elementid from native element featfrontend use separate handler to unhighlight from component instead of using highlight without id featfrontend decoupling inspector from the message bus featfrontend fix unit test ,feat
4516,devtools ui flicker bug rangleangulardevtools ,fix
4517,ngcc ensure that pathmapped secondary entrypoints are processed correctly the targetedentrypointfinder must work out what the containing package is for each entrypoint that it find the logic for doing this wa flawed in the case that the package wa in a pathmapped directory and not in a nodemodules folder this meant that secondary entrypoints were incorrectly setting their own path a the package path rather than the primary entrypoint path fix pr close ,fix
4518,devtools updating to angular release version rangleangulardevtools coauthoredby minko gechev mgechevgmailcom ,build
4519,devtools fix initialization of nonsupported application rangleangulardevtools ,fix
4520,devtools implement time travel player functionality rangleangulardevtools ,feat
4521,changelog formatting fix pr close ,docs
4522,ivy ensure module import are instantiated before the module being declared pr close ,fix
4523,docsinfra fix parameter with optional decorator do not match declared optional type pr close ,fix
4524,ivy add anchornode insert beforeafter difference pr close ,docs
4525,devtools added cypress to run ee test rangleangulardevtools feattest added cypress to run ee test feattest removed packagelock added by mistake coauthoredby minko gechev mgechevgmailcom ,feat
4526,docsinfra upgrade cli command doc source to df updating angularmaster from clibuildsmaster relevant change in commit range modified helpgeneratejson pr close ,build
4527,bazel spawn prod server using port currently the prod server us a default port of with this change we align the port with the devserver pr close ,fix
4528,bazel devserver show blank page in window additionalrootpaths should contain the workspace name see fix pr close ,fix
4529,bazel update ibazel to pr close ,fix
4530,compilercli implement ngtscplugin on top of the ngcompiler api this commit implement an experimental integration with tscwrapped where it can load the angular compiler a a plugin and perform angular transpilation at a user request this is an alternative to the current ngcwrapped mechanism which is a fork of tscwrapped from several year ago tscwrapped ha improved significantly since then and this feature will allow angular to benefit from those improvement currently the plugin api between tscwrapped and the angular compiler is a work in progress so ngtscplugin doe not yet implement any interface from bazeltypescript the home of tscwrapped instead an interface is defined locally to guide this standardization pr close ,feat
4531,ivy compute ignorefiles for compilation on initialization this commit move the calculation of ignorefiles the set of file to be ignored by a consumer of the ngcompiler api from it prepareemit operation to it initialization it now available a a field on ngcompiler this will allow a consumer to skip gathering diagnostics for ignorefiles a well a skip emit pr close ,refactor
4532,devtools add test for devtools tab component and directive explorer component rangleangulardevtools ,test
4533,docsinfra add v to the version picker in the navbar the vangulario should be ready shortly pr close ,feat
4534,ivy add a not about compiletime constant to the ivy compatibility guide pr close ,docs
4535,ivy add size debugging section pr close ,docs
4536,ivy add doc for styling priority order pr close ,docs
4537,ivy update style binding doc to v behavior pr close ,docs
4538,ivy clean up class binding doc and update to v behavior pr close ,docs
4539,ivy document breaking change with host attribute priority pr close ,docs
4540,devtools applying consistent styling rangleangulardevtools ,style
4541,devtools dont leak once subscription ,fix
4542,devtools remove unused type ,refactor
4543,devtools do not use implicit any for result ,refactor
4544,devtools use type inference at the inspector assignment ,refactor
4545,devtools use type inference for more specific type ,refactor
4546,ivy template typecheck error from t should not use ng error code a bug previously caused the template typechecking diagnostics produced by typescript for template expression to use prefixed error code these code are converted to ng error instead of t error during diagnostic printing this commit fix the issue pr close ,fix
4547,docsinfra fix cs issue on home page and search result on home page image size set to px which make the page not render properly on device below the size of px width also when search result were scrolled they interfered with the top nav item added border at the top of the search result container so that the result are not visible under the nav item during scrolling pr close ,fix
4548,docsinfra size footer link to appropriate size for seo footer link did not have enough space between them so lighthouse wa reporting that tap target are not appropriately sized added the required px space between link also updated the margin of group header accordingly fix pr close ,fix
4549,animation increase wait time for statusslider animation because the animation completes in m and browserwait check every m there can be a race condition of if the final state ha actually been reached to read the color by moving to m we ensure that we cheack after the m of the animation ha completed pr close ,docs
4550,docsinfra add stable to the list of api status earlier api can be filtered based on security risk and deprecated now added stable a a status for better user experience fix pr close ,feat
4551,devtools adding parent node for selected component rangleangulardevtools ,feat
4552,ivy explicitly pas in tview add tview into lframe read the tview from lview on enterview before this change the tview wa ofter looked up from lview a lviewtview this is suboptimal since reading from an array requires that the read check array size before the read this mean that such a read ha a much higher cost than reading from the property directly by passing in the tview explicitly it make the code more explicit and faster some rearrangement of argument so that tview would come before lview for consistency pr close ,refactor
4553,ivy fix broken test pr close ,test
4554,benchpress formatted spec file pr close ,fix
4555,benchpress added tsconfig and fixed t error pr close ,refactor
4556,ivy support emitting a reference to interface declaration in the ngtsc compiler gained the ability to emit type parameter constraint which would generate import for any type reference that is used within the constraint however the absolutemodulestrategy reference emitter strategy did not consider interface declaration a a valid declaration it can generate an import for throwing an error instead this commit fix the issue by including interface declaration in the logic that determines whether something is a declaration fix pr close ,fix
4557,ivy recompile on template change in ngc watch mode on window in a bug in ngc watch mode wa fixed so that a component is recompiled when it template file is changed due to insufficient normalization of file path this fix did not have the desired effect on window fix pr close ,fix
4558,devtools implement componentdirective search rangleangulardevtools ,feat
4559,devtools adding circleci config rangleangulardevtools ,test
4560,devtools drop packagelockjson and use only yarnlock rangleangulardevtools ,build
4561,devtools add code of conduct and contributing rangleangulardevtools ,docs
4562,devtools implement selected component shortcut similar to augury to select the component host ,feat
4563,ngcc correctly invalidate cache when movingremoving filesdirectories one particular scenario where this wa causing problem wa when the backupfilecleaner restored a file such a a dts file by moving the backup file to it original location but the modified content wa kept in the cache fix pr close ,fix
4564,ngcc remove unused function since the marknonangularpackageasprocessed function is no longer used and can be removed pr close ,refactor
4565,ivy hoststyling throw assert exception inside ngfor inside ngfor the second run of the styling instruction can get into situation where it try to read a value from a binding which ha not yet executed a a result the read is nochange value and subsequent property read cause an exception a it is of wrong type fix pr close ,fix
4566,devtools change trimcomponents name always include nativeelement in builddirectiveforest ,feat
4567,languageservice dedupe diagnostics using t utility function this commit make a minor refactoring that replaces uniquebyspan with tssortanddeduplicatediagnostics pr close ,refactor
4568,languageservice replace typediagnostic with ngdiagnostic this commit clean up expressiontypets by removing the unnecessary typediagnostic class it replaced by ngdiagnostic consolidating reporterror and reportwarning to reportdiagnostic this is prep work so that we could make some of the type diagnostics a suggestion in later pr pr close ,refactor
4569,ivy remove tnodedirectives in favor of tdata tnodedirectives wa introduced in turn out that it is unnecessary because the information is already present it tdata when combining with tnodedirectivestart and tnodedirectiveend mainly this is true conceptually expecttnodedirectivestoequal tdataslice tnodedirectivesstart tnodedirectivesend tnodedirectivesstart the refactoring remove tnodedirectives and add tnodedirectivestyling a we still need to keep location in the directive in tnode pr close ,refactor
4570,ivy correct var count in perf benchmark these test are used for perf testing and dont run a part of ci a a result they bitrotted this fix that long term these test should be run a part of ci pr close ,test
4571,ngcc do not lock if the target is not compiled by angular to support parallel cli build we instruct developer to preprocess their nodemodules via ngcc at the command line despite doing this ngcc wa still trying to set a lock when it wa being triggered by the cli for package that are not going to be processed since they are not compiled by angular for instance this commit check whether a target package need to be compiled at all before attempting to set the lock fix pr close ,fix
4572,devtools rename querycomponenttree to be more accurate of purpose ,refactor
4573,devtools querycomponenttree change nativeelement type to be element ,refactor
4574,ngcc automatically clean outdated ngcc artifact if ngcc get updated to a new version then the artifact left in package that were processed by the previous version are possibly invalid previously we just errored if we found package that had already been processed by an outdated version now we automatically clean the package that have outdated artifact so that they can be reprocessed correctly with the current ngcc version fix pr close ,feat
4575,compilercli add removedir to filesystem pr close ,refactor
4576,ngcc export magic string a constant these string will be used when cleaning up outdated package pr close ,refactor
4577,ngcc add additional build marker helper pr close ,refactor
4578,ngcc do not crash if package build version is outdated now hasbeenprocessed will no longer throw if there is an entrypoint that ha been built with an outdated version of ngcc instead it just return false which will include it in this processing run this is a precursor to adding functionality that will automatically revert outdate build artifact pr close ,refactor
4579,ngcc remove unused code pr close ,refactor
4580,devtools remove getwindow function ,refactor
4581,devtools move all messagebus callback to separate function remove unneeded nativeelement assignment in trimcomponent ,refactor
4582,devtools use window object instead of getwindow method for setting a console reference ,feat
4583,compilercli add sas a a valid cs preprocessor extension sas is a valid preprocessor extension which is used for sas indented syntax pr close ,fix
4584,common unit test for expectone with several request pr close ,test
4585,common expectone list the received request if no match fix previously it wa hard to debug an expectone if the request had no match a the error message wa expected one matching request for criterion match url someurlqueryhello found none this commit add a bit more info to the error by listing the actual request received expected one matching request for criterion match url someurlqueryhello found none request received are post someurlqueryworld pr close ,fix
4586,common unit test for expectone pr close ,test
4587,devtools create interface for forest builder option object change patch template back ,refactor
4588,docsinfra change navigation in resource page need to be sturctured to be able to navigate to all resource with improved user experience a lone scroll bar in this page will not help the reader a great deal in exploring the resource fix pr close ,feat
4589,docsinfra remove unused function in resource component page in resource component there were unused function removed unused funtions pr close ,refactor
4590,common remove extra in http params previous to this commit http params like a b c resulted in a request like ac note the double the ideal fix would probably be to stringify these params to abc like we do for empty string value but that might be breaking a some apis may rely on the absence of the parameter this fix the issue in a compatible way by just removing the extra and unnecessary resulting in ac pr close ,fix
4591,compiler rename diagnosticssrccodets to diagnosticssrcerrorcodets the new filename is le ambiguous and better reflects the name of the symbol defined in it pr close ,refactor
4592,devtools create message bus event for component selection ,feat
4593,ivy remove markdirty from global utility remove markdirty from the global debugging utility api since weve already exposed detectchanges pr close ,refactor
4594,ivy document global debugging utility and clean up api clean up the public api of the global debugging utility document them and expose them in the api doc pr close ,docs
4595,devtools refactor client event subscriber initialization to a seperate file ,refactor
4596,compilercli update to chokidar x update from chokidar x to x in ngcngtsc to eliminate any possibility of a security issue with a downstream dependency of the package fw resolve pr close ,build
4597,devtools change generator comment to subscribe ,docs
4598,devtools change message bus event naming from generate to subscribe ,refactor
4599,devtools dont collide with the default runtime function rangleangulardevtools currently we dont inject runtimejs because we collide with the runtimejs of the host angular application this creates problem with nonangular apps which dont use the same app bundling and the backendjs doe not execute this pr renames the runtime function to ngdevtoolsruntime which fix the issue additionally since we support only chrome this pr also drop differential bundling we support the last two major version of chrome look at browserlist but if user require we can easily extend the set of supported browser lastly to have predictable file name this pr also drop the hash suffix in the shellchrome project ,fix
4600,ivy clean of from previous merge this is a follow up for pr close ,refactor
4601,ivy change static priority resolution to be same level a directive it belongs to this change change the priority order of static styling current priority least priority static component directive template dynamic binding component mapinterpolation property directive mapinterpolation property template mapinterpolation property highest priority the issue with the above priority is this use case div stylecolor red directivewhichsetscolorblue in the above case the directive will win and the resulting color will be blue however a small change of adding interpolation to the example like so style interpolation is coming in div stylecolor red width exppx directivewhichsetscolorblue change the priority from static binding to interpolated binding which mean now the resulting color is red it is very surprising that adding an unrelated interpolation and style can change the color which wa not changed to fix that we need to make sure that the static value are associated with priority of the source directive or template where they were declared the new resulting priority is least priority component static mapinterpolation property directive static mapinterpolation property template static mapinterpolation property highest priority pr close ,feat
4602,ivy make assert condition more readable pr close ,refactor
4603,docsinfra update aio to angularclirc pr close ,build
4604,ivy update viewcontainerref to get the correct parentinjector pr close ,fix
4605,ivy ensure multi provider in modulewithproviders are not duplicated the current logic pull multiproviders up to the parent module provider list the result is that the multi provider being defined both in the imported modulewithproviders and the parent and getting an extra item in the multi provided array of value this pr fix that problem by not pulling provider in modulewithproviders up to the parent module pr close ,fix
4606,languageservice warn not error on missing context member the language service report an error when a directive template context is missing a member that is being used in a template eg if implicit is being used with a template context typed a any while this diagnostic message is valuable typing template context loosely a any or object is very widespread in community package and often still compiles correctly so reporting the diagnostic a an error may be misleading to user this commit change the diagnostic to be a warning and add additional information about how the user can eliminate the warning entirely by refining the template context type close pr close ,fix
4607,languageservice prune duplicate returned definition sometimes a request for definition will return multiple of the same definition this can happen in at least the case of twoway binding one of the same definition for the property and event binding multiple template binding expression in the same attribute something like ngforlet i of item trackby test ha two template binding resulting in two template binding asts at the same location the attribute span the language service then par both of these binding individually resulting in two independent but identical definition for more context see this commit prune duplicate definition by signing definition with their location and checking if that location signature ha been seen in a previous definition returned to the client pr close ,fix
4608,devtools refactor client event subscriber initialization to a seperate file ,refactor
4609,devtools add detected application angular version to top right next to tab rangleangulardevtools ,feat
4610,devtools use tag name ,feat
4611,devtools clean up typing refactor some component file rangleangulardevtools ,refactor
4612,devtools switch to on push change detection to optimize profiler rename variable for readability null coalesce profilerecords to fix bug when profile profile no change rangleangulardevtools ,perf
4613,devtools wrap entire row in div and bind click event to the div rangleangulardevtools ,feat
4614,devtools fix issue in message bus and watch ,fix
4615,docsinfra ignore node version in aiomonitoringstable ci job for real in we started ignoring yarn engine check for yarn install in aios testproductionsh script to fix a failure in the aiomonitoringstable ci job see for detail it turn out that the version of yarn used on the stable branch ignoreengines is needed on all yarn command including yarn run thus is not enough to fix the failure new example failure this commit turn of the engine check for the whole aiomonitoringstable ci job to fix the failure and make the job more robust pr close ,ci
4616,localize sync up babel dependency in the top level dependency on babelcore wa bumped to this commit ensures that the packagejson that get included in the angularlocalize distributable is at the same version pr close ,build
4617,ivy ensure debugnodedebugelement are treeshakeable in ivy there are different debugnodedebugelement implementation and associated helper function for viewengine and ivy additionally these classesfunctions which are defined inside the core package are imported by the platformbrowser package previously this code wa not treeshaken a expected in ivy partially addressed the issue but only for the case where core and platformbrowser end up in the same closure after webpacks scope hoisting in case where this is not the case our webpackterser based tooling is not capable of treeshaking it this commit fix the problem by ensuring that the code retained in ivy mode due to the crosspackage import doe not unnecessarily reference debugnodedebugelement allowing the code to be treeshaken away this result in a kb reduction in the size of the main angulario bundle jira issue fw pr close ,fix
4618,docsinfra update payload size limit pr close ,ci
4619,core order private export alphabetically pr close ,refactor
4620,docsinfra ignore node version in aiomonitoringstable ci job in we switched to nodejs v on master and x this cause the aiomonitoringjob ci job which check out file from the stable branch currently x to start failing yarn engine check since the x branch expects nodejs version example failure since the job is expected to run with file from both the stable and the master branch and since the version of nodejs is not important here this commit us the ignoreengines option to prevent failure due to nodejs version mismatch note typically the stable and master branch are on the same nodejs version because related pr land on both master and the patch branch one exception is during rc period when the stable branch is different than the patch branch these period are usually short but in the case of the period ha lasted several month causing the ci environment between master and the stable branch to get significantly outofsync pr close ,ci
4621,ngcc improve lockfile error message the message now give concrete advice to developer who experience the error due to running multiple simultaneous build via webpack fix pr close ,fix
4622,languageservice completion for output event property in this commit add support for completion of property on event variable in bound output this is the second major pr to support completion for event variable the final completion support that must be provided is for event variable in binding targeting dom event like click pr close ,feat
4623,languageservice provide completion for event variable this commit add a completion for the event variable in bound event expression this is the first in a series of pr to support completion for property on event variable pr close ,feat
4624,languageservice make findoutputbinding a utility function this commit make findoutputbinding a utility function for the language service which will be used by the expressiondiagnostics module in keeping the function in locatesymbol result in a circular dependency between expressiondiagnostics and locatesymbol pr close ,refactor
4625,ivy remove unused argument in hostbindings function we had some logic for generating and passing in the elindex parameter into the hostbindings function but it wasnt actually being used for anything the only place left that had a reference to it wa the stylingbuilder and it only stored it without referencing it again pr close ,perf
4626,localize reenable filename in codeframe error message these were removed in caffdeccfcbdbcf due to a breaking change in an update to babelcore see this commit add back in the filename to these message resolve pr close ,fix
4627,ivy catch fataldiagnosticerror thrown from preanalysis phase component decorator handler expose preanalyze method to preload async resource template stylesheets the logic in preanalysis phase may throw fataldiagnosticerror error that contain useful information regarding the origin of the problem however these error from preanalysis phase were not intercepted in traitcompiler resulting in just error message text be displayed this commit update the logic to handle fataldiagnosticerror and transform it before throwing so that the result diagnostic error contain the necessary info pr close ,fix
4628,core fix typo in hierarchical injector doc fix pr close ,docs
4629,docsinfra add word to ignore in snippet pr close ,build
4630,languageservice remove repeated symbol definition for structural directive for the structural directive the path will contain multiple bounddirectivepropertyast which depends on the number of directive property in the attribute valueeg ngforlet item of trackby test it ha bounddirectivepropertyast ngforof and ngfortrackby pr close ,fix
4631,languageservice provide hover for microsyntax in structural directive pr close ,feat
4632,docsinfra update to angularmaterial rc this update increase the main bundle by kb payload size snapshot jan distmainescfeabfcccjs jan distmainescfeabfcccjs jan distpolyfillsesbefaaaddjs jan distpolyfillsescdcecefadejs jan distruntimeesbeaebaejs jan distruntimeesbeaebaejs pr close ,build
4633,docsinfra update fw to rc payload size snapshot jan distmainesbcbbaadcdjs jan distmainesbcbbaadcdjs jan distpolyfillsesbefaaaddjs jan distpolyfillsescdcecefadejs jan distruntimeesfafdfeffjs jan distruntimeesfafdfeffjs pr close ,build
4634,localize fix broken localizetranslate test the test failure most likely result from the babel update in the previous commit it doe look like we lost the file path from the error message which is something that we should follow up no in a separate change pr close ,test
4635,docsinfra update cli to rc payloadsizes jan distmainesaaadjs jan distmainesaaadjs jan distpolyfillsesbefaaaddjs jan distpolyfillsescdcecefadejs jan distruntimeesbebeccjs jan distruntimeesbebeccjs ,build
4636,languageservice avoid leaking host outside of languageservice a part of the effort to tighten the api surface of typescriptservicehost in preparation for the migration to ivy i realized some recently added apis are not strictly needed they can be safely removed without sacrificing functionality this allows u to clean up the code especially in the implementation of quickinfo where the typescriptservicehost is leaked outside of the languageservice class this refactoring also clean up some duplicate code where the quickinfo object is generated the logic is now consolidated into a simple createquickinfo method shared across two different implementation pr close ,refactor
4637,ivy change styling to use programmatic api on update previously we would write to classstyle a string elementclassname and elementstylecsstext turn out that approach is good for initial render but not good for update update using this approach are problematic because we have to check to see if there wa an out of bound write to style and than perform reconciliation this also requires the browser to bring up cs parser which is expensive another problem with old approach is that we had to queue the dom writes and flush them twice once on element advance instruction and once in hostbindings the double flushing is expensive but it also mean that a directive can observe that style are not yet written they are written after directive executes the new approach us elementclasslistaddremove and elementstylesetpropertyremoveproperty api for update only it continues to use elementclassname and elementstylecsstext for initial render a it is cheaper the other change is that the styling change are applied immediately no queueing this mean that it is the instruction which computes priority in some circumstance it may result in intermediate writes which are than overwritten with new value this should be rare overall this change deletes most of the previous code and replaces it with new simplified implement the simplification result in code saving pr close ,refactor
4638,core add array modification function this change introduces several function for manipulating item in an array in an efficient binary search way arraysplice a faster version of arraysplice arrayinsert a faster version of arrayspliceindex value arrayinsert a faster version of arrayspliceindex value value arrayinsertsorted a way to insert a value into sorted list arrayremovesorted a way to remove a value from a sorted list arrayindexofsorted a way to find a value in a sorted list arraymap efficient implementation of map a an array arraymapset arraymapget arraymapindexof and arraymapdelete for manipulating arraymaps pr close ,refactor
4639,ivy switch styling to new reconcile algorithm note this change must be reverted with previous deletes so that it code remains in buildable state this change deletes old styling code and replaces it with a simplified styling algorithm the mental model for the new algorithm is create a linked list of styling binding in the order of priority all styling binding ere executed in compiled order and than a linked list of binding is created in priority order flush the style binding at the end of advance instruction this implies that there are two flush event one at the end of template advance instruction in the template second one at the end of hostbindings advance instruction when processing host binding if any each binding instruction effectively update the string to represent the string at that location because most of the binding are additive this is a cheap strategy in most case in rare case the strategy requires removing token from the styling up to this point we expect that to be rare case because the binding are presorted in the order of priority it is safe to resume the processing of the concatenated string from the last change binding pr close ,refactor
4640,ivy delete all styling code part of next sha note this change deletes code and creates a broken sha if reverting this sha need to be reverted with the next sha to get back into a valid state pr close ,refactor
4641,ivy generate slot per styling instruction compiler keep track of number of slot var which are needed for binding instruction normally each binding instruction allocates a single slot in the lview but styling instruction need to allocate two slot pr close ,refactor
4642,ivy implement computestaticstyling the computestaticstyling will be used for computing static styling value during firstcreatepass the function take into account static styling from the template a well a from the host binding the host binding need to be merged in front of the template so that they have the correct priority pr close ,refactor
4643,ivy create better styling parsing api parsing styling is now simplified to be used like so for let i parsestyletext i i parsestylenexttext i const key getlastparsedkey const value getlastparsedvalue this change make it easier to invoke the parser from other location in the system without paying the cost of creating and iterating over map of style pr close ,refactor
4644,ivy delete ɵɵelementhostattrs instruction pr close ,refactor
4645,ivy delete ɵɵallochostvars instruction delete ɵɵallochostvars instruction in favor of using hostvars declaration on drictivedef directly pr close ,refactor
4646,ivy move hostvarshostattrs from instruction to directivedef this change move information from instruction to declarative position ɵɵallochostvarsvars directivedefhostvars ɵɵelementhostattrsattrs directivedefhostattrs when merging directive it is necessary to know about hostvars and hostattrs before this change the information wa stored in the hostbindings function this wa problematic because in order to get to the information the hostbindings would have to be executed in order for hostbindings to be executed the directive would have to be instantiated this mean that the directive instantiation would happen before we had knowledge about the hostattrs and a a result the directive could observe in the constructor that not all of the hostattrs have been applied this further complicates the runtime a we have to apply hostattrs in part over many invocation ɵɵallochostvars wa unnecessarily complicated because it would have to update the lview and blueprint while existing directive are already executing by moving it out of hostbindings function we can access it statically and we can create correct lview and blueprint in a single pas this change only change how the instruction are generated but doe not change the runtime much we cheat by emulating the old behavior by calling ɵɵallochostvars and ɵɵelementhostattrs subsequent change will refactor the runtime to take advantage of the static information pr close ,refactor
4647,ivy add inserttstylingbinding to keep track of binding this add inserttstylevalue but doe not hook it up to anything yet the purpose of this function is to create a linkedlist of styling related binding the binding can be traversed during flush the linked list also keep track of duplicate this is important for binding to know if it need to check other style for reconciliation pr close ,refactor
4648,ivy add style reconciliation algorithm this change introduces classstyle reconciliation algorithm for dom element note the code is not yet hooked up it will be used by future style algorithm background styling algorithm currently ha two path when computing how the style should be rendered a direct path which concatenates styling and us elemnentclassnameelementstylecsstext and a merge path which us internal data structure and us elementclasslistaddremoveelementstyleproperty the situation is confusing and hard to followmaintain so a future pr will remove the mergepath and do everything with directpath this however break when some other code add class or style to the element without angulars knowledge if this happens instead of switching from directpath to mergepath algorithm this change provides a different mental model whereby we always do directpath but the code which writes to the dom detects the situation and reconciles the out of bound write the reconciliation process is a follows detect that no one ha modified classnamecsstext and if so just write directly fast path if out of bound write did occur switch from writing using classnamecsstext to elementclasslistaddremoveelementstyleproperty this doe require that the write function computes the difference between the previous angular expected state and current angular state this requires a parser the advantage of having a parser is that we can support stylewidth exppx kind of binding compute the diff and apply it in non destructive way using elementclasslistaddremoveelementstyleproperty property of approach if no out of bound style modification very fast code path just concatenate string in right order and write them to dom class list order is preserved if out of bound style modification detected penalty for parsing switch to non destructive modification elementclasslistaddremoveelementstyleproperty switch to alphabetical way of setting class pr close ,refactor
4649,ivy dont detect change on detached child embedded view fix ivy detecting change inside child embedded view even though theyre detached note that there on subtlety here i made the change inside refreshdynamicembeddedviews rather than refreshview because we support detecting change on a detached view evidenced by a couple of unit test but only if it triggered directly from the view changedetectorref however we shouldnt be detecting change in the detached child view when something happens in the parent fix pr close ,fix
4650,docsinfra use the correct version of yarn in aiomonitoringstable the aiomonitoringstable ci job need to check out and execute command on some file from the stable branch therefore it need to use a version of yarn that is compatible with the engine version specified in aiopackagejson in and subsequently for the x branch the way to access our vendored version of yarn changed this commit ensures that we checkout the necessary file from the stable branch to use an appropriate yarn version pr close ,ci
4651,ivy introduce the core package and split apart ngtscprogram previously ngtscprogram lived in the main angularcompilercli package alongside the legacy view engine compiler a a result the main package depended on all of the ngtsc internal package and a significant portion of ngtsc logic lived in ngtscprogram this commit refactors ngtscprogram and move the main logic of compilation into a new core package the new package defines a new api which enables implementers of typescript compiler compiler built using the t api to support angular transpilation a well it involves a new ngcompiler type which take a tsprogram and performs angular analysis and transformation a well a an ngcompilerhost which wrap an input tscompilerhost and add any extra angular file together these two class are used to implement a new ngtscprogram which adapts the legacy apiprogram interface used by the view engine compiler onto operation on the new type the new ngtscprogram implementation is significantly smaller and easier to reason about the new ngcompilerhost replaces the previous generatedshimshostwrapper which lived in the shim package a new resource package is added to support the hostresourceloader which previously lived in the outer compiler package a a result of the refactoring the dependency of the outer angularcompilercli package on ngtsc internal package are significantly trimmed this refactoring wa driven by the desire to build a plugin interface to the compiler so that tscwrapped another consumer of the t compiler apis can perform angular transpilation on user request pr close ,refactor
4652,ivy add more styling usecases to benchmark new benchmark focus on style binding style and ngstyle pr close ,perf
4653,languageservice diagnostic span should point to class name right now if an angular diagnostic is generated for a typescript node the span point to the decorator identifier ie the identifier node like ngmodule component etc this is weird it should point to the class name instead note we do not have a more finegrained breakdown of the span when diagnostics are emitted this work remains to be done pr close ,fix
4654,languageservice make metadata in declaration nonoptional the metadata field in declaration should not be optional pr close ,fix
4655,ngcc do not attempt compilation when analysis fails in ngtsc wa refactored to separate the result of the analysis and resolve phase for more granular incremental rebuilds in this model any error in one phase transition the trait into an error state which prevents it from being ran through subsequent phase the ngcc compiler on the other hand did not adopt this strict error model which would cause incomplete metadata—due to error in earlier phases—to be offered for compilation that could result in a hard crash this commit update ngcc to take advantage of ngtscs traitcompiler that internally manages all ivy class that are part of the compilation this effectively replaces ngccs own analyzedfile and analyzedclass type together with all of the logic to drive the decoratorhandlers all of this is now handled in the traitcompiler benefiting from it explicit state transition of trait so that the ngcc crash is a thing of the past fix resolve fw pr close ,fix
4656,ngcc remove usage of e syntax in esumdcommonjs test this syntax is invalid in these source file and doe result in compilation error a the constructor parameter could not be resolved this hasnt been an issue until now a those error were ignored in the test but future work to introduce the trait system of ngtsc into ngcc will cause these error to prevent compilation resulting in broken test pr close ,test
4657,ngcc do not collect private declaration from external package previously while trying to build an ngccreflectionhosts privatedtsdeclarationmap computeprivatedtsdeclarationmap would try to collect exported declaration from all source file of the program ie without checking whether they were within the target package a happens for declaration in dts file most of the time that would not be a problem because external package would be represented a dts file in the program but when an external package had no typing the j file would be used instead a a result the reflectionhost would try to unnecessarilly parse the file in order to extract exported declaration which in turn would be harmless in most case there are certain case though where the reflectionhost would throw an error because it can not parse the external package j file this could happen for example in umdreflectionhost which expects the file to contain exactly one statement see for more detail on a realworld failure this commit fix the issue by ensuring that computeprivatedtsdeclarationmap will only collect exported declaration from file within the target package jira issue fw fix pr close ,fix
4658,compilercli fix typo in typescriptcompilerhostgetexportsofmodule error message pr close ,refactor
4659,ivy move incremental package readme file to the correct location it wa erroneously committed to src pr close ,docs
4660,ivy correctly emit component when it removed from it module this commit fix a bug in the incremental rebuild engine of ngtsc where if a component wa removed from it ngmodule it would not be properly reemitted the bug stemmed from the fact that whether to emit a file wa a decision based purely on the updated dependency graph which capture the dependency structure of the rebuild program this graph ha no edge from the component to it former module a it wa removed of course so the compiler erroneously decides not to emit the component the bug here is that the compiler doe know from the previous dependency graph that the component file ha logically changed since it previous dependency the module file ha changed this information wa not carried forward into the set of file which need to be emitted because it wa assumed that the updated dependency graph wa a more accurate source of that information with this commit the set of file which need emit is prepopulated with the set of logically changed file to cover edge case like this fix pr close ,fix
4661,common expose getlocalecurrencycode publicly it wa previously defined in core without being exposed publicly whereas getlocalecurrencyname and getlocalecurrencysymbol were defined in common and publicly exposed this commit now privately expose ɵgetlocalecurrencycode from core and reexports it publicly from common pr close ,feat
4662,languageservice specific suggestion for template context diags this commit elaborates diagnostics produced for invalid template context by including the name of the embedded template type using the template context and in the common case that the implicity property is being referenced eg in a for of expression suggesting to refine the type of the context this suggestion is provided because user will sometimes use a base class a the type of the context in the embedded view and a more specific context later on eg in an ngonchanges method close pr close ,feat
4663,ivy use any for generic context check when stricttemplates previously the template typechecker would always construct a generic template context type with correct bound even when stricttemplates wa disabled this meant that typechecking of expression involving that type wa stricter than view engine this commit introduces a strictcontextgenerics flag which behaves similarly to other stricttemplates flag and switch the inference of generic type parameter on the component context based on the value of this flag pr close ,fix
4664,ivy disable use of aliasing in template typechecking filetomodulehost aliasing support compilation within environment that have two property a filetomodulehost exists which defines canonical module name for any given t file dependency restriction exist which prevent the import of arbitrary file even if such file are within the dts transitive closure of a compilation strictdeps in such an environment generated import can only go through import path which are already present in the user program the aliasing system support the generation and consumption of such import at runtime filetomodulehost aliasing doe not emit reexports in dts file this mean that it safe to rely on alias reexports in generated j code they are guaranteed to exist at runtime but not in template typechecking code since t will not be able to follow such import therefore nonaliased import should be used in template typechecking code this commit add a noaliasing flag to importflags and set it when generating import in template typechecking code the testing environment is also patched to support resolution of filetomodulehost canonical path within the template typechecking program enabling testing of this change pr close ,fix
4665,ivy change importmode enum to importflags previously referenceemitteremit took an importmode enum value where one value of the enum allowed forcing new import to be generated when emitting a reference to some value or type this commit refactors importmode to be an importflags value instead using a bit field of flag will allow future customization of reference emitting pr close ,refactor
4666,ivy wrap a any cast in parenthesis when needed previously when generating template typechecking code cast to any were produced a expr a any regardless of the expression however for certain expression type this led to precedence issue with the cast for example a b is a tsbinaryexpression and wrapping it directly in the cast yield a b a any which is semantically equivalent to a b a any this is obviously not what is intended instead this commit add a list of expression type for which a bare wrapping is permitted for other expression parenthesis are added to ensure correct precedence a b a any pr close ,fix
4667,ivy typecheck multiple binding to the same input currently the template typechecker give an error if there are multiple binding to the same input this commit aligns the behavior of the template typechecker with the view engine runtime only the first binding to a field ha any effect the rest are ignored pr close ,fix
4668,ivy typechecking of property which map to multiple field it possible to declare multiple input for a directivecomponent which all map to the same property name this is usually done in error a only one of any binding to the property will win in the template typechecker an error wa previously being raised a a result of this ambiguity specifically a type constructor wa produced which required a binding for each field but only one of the field had a value via the binding typescript would rightfully error on missing value for the remaining field this ultimately wa happening when the code which generated the default value for unset input belonging to directive or pipe used the final mapping from property to field a a source for field name instead this commit us the original list of field to generate unset input value which correctly provides value for field which shared a property name but didnt receive the final binding pr close ,fix
4669,ngcc library using spread in object literal can not be processed consider a library that us a shared constant for host binding eg t export const basebindings classmatthemed isthemed directive host basebindings click export class dir directive host basebindings click export class dir previously when these component were shipped a part of the library to npm consumer were able to consume dir and dir no error showed up now with ivy when ngcc try to process the library an error will be thrown the error is stating that the host binding should be an object which they obviously are this happens because typescript transforms the object spread to individual objectassign call for compatibility the partial evaluator used by the directive annotation handler is unable to process this expression because there is no integrated support for objectassign in view engine this wa not a problem because the metadatajson file from the library were used to compute the host binding fix pr close ,fix
4670,ngcc update packagejson deterministically ngcc add property to the packagejson file of the entrypoints it process to mark them a processed for a format and point to the created ivy entrypoints in case of createivyentrypoints when running ngcc in parallel mode which is the default for the standalone ngcc command multiple format can be processed simultaneously for the same entrypoint and the order of completion is not deterministic previously ngcc would append new property at the end of the target object in packagejson a soon a the format processing wa completed a a result the order of property in the resulting packagejson when processing multiple format for an entrypoint in parallel wa not deterministic for tool that use file hash for caching purpose such a bazel this lead to a high probability of cache miss this commit fix the problem by ensuring that the position of property added to packagejson file is deterministic and independent of the order in which each format is processed jira issue fw fix pr close ,fix
4671,ngcc verify that packagejsonupdater doe not write to file from worker process pr close ,test
4672,languageservice recognize inputsouputs declared in decorator this commit add a regression test to check that the language service recognizes input and output declared in a directive decorator see pr close ,test
4673,languageservice support multiple symbol definition in angular symbol can have multiple definition eg a twoway binding this commit add support for for multiple definition for a queried location in a template pr close ,feat
4674,ivy ensure eventlisteners added outside angular context are not called by debugelementtriggereventhandler zonejs track the eventlisteners on a node but we need to be able to differentiate between those added by angular and those that were added outside the angular context this fix aligns with the behavior that wa present in view engine not calling those listener if we decide later that we want to call those listener we still need a way to differentiate between those that we have wrapped in domrenderer and those that were not because they were added outside the angular context pr close ,fix
4675,compilercli require node a runtime engine similar to c this commit aligns the nodejs version requirement of the angular compiler with angular cli pr close ,feat
4676,ngcc only lock ngcc after targeted entrypoint check the angular cli will continue to call ngcc on all possible package even if they have already been processed by ngcc in a postinstall script in a parallel build environment this wa causing ngcc to complain that it wa being run in more than one process at the same time this commit move the check for whether the targeted package ha been processed outside the locked code section since there is no issue with multiple ngcc process from doing this check pr close ,fix
4677,ngcc lock ngcc when processing previously it wa possible for multiple instance of ngcc to be running at the same time but this is not supported and can cause confusing and flakey error at build time now only one instance of ngcc can run at a time if a second instance try to execute it fails with an appropriate error message see pr close ,feat
4678,ivy add exclusive mode to writefile this commit add an exclusive parameter to the filesystemwritefile method when this parameter is true the method will fail with an eexist error if the file already exists on disk pr close ,refactor
4679,ivy add removefile to ngtsc filesystem pr close ,refactor
4680,docsinfra always specify a landing file for stackblitz project the stackblitz api which we use to generate stackblitz project on the fly when a user click on a live example link in the doc allows specifying the file to open in the editor by passing a query param if no file is specified stackblitz open a default one in the past it used to be maints and nowadays it seems to be appcomponentts stackblitz builder the tool that we use to generate the stackblitz project allows specifying the primary file by setting the file property in the corresponding stackblitzjson previously if the file property wa not set stackblitz builder would not specify a file thus falling back on stackblitzs default behavior this wa not great because the default behavior may change unexpectedly is the future to something that is le useful for our user this commit change stackblitz builder to always specify a primary file if no file is specified in stackblitzjson the builder will look for the first file that exists in the example from a list of predefined file partially address pr close ,build
4681,docsinfra specify more relevant landing file for stackblitz project the stackblitz api which we use to generate stackblitz project on the fly when a user click on a live example link in the doc allows specifying the file to open in the editor by passing a query param if no file is specified stackblitz open a default one this commit specifies relevant landing file for some of the example to make it easier to engage with the example more quickly and to see what the example is attempting to demonstrate fix pr close ,build
4682,ivy debugnodeclasses not working on svg element fix ivy throwing an error when trying to access the debugnodeclasses of an svg element the problem is that the classname of an svg element is an svganimatedstring rather than a plain string fix pr close ,fix
4683,docsinfra do not output build progress for ee test on ci when running the ee test on ci it is desirable that the build progress is not logged because that clutter the log and make it difficult to get to the useful info in case of failure the previous config to achieve that doesnt work any more this commit update the ci configuration for ee test to suppress build progress logging pr close ,ci
4684,languageservice consistent naming between t and ng languageservice this commit make the angular language service interface a strict subset of typescript language service by renaming all method to be consistent with typescript the custom angular languageservice interface wa needed before the inception of typescript tsserver plugin but is now obsolete since angular l is a proper tsserver plugin this allows u to easily adapt to upstream t change in the future and also allows u to reuse all data type defined in typescript pr close ,refactor
4685,ivy remove stylesanitizer instruction in favor of an inline param this patch remove the need for the stylesanitizer instruction in favor of passing the sanitizer into directly into the styleprop instruction this patch also increase the binding index size for all styleclass binding in preparation for pr close ,refactor
4686,fix a strictbindcallapply issue stringfromcharcodes type signature requires a regular number pr close ,refactor
4687,docsinfra add autolinkfilter for generic word fix pr close ,build
4688,ivy more accurate detection of pipe in host binding pipe in host binding expression are not supported in view engine and ivy but in some more complex case like value pipe true compiler wa not reporting error this commit extends ivy logic to detect pipe in host binding expression and throw in case binding are present view engine behavior remains the same pr close ,fix
4689,docsinfra convert hardcoded comparingobservables example into a proper miniapp previously the example in the comparingobservables guide were hardcoded this made it impossible to test them and verify they are correct this commit fix this by converting them into a proper miniapp in a subsequent commit test will be added to verify that the source code work a expected and guard against regression fix pr close ,fix
4690,animation not waiting for child animation to finish when removing parent in ivy in we introduced an extra removenode call for host element which can cause the parent element to be removed before all child animation have finished the issue is only in ivy because that the only place where we pas in the ishostelement flag these change fix the issue by not retriggering the removal logic if the element ha inprogress animation fix pr close ,fix
4691,docsinfra convert hardcoded clibuilder example into a proper miniapp previously the example in the clibuilder guide were hardcoded this made it impossible to test them and verify they are correct this commit fix this by converting them into a proper miniapp in a subsequent commit test will be added to verify that the source code work a expected and guard against regression fix pr close ,fix
4692,languageservice cleanup of lowhanging todos clean up some simple todos also remove typescriptsymbolsgettypewrapper which i thought i had but failed to remove in pr close ,refactor
4693,core fix typo in dependency injection guide interactive interacting fix pr close ,docs
4694,core add missing quote in dependency injection provider guide add closing double quote in html class attribute in dependency injection provider guide fix pr close ,docs
4695,ivy ensure that localeid is set after app initializers before ivy it wa possible to configure a mutable service value in an application initializer by providing an appinitializer that could be read in the provider of localeid this is a common scenario if you wanted to load the locale id asynchronously from an http request for instance when using the ivy the runtime need to be told what the current locale is which is done by calling the setlocaleid function with the value injected by the localeid token previously this wa being done before the application initializers were run which meant that the localeid provider wa being executed before the app initializers had a chance to get a new value for it now this initalization of the locale for the ivy runtime is done after the application initializers have been run close pr close ,fix
4696,common cleanup the stylingdiffer and related code since i wa learning the codebase and had a hard time understanding what wa going on ive done a bunch of change in one commit that under normal circumstance should have been split into several commits because this code is likely going to be overwritten with miskos change im not going to spend the time with trying to split this up overall ive done the following i processed review feedback from i did a bunch of renaming to make the code easier to understand i refactored some internal function that were either inefficient or hard to read i also updated lot of type signature to correct them and to remove many cast in the code pr close ,fix
4697,common ensure diffing in ngstylengclass correctly emits value change prior to this change in ivy mode ngstylengclass would accidentally emit value change for static stringbased value even if the value itself had not changed this patch ensures that the styleclass diffing code is more strict and when it signal ngclassngstyle that there ha been a value change fix pr close ,fix
4698,core remove underscore suffix from locally scoped class expression name remove unnecessary underscore suffix and the corresponding todo comment because the rollup bug wa fixed githubcomrolluprollupissues pr close ,refactor
4699,ngcc update dependency host test description the describe description did not match the name of the method pr close ,test
4700,ngcc do not add dts deep import to missing package list when searching the typing program for a package for import a distinction is drawn between missing entrypoints and deep import previously in the dtsdependencyhost these deep import may be marked a missing if there wa no typing file at the deep import path instead there may be a javascript file instead in practice this mean the import is deep and not missing now the dtsdependencyhost will also consider j file when checking for deepimports and it will also look inside type for a suitable deepimported typing file fix pr close ,fix
4701,ngcc remove declare from j class pr close ,test
4702,docsinfra use typescript pr close ,build
4703,docsinfra compile only app for example with no ee with t these example were running into the error below eg on aio example output for homecirclecingaiocontentexamplesobservables running yarn tsc project homecirclecingaiocontentexamplesobservablesnodemodulesbintsc project toolsexamplessharednodemodulesprotractorbuiltindexdts error t import declaration conflict with local declaration of pluginconfig toolsexamplessharednodemodulesprotractorbuiltindexdts error t import declaration conflict with local declaration of protractorplugin error command failed with exit code info visit for documentation about this command completed yarn tsc project this happened because of it unclear why this typing problem doe not affect ng ee run and only affect tsc run for now it seems sensible to alter the test to compile only the app and not the ee since the intent of wa never to verify the correctness of the ee in the first place we still need a release of protractor that support t though but at least it doesnt seem to block our update proper pr close ,test
4704,languageservice provide completion for event variable this commit add a completion for the event variable in bound event expression this is the first in a series of pr to support completion for property on event variable pr close ,feat
4705,compiler refactor and export bazel host creation refactored bazel host creation to export some of the relevant utility function google need to make some modification to the bazel host to enable the ivy migration the functionality exported here is still needed in g but it allows g code to create the bazel host make necessary modification and then provide it to the external codebase here while everything is still compatible for external user this is a noop pr close ,refactor
4706,ivy handle overloaded constructor in ngtsc currently ngtsc look for the first constructordeclaration when figuring out what the parameter are so that it can generate the di instruction the problem is that if a constructor ha overload itll have several constructordeclaration member with a different number of parameter these change tweak the logic so it look for the constructor implementation pr close ,fix
4707,form accept number length in length validators both minlengthvalidator and maxlengthvalidator accepted only string input for the length required which throw with ivy and fulltemplatetypecheck enabled min in the component input minlengthmin with type number is not assignable to type string undefined this relaxes the accepted type to string number to avoid breakage when developer switch to ivy and fttc pr close ,fix
4708,languageservice construct proper template ast from html ast the template ast that corresponds to a given html ast is not always complete and often ha to be reconstructed this commit refactors the code to make it easier to adapt to multiple case pr close ,refactor
4709,ivy add static style to the list of scenario pr close ,perf
4710,ivy add create scenario to the styling benchmark pr close ,perf
4711,ivy add noop change detection scenario to the styling benchmark pr close ,perf
4712,ivy properly bootstrap component with attribute selector fix pr close ,fix
4713,languageservice apply suggested change pr close ,fix
4714,languageservice only visit directive pr close ,fix
4715,languageservice test case pr close ,refactor
4716,languageservice break the hoverdefinitions for twoway binding pr close ,fix
4717,languageservice support hoverdefinitions for structural directive pr close ,feat
4718,languageservice add symboltypearguments and doe cleanup add a typearguments method to the symbol interface cleaning up how type parameter of a typescript type are currently found this will be necessary for providing completion for event variable property this commit also performs some flyby cleanup seen while implementing the typearguments method there is more clean up to do in the typescriptsymbols file but the scope of this commit didnt need to get larger pr close ,refactor
4719,languageservice create attr for missing attr bound tmpl currently the language service construct an attrast anytime it is missing from a templateast path however this should only be done when the path doe not contain an attributelike ast which can includes bound property or bound event this commit also refactors visitattr to parse binding only for microsyntax expression and doe some other minor cleanup to make linters happy this is some cleanup to help the language service eventually use bounddirectivepropertyasts for providing completion for template binding rather than performing the manual parsing currently done pr close ,refactor
4720,ivy prevent error when querying debugelement root that were outside angular context debugelementquery also match element that may have been created outside of angular ex with documentappendchild if those matched debugelements are in turn used to query for more element an error occurs because the first step in queryall is to load the lcontext pr close ,fix
4721,common allow default currency code to be configurable default currency code in currencypipe is currently hardcoded to usd and is not configurable this commit allows the default currency code to be configurable by adding a defaultcurrencycode injection token example provider provide defaultcurrencycode usevalue gbp currency output £ a opposed to always before close pr close ,feat
4722,ngcc correctly detect dependency in commonjs previously commonjsdependencyhostcollectdependencies would only find dependency via import of the form var foo require or var foo require bar require however commonjs file can have import in many different form by failing to recognize other form of import the associated dependency were missed which in turn resulted in entrypoints being compiled outoforder and failing due to that while we can not easily capture all different type of import this commit enhances commonjsdependencyhost to recognize the following common form of import import in property assignment eg exportsfoo require or moduleexports foo require import for sideeffects only eg require star reexports with both emitted and imported heleprs eg exportrequire or tslibexportstarrequire export pr close ,fix
4723,ngcc fix typo in commonjsdependencyhost test to avoid confusion pr close ,test
4724,ivy do not reset view dirty state in check no change mode unlike in view engine we currently reset the dirty state of component in the check no change change detection cycle this mean that component can not be marked a dirty from view lifecycle hook because the dirty state is reset and the lifecycle hook do not run in the check no change cd cycle pr close ,fix
4725,ivy styling algorithm benchmark pr close ,perf
4726,docsinfra simplify firebase redirect config this simplifies the firebase redirect config removing a redundant pattern api which is covered by the previous pattern and dropping an unused named captured segment rest this change doe not affect the redirection behavior for the deployed apps but allows the firebase hosting emulator to work correctly see here for more info note although we are not currently using the firebase emulator for developmenttesting we might want to use it in the future pr close ,refactor
4727,common remove unnecessary private annotation the private annotation on a function upset tsc and appears unnecessary for nonexported function pr close ,style
4728,languageservice crlf offset in inline template this commit fix incorrect crlf offset in inline template pr close pr close ,fix
4729,ivy dont run decorator handler against declaration file currently the decorator handler are run against all sourcefiles in the compilation but we shouldnt be doing it against declaration file this initially came up a a ci issue in where it wa worked around only for the directivedecoratorhandler these change move the logic into the traitcompiler and decorationanalyzer so that it applies to all of the handler pr close ,fix
4730,languageservice remove test case from parsingcasests this commit remove some test scenario from parsingcasests and colocate them with the test code instead this make the test easier to read and understand pr close ,test
4731,languageservice rename expression completion method this commit renames addattributevaluestocompletions which generates expression completion and is not exclusive to processing attribute to processexpressioncompletions also remove the expression completion logic in visitboundtext for a call to processexpressioncompletions the conditional branch in visitboundtext is also removed this branch wa added in one of the first commits to the language service abdbcdbeaaca and appears to be unnecessary a the expression ast is constructed from the template position anyway pr close ,refactor
4732,ngcc recognize reexports with imported t helper in commonjs and umd previously the commonjsreflectionhost and umdreflectionhost would only recognize reexports of the form export this is what reexports look like when the typescript helper are emitted inline ie when compiling with the default typescript compiler option that include noemithelpers false and importhelpers false however when compiling with importhelpers true and tslib which is the recommended way for optimized bundle the reexports will look like tslibexportstar export these type of reexports were previously not recognized by the commonjsumd reflectionhosts and thus ignored this commit fix this by ensuring both reexport format are recognized pr close ,fix
4733,ivy remove call into other instruction from pipe instruction a while ago we made a pas through all instruction to make sure that none of them call directly into other instruction however it seems like missed the pipebind since they still call into the pure function the result is that we have some unnecessary duplicated access of global state like getlview which are called twice in a row with nothing changing these change move the common functionality into a shared file and make the pipe instruction call into them with the global state instead pr close ,refactor
4734,languageservice do not use an in parser for template the compiler inhtmlparser may expand template node that have internationalization metadata attached to them for instance html div inineldiv get expanded to an ast with the in metadata extracted and text filled in a necessary to the language service the template above a read in the ast now look something like html divimplicitdiv this is undesirable for the language service because we want to preserve the original form of the source template source code and have information about the original value of the template the language service also doe not need to use an in parser we dont generate any template output to fix this turn out to be a easy a moving to using a raw htmlparser a note on the testing strategy a mentioned above we dont need to use an in parser but we dont not need to use one if the parser doe not heavily modify the template ast for this reason the test target the functionality of not modifying a template with in metadata rather than testing that the language service doe not use an in parser close pr close ,fix
4735,docsinfra do not deploy firebase realtime database rule currently the angulario project do not use firebase realtime database and therefore we only need to configure and deploy change for hosting this commit remove the unused realtime database related configs and file pr close ,ci
4736,core remove duplicate injectabletype declaration this duplication cause a compilation error with typescript pr close ,refactor
4737,ivy document breaking change with select and binding order close pr close ,docs
4738,form disabled input acceptance member not properly applied with cecdcdcadeeafdbcc we intended to expand the input type of the disabled input of the ngmodel directive read more about the reason for this in the actual commit message currently though the acceptance coercion member doe not have any effect this is because the acceptance member need to refer to the actual input property name and not to the public input name disabled corresponds to the isdisabled property pr close ,fix
4739,ivy improve expressionchangedafterchecked error message for attribute this commit improves expressionchangedafterchecked error message for attribute by including attribute name and the content of the entire expression that contains interpolation in order to achieve that metadata is now stored in tdata array when attribute and attributeinterpolate instruction are being called similar to property and propertyinterpolate instruction pr close ,feat
4740,languageservice completion support for template reference variable pr close ,feat
4741,languageservice make appcomponent a constant clean up usage of appcomponentts to be a constant file variable pr close ,test
4742,ivy add test for class setter being invoked when not used add a test that we should make pas once the latest styling refactor ha landed pr close ,test
4743,ngcc insert definition after statement if a class wa defined a a class expression in a variable declaration the definition were being inserted before the statments final semicolon now the insertion point will be after the full statement fix pr close ,fix
4744,bazel remove explicit deps param to tscompileactions this wa already the default im working on a change in the underlying t rule where this parameter will be replaced so ngmodule need to change first pr close ,refactor
4745,ngcc handle umd factory that do not use all params in some case where a module import a dependency but doe not actually use it umd bundlers may remove the dependency parameter from the umd factory function definition for example import a x from x import a z from z export const y x may result in a umd bundle including function global factory typeof export object typeof module undefined factoryexports requirex requirez typeof define function defineamd defineexports x z factory global global self factoryglobalmybundle globalx this function export x use strict note that while the z dependency is provide in the call the factory itself only accepts export and x a parameter previously ngcc appended new dependency to the end of the factory function but this break in the above scenario now the new dependency are prefixed at the front of parametersarguments already in place fix pr close ,fix
4746,ngcc dont crash if symbol ha no declaration in some case typescript is unable to identify a valid symbol for an export in this case it return an unknown symbol which doe not reference any declaration this fix ensures that ngcc doe not crash if such a symbol is encountered by checking whether symboldeclarations exists before accessing it the commit doe not contain a unit test a it wa not possible to recreate a scenario that had such an unknown symbol in the unit test environment the fix ha been manually checked against that original issue and also this check is equivalent to similar check elsewhere in the code eg fix pr close ,fix
4747,docsinfra bump handlebar from to in aiotoolsexamplesshared bump handlebar from to release note changelog commits signedoffby dependabotbot supportgithubcom pr close ,build
4748,docsinfra bump handlebar from to in aio bump handlebar from to release note changelog commits signedoffby dependabotbot supportgithubcom pr close ,build
4749,ivy ngclass not applying class with trailingleading space fix class with trailing or leading space that are passed to ngclass eg foo bar not being applied in ivy the issue come from the fact that when the styling differ build up the style map it us the trimmed key to look up the value in the map that us nontrimmed key fix pr close ,fix
4750,ivy warn instead of throwing for unknown element followup from this discussion in ivy we dont use the schema to validate tag name but instead we use feature detection to figure out whether an element is supported while this should generally be more accurate itll also end up throwing for some more innocent case eg now ivy throw an error for main element in ie which is accurate since ie doesnt support the element but is annoying since there is no functionality attached these change switch to logging a warning instead similarly to what were doing for unknown property pr close ,fix
4751,ngcc avoid error due to circular dependency in esmdependencyhost previously there wa circular dependency between ngccsrcutilsts ngccsrcdependenciesdependencyhostts and ngccsrcdependenciesesmdependencyhostts more specifically utilsts would import from esmdependencyhostts which would import from dependencyhostts which would in turn import from utilsts this might be fine in some environmentsmodule format but it can cause unclear error in the transpiled commonjsumd format given how nodejs handle cycle in module resolution an example error can be found here this commit fix the problem by moving the code that depends on esmdependencyhost out of utilsts and into a dedicated file under dependency it also convert the createdtsdependencyhost function to a class for consistency with the rest of the dependencyhosts pr close ,fix
4752,ngcc use a special map for memoizing expensivetocompute value previously in case were value were expensive to compute and would be used multiple time a combination of a regular map and a helper function getordefault wa used to ensure value were only computed once this commit us a special maplike structure to compute and memoize such expensive value without the need to a helper function pr close ,refactor
4753,ngcc avoid returning the same toplevel helper call multiple time this change should not have any impact on the code behavior based on how the function is currently used but it will avoid unnecessary work pr close ,refactor
4754,ngcc share code between commonjsreflectionhost and umdreflectionhost while different commonjs and umd have a lot in common regarding the their export are constructed therefore there wa some code duplication between commonjsreflectionhost and umdreflectionhost this commit extract some of the common bit into a separate file a helper to allow reusing the code in both reflectionhosts pr close ,refactor
4755,ngcc recognize reexports with require call in umd previously umdreflectionhost would only recognize reexports of the form exportsomeidentifier and not exportrequire however it is possible in some umd variation to have the latter format a well see discussion in this commit add support for reexport of the form exportrequire in umd pr close ,fix
4756,ngcc correctly handle inline export in umd this fix wa part of a broader ngtscngcc fix in babcf see there for detail in babcf the fix wa only applied to commonjsreflectionhost but it is equally applicable to umdreflectionhost later in the fix wa partially ported to umdreflectionhost by fixing the extractumdreexports method this commit fully fix ngccs handling of inline export for code in umd format pr close ,fix
4757,form remove redundant word pr close ,docs
4758,ivy ensure ngprojectas marker name appears at even attribute index the getprojectasattrvalue in nodeselectormatcher find the projectas marker and then additionally check that the marker appears in an even index of the node attribute because attribute name are stored at even index this is true for regular attribute binding but class style binding template and in do not necessarily follow this rule because there can be an uneven number of them causing the next special attribute name to appear at an odd index to address this issue ensure ngprojectas is placed right after regular attribute pr close ,fix
4759,common remove trailing whitespace for currencypipe trimming any surrounding whitespace character informatnumbertolocalestring if currency symbol issupressed close pr close ,fix
4760,docsinfra extract all lazyloadingngmodules example from miniapp previously some of the example in the lazyloadingngmodules guide were hardcoded this commit ensures all example in the guide are extracted from docregions in the corresponding example project pr close ,refactor
4761,ngcc do not add trailing comma in umd import previously if umdrenderingformatteraddimports wa called with an empty list of import to add ie no new import were needed it would add trailing comma in several location array function argument function parameter thus making the code imcompatible with legacy browser such a ie this commit fix it by ensuring that no trailing comma are added if addimports is called with an empty list of import this is a followup to fix pr close ,fix
4762,ngcc capture entrypoint dependency from typing a well a source ngcc computes a dependency graph of entrypoints to ensure that entrypoints are processed in the correct order previously only the import in source file were analysed to determine the dependency for each entrypoint this is not sufficient when an entrypoint ha a typeonly dependency for example only importing an interface from another entrypoint in this case the typeonly import doe not appear in the source code it only appears in the typing file this can cause a dependency to be missed on the entrypoint this commit fix this by additionally processing the import in the typing program a well a the source program note that these missing dependency could cause unexpected flake when running ngcc in async mode on multiple process due to the way that ngcc cache file when they are first read from disk fix fw pr close ,fix
4763,ngcc resolve module based on the provided moduleresolver the dependencyhost implementation were duplicating the postfix string which are used to find matching path when resolving module specifier now the host reuse the postfix given to the moduleresolver that is passed to the host pr close ,refactor
4764,ngcc pas dependency info to collectdependencies rather than return a new object of dependency info from call to collectdependencies we now pas in an object that will be updated with the dependency info this is in preparation of a change where we will collect dependency information from more than one dependencyhost also to better fit with this approach the name is changed from finddependencies to collectdependencies pr close ,refactor
4765,ivy minor change to version guide the main change here wa to remove the updating instruction for version and instead point to updateangulario this ensures we only have one source of truth for update instruction this commit also includes update to error message text to keep them uptodate with live error message and thus keep them searchable pr close ,docs
4766,ivy append advance instruction before inexp prior to this commit there were no advance instruction generated before inexp instruction and a a result lifecycle hook for component used inside in block were flushed too late this commit add the logic to generate advance instruction in front of inexp one similar to what we have in other place like interpolation property binding etc so that the necessary lifecycle hook are flushed before expression value is captured pr close ,fix
4767,ivy skip field inheritance if inheritdefinitionfeature is present on parent def the main logic of the inheritdefinitionfeature is to go through the prototype chain of a given component and merge all angularspecific information onto that component def the problem happens in case there is a component in a hierarchy that also contains the inheritdefinitionfeature ie it extends some other component so it inherits all angularspecific information from it super class a a result the root component may end up having duplicate information inherited from different component in hierarchy let consider the following structure grandchild extends child that extends base and the base class ha a hostlistener in this scenario grandchild and child will have inheritdefinitionfeature included into the feature list the processing will happend in the following order child inherits hostlistener from the base class grandchild inherits hostlistener from the child class since child ha a parent grandchild also inherits from the base class the result is that the grandchild def ha duplicated host listener which is not correct this commit introduces additional logic that check whether we came across a def that ha inheritdefinitionfeature feature which mean that this def already inherited information from it super class if thats the case we skip further fieldsrelated inheritance logic but keep going though the prototype chain to look for super class that contain other feature like ngonchanges that we need to invoke for a given component def pr close ,fix
4768,ivy testbed not unwrapping import array function when overriding provider fix an error that is thrown when a provider is overridden in testbed if the module definition of one of the imported module us a function for the import that is set via setngmodulescope the problem wa that we have a forof loop that assumes that the import are an array but they can also be a function this wa handled correctly in other place but this one wa missed note that the abovementioned error is only thrown at runtime when the code is transpiled to e in e t generates a call to a helper that handle the error silently so the attached unit test only fails in e fix pr close ,fix
4769,languageservice correctly parse expression in an attribute currently the language service provides completion in a template node attribute by first checking if the attribute contains template binding to provide completion for and then providing completion for the expression in the attribute in the latter case the expression ast wa being constructed synthetically inside the language service in particular declaring the expression to be a propertyread with an implicit receiver unfortunately this ast can be incorrect if the expression is actually a property read on a component property receiver eg when reading key in the expression objkey obj is the receiver the fix is pretty simple rather than a synthetic construction of the ast ask the expression parser to parse the expression in the attribute fix pr close ,fix
4770,languageservice show documentation on hover this commit add dpcumentation to the hover tooltip pr close pr close ,feat
4771,languageservice the pipe method should not include parenthesis pr close ,fix
4772,ivy let stricttemplates imply fulltemplatetypecheck previously it wa required that both fulltemplatetypecheck and stricttemplates had to be enabled for strict mode to be enabled this is strange a stricttemplates implies fulltemplatetypecheck this commit make setting the fulltemplatetypecheck flag optional so that strict mode can be enabled by just setting stricttemplates pr close ,refactor
4773,ivy verify template type check option are compatible it is now an error if fulltemplatetypecheck is disabled while stricttemplates is enabled a enabling the latter implies that the former is also enabled pr close ,refactor
4774,ivy consistently translate type to tstypenode the compiler ha a translation mechanism to convert from an angular type to a tstypenode a appropriate prior to this change it would translate certain angular expression into their value equivalent in typescript instead of the correct type equivalent this wa possible a the expressionvisitor interface is not strictly typed with anys being used for return value for example a literal object wa translated into a tsobjectliteralexpression containing tspropertyassignment node a it entry this ha worked without issue a their printed representation is identical however it wa incorrect from a semantic point of view instead a tstypeliteralnode is created with tspropertysignature a it member which corresponds with the type declaration of an object literal pr close ,refactor
4775,ivy support simple generic type constraint in local type ctors in ivy template type checker type constructor are created for all directive type to allow for accurate type inference to work the type checker ha two strategy for dealing with such type constructor they can be emitted local to the type check blocktype check file they can be emitted a static ngtypector field into the directive itself the first strategy is preferred a it avoids having to update the directive type which would cause a more expensive rebuild however this strategy is not suitable for directive that have constrained generic type a those constraint would need to be present on the local type constructor declaration this is not trivial a it requires that any type reference within a type parameter constraint are imported into the local context of the type check block for example let consider the ngforof directive from angularcore look a follows typescript import ngiterable from angularcore export class ngforoft u extends ngiterablet the type constructor will then have the signature o pickingforoft u ngforof ingforoft u notice how this refers to the type parameter t and u so the type constructor need to be emitted into a scope where those type are available and have the correct constraint previously the template type checker would detect the situation where a type parameter is constrained and would emit the type constructor using strategy within the directive type itself this approach make any type reference within the generic type constraint lexically available typescript export class ngforoft u extends ngiterablet static ngtypectort any u extends ngiterablet any o pickngforoft u ngforof ngforoft u return null this commit introduces the ability to emit a type parameter with constraint into a different context under the condition that it can be imported from an absolute module this allows a generic type constructor to be emitted into a type check block or type check file according to strategy a import have been generated for all type reference within generic type constraint for example typescript import a i from angularcore import a i from angularcommon const ctor t any u extends ingiterablet any o pickingforoft u ngforof ingforoft u null notice how the generic type constraint of u ha resulted in an import of angularcore and the ngiterable is transformed into a qualified name during the emitting process resolve fw pr close ,perf
4776,compiler record end of expression token in the past only the starting index of an expression token ha been recorded so a parser could demarkate the span of a token only by the start location of two token this may lead to trailing whitespace being included in the token span html token token recorded span of token it also not enough for a parser to determine the end of a token by adding the length of the token value to the token start location because lexed expression value may not exactly reflect the source code for example de is lexed a a string token whose value is de instead this commit add a end field to expression token end is one past the last index of the token source code this will enable a parser to determine the span of a token just by looking at that token this is a breaking change because the contructor interface of token ha changed part of pr close ,feat
4777,languageservice append symbol type to hover tooltip now that fixed the typewrapper to have a proper name we have the information needed to show the type name in a hover tooltip pr close ,feat
4778,languageservice completion after let x of in ngfor this commit fix a bug in which we do testing for completion subsequently this expose another bug in our implementation whereby suggestion are not provided in ngfor where there should have been currently multiple test case are grouped together in a single template this requires the template to be somewhat complete so that test case that depend on variable declared earlier would pas consider the following example template div ngforlet forpersonperson of forpeoplepeople spanname forinterppersonpersonforinterpnamenamespan spanage personforinterpageagespan div in order to test forinterpperson people ha to be included after forpeople this mean the test case for forpeople is not reflective of the actual use case because the variable is already there in real case the expression would be incomplete and our implementation failed to take that into account this commit break such test into individual test and fix the bug in the underlying implementation pr close ,fix
4779,ivy error in ivy when inheriting a ctor from an undecorated base angular view engine us global knowledge to compile the following code typescript export class base constructorprivate vcr viewcontainerref directive export class dir extends base constructor inherited from base here dir extends base and inherits it constructor to create a dir the argument to this inherited constructor must be obtained via dependency injection view engine is able to generate a correct factory for dir to do this because via metadata it know the argument of base constructor even if base is declared in a different library in ivy di is entirely a runtime concept currently dir is compiled with an ngdirectivedef field that delegate it factory to getinheritedfactory this look for some kind of factory function on base which come up empty this case look identical to an inheritance chain with no constructor which work today in ivy both of these case will now become an error in this commit if a decorated class inherits from an undecorated base class a diagnostic is produced informing the user of the need to either explicitly declare a constructor or to decorate the base class pr close ,feat
4780,ivy throw compilation error when providing undecorated class add a compilation error if the consumer try to pas in an undecorated class into the provider of an ngmodule or the providersviewproviders array of a directivecomponent pr close ,feat
4781,ivy force ngspace error code for template error the function maketemplatediagnostic wa accepting an error code of type number making it easy to accidentally pas an errorcode directly and not convert it to an angular diagnostic code first this commit refactors maketemplatediagnostic to accept errorcode up front and convert it internally this is le errorprone pr close ,refactor
4782,ivy dont produce template diagnostics when scope is invalid previously ngtsc would perform scope analysis which directivespipes are available inside a component template and template typechecking of that template a separate step if a component scope wa somehow invalid eg it ngmodule imported something which wasnt another ngmodule the component wa treated a not having a scope this meant that during template typechecking error would be produced for any invalid expressionsusage of other component that should have been in the scope this commit change ngtsc to skip template typechecking of a component if it scope is erroneous a opposed to not present in the first place thus user arent overwhelmed with diagnostic error for the template and are only informed of the root cause of the problem an invalid ngmodule scope fix pr close ,fix
4783,ivy move ngmodule declaration check to the scope package previously each ngmodule trait checked it own scope for valid declaration during resolve this worked but caused the localmodulescoperegistry to declare that ngmodule scope were valid even if they contained invalid declaration this commit move the generation of diagnostic error to the localmodulescoperegistry where it belongs now the registry can consider an ngmodules scope to be invalid if it contains invalid declaration pr close ,refactor
4784,ivy avoid duplicate error in safe navigation and template guard the template type checker generates typescript expression for any expression that occurs in a template so that typescript can check it and produce error some expression a they occur in a template may be translated into typescript code multiple time for instance a binding to a directive input that ha a template guard one example would be the ngif directive which ha a template guard to narrow the type in the template a appropriate given the following template typescript component template div ngifperson personname div class appcomponent person name string a type check block tcb with roughly the following structure is created typescript function tcbctx appcomponent const t ngifngtypector ngif ctxperson if ctxperson ctxpersonname notice how the ngifperson binding is present twice once in the type constructor call and once in the if guard a such typescript will check both instance and would produce duplicate error if any were found another instance is when the safe navigation operator is used where an expression such a personname is emitted into the tcb a person null personname undefined a can be seen the lefthand side expression person occurs twice in the tcb this commit add the ability to insert marker into the tcb that indicate that any error within the expression should be ignored this is similar to tsignore however it can be applied more granularly pr close ,fix
4785,ivy cleanup translation of source span in type checker this commit clean up the template type checker regarding how diagnostics are produced pr close ,refactor
4786,ivy use absolute source span in type checker previously the type checker would compute an absolute source span by combining an expression ast node parsespan relative to the start of the expression together with the absolute offset of the expression a represented in a parsesourcespan to arrive at a span relative to the start of the file this information is now directly available on an expression ast node in the astsourcespan property which can be used instead pr close ,refactor
4787,ngcc remove private declaration alias now that the source to typing matching is able to handle aliasing of export there is no need to handle alias in private declaration analysis these were originally added to cope when the typing file had to use the name that the original source file used when exporting pr close ,refactor
4788,ngcc slightly improve the info in error message pr close ,refactor
4789,ngcc use the correct identifier when updating typing file previously the identifier used in the typing file were the same a those used in the source file when the typing file and the source file do not match exactly eg when one of them is flattened while the other is a deep tree it is possible for identifier to be renamed this commit ensures that the correct identifier is used in typing file when the typing file doe not export the same name a the source file fix pr close ,fix
4790,ngcc correctly match aliased class between src and dts file the naïve matching algorithm we previously used to match declaration in source file to declaration in typing file wa based only on the name of the thing being declared this did not handle case where the declared item had been exported via an alias a common scenario when one of the two file set source or typing ha been flattened while the other ha not the new algorithm try to overcome this by creating two map of export name to declaration ie mapstring tsdeclaration one for the source file and one for the typing file it then join these two together by matching export name resulting in a new map that map source declaration to typing declaration directly ie maptsdeclaration tsdeclaration this new map can handle the declaration name being different between the source and typing a long a they are ultimately both exported with the same alias name further more there is one map for public export ie exported via the root of the source tree the entrypoint and another map for private export which are exported from individual file in the source tree but not necessarily from the root this second map can be used to guess the mapping between export in a deep nonflat file tree which can be used by ngcc to add required private export to the entrypoint fix pr close ,fix
4791,ngcc handle umd reexports in t we can reexport import using statement of the form export from someimport this is downleveled in umd to function factoryexports someimport function exportm for var p in m if exportshasownpropertyp exportsp mp exportsomeimport this commit add support for this pr close ,fix
4792,ngcc handle commonjs reexports by reference in t we can reexport import using statement of the form export from someimport this can be downleveled in commonjs to either exportrequiresomeimport or var someimport requiresomeimport exportsomeimport previously we only supported the first downleveled version this commit add support for the second version pr close ,fix
4793,ngcc use bundle src to create reflection host previously individual property of the src bundle program were passed to the reflection host constructor but going forward more property will be required to prevent the signature getting continually larger and more unwieldy this change just pass the whole src bundle to the constructor allowing it to extract what it need pr close ,refactor
4794,languageservice append missing attrast to astpath when a html ast containing an attribute node is converted to a template ast the attribute node might get dropped from the template ast path this is because the attrnode is not even in the template ast to begin with in this case we manually fix the path by converting the attribute node to a attrast node and appending it to the path this allows the expressionvisitor to properly visit the leaf node in the templateast path we no longer need to visit the element and look for attribute pr close ,refactor
4795,languageservice proper completion for property and event this commit fix autocompletions for property and event binding the language service will no longer provide binding like click or id instead itll infer the context based on the bracket and provide suggestion without any bracket this fix also add support for alternative binding syntax such a bind on and bindon pr close pr close pr close ,fix
4796,ivy improve expressionchangedafterchecked error prior to this change the expressionchangedafterchecked error thrown in ivy wa missing useful information that wa available in view engine specifically missing property name for proprty binding and also the content of the entire property interpolation only a changed value wa displayed if one of expression wa changed unexpectedly this commit improves the error message by including the mentioned information into the error text pr close ,fix
4797,ivy correctly associate output bound event with directive previously bound event were incorrectly bound to directive with input matching the bound event attribute this fix that so bound event can only be bound to directive with matching output add test for all kind of directive matching on bound attribute pr close ,fix
4798,compilercli avoid unnecessarily calling getsourcefile twice in partialevaluator this is not expected to have any noticeable perf impact but it wasteful nonetheless and annoying when stepping through the code while debugging ngtscngcc pr close ,refactor
4799,docsinfra fix failure in aiomonitoringstable due to yarn version mismatch the aiomonitoringstable ci job is triggered a a cronjob on the master branch and it purpose is to run some ee test against the deployed stable version of the doc webapp at in order for the test to be compatible with the deployed version of the webapp which get deployed from the stable branch the stable branch is checked out in git a part of the ci job previously we only checked out the aio directory from the stable branch leaving the rest of the code at master this doesnt matter a long a the command used to run the test do not rely on code outside of aio however it turn out that there is code outside of aio that affect the executed command it is our vendored version of yarn in thirdpartygithubcomyarnpkg which overwrites the global yarn installed on the docker image on ci and must match the version range specified in aiopackagejson engine using the yarn version checked out from the master branch with the aio code checked out from the stable branch can lead to failure such a this one this commit fix the problem by checking out both the aio and thirdpartygithubcomyarnpkg directory from the stable branch and rerunning the step to overwrite the global yarn executable with our own version from thirdpartygithubcomyarnpkg this ensures that the version of yarn used will be compatible with the version range specified in aiopackagejson engine note we can not checkout everything from the stable branch since the ci config circleciconfigyml from the master branch may try to run certain script such a circlecigetvendoredyarnpathjs that are not available on the stable branch therefore we should only check out the necessary bit from the stable branch pr close ,ci
4800,ivy validate the ngmodule declaration field this commit add three previously missing validation to ngmoduledeclarations it check that declared class are actually within the current compilation it check that declared class are directive component or pipe it check that class are declared in at most one ngmodule pr close ,fix
4801,ngcc unnest accidentally nested describe block pr close ,refactor
4802,ngcc add debug message to help with debugging in parallel mode pr close ,refactor
4803,form expand ngmodel disabled type to work with strict template type checking ngmodel internally coerces any arbitrary value that will assigned to the disabled input to a boolean this ha been done to support the common case where developer set the disabled attribute without a value for example html input typecheckbox ngmodelvalue disabled this worked in view engine without any error because input were not strictly checked in ivy though developer can optin into strict template type checking where the attribute would be flagged this is because the ngmodelisdisabled property typewise only accepts a boolean to ensure that the common pattern described above can still be used and to reflect the actual runtime behavior we should add an acceptance member that make it work without type checking error using a coercion member mean that this is not a breaking change pr close ,feat
4804,languageservice html path should include last node before cursor given the following html and cursor position div cdiv cursor is here note that the cursor is after the attribute c under the current implementation only element is included in the path instead it should be element attribute this bug occurs only for case where the cursor is right after the node and it is because the end position of the span is excluded from the search instead the end position should be included pr close ,fix
4805,languageservice remove completion for let and of in ngfor let and of should be considered reserved keywords in template syntax and thus should not be part of the autocomplete suggestion for reference typescript doe not provide such completion this commit remove these result and clean up the code pr close ,fix
4806,ivy reorder provider type check to align with ve the ordering matter because we dont currently throw if multiple configuration are provided ie provider ha both useexisting and usefactory we should actually throw an error in this case but to avoid another breaking change in v this pr simply aligns the ivy behavior with viewengine pr close ,fix
4807,animation leaking detached node when parent ha a leave transition in the transitionanimationengine we keep track of the existing element with animation and we clear the cached data when theyre removed we also have some logic where we transition away the child element when a parent is removed however in that case we never cleared the cached element data which resulted in a memory leak the leak is particularly visible in material where whenever there an animated overlay with a component inside of it that ha an animation the child component would always be retained in memory fix pr close ,fix
4808,common ngstyle should ignore undefined value prior to ivy undefined value passed in an object to the ngstyle directive were ignored restore this behavior by ignoring key that point to undefined value close pr close ,fix
4809,ivy record correct absolute source span for ngforof expression expression in an inline template binding are improperly recorded a spaning an offset calculated from the start of the template binding attribute key whereas they should be calculated from the start of the attribute value which contains the actual binding ast pr close ,fix
4810,ngcc cleanup entrypoint bundle testcases there wa an issue with the program under test and two test with the same description this ha been fixed pr close ,test
4811,upgrade add example link to downgradecomponent function doc there were some extra example for downgradecomponent in the upgrade guide added a link to the relevant section of the guide in the downgradecomponent doc fix pr close ,docs
4812,ivy incorrect injectable name logged in warning message on ie when we log di error we get the name of the provider via someclassname in ie function that inherit from other function dont have their own name but they take the name from the lowest parent in the chain before function ive added some change to fall back to parsing out the function name from the function string form pr close ,fix
4813,ivy inheriting injectable definition from undecorated class not working on ie in jit mode the way definition are added in jit mode is through objectdefineproperty but the problem is that in ie property defined through defineproperty wont be inherited which mean that inheriting injectable definition no longer work these change add a workaround only for jit mode where we define a fallback method for retrieving the definition this isnt ideal but it should only be required until v where well no longer support inheriting injectable definition from undecorated class pr close ,fix
4814,ivy inheritance in jit mode not working correctly on ie fix the metadata and lifecycle hook inheritance not working properly in ie because we werent accessing thing correctly pr close ,fix
4815,ivy avoid using proto when reading metadata in jit mode in jit mode we use proto when reading constructor parameter metadata however it not supported on ie these change switch to using objectgetprototypeof instead pr close ,fix
4816,ivy account for inconsistent attribute order weve got some test that assert that the generate dom look correct the problem is that ie change the attribute order in innerhtml which caused the test to fail ive reworked the relevant test not to assert directly against innerhtml pr close ,test
4817,ivy unknown property and element check not working correctly in ie we have a couple of case where we use something like typeof node function to figure out whether were in a worker context this work in most browser but ie return object instead of function ive updated all the usage to account for it pr close ,fix
4818,ivy inconsistent attribute casing in debugnodeattributes on ie in debugelementattributes we return all of the attribute from the underlying dom node most browser change the attribute name to lower case but ie preserve the case and since we use camelcased attribute the return value wa inconsitent ive changed it to always lower case the attribute name pr close ,fix
4819,ivy in instruction thrown off by sanitizer in ie while sanitizing on browser that dont support the template element pretty much only ie we create an inert document and we insert content into it via documentbodyinnerhtml unsafehtml the problem is that ie appears to parse the html passed to innerhtml differently depending on whether the element ha been inserted into a document or not in particular it seems to split some string into multiple text node which wouldve otherwise been a single node this ended up throwing off some of the in code down the line and causing a handful of failure ive worked around it by creating a new inert body element into which the html would be inserted pr close ,fix
4820,ivy document breaking change for debugelement class and attribute pr close ,docs
4821,ivy remove usage of proxy for ie compatibility pr close ,refactor
4822,ivy dont include removed class in the styling debug this is mostly done to allign behaviour with debugelementclasses and remove proxy usage not supported in ie pr close ,refactor
4823,ivy eagerly parse the template twice during analysis a quirk of the angular template parser is that when parsing template in the default mode with option specified by the user the source mapping information in the template ast may be inaccurate a a result the compiler par the template twice once for emit and once to produce an ast with accurate sourcemaps for diagnostic production previously only the first parse wa performed during analysis the second parse occurred during the template typechecking phase just in time to produce the template typechecking file however with the reuse of analysis result during incremental build it make more sense to do the diagnostic parse eagerly during analysis so that the work isnt unnecessarily repeated in subsequent build this commit refactors the componentdecoratorhandler to do both par eagerly which actually clean up some complexity around template parsing a well pr close ,perf
4824,compiler speed up in digest computation avoids the usage of array destructuring a it introduces call to a value helper function in e that ha a relatively high performance impact this shave off roughly m of cpu time for a large compilation with big template that us in pr close ,perf
4825,compiler use a shared interpolation regex the template parser ha a certain interpolation config associated with it and build a regular expression each time it need to extract the interpolation from an input string since the interpolation config is typically the default of and the regular expression doesnt have to be recreated each time therefore this commit creates only a single regular expression instance that is used for the default configuration in a large compilation unit with big template computing the regular expression took circa m this change reduces this to effectively zero pr close ,perf
4826,compiler optimize cloning cursor state on a large compilation unit with big template the total time spent in the plaincharactercursor constructor wa m this commit applies two optimization to reduce this time avoid the object spread operator within the constructor a the generated assign helper in the emitted umd bundle e doe not optimize well compared to a hardcoded object literal this result in a significant performance improvement because of the straightforward object literal the vm is now much better able to optimize the memory allocation which make a significant difference a the plaincharactercursor constructor is called in tight loop reduce the number of charactercursor clone although cloning itself is now much faster because of the optimization above several clone operation were not necessary combined these change reduce the total time spent in the plaincharactercursor constructor to just m pr close ,perf
4827,ivy use module resolution cache during typescript module resolution a lot of filesystem request are done this is quite an expensive operation so a module resolution cache can be used to speed up the process significantly this commit let the ivy compiler perform all module resolution with a module resolution cache note that the module resolution behavior can be changed with a custom compiler host in which case that custom host implementation is responsible for caching in the case of the angular cli a custom compiler host with proper module resolution caching is already in place so the cli already ha this optimization pr close ,perf
4828,ivy cache export scope extracted from declaration file the export scope of ngmodules from external compilation unit a present in dts declaration doe not change during a compilation so can be easily shared there wa already a cache but the computed export scope wa not actually stored there this commit fix that pr close ,perf
4829,ivy share instance of domelementschemaregistry to create a binding parser an instance of elementschemaregistry is required prior to this change each time a new binding parser wa created a new instance of domelementschemaregistry would be instantiated this is an expensive operation that take roughly m per instantiation so it is key that multiple allocation are avoided by sharing a single domelementschemaregistry we avoid two such allocation ie save m per component template pr close ,perf
4830,core fix schematic call to run synchronously previously the call to run the schematic were not being properly or consistently awaited in the test while this currently doe not affect the test performance this fix corrects the syntax and add stability for future change pr close ,test
4831,ivy generate a better error for template var writes in ivy it illegal for a template to write to a template variable so the template html ngtemplate letsomevar button clicksomevar set var to button ngtemplate is erroneous and previously would fail to compile with an assertion error from the templatedefinitionbuilder this error wasnt particularly user friendly though a it lacked the context of which template or where the error occurred in this commit a new check in template typechecking is added which detects such erroneous writes and produce a true diagnostic with the appropriate context information close pr close ,fix
4832,ivy reuse prior analysis work during incremental build previously the compiler performed an incremental build by analyzing and resolving all class in the program even unchanged one and then using the dependency graph information to determine which j file were stale and needed to be reemitted this algorithm produced correct rebuilds but the cost of reanalyzing the entire program turned out to be higher than anticipated especially for componentheavy compilation to achieve performant rebuilds it is necessary to reuse previous analysis result if possible doing this safely requires knowing when prior work is viable and when it is stale and need to be redone the new algorithm implemented by this commit is such each incremental build start with knowledge of the last known good dependency graph and analysis result from the last successful build plus of course information about the set of file changed the previous dependency graph information is used to determine the set of source file which have logically changed a source file is considered logically changed if it or any of it dependency have physically changed on disk since the last successful compilation any logically unchanged dependency have their dependency information copied over to the new dependency graph during the traitcompilers loop to consider all source file in the program if a source file is logically unchanged then it previous analysis are adopted and their register step are run if the file is logically changed then it is reanalyzed a usual then incremental build proceeds a before with the new dependency graph being used to determine the set of file which require reemitting this analysis reuse avoids template parsing operation in many circumstance and significantly reduces the time it take ngtsc to rebuild a large application future work will increase performance even more by tackling a variety of other opportunity to reuse or avoid work pr close ,perf
4833,ivy move analysis side effect into a register phase previously analyze in the various decoratorhandlers not only extract information from the decorator on the class being analyzed but also ha several side effect within the compiler it can register metadata about the type involved in global metadata tracker it can register information about which ngfactory symbol are actually needed in this commit these sideeffects are moved into a new register phase which run after the analyze step currently this is a noop refactoring a register is always called directly after analyze in the future this open the door for reuse of prior analysis work with only register being called to apply the above side effect also a part of this refactoring the reification of ngmodule scope information into the incremental dependency graph is moved to the ngtscprogram instead of the traitcompiler which now only manages trait compilation and doe not have other side effect pr close ,refactor
4834,ivy formalize the compilation process for matched handler prior to this commit the ivycompilation tracked the state of each matched decoratorhandler on each class in the tsprogram and how they progressed through the compilation process this tracking wa originally simple but had grown more complicated a the compiler evolved the state of each specific target of compilation wa determined by the nullability of a number of field on the object which tracked it this commit formalizes the process of compilation of each matched handler into a new trait concept a trait is some aspect of a class which get created when a decoratorhandler match the class it represents an ivy aspect that need to go through the compilation process trait begin in a pending state and undergo transition a various step of compilation take place the ivycompilation class is renamed to the traitcompiler which manages the state of all of the trait in the active program making the trait concept explicit will support future work to incrementalize the expensive analysis process of compilation pr close ,refactor
4835,common remove unnecessary jsdoc type these type cause the compiler to give warning which add noise to compilation log pr close ,style
4836,ngcc render umd import even if no prior import previously the umd rendering formatter assumed that there would already be import and an export argument to the umd factory function this commit add support for this corner case fix pr close ,fix
4837,ngcc handle import in dts file when processing umd when statically evalulating umd code it is possible to find that we are looking for the declaration of an identifier that actually came from a typing file rather than a umd file previously the umd reflection host would always try to use a umd specific algorithm for finding identifier declaration but when the id is actually in a typing file this resulted in the returned declaration being the containing file of the declaration rather than the declaration itself now the umd reflection host will check to see if the file containing the identifier is a typing file and use the appropriate stategy pr close ,fix
4838,form update catcherror to return an observable close pr close ,docs
4839,ivy in remove translate function when clearing translation the loadtranslations function will attach the translate function to localizetranslate to cause runtime translation to occur we should cleanup after ourselves by unattaching this function when we call cleartranslations fix pr close ,fix
4840,bazel improve performance of tshostwritefile removing from an array incurs on cost and could be mitigated with the use of a set instead pr close ,fix
4841,ivy classbinding benchmark fix this commit fix a couple issue that prevent classbinding benchmark from running moving constant requires by the benchmark function before function declaration and referencing correct consts in template instruction pr close ,test
4842,ivy include generic type for modulewithproviders in dts file the modulewithproviders type ha an optional type parameter that should be specified to indicate what ngmodule class will be provided this enables the ivy compiler to statically determine the ngmodule type from the declaration file this type parameter will become required in the future however to aid in the migration the compiler will detect code pattern where using modulewithproviders a return type is appropriate in which case it transforms the emitted dts file to include the generic type argument this should reduce the number of occurrence where modulewithproviders is referenced without it generic type argument resolve fw pr close ,refactor
4843,ivy abstract dts file transformation this commit refactors the way the compiler transforms dts file during ngtsc build previously the ivycompilation kept track of a dtsfiletransformer for each input file now any number of dtstransform operation that need to be applied to a dts file are collected in the dtstransformregistry these are then ran using a single dtstransformer so that multiple transforms can be applied efficiently pr close ,refactor
4844,compilercli allow declarationonly template type check member the metadata collector for view engine compilation emits error symbol for static class member that have not been initialized which prevents a library from building successfully when strictmetadataemit is enabled which is recommended for library to avoid issue in library consumer this is troublesome for library that are adopting static member for the ivy template type checker these member dont need a value assignment a only their type is of importance however this cause metadata error a such a library used to be required to initialize the special static member to workaround this error undesirably introducing a codesize overhead in term of emitted javascript code this commit modifies the collector logic to specifically ignore the special static member for ivy template type checker preventing any error from being recorded during the metadata collection pr close ,fix
4845,ivy inherit static coercion member from base class for ivy template type checker it is possible to let a directive specify static member to allow a wider type for some input typescript export class matselect input disabled boolean static ngacceptinputtypedisabled boolean string this allows a binding to the matselectdisabled input to be of type boolean or string whereas the disabled property itself is only of type boolean up until now any static ngacceptinputtype property wa not inherited for subclass of a directive class this is cumbersome a the directive input are inherited so any acceptance member should a well to resolve this limitation this commit extends the flattening of directive metadata to include the acceptance member fix resolve fw pr close ,fix
4846,ivy avoid type coercion in savenametoexportmap function typescript flag if condition that implicitly coerce a functionmethod definition while checking for the template presence on a def actually checking whether we work with component in savenametoexportmap the if condition had implicit type coercion this commit update the condition to use the iscomponentdef function that check deftemplate against null internally to avoid compilation error with typescript pr close ,refactor
4847,ivy pull property read into a constant pr close ,refactor
4848,ivy prevent from being generated pr close ,refactor
4849,ivy handle safestyles in styleprop correctly prior to this commit value wrapped into safestyle were not handled correctly in styleprop binding in case style sanitizer is present when template contains some style prop that require sanitization style sanitizer wa not unwrapping value in case a given prop doesnt require sanitizationas a result wrapped value were used a final styling value see this commit update the logic to unwrap safe value in sanitizer in case no sanitization is required pr close ,fix
4850,docsinfra give more descriptive variable name discussion pr close ,refactor
4851,docsinfra fix styling of embedded tableofcontents this commit fix the following issue align text content with caret icon in embedded toc header fix display of expandcollapse button at the bottom of embeded toc these were accidentally broken in while fixing another tocrelated issue some cs rule in tocscss eg those for maticon and ultoclist were correctly moved out of the tocinner button block but others eg tocheading and tocmoreitems should not have been moved outside the tocinner button block before tocstyles before after tocstyles after close pr close ,fix
4852,docsinfra upgrade cli command doc source to dc updating angularmaster from clibuildsmaster relevant change in commit range modified helpdeployjson pr close ,build
4853,ngcc fix undecorated child migration when exportas is present the undecorated child migration creates a synthetic decorator which contained exportas exportname a obtained from the metadata of the parent class this is a problem a exportas need to specified a a commaseparated string instead of an array this commit fix the bug by transforming the array of export name back to a commaseparated string pr close ,fix
4854,ngcc log angular error code correctly replaces the t sequence with just ng so that error code are logged correctly pr close ,fix
4855,ngcc report diagnostics from migration when ngcc is analyzing synthetically inserted decorator from a migration it is typically not expected that any diagnostics are produced in the situation where a diagnostic is produced however the diagnostic would not be reported at all this commit ensures that diagnostics in migration are reported pr close ,fix
4856,compiler switch to modern diagnostic formatting the compiler export a formatdiagnostics function which consumer can use to print both t and ng diagnostics however this function wa previously using the old style typescript diagnostics a opposed to the modern diagnostic printer which us terminal color and print additional context information this commit update formatdiagnostics to use the modern formatter plus to update ivy negative error code to angular ng error the angular cli need a little more work to use this function for printing t diagnostics but this commit alone should fix bazel build a ngcwrapped go through formatdiagnostics pr close ,fix
4857,ivy throw a better error when di cant inject a ctor param occasionally a factory function need to be generated for an invalid constructor one with parameter type which arent injectable typically this happens in jit mode where understanding of parameter can not be done in the same upfront way that the aot compiler can this commit change the jit compiler to generate a new invalidfactorydep call for each invalid parameter this instruction will error at runtime if called indicating both the index of the invalid parameter a well a via the stack trace the factory function which wa generated for the type being constructed fix pr close ,fix
4858,core add new example for hostlistener pr close ,docs
4859,ivy minor cleanup in the listener instruction pr close ,refactor
4860,form fix a punctuation error pr close ,docs
4861,ivy align testbedoverrideprovider with what happens with provider in testbed provider array in ivy if you do testbedconfiguretestingmoduleproviders provide service the injector will attempt to inject service a if it wa simply listed in the provider array like provider service this fix an inconsistency when similarly providing an override with no usevalue or usefactory pr close ,fix
4862,compiler ensure localized string are e compatible for jit mode previously the jit evaluated code for ivy localized string included backtick tagged template string which are not compatible with e in legacy browser such a ie now the generated code is e compatible fix pr close ,fix
4863,ivy do not invoke change detection for destroyed view prior to this commit calling change detection for destroyed view resulted in error being thrown in some case this commit add a check to make sure change detection is invoked for nondestroyed view only pr close ,fix
4864,ivy properly parenthesize ternary expression when emitted previously ternary expression were emitted a condexpr truecase falsecase however this cause problem when ternary operation are nested in particular a template expression of the form ab c d would have compiled to a null null ab c d the ternary operator is rightassociative so that expression is interpreted a a null null ab c d when in reality leftassociativity is desired in this particular instance a null null ab c d this commit add a check in the expression translator to detect such leftassociative usage of ternary and to enforce such associativity with parenthesis when necessary a test is also added for the template typechecking expression translator to ensure it correctly produce rightassociative expression for ternary in the user template fix pr close ,fix
4865,docsinfra add the ability to expose globals add the ability to expose global symbol in the api doc via the globalapi tag also support optionally setting a namespace which will be added to the name automatically eg foo will be renamed to ngfoo relevant apis should also be exported through the globalts file which will show up under coreglobal pr close ,feat
4866,languageservice simplify resolution logic in banner due to a bug in the existing banner typescript module wa required instead of reusing the module passed in from tsserver this bug is caused by some source file in languageservice that import typescript instead of typescriptlibtsserverlibrary this is not an unsupported use case it just that when typescript is resolved in the banner we have to be very careful about which module to require the convoluted logic in the banner make it very hard to detect anomaly this commit clean it up and remove a lot of unneeded code this commit also remove t import in typescripthostts and use tss instead to make it le confusing pr close ,fix
4867,languageservice remove getexternalfiles this commit remove the getexternalfiles from the tsserver plugin this api is no longer needed now that we do not intend to support external template under the plugin mode instead the external file are added to the project only when they are opened by the user for complete discussion see pr close pr close pr close ,fix
4868,languageservice refactor the method typewrappername and pipesymbolselectsignature pr close ,refactor
4869,languageservice apply suggestion pr close ,fix
4870,languageservice return the j primitive type name pr close ,fix
4871,languageservice bug of accessing a string index signature using dot notation pr close ,fix
4872,docsinfra make header fullwidth and panel fullwidth on mobile screen on event page the header wa not able to take full width when body exceeds viewport width of the screen so made the below body go overflowx auto and resource page wa taking of the width which is okay on desktop but on mobile it should take width put a medium quer for it fix pr close ,fix
4873,upgrade avoid mutable export previously createangulartestingmodule would export a mutable let binding the binding is already exporting using an accessor function though so the export on the let variable seems like an accidental oversight this is functionally equivalent but make it easier for module optimizers such a closure compiler to track down side effect and prune module pr close ,refactor
4874,platformbrowser avoid mutable export previously browserutil would export a mutable let binding that wa initialized a a sideeffect of browserdetectionsetup this change refactors the mutable binding into a const binding that is immediately initialized in it initialized this is functionally equivalent but make it easier for module optimizers such a closure compiler to track down side effect and prune module it is also arguably cleaner to read no worry about later change to the apparently mutable but effectively const binding pr close ,refactor
4875,ngcc update ngcc integration test dependency this commit update angularmaterial and angularcdk to the latest release candidate doing so exposed a bug in ngcc which is fixed by the preceding commit also the layout of these library changed so the check in the integration test need a bit of tweaking pr close ,test
4876,ngcc ensure that bundle rootdir is the package path previously the rootdir wa set to the entrypoint path but this is incorrect if the source file are stored in a directory outside the entrypoint path this is the case in the latest version of the angular cdk instead the rootdir should be the containing package path which is guaranteed to include all the source for the entrypoint a symptom of this is an error when ngcc is trying to process the source of an entrypoint format after the entrypoints typing have already been processed by a previous processing run during processing the torreference function get called which in turn make a call to reflectionhostgetdtsdeclaration if the typing file are also being processed this return the node from the dts typing file but if we have already processed the typing file and are now processing only an entrypoint format without typing the call to reflectionhostgetdtsdeclaration return null when this value is null a j valueref is passed through a the dts typeref to the referenceemitter in this case the referenceemitter fails during emit because no referenceemitstrategy is able to provide an emission the localidentifierstrategy is not able help because in this case importmode is forcenewimport the logicalprojectstrategy can not find the j file below the rootdir the second strategy failure is fixed by this pr fix pr close ,fix
4877,docsinfra add deprecatedapiitem class to remaining deprecated item fix pr close ,fix
4878,common update closure locale to include directionality data when directionality data wa added to angularcommon locale only the externally used locale were updated we need to additionally update the closure locale which are synced into google pr close ,fix
4879,ivy update nginclosuremode flag usage in test commit that updated in message id rendering also introduced a couple test that relied on a previous version of nginclosuremode flag format the nginclosuremode usage format wa changed in the followup commit and triggered a problem with the mentioned test this commit update the test to a new nginclosuremode flag usage format pr close ,test
4880,compilercli ensure that nginclosuremode is guarded in generated code if the nginclosuremode global check actually make it through to the runtime then check for it existence should be guarded to prevent reference undefined error in strict mode normally it is stripped out by dead code elimination during build optimization this comment ensures that generated template code guard this global check pr close ,fix
4881,core ensure that nginclosuremode is guarded if the nginclosuremode global check actually make it through to the runtime then check for it existence should be guarded to prevent reference undefined error in strict mode normally it is stripped out by dead code elimination during build optimization pr close ,fix
4882,common add default to new generic parameter this is a followup to where some new generic parameter were added without default which is technically a breaking change these change add the default pr close ,refactor
4883,ivy check metadata presence before compiling type in rtestbed prior to this commit there wa no check in rtestbed to verify that metadata is resolved using a given type that lead to some cryptic error message when testbed try to compile a type without having metadata in case testbed override function receive unexpected type for example a directive is used in testbedoverridecomponent call this commit add the necessary check to verify metadata presence before testbed try to recompile a type pr close ,refactor
4884,ivy correctly support ngprojectas on template prior to this commit if a template for example generated using structural directive such a ngif contains ngprojectas attribute it wa not included into attribute array in generated code and a a result these template were not matched at runtime during content projection this commit add the logic to append ngprojectas value into corresponding element attribute array so content projection work a expected pr close ,fix
4885,ivy support icu with pipe prior to this commit in runtime code failed with the exception saying that no provider wa found for changedetectorref for a pipe used in icu the problem happened because the underlying createviewref function wa not taking into account icucontainer a a valid tnodetype this commit update the createviewref function to return corresponding viewref for tnodetypeicucontainer pr close ,fix
4886,ivy avoid duplicate state lookup and default function parameter includes a few minor performance improvement in the nextcontext instruction we assign a new lview to the lframecontextlview and then we immediately look it up to get it context we dont need to do that since we know the view that wa assigned already remove the default value for the level parameter of nextcontextimpl because it generates more code in e and is internalonly remove the default parameter from setactivehostelement since it generates extra code and it an internal function make a check in setelementexitfn more strict since were guaranteed for the value to match the type pr close ,perf
4887,ivy viewcontainerrefmove where the old and new index are the same pr close ,test
4888,ivy allow insertion of view attached to a different container fix pr close ,fix
4889,ivy consistenly return from viewcontainerrefindexof for noninserted view pr close ,fix
4890,core update render factory description pr close ,docs
4891,compiler fix typo and spelling pr close ,docs
4892,serviceworker fix path for ngswconfig command to match latest cli pr close ,docs
4893,docsinfra avoid version mismatch error when using local angular package the local angular package used to build aio when running yarn setuplocalyarn buildlocal and related command are built by bazel bazel determines the version to use for these locally built package based on the latest tag for a commit on the current branch this work a expected during the release because the package are built on the correct branch with uptodate tag during local development however this often lead to generating older version than what the current angularcli version is compatible with if the user ha not fetched the latest tag from angularangular or the branch ha not been rebased recently previously the above common situation would result in a build error by the cli note that this would be a false error because in this case the version set by bazel would not reflect the actual version of the local package the solution would be for the user to fetch the latest tag from angularangular rebase their branch and run a bazel build again ensuring that it would actually build anew and not emit cached artifact this wa cumbersome and most people didnt even know about it this commit avoids this error and the associated painpoints by overwriting the version of the installed local package with fake version based on the one in the lockfile which are guaranteed to be compatible with the currently used cli version fix pr close ,fix
4894,ivy incorrectly validating html foreign object inside svg fix ngtsc incorrectly logging an unknown element diagnostic for html element that are inside an svg foreignobject with the xhtml namespace fix pr close ,fix
4895,ivy in trim whitespace when parsing metadata it is possible for html formatters to add whitespace around the content of in attribute value this can make the meaning and custom id brittle to simple whitespace formatting this commit ensures that the metadata string extracted from html in attribute is trimmed before being parsed into meaning description and custom id pr close ,fix
4896,compiler remove redundant metafrominmessage function pr close ,refactor
4897,compiler in trim whitespace from in custom id fix pr close ,fix
4898,ngcc render legacy in message id by default by ensuring that legacy in message id are rendered into the template of component for package processed by ngcc we ensure that these package can be used in an application that may provide translation in a legacy format fix pr close ,fix
4899,ngcc store whether to render legacy in message id in the bundle placing this configuration in to the bundle avoids having to pas the value around through lot of function call but also could enable support for different behaviour per bundle in the future pr close ,refactor
4900,compiler in render legacy in message id now that angularlocalize can interpret multiple legacy message id in the metablock of a localize tagged template string this commit add those id to each in message extracted from component template but only if the enableinlegacymessageidformat is not false pr close ,refactor
4901,ivy in store legacy message id separately to custom id this change will enable the angular compiler to provide these legacy message id by default which will solve problem with ngcc not knowing whether to generate legacy id or not pr close ,refactor
4902,ivy in remove hack around t tagged literal when first written there wa no way to specify the raw text when programmatically creating a template tagged literal ast node this is now fixed in t and so the hack is no longer needed pr close ,refactor
4903,ngcc tidy up helper function thanks to gkalpakl for the better regular expression approach pr close ,test
4904,ivy do not generate providedin null we should only generate the providedin property in injectable defs if it ha a nonnull value null doe not communicate any information to the runtime that isnt communicated already by the absence of the property this should give u some modest code size saving pr close ,refactor
4905,languageservice insert parenthesis for method completion this commit leverage the inserttext field in tscompletionentry to return a completion text for class method that includes parenthesis pr close pr close ,fix
4906,bazel dont rely on angularcore being a a depedency to install angularbazel with this change we fix the logic to detect if a package is installed removing a package and add a package by using the cli schematic helper also we save angularbazel package directly a a devdependency when doing ngadd close pr close ,fix
4907,ivy remove unnecessary fac wrapper for injectables we currently generate a factory function in the injectable def prov that delegate to the factory function in the factory def fac it look something like this factory functiont return svcfact the extra wrapper function is unnecessary since the args for the factory function are the same this commit change the compiler to generate this instead factory svcfac because we are generating le code for each injectable we should see some modest code size saving aios main bundle is about kb smaller pr close ,refactor
4908,common reflect input type in ngif context fix the content of ngif being typed to any fix pr close ,fix
4909,common reflect input type in ngforof context fix ngforof not reflecting the type of it input in the ngforofcontext pr close ,fix
4910,ivy in correctly parse xliff placeholder the viewengine translation extractor doe not convert to for placeholder that represent custom element for example appcomponent get converted to placeholder like starttagappcomponent in localize placeholder are expected to be snakecase not kebabcase so we must normalize them when parsing a translation file that might have been created via the view engine translation extractor the localize extraction code will normalize these placeholder when creating translation file in the first place fix pr close ,fix
4911,bazel reenable template type checking in ngmodule due to an unfortunate condition in the typechecking ha been disabled when running under bazel ivy a far a i can tell the ivytemplatetypecheck flag is now obsolete so removing this code from ngmodulebzl is desirable ill send a separate pr to remove the flag completely pr close ,fix
4912,compilercli remove bogus packagescompilercliintegrationtestbenchmarks nobody us this folder for anything and the readmemd is misleading pr close ,refactor
4913,core update missinginjectable migration description to match guide update the description of the missinginjectable migration to mention the second pattern that will be automatically handled pr close ,refactor
4914,languageservice make missing module suggestion instead of error if a component or directive is not part of any ngmodule the language service currently produce an error message this should not be an error instead it should be a suggestion this pr remove ngdiagnostickind and instead reuses tsdiagnosticcategory pr close pr close ,fix
4915,languageservice use hosterror instead of consoleerror hosterror would log to file and make error message much easier to inspect because entry are timestamped pr close ,fix
4916,languageservice do not produce diagnostics if metadata for ngmodule not found the language service incorrectly report an error if it fails to find ngmodule metadata for a particular component directive in many case the use case is legit particularly in test this commit remove such diagnostic message and clean up the interface for typescripthostgettemplateast pr close pr close ,fix
4917,languageservice determine correct type for ngfor exported value currently variable of an unknown type in an ngfor expression are refined to have the type of the iterable binding of the ngfor expression unfortunately this is a bug for variable aliasing value exported by ngfor including index and first because they are also given the type of the binding expression but they are not of the binding type for example in typescript component selector test template div ngforlet hero of hero let i index let isfirst first hero div export class testcomponent hero hero the local variable i and isfirst are determined to have a type of hero when actually their type are number and boolean respectively this commit fix this bug by checking if the value of a variable in an ngfor expression is known to be an export and assigning the variable the type of that export value only if the variable doe not alias an export is it typed with the binding value of the ngfor expression close pr close ,fix
4918,docsinfra ensure rxjsrelated doc example can compile without error previously some rxjsrelated example which are not proper angular apps were not tested on ci a part of the exampleee npm script this meant that the example could get outofdate or contain compile error without a noticing this commit ensures that the exampleee script pick up these example and check that they compile successfully partly address pr close ,test
4919,languageservice fix error of arrayindex out of bound exception pr close ,fix
4920,languageservice completion support for tuple array pr close ,feat
4921,ngcc do not output duplicate ɵprov property previously the angular aot compiler would always add a ɵprov to injectables but in ngcc this resulted in duplicate ɵprov property since published library already have this property now in ngtsc trying to add a duplicate ɵprov property is an error while in ngcc the additional property is silently not added fw pr close ,fix
4922,ivy prevent unknown element check for aotcompiled component prior to this commit the unknown element can happen twice for aotcompiled component once during compilation and once again at runtime due to the fact that schema information is not present on component and ngmodule defs after aot compilation the second check at runtime may fail even though the same check wa successful at compile time this commit update the code to avoid the second check for aotcompiled component by checking whether schema information is present in a logic that executes the unknown element check pr close ,fix
4923,docsinfra upgrade cli command doc source to cad updating angularmaster from clibuildsmaster relevant change in commit range modified helptestjson pr close ,build
4924,ivy in ensure that escaped char are handled in localized string when creating synthesized tagged template literal one must provide both the cooked text and the raw unparsed text previously there were no good apis for creating the ast node with raw text for such literal recently the apis were improved to support this and they do an extra check to ensure that the raw text par to be equal to the cooked text it turn out there is a bug in this check see this commit work around the bug by synthesizing a head node and morphing it by changing it kind into the required node type fw pr close ,fix
4925,core update undecoratedclasseswithdi migration rerun command with angular cli version rc we can run a single migration for a package using the name of the migration schematic we need to pas the schematic name a a value to the migrateonly option ex ng update angularcore migrateonly migrationvundecoratedclasseswithdi see pr close ,refactor
4926,languageservice determine index type accessed using dot notation commit fcedbfecdcefaffe added support for determining index type accessed using index signature but did not include support for index type accessed using dot notation typescript const objt key string t objstringkey get t completion objstringkey did not peviously get t completion this add support for determining an index type accessed via dot notation by rigging an object symbol table to return the string index signature type a property access refers to if that property doe not explicitly exist on the object this is very similar to ivanwonders work in symbolwrapper now take an additional parameter to explicitly set the type of the symbol wrapped this is done because symboltablewrapperget only ha access to the symbol of the index type not the index signature symbol itself an attempt to get the type of the index type will give an error close close pr close ,fix
4927,ivy support icu without other case prior to this commit there wa a runtime check in in logic to make sure other case is always present in an icu that wa not a requirement in view engine so icu that previously worked may produce error this commit remove that restriction and add support for icu without other case pr close ,fix
4928,ivy do no work if moving a viewref to the same position move a view only if it would end up at a different place otherwise we would do unnecessary processing like dom manipulation query notification etc thanks to pkozlowskiopensource for the change pr close ,perf
4929,ivy support inserting a viewref that is already present when inserting a viewref it is possible to not provide an index which is regarded a appending to the end of the container if the viewref already exists in the container then this result in a move but there wa a fault in the logic that computed where to insert the viewref that did not account for the fact that the viewref wa already in the container so the insertion index wa outside the bound of the array fix pr close ,fix
4930,ivy take style extracted from template into account in jit mode prior to this commit all style extracted from component template defined using style tag were ignored by jit compiler so only style array value defined in component decorator were used this change update jit compiler to take style extracted from the template into account it also ensures correct order where style array value are applied first and template style are applied second pr close ,fix
4931,ivy remove tsickle workaround in chainable instruction previously if a type wa returning itself it would cause an infinite loop in tsickle we worked around it with a type that ali to any now that the issue ha been resolved in tsickle we can clean up the workaround pr close ,refactor
4932,languageservice functionbind should not be an error when performing diagnostic check or completion we should take into account member and property in the base class if any otherwise the language service will produce a false error pr close pr close ,fix
4933,ivy run preorder hook in injection order this commit fix a compatibility bug where preorder lifecycle hook oninit docheck onchanges for directive on the same host node were executed based on the order the directive were matched rather than the order the directive were instantiated ie injection order this discrepancy can cause issue with form where it is common to inject ngcontrol and try to extract it control property in ngoninit a the ngcontrol directive is injected it should be instantiated before the control value accessor directive and thus it hook should run first this ensures that the ngcontrol ngoninit can set up the form control before the ngoninit for the control value accessor try to access it close pr close ,fix
4934,core remove deprecated and defunct wtf apis these apis have been deprecated in v so they should stick around till v but since they are defunct we are removing them early so that they dont take up payload size pr close ,fix
4935,ivy add flag to skip nonexported class in viewengine we were only generating code for exported class however with ivy we do it no matter whether the class ha been exported or not these change add an extra flag that allows consumer to opt into the viewengine behavior the flag work by treating nonexported class a if theyre set to jit true fix pr close ,fix
4936,ivy fix creation time microbenchmarks microbenchmarks were broken after weve introduced concept of declarationcomponentview on lview after this change embedded view must have a pointer to a parent lview pr close ,perf
4937,ivy extract elementstart first create pas pr close ,refactor
4938,ivy remove isrootview check from getrenderparent the root view case is already covered by the existing code in the getrenderparent function so no need to have an explicit check and associated memory read again pr close ,refactor
4939,docsinfra fix typo and spelling in the stackblitzbuilderreadmemd pr close ,docs
4940,ngcc render umd global import correctly the current umd rendering formatter did not handle a number of corner case such a import from namespaced package pr close ,fix
4941,ivy track change across failed build previously our incremental build system kept track of the change between the current compilation and the previous one and used it knowledge of interfile dependency to evaluate the impact of each change and emit the right set of output file however a problem arose if the compiler wa not able to extract a dependency graph successfully this typically happens if the input program contains error in this case the angular analysis part of compilation is never executed if a file changed in one of these failed build in the next build it appears unchanged this mean that the compiler forgets to emit it to fix this problem the compiler need to know the set of change made since the last successful build not simply since the last invocation this commit change the incremental state system to much more explicitly pas information from the previous to the next compilation and in the process to keep track of change across multiple failed build until the program can be analyzed successfully and the result of those change incorporated into the emit plan fix pr close ,fix
4942,element ngadd schematic this pr brings a couple of change remove undeed dependency in bazel target such a packagescommon packagescore remove rxjs usage add documentregisterelement to architect test target use schematicsangular helper us the standard source projectname to get the projectname which is defined in the schemajson use workspace writer to update the workspace config pr close ,refactor
4943,bazel use getattr instead of hasattr in ngmodulebzl getattr improves code readability and make the code also shorter pr close ,refactor
4944,bazel ngmodule should not emit shim file under bazel and ivy under bazel and ivy we dont need the shim file to be emmited by default we still need to the shim for blaze however because google code import them this improves build latency by second per ngmodule target pr close ,fix
4945,docsinfra update manifest shortname pr close ,fix
4946,docsinfra update manifest name update manifest name to better indicate what the installable application is fix pr close ,fix
4947,serviceworker allow creating post api request after cache failure before creating a mutating http request serviceworker invalidates lru cache entry and writes to cache storage therefore cache storage failure can prevent making post request fix this by catching and logging cache error add a test case fix pr close ,fix
4948,serviceworker set http method in mockrequest constructor enable to create mock for mutating http request in test to check more scenario pr close ,refactor
4949,bazel update to tsickle to fix peerdep warning tsickle is compatible with typescript so we should use it and fix peerdep warning from npmyarn pr close ,fix
4950,core fix typo in tour of hero app and tutorial pr close ,docs
4951,ngcc do not crash on package that specify typing a an array in a packagejson file the typing or type field could be an array of typing file ngcc would previously crash unexpectedly for such package a it assumed that the typing field would be a string this commit let ngcc skip over such package a having multiple typing entrypoints is not supported for angular package so it is safe to ignore them fix pr close ,fix
4952,fix typo pr close ,docs
4953,router make routerlinkactive work with query params which contain array the urltree equalqueryparams and containsqueryparam method did not handle query params that ha array which resulted in the routerlinkactive to not behave a expected change wa made to ensure query params with array are handled correctly fix pr close ,fix
4954,ivy remove tnodetype assertion from directiveinject instruction the assertion that we have in the directiveinject instruction is too restrictive and we came across some pattern where it throw unnecessarily this commit remove that assertion for now and more detailed investigation is needed to decide is we need to restrict the set of tnodetype again this commit also add a test which triggered the tnodetypeview to come up in the directiveinject instruction so it might be useful to avoid regression during further refactoring pr close ,fix
4955,docsinfra change search input width when focused the search input ha width of the parent container in a focused state for the big break point px in this case when window width is between px and px the search input shrink from to px the width of the search input wa increased to so that when focused it width expands from to px when window size is px fix pr close ,fix
4956,serviceworker throw when using the unsupported versionedfiles option in config in dcd the deprecated versionedfiles option from the sw assetgroup configuration in ngswconfigjson a a result the option would be silently ignored and the runtime behavior of the sw would change ie some file might not be cached and available offline any more this change could be easily go unnoticed by the developer this commit ensures this doe not happen by throwing a buildtime error when detecting the unsupported versionedfiles option with an error message prompting the user to use the file option instead jira issue fw pr close ,fix
4957,serviceworker use asyncawait in sw config test pr close ,refactor
4958,ngcc render localized string when in e format recently the ngtsc translator wa modified to be more scripttarget aware which basically mean that it will not generate none code when the output format is e or similar this commit enhances that change by also downleveling localized message in e the message use tagged template literal which are not available in e pr close ,fix
4959,ngcc report error from analyze and resolve processing previously these error were being swallowed which made it hard to debug problem with package see pr close ,fix
4960,ivy wrap function from provider in parenthesis in closure mode due to the fact that tsickle run between analyze and transform phase in angular tsickle may transform node add comment with type annotation for closure that we captured during the analyze phase a a result some pattern where a function is returned from another function may trigger automatic semicolon insertion which break the code make function return undefined instead of a function in order to avoid the problem this commit update the code to wrap all function in some expression privders and viewproviders in parenthesis more info can be found in tsickle source code here pr close ,fix
4961,ivy avoid infinite recursion when evaluation source file when ngtsc come across a source file during partial evaluation it would determine all exported symbol from that module and evaluate their value greedily this greedy evaluation strategy introduces unnecessary work and can fall into infinite recursion when the evaluation result of an exported expression would circularly depend on the source file this would primarily occur in commonjs code where the export variable can be used to refer to an exported variable this variable would be resolved to the source file itself thereby greedily evaluating all exported symbol and thus ending up evaluating the export variable again this variable would be resolved to the source file itself thereby greedily evaluating all exported symbol and thus ending u evaluating the export variable again this variable would be resolved to the source file itself thereby greedily evaluating all exported symbol and thus ending up evaluating the export variable again this variable would be resolved to the source file itself thereby greedily evaluating all exported symbol and thus ending up evaluating the export variable again this went on for some time until all stack frame were exhausted this commit introduces a resolvedmodule that delay the evaluation of it export until they are actually requested this avoids the circular dependency when evaluating export thereby fixing the issue fix pr close ,fix
4962,ivy handle nonstandard inputoutput name in template type checking the template type checker generates code to check directive input and output whose name may contain character that can not be used a identifier in typescript prior to this change such name would be emitted into the generated code a is resulting in invalid code and unexpected template type check error this commit fix the bug by representing the potentially invalid name a string literal instead of raw identifier fix pr close ,fix
4963,ivy avoid using stale cache in testbed if module override are defined ngmodule compilation in jit mode that is also used in testbed cache module scope on ngmodule defs using transitivecompilescopes field module override defined via testbedoverridemodule may invalidate this data by addingremoving item in declaration list this commit force testbed to recalculate transitive scope in case module override are present so testbed always get the most uptodate information pr close ,fix
4964,core allow cs custom variablesproperties in the style sanitizer this change enables varmyvar to pas through the style sanitizer after consulation with our security team allowing these doesnt create new attack vector so the sanitizer doesnt need to strip them fix part of related to the sanitizer other use case discussed there related to binding have been addressed via other change to the class and style handling in the runtime close pr close ,fix
4965,core improve readability of stylesanizerspects pr close ,style
4966,ivy rtestbed do not process ngmoduledefs that have already been processed pr close ,perf
4967,ivy reset style property using ngstyle fix pr close ,fix
4968,ivy nonregression test for viewcontainerref queried on ngcontainer close pr close ,test
4969,docsinfra fix stackblitz and zipped example previously the generated stackblitz example a well a the corresponding downloadable zip for the guide example were not correct and thus trying to run the app andor test would fail this commit fix the example replace testbedinject which wa introduced in v with testbedget which is available in v used in the example note the example will soon be updated to v a part of fw and switched back to testbedinject then include srcappheroesherots in the zip because it is referenced by some of the other file and the compilation fails without it ensure srcmainspecsts is not included in the zip that doe not include the test including the file broke the app because there is logic in our zipbuilder that renamed maints file to maints and thus mainspecsts ended up overwriting the actual maints fix fix pr close ,fix
4970,ivy move setclassmetadata call into a pure iife this commit transforms the setclassmetadata call generated by ngtsc from typescript pure setclassmetadata to typescript pure function setclassmetadata without the iife terser wont remove these function call because the function call have argument that themselves are function call or other impure expression in order to make the whole block be dceed by terser we wrap it into iife and mark the iife a pure it should be noted that this change doesnt have any impact on cli with buildoptimizer which remove the whole setclassmetadata block within the webpack loader so terser or webpack itself dont get to see it at all this is done to prevent crosschunk retention issue caused by webpacks internal module registry actually we do expect a shortterm size regression while is merged and released in the next rc of the cli but long term this change doe nothing to cli buildoptimizer configuration and is done primarly to correct the seemingly correct but nonfunction pure annotation that build not using buildoptimizer could rely on pr close ,fix
4971,ivy retain jit metadata unless jit mode is explicitly disabled ngmodules in ivy have a definition which contains various different bit of metadata about the module in particular this metadata fall into two category metadata required to use the module at runtime for bootstrapping etc in aotonly application metadata required to depend on the module from a jitcompiled app the latter metadata consists of the module declaration import and export to support jit usage this metadata must be included in the generated code especially if that code is shipped to npm however because this metadata preserve the entire ngmodule graph reference to all directive and component in the app it need to be removed during optimization for aotonly build previously this wa done with a clever design the extra metadata wa added by a function called setngmodulescope a call to this function wa generated after each ngmodule this function call wa marked a pure with a comment and used nosideeffects internally which cause optimizers to remove it the effect wa that in dev mode or test mode which use jit no optimizer run and the full ngmodule metadata wa available at runtime but in production presumably aot build the optimizer run and remove the jit specific metadata however there are case where apps that want to use jit in production and still make an optimized build in this case the jitspecific metadata would be erroneously removed this commit solves that problem by adding an ngjitmode global variable which guard all setngmodulescope call an optimizer can be configured to statically define this global to be false for aotonly build causing the extra metadata to be stripped a configuration for terser used by the cli is provided in toolingts which set ngjitmode to false when building aot apps pr close ,fix
4972,ivy dont infer template context type when in full mode the ivy template typechecker is capable of inferring the type of a structural directive such a ngforoft previously this wa done with fulltemplatetypecheck true even if stricttemplates wa false view engine previously did not do this inference and so this cause breakage if the type of the template context is not what the user expected in particular consider the template html div ngforlet user of user a all userindex out of alllength div a long a user is an array this seems reasonable because it appears that all is an alias for the user array however this is misleading in reality ngforof is rendered with a template context that contains both a implicit value for the loop variable user a well a a ngforof value which is the actual value assigned to all the type of ngforofs template context is ngforcontextt which declares ngforofs type to be ngiterablet which doe not have a length property due to it incorporation of the iterable type this commit stop the template typechecker from inferring template context type unless stricttemplates is set and strictinputtypes is not disabled fix pr close ,fix
4973,ivy report watch mode diagnostics correctly this commit change the reporting of watch mode diagnostics for ngtsc to use the same formatting a nonwatch mode diagnostics this print rich and contextual error even in watch mode which previously wa not the case fix pr close ,fix
4974,ivy always reanalyze the program during incremental rebuilds previously the ngtsc compiler attempted to reuse analysis work from the previous program during an incremental build to do this it had to prove that the work wa safe to reuse that no change made to the new program would invalidate the previous analysis the implementation of this had a significant design flaw if the previous program had error the previous analysis would be missing significant information and the dependency graph extracted from it would not be sufficient to determine which file should be reanalyzed to fill in the gap this often meant that the build output after an error wa resolved would be wholly incorrect this commit switch ngtsc to take a simpler approach to incremental rebuilds instead of attempting to reuse prior analysis work the entire program is reanalyzed with each compilation this is actually not a expensive a one might imagine analysis is a fairly small part of overall compilation time based on the dependency graph extracted during this analysis the compiler then can make accurate decision on whether to emit specific file a new suite of test is added to validate behavior in the presence of source code level error this new approach is dramatically simpler than the previous algorithm and should always produce correct result for a semantically correct program fix fix pr close ,fix
4975,ivy drivediagnostics work incrementally pr close ,test
4976,docsinfra more thoroughly clean up after scrollservice test by clearing sessionstorage and unsubscribing from location event after each test we reduce the possibility of potential spooky action at a distancetype of failure in the future this doe not have an impact on the actual app since scrollservice is currently expected to live throughout the lifetime of the app still unsubscribing from location event keep the code consistent with how other scrollservice listener are handled eg for window event pr close ,test
4977,docsinfra destroy all scrollservice instance after each test scrollservice subscribes to global window event and mutates global state in the listener eg readwrite value fromto sessionstorage therefore we need to always call it ngondestroy method to unsubscribe from these event after each test in fce a new testcase wa introduced that wa not destroyed a a result random failure started to randomly happen in other unrelated test example ci failure this commit fix this by ensuring all scrollservice instance are destroyed after each test provided that they are created with the createscrollservice helper pr close ,test
4978,core make querylist implement iterable in the type system originally querylist implemented iterable and provided a symboliterator on it prototype this caused issue with treeshaking so querylist wa refactored and the symboliterator added in it constructor instead a part of this change querylist no longer implemented iterable directly unfortunately this meant that querylist wa no longer assignable to iterable or consequently ngiterable ngiterable is used for ngfors input so this meant that querylist wa not usable in a type sense for ngfor iteration view engine template type checking would not catch this but ivy did a a fix this commit add the declaration but not the implementation of the symboliterator function back to querylist this ha no runtime effect so it doesnt affect treeshaking of querylist but it ensures that querylist is assignable to ngiterable and thus usable with ngfor fix pr close ,fix
4979,ivy emit fsrelative path when rootdirs arent in effect previously the compiler assumed that all t file logically within a project existed under one or more root directory if the t compiler option rootdir or rootdirs wa set they would dictate the root directory in use otherwise the current directory wa used unfortunately this assumption wa unfounded it common for project without explicit rootdirs to import from file outside the current working directory in such case the logicalprojectstrategy would attempt to generate import into those file and fail this would lead to no referenceemitstrategy being able to generate an import and end in a compiler assertion failure this commit introduces a new strategy to use when there are no rootdirs explicitly present the relativepathstrategy it us simpler filesystem relative path to generate import even to file above the current working directory fix fix pr close ,fix
4980,ivy support chdir on the compiler filesystem abstraction this commit add the ability to change directory using the compiler internal filesystem abstraction this is a prerequisite for writing test which are sensitive to the current working directory in addition to supporting the chdir operation this commit also fix getdefaultliblocation for mock filesystems to not assume nodemodules is in the current directory but to resolve it similarly to how node doe by progressively looking higher in the directory tree pr close ,test
4981,ivy properly insert view before ngcontainer with injected viewcontainerref pr close ,fix
4982,ivy stricter tnodeinputs typing tnodeinputs are initialised during directive resolution now so we know early if a node ha directive with input or no we dont need to use undefined value a an indicator that input were not resolved yet pr close ,refactor
4983,ivy dont store public input name in two place before this change a public name of a directive input wa stored in place a a key of an object on tnodeindex a a value of propertyaliasvalue at the index this pr change the data structure so the public name is stored only once a a key on tnodeindex this save one array entry for each and every directive input pr close ,perf
4984,ivy add microbenchmark focused on directive input update pr close ,perf
4985,ivy chain styling instruction add support for chaining of styleprop classprop and stylepropinterpolatex instruction whenever possible which should help generate le code note that one complication here is for stylepropinterpolatex instruction where we have to break into multiple chain if there are other styling instruction inbetween the interpolation which help maintain the execution order pr close ,perf
4986,docsinfra do not break when cooky are disabled in the browser whenever cooky are disabled in the browser windowsessionstorage is not avaialable to the app ie even trying to access windowsessionstorage throw an error to avoid breaking the app we use a noop storage implementation if windowsessionstorage is not available fix pr close ,fix
4987,ivy extract template instruction first create pas processing this refactorings clearly separate the first and subsequent creation execution of the template instruction this approach ha the following benefit it is clear what happens during the first v subsequent execution we can avoid several memory read and check after the first creation pas there is measurable performance improvement on various benchmark the template instruction becomes smaller and should become a candidate for optimisation inlining faster pr close ,perf
4988,ivy limit read from tviewconsts pr close ,refactor
4989,ngcc properly detect origin of constructor param type the reflectionhost support enumeration of constructor parameter and one piece of information it return describes the origin of the parameter type parameter type come in two flavor local the type is not imported from anywhere or nonlocal the type come via an import ngcc incorrectly classified all type parameter a local because in the source file that ngcc process the type parameter is a real tsidentifer however that identifier may still have come from an import and thus might be nonlocal this commit change ngccs reflectionhosts to properly recognize and report these nonlocal type reference fix pr close ,fix
4990,ivy separate first creation pas in the elementcontainerstart instruction pr close ,refactor
4991,ivy separate first creation pas in the text instruction pr close ,refactor
4992,bazel add terser a an optional peer dependency ngpackage rule ha an implicitly optional depedency on terser when using this rule without terser being available we get the below error error homecirclecingmodulesexpressenginebuildbazel every rule of type ngpackage implicitly depends upon the target npmterserbinterser but this target could not be found because of no such package npmterserbin build file not found in directory terserbin of external repository npm add a build file to a directory to mark it a a package error analysis of target modulesexpressenginenpmpackage failed build aborted no such package npmterserbin build file not found in directory terserbin of external repository npm add a build file to a directory to mark it a a package pr close ,fix
4993,ivy in support and sequence in in message since in message are mapped to localize tagged template string the raw version must be properly escaped otherwise t will throw an error such a error debug failure false expression expected argument text to be the normalized ie cooked version of argument rawtext this commit ensures that we properly escape these raw string before creating t ast node from them pr close ,fix
4994,ivy in ensure that colon in in metadata are not rendered the char is used a a metadata marker in localize message if this char appears in the metadata it must be escaped a previously although the char wa being escaped the t ast being generated wa not correct and so it wa being output double escaped which meant that it appeared in the rendered message a of t the raw string can be specified when creating tagged template ast node so it is possible to correct this pr close ,fix
4995,ivy properly insert view into viewcontainerref injected by querying ngcontainer when asking for a viewcontainerref on ngcontainer we do reuse ngcontainer comment node a a lcontainers anachor before this fix the act of reusing a ngcontainers comment node would result in this comment node being reappended to the dom in the wrong place with the fix in this pr we make sure that reusing ngcontainers comment node doesnt result in unwanted dom manipulation nggontainers comment node is already part of the dom and doesnt have to be recreated reappended pr close ,fix
4996,ivy shadow all dom property in debugelementproperties fix pr close ,fix
4997,compiler add detail while throw error during expression convert fix pr close ,refactor
4998,core missinginjectable migration should migrate empty object literal provider in view engine provider which neither used usevalue useclass usefactory or useexisting were interpreted differently eg provide x provide x usevalue undefined this is how it work in view engine provide x provide x useclass x this is how it work in ivy the missinginjectable migration should migrate such provider to the explicit usevalue provider this ensures that there is no unexpected behavioral change when updating to v pr close ,feat
4999,docsinfra upgrade cli command doc source to bbccf updating angularmaster from clibuildsmaster relevant change in commit range modified helpdocjson helpupdatejson pr close ,build
5000,ngcc always add export for modulewithproviders reference in a bug wa supposedly fixed where internal class a used within modulewithproviders are publicly exported even when the typing file already contained the generic type on the modulewithproviders this fix turn out to have been incomplete a the modulewithproviders analysis is not done when not processing the typing file the effect of this bug is that format that are processed after the initial format had been processed would not have export for internal symbol resulting in export wa not found in error this commit fix the bug by always running the modulewithproviders analyzer an integration test ha been added that would fail prior to this change fix pr close ,fix
5001,ngcc expand integration test with apf like package layout ngcc ha a basic integration test infrastructure that downlevels typescript code into bundle format that need to be processed by ngcc until now only e bundle were created with a flat structure however more complex scenario require an apflike layout containing multiple bundle format pr close ,test
5002,ngcc correctly include internal dts file some declaration file may not be referenced from an entrypoints main typing file a it may declare type that are only used internally ngcc ha logic to include declaration file based on all source file to ensure internal declaration file are available for package following apf layout however this logic wa insufficient consider an entrypoint with base path of esmtesting and typing residing in testing the file esmtestingsrcnestedinternaljs ha it typing file at testingsrcnestedinternaldts previously the declaration wa assumed to be located at esmtestingtestinginternaldts by mean of esmtestingsrcnestedtestinginternaldts which is not where the declaration file can be found this commit resolve the issue by looking in the correct directory pr close ,fix
5003,docsinfra prevent autolinking of snippet in guide by adding the bash language to the code snippet it will no longer be autolinked which wa causing a false positive link to be rendered fix pr close ,docs
5004,docsinfra do not autolink code in bash and json snippet previously any code block which wa not marked with noautolink cs class would have it content autolinked to api page sometimes this result in false positive link being generated this is problematic for triple backticked block which can not provide the noautolink cs class to prevent the linking this commit fix the problem by allowing the autolinker to be configured not to autolink code block that have been marked with an ignored language by default these are bash and json triple backticked block are able to specify the language directly after the first set of triple backticks fix pr close ,fix
5005,docsinfra reformat the autolinkcode file pr close ,style
5006,docsinfra sync example node engine constraint with aio pr close ,build
5007,ngcc correctly associate decorator with aliased class in flat bundle format multiple class that have the same name can be suffixed to become unique in eslike bundle this result in the outer declaration from having a different name from the implementation declaration within the class iife a the implementation declaration may not have been suffixed a an example the following code would fail to have a directive decorator a ngcc would search for decorate call that refer to aliaseddirective by name whereas the decorate call actually us the aliaseddirective name javascript var aliaseddirective class function function aliaseddirective aliaseddirective tslibdecorate directive selector somedirective aliaseddirective return aliaseddirective this commit fix the problem by not relying on comparing name but instead finding the declaration and matching it with both the outer and inner declaration pr close ,fix
5008,ngcc avoid using spy in esmreflectionhost test a testcase that wa using a spy ha shown itself to be brittle and it assertion can easily be moved into a related test pr close ,test
5009,languageservice completion support for indexed type previously indexing a container type would not return completion for the indexed type because for every typescript type the recorded index type wa always marked a undefined regardless of the index signature this pr now return the index type of typescript container with numeric or string index signature this allows use to generate completion for array and defined index type typescript interface containert key string t const ctr containert ctrstringkey give t completion const arr t arr give t completion note that this doe not provide completion for property indexed by string literal eg typescript interface containert foo t const ctr containert ctrfoo doe not give t completion close angularvscodenglanguageservice close angularvscodenglanguageservice pr close ,feat
5010,platformwebworker mark all public apis a deprecated in cccf angularplatformwebworker and angularplatformwebworkerdynamic were deprecated ie by deprecating all their public apis however some public angularplatformwebworker apis were accidentally missed additionally resulting in the package itself not showing up a deprecated on angulario this commit fix it by marking those remaining public apis a deprecated pr close ,docs
5011,languageservice provide completion for attribute value this commit fix a bug whereby completion for attribute value are only provided for directive that support the microsyntax format all other binding are ignored im not sure if this is a regresssion or a bug because there were no test prior to this pr close ,fix
5012,ivy expressionchangedafterithasbeencheckederror for safevalue fix pr close ,fix
5013,compilercli refactor gettstypefrombuiltintype this commit fix a few issue with helper method getbuiltintypefromtstype the function is wrongly named it should be the other way round the tstype returned by the function should not contain any value this is because for some data type like number and string the sourcefile contextnode is not the correct value value is never needed for program correctness in this case pr close ,fix
5014,languageservice function alias should be callable this commit fix a long standing bug whereby a template variable that get initialized to a class method get resolved to the any type thus when it is called the language service produce error member x is not callable pr close pr close pr close ,fix
5015,ivy support for id bootstrap selector fix pr close ,fix
5016,languageservice recompute analyzed module only when source file change this commit fix a bug brought up by andriuspra whereby the language service host would recompute the analyzed module even when none of the source file change this is due to a bug in our unit test that precludes nonts file from incrementing the project version consequently when the external template is updated the program remains the same with the bug fixed the next step is to figure out if any source file have been added changed removed since the last computation the previously analyzed could be safely retained only when none of these operation happen pr close ,fix
5017,languageservice remove gettemplatereferences from languageservice api the method gettemplatereferences appears in both the languageservice interface and languageservicehost interface it should belong in the latter and not the former since the former deal with the semantics of the language and not the mechanic pr close ,fix
5018,ivy remove findcomponentview since we now store it in lviewdeclarationcomponentview pr close ,refactor
5019,ivy improve the missing localize error message if the application is not running directly in the browser eg universal or appshell then the localize import must be adding to a different file than for normal browser application this commit add more information about this to avoid any confusion fw pr close ,docs
5020,changelog mention cldr update in breaking change angular rc contains an update of cldr data to v the localized data changed for some locale and this is breaking test that are checking the result of in application for example the space separator used in number changed from xa to uf this commit add a mention to this change in the release note so developer can more easily understand why some of their test are failing when updating to v pr close ,docs
5021,ivy extend assertion in directiveinject function to support icucontainers prior to this commit the assert that we have in directiveinject assert introduced recently didnt include icucontainer tnode type and a a result the error is thrown in case pipe with dependency are used inside icu this commit extends the assert to allow for icucontainer tnode type pr close ,fix
5022,ivy avoid cyclical dependency in import this commit move the setlcontaineractiveindex and getlcontaineractiveindex function used in a few file to a common utilviewutilts lib to avoid cyclical dependency while importing instructionscontainerts where these function located originally pr close ,fix
5023,bazel update ngadd to use bazel v the ngadd schematic for angularbazel should set up the latest bazel version v that contains fix for window eg pr close ,feat
5024,compilercli move diagnostics file to language service the following file are consumed only by the language service and do not have to be in compilercli expressiondiagnosticsts expressiontypets typescriptsymbolsts symbolsts pr close ,refactor
5025,ivy minor improvement cleanup in the di code pr close ,refactor
5026,ivy improve performance of transplanted view pr close ,perf
5027,docsinfra simplify image style and remove figure reference reference remove figure element a aio is not typically using caption or image group where figure would be necessary or appropriate pr close ,feat
5028,common fix condition in transformed ngif div classherolist ngifheroes else loading defines hero a condition but herolist is used a condition in the transformed code ngtemplate ngifheroes ngifelseloading pr close ,docs
5029,router make routerlinkactive work with query params which contain array the urltree equalqueryparams and containsqueryparam method did not handle query params that ha array which resulted in the routerlinkactive to not behave a expected change wa made to ensure query params with array are handled correctly fix pr close ,fix
5030,ngcc do not emit e code in e file previously ngccs renderer would add some constant in the processed file which were emitted a e code eg const declaration this would result in invalid e generated code that would break when run on browser that do not support the emitted format this commit fix it by adding a printstatement method to renderingformatter which can convert statement to javascript code in a suitable format for the corresponding renderingformatter additionally the translateexpression and translatestatement ngtsc helper method are augmented to accept an extra hint to know whether the code need to be translated to e format or not fix pr close ,fix
5031,ngcc generate correct metadata for class with gettersetter property while processing class metadata ngtsc generates a setclassmetadata call which among other thing contains info about property decorator previously processing gettersetter pair with some of ngccs reflectionhosts resulted in multiple metadata entry for the same property which resulted in duplicate object key which in turn cause an error in e strict mode this commit fix it by ensuring that there are no duplicate property name in the setclassmetadata call in addition generatesetclassmetadatacall is updated to treat classmemberdecorators the same a classmemberdecorators null ie omitting the classmember from the generated setclassmetadata call alternatively ngccs reflectionhosts could be updated to do this transformation decorator decorator null when reflecting on class member but this would require change in many place and be le futureproof for example given a class such a t class foo input get bar return bar set barvalue any previously the generated setclassmetadata call would look like t ɵsetclassmetadata bar type input bar the same class will now result in a call like t ɵsetclassmetadata bar type input fix pr close ,fix
5032,compilercli avoid superfluous parenthesis around statement previously due to a bug a context with isstatement false could be returned in place where a context with isstatement true wa requested a a result some statement would be unnecessarily wrapped in parenthesis this commit fix the bug in contextwithstatementmode to always return a context with the correct isstatement value note that this doe not have any impact on the generated code other than avoiding some superfluous parenthesis on certain statement pr close ,refactor
5033,common getcurrencysymbol return typo extra added to end of doc pr close ,docs
5034,ivy constant object literal shared across element and component instance currently if a consumer doe something like the following the object literal will be shared across the two element and any instance of the component template the same applies to array literal div somedirectivediv div somedirectivediv these change make it so that we generate a pure function even if an object is constant so that each instance get it own object note that the original design for this fix included moving the pure function factory into the consts array in the process of doing so i realized that pure function are also used inside of directive host binding which mean that we dont have access to the consts these change also fix an issue that meant that the purefunction instruction could only be run during creation mode make the getconstant utility slightly more convenient to use this isnt strictly required for these change to work but i had made it a a part of a larger refactor that i ended up reverting pr close ,fix
5035,ivy reset style property value defined using styleproppx prior to this change setting style prop value to undefined or empty string would not result in resetting prop value in case the style prop is defined using styleproppx syntax the problem is that the check for empty value and thus reseting the value considered successful only in case of null value this commit update the check to use isstylingvaluedefined function that also check for undefined and empty string pr close ,fix
5036,ngcc support minified e scenario the reflection host have been updated to support the following code form which were found in some minified library code the class iife not being wrapped in parenthesis call to decorate being combined with the iife return statement pr close ,fix
5037,ngcc remove decorator call even when part of the iife return statement previously we only removed decorate call that looked like someclass decorate but in some minified scenario this call get wrapped up with the return statement of the iife return someclass decorate this is now removed also leaving just the return statement return someclass pr close ,fix
5038,ngcc move stripparentheses to esmreflectionhost for reuse pr close ,refactor
5039,ngcc remove unused function pr close ,refactor
5040,ngcc add default config for ngdragula the dist directory ha a duplicate packagejson pointing to the same file which under certain configuration can cause ngcc to try to process the file twice and fail this commit add a default ngcc config for ngdragula to ignore the dist entrypoint fix pr close ,fix
5041,languageservice colocate getanalzyedmodules and uptodate these two function go handinhand putting them together improves readability pr close ,refactor
5042,ivy componentfactorycreate should clear host element content prior to this change componentfactorycreate function invocation in ivy retained the content of the host element in case host element reference or cs seelctor is provided a an argument this behavior is different in view engine where the content of the host element wa cleared except for the case when shadowdom encapsulation is used to make sure native slot projection work this commit aligns ivy and view engine and make sure the host element is cleared before component content insertion pr close ,fix
5043,ivy view insertion before ngcontainer with a viewcontainerref close pr close ,test
5044,core remove ngcc postinstall migration partially address pr close ,fix
5045,ivy ensure module scope is rebuild on dependent change during incremental compilation ngtsc need to know which metadata from a previous compilation can be reused versus which metadata ha to be recomputed a some dependency wa updated change to directivescomponents should cause the ngmodule in which they are declared to be recompiled a the ngmodules compilation is dependent on it directivescomponents when a dependent source file of a directivecomponent is updated however a more subtle dependency should also cause to ngmodules source file to be invalidated during the reconciliation of state from a previous compilation into the new program the component source file is invalidated because one of it dependency ha changed ergo the ngmodule need to be invalidated a well up until now this implicit dependency wa not imposed on the ngmodule additionally any change to a dependent file may influence the module scope to change so all component within the module must be invalidated a well this commit fix the bug by introducing additional file dependency a to ensure a proper rebuild of the module scope and it component fix pr close ,fix
5046,ivy recompile component when template change in ngc watch mode when the angular compiler is operated through the ngc binary in watch mode changing a template in an external file would not cause the component to be recompiled if ivy is enabled there wa a problem with how a cached compiler host wa present that wa unaware of the changed resource therefore failing to trigger a recompilation of a component whenever it template change this commit fix the issue by ensuring that information about modified resource is correctly available to the cached compiler host fix pr close ,fix
5047,ivy run changedetection on transplanted view close pr close ,fix
5048,core support nginjectabledef on type with inherited ɵprov the nginjectabledef property wa renamed to ɵprov but core must still support both because there are published library that use the older term we are only interested in such property that are defined directly on the type being injected not on base class so there is a check that the defintion is specifically for the given type previously if you tried to inject a class that had nginjectabledef but also inherited ɵprov then the check would fail on the ɵprov property and never even try the nginjectabledef property resulting in a failed injection this commit fix this by attempting to find each of the property independently fix pr close ,fix
5049,common generate correct global locale file pr close ,build
5050,common fix bad root reference in global locale file there wa a mistake in the generation of the global locale file where root wa being used instead of the correctl global pr close ,build
5051,ivy chain listener instruction chain multiple listener instruction on a particular element into a single call which result in le generated code also handle listener on template host listener and synthetic host listener pr close ,perf
5052,core avoid unnecessary creating provider factory in providertorecord move creating the factory into a condition which actually need it to avoid unnecessary creating it pr close ,perf
5053,ngcc build zonejs from source in scriptsbuildpackagesdistsh in internal us of zonejs were switched to reference it directly from source built with bazel instead of npm a a result the necessary script were updated to build zonejs a necessary however some integrationdebugtestsh script were missed apparently because they are not used on ci but only locally a helper for debugging the integration project this commit update the scriptsbuildpackagesdistsh script to also build zonejs so that other script such a the various debugtestsh script can use it pr close ,test
5054,ivy auto register ngmodules with id pr close ,fix
5055,languageservice resolve template variable in nested ngfor this commit fix a bug whereby template variable in nested scope are not resolved properly and instead are simply typed a any pr close pr close ,fix
5056,ivy ensure that the correct document is available most of the use of document in the framework is within the di so they just inject the document token and are done ivy is special because it doe not rely upon the di and must get hold of the document some other way there are a limited number of place relevant to ivy that currently consume a global document object the solution is modelled on the localeid approach which ha getlocaleid and setlocaleid toplevel function for ivy see coresrcrenderints in the rest of angular ie using di the localeid token ha a provider that also call setlocaleid to ensure that ivy ha the same value this commit defines getdocument and setdocument toplevel function for ivy wherever ivy need the global document it call getdocument instead each of the platform eg browser server webworker have provider for document in each of those provider they also call setdocument accordingly fix pr close ,fix
5057,ngcc ensure that adjacent statement go after helper call previously the renderers were fixed so that they inserted extra adjacent statement after the last static property of class in order to help the buildoptimizer in angular cli to be able to treeshake class effectively these statement should also appear after any helper call such a decorate this commit move the computation of this positioning into the ngccreflectionhost via the getendofclass method which return the last statement that is related to the class fw pr close ,fix
5058,ngcc allow look up of multiple helper this change is a precursor to finding the end of a class which need to search for helper of many different name pr close ,refactor
5059,ivy provider override via testbed should remove old provider from the list while overriding provider in ivy testbed via testbedoverrideprovider call the old provider were retained in the list since the override take precedence however presence of provider in the list might have sideeffect if a provider ha the ngondestroy lifecycle hook this hook will be registered and invoked later when component is destroyed this commit update testbed logic to clear provider list by removing the one which have override pr close ,fix
5060,common rerun cldr to remove � character pr close ,fix
5061,docsinfra update angular to rc pr close ,build
5062,docsinfra update angular to rc pr close ,build
5063,docsinfra update angularcli to rc pr close ,build
5064,docsinfra update aio payload size pr close ,build
5065,ivy get viewrefrootnodes should get all root node from projectable node pr close ,test
5066,ivy simplify getfirstnativenode processing of lcontainer pr close ,refactor
5067,ivy properly insert view in front of empty view pr close ,fix
5068,ivy properly insert view in front of view with an empty element container pr close ,fix
5069,docsinfra upgrade cli command doc source to bcfbe updating angularmaster from clibuildsmaster relevant change in commit range modified helpupdatejson pr close ,build
5070,ivy properly determine the first native node of a view pr close ,fix
5071,ivy test for view insertion before another view pr close ,test
5072,compilercli pas sourcefile to getfulltext similar to this commit is needed to fix an outage with the angular kythe indexer crash log typeerror can not read property text of undefined at nodeobjectgetfulltext typescriptstablelibtypescriptjs at factorygeneratorgenerate angularrcpackagescompilerclisrcngtscshimssrcfactorygeneratorts at generatedshimshostwrappergetsourcefile angularrcpackagescompilerclisrcngtscshimssrchostts at findsourcefile typescriptstablelibtypescriptjs at typescriptstablelibtypescriptjs at getsourcefilefromreferenceworker typescriptstablelibtypescriptjs at processsourcefile typescriptstablelibtypescriptjs at processrootfile typescriptstablelibtypescriptjs at typescriptstablelibtypescriptjs at objectforeach typescriptstablelibtypescriptjs pr close ,fix
5073,common update cldr generated file to pr close ,fix
5074,ivy introduce a benchmark for duplicate mapbased styleclass binding prior to this patch all the styling benchmark only tested for template mapbased styleclass binding because of each of the binding being only present in the template there wa no possibility of there being any duplicate mapbased styling binding this benchmark introduces benchmarking for mapbased styleclass binding that are evaluated from both template binding a well a directive this benchmark can be executed by calling bazel build packagescoretestrenderperfduplicatemapbasedstyleandclassbindingslibmindebugesjs node distbinpackagescoretestrenderperfduplicatemapbasedstyleandclassbindingslibmindebugesjs the benchmark is also run via the profilealljs script found in packagescoretestrenderperf pr close ,test
5075,ngcc add reexports only once when ngcc is configured to generate reexports for a package using the generatedeepreexports configuration option it could incorrectly render the reexports a often a the number of compiled class in the declaration file this would cause compilation error due to duplicated declaration pr close ,fix
5076,ivy allign browser benchpress g the depth param for the tree benchmark pr close ,perf
5077,ivy recompile component when template change in ngc watch mode when the angular compiler is operated through the ngc binary in watch mode changing a template in an external file would not cause the component to be recompiled if ivy is enabled there wa a problem with how a cached compiler host wa present that wa unaware of the changed resource therefore failing to trigger a recompilation of a component whenever it template change this commit fix the issue by ensuring that information about modified resource is correctly available to the cached compiler host fix pr close ,fix
5078,ivy introduce a benchmark for duplicate styleclass binding prior to this patch all the styling benchmark only tested for templatebased styleclass binding because of each of the binding being only present in the template there wa no possibility of there being any duplicate binding this benchmark introduces styleclass binding being evaluated from both a template and from various directive this benchmark can be executed by calling bazel build packagescoretestrenderperfduplicatestyleandclassbindingslibmindebugesjs node distbinpackagescoretestrenderperfduplicatestyleandclassbindingslibmindebugesjs the benchmark is also run via the profilealljs script found in packagescoretestrenderperf pr close ,test
5079,changelog fix typo in changelog fix typo in ngformselectorwarning wa ngfromselectorwarning pr close ,docs
5080,common update cldr generated file after change to npm source pr close ,fix
5081,ivy match directive on namespaced element prior to this change namespaced element such a svg element would not participate correctly in directive matching a their namespace wa not ignored which wa the case with the view engine compiler this led to incorrect behavior at runtime and template type checking this commit resolved the issue by ignoring the namespace of element and attribute like they were in view engine fix pr close ,fix
5082,ivy handle override for providedin amodule in rtestbed this issue wa found when debugging a test failure that wa using lazy loaded module with the router when doing this the router call ngmodulefactorycreate for the loaded module this module get a new injector so the override provided in testbed are not applied unless the injectable is in the provider list which is not the case for providedin injectables pr close ,fix
5083,ivy have more descriptive name for lview when debugging lviews it is easy to get lost since all of them have the same name this change doe three thing it make tview have an explicit type host for the top level tview for bootstrap component for the tview which represents component template embedded for the tview which represents an embedded template it change the name of lview to lhostview lcomponentview and lembeddedview depending on the tview type for lcomponentview and lembeddedview we also append the name of of the context constructor the result is that we have lviews which are name a lcomponentviewmycomponent and lembeddedviewngifcontext the above change will make it easier to understand the structure of the application when debugging note all of these are behind ngdevmode and will get removed in production application pr close ,test
5084,compilercli fix typo implict should be implicit instead pr close ,fix
5085,ivy better support for in attribute on ngcontainers prior to this commit in runtime logic used elementattributeinternal function that us setattribute function under the hood for all element where in attribute are present however the ngcontainer element in a template may also have in attribute and calling setattribute fails since they are represented a comment node in dom this commit ensures that we call setattribute on node with tnodetypeelement type that support that operation only pr close ,fix
5086,compiler correctly parse attribute with a dot in the name previously the compiler would ignore everything in the attribute name after the first dot for example div attrsomeattrattrsuffixvardiv is turned into div someattrvarvaluediv this commit ensures that whole attribute name is captured now div attrsomeattrattrsuffixvardiv is turned into div someattrattrsuffixvarvaluediv pr close ,fix
5087,ngcc render adjacent statement after static property see fix fw pr close ,fix
5088,ivy avoid implicit any error in event handler when template type checking is configured with strictdomeventtypes or strictoutputeventtypes disabled in compilation unit that have noimplicitany enabled but strictnullchecks disabled a template type checking error could be produced for certain event handler the error is avoided by letting an event handler in the generated tcb always have an explicit any return type fix pr close ,fix
5089,ngcc handle new spreadarrays tslib helper we already have special case for the spread helper function and with this change we handle the new tslib helper introduced in version spreadarrays for more context see fix pr close ,fix
5090,ivy move all styling configuration into tnodeflags this patch get rid of the configuration setting present in the tstylingcontext array that is used within the styling algorithm for style styleprop class and classname binding these configuration now all live inside of the tnodeflags pr close ,refactor
5091,ivy add ngiflike directive to the ngtemplate benchmark pr close ,perf
5092,ivy remove tstylingcontext locking in favor of firstupdatepass flag this patch remove the need to lock the style and class context instance to track when binding can be added what happens now is that the tnodefirstupdatepass is used to track when binding are registered on the context instance pr close ,refactor
5093,ivy use hex flag instead of binary for tnodeflags pr close ,refactor
5094,docsinfra upgrade cli command doc source to ece updating angularmaster from clibuildsmaster relevant change in commit range modified helpgeneratejson pr close ,build
5095,core renderertorenderer migration not migrating method the renderertorenderer migration currently doe not work properly in v because the migration relies on the type checker for detecting reference to renderer from angularcore this is contradictory since the renderer is no longer exported in v angularcore in order to make sure that the migration still work in v and that we can rely on the type checker for the best possible detection we take advantage of module augmentation and inmemory add the renderer export to the angularcore module pr close ,fix
5096,core remove duplicate because pr close ,docs
5097,core undecoratedclasseswithdi migration should report config error currently typescript project with an invalid tsconfig configuration cause the undecoratedclasseswithdi migration to throw instead we should gracefully exit the migration like we do for syntactical diagnostics but report that there are configuration issue this issue surfaced when testing this migration in combination with the angular cli migration one of the cli migration currently cause invalid tsconfig file which then cause this issue in the undecoratedclasseswithdi migration pr close ,fix
5098,compilercli pas sourcefile to getleadingtriviawidth this commit fix a crash in the angular kythe indexer caused by failure to retrieve sourcefile in a statement crash log typeerror can not read property text of undefined at objectgettokenposofnode typescriptstablelibtypescriptjs at nodeobjectgetstart typescriptstablelibtypescriptjs at nodeobjectgetleadingtriviawidth typescriptstablelibtypescriptjs at factorygeneratorgenerate angularrcpackagescompilerclisrcngtscshimssrcfactorygeneratorts at generatedshimshostwrappergetsourcefile angularrcpackagescompilerclisrcngtscshimssrchostts at findsourcefile typescriptstablelibtypescriptjs at typescriptstablelibtypescriptjs at getsourcefilefromreferenceworker typescriptstablelibtypescriptjs at processsourcefile typescriptstablelibtypescriptjs at processrootfile typescriptstablelibtypescriptjs pr close ,fix
5099,common support loading locale from a global to support compile time localization we need to be able to provide the locale via a well known global property this commit change getlocaledata so that it will attempt to read the local from the global ngcommonlocales if the locale ha not already been registered via registerlocaledata pr close ,feat
5100,common move the low level locale registering to core to limit the exposure of the private localedata from outside angularcore this commit expose private function in the core to hide the internal structure better the registerlocaledata implementation ha moved from angularcommon to angularcore a stub that delegate to core ha been left in common for backward compatibility a new ɵunregisterlocaledata function ha been provided which is particularly useful in test to clear out registered locale to prevent subsequent test from being affected a private export of ɵregisterlocaledata ha been removed from angularcommon this wa not being used and is accessible via angularcore anyway pr close ,refactor
5101,common use private name rather than alias internally pr close ,refactor
5102,ngcc render new definition using the inner name of the class when decorating class with ivy definition eg ɵfac or ɵdir the inner name of the class declaration must be used this is because in e the definition are inside the class iife where the outer declaration ha not yet been initialized pr close ,fix
5103,ngcc override getinternalnameofclass and getadjacentnameofclass for e in e the class consists of an outer variable declaration that is initialised by an iife inside the iife the class is implemented by an inner function declaration that is returned from the iife this inner declaration may have a different name to the outer declaration this commit override getinternalnameofclass and getadjacentnameofclass in esmreflectionhost with method that can find the correct inner declaration name identifier pr close ,fix
5104,ngcc remove unnecessary operator pr close ,refactor
5105,ivy split type into type internaltype and adjacenttype when compiling an angular decorator eg directive angularcompiler generates an expression to be added a a static definition field on the class a type which will be added for that field to the dts file and a statement adjacent to the class that call setclassmetadata previously the same wrappednodeexpr of the class tsidentifier wa used within each of this situation in the ngtsc case this is proper in the ngcc case if the class being compiled is within an e iife the outer name of the class may have changed thus the class ha both an inner and outer name the outer name should continue to be used elsewhere in the compiler and in type the expression will live within the iife the internaltype should be used the adjacent statement will also live within the iife the adjacenttype should be used this commit introduces reflectionhostgetinternalnameofclass and reflectionhostgetadjacentnameofclass which the compiler can use to query for the correct name to use pr close ,refactor
5106,ivy more descriptive error for nested in section this commit move nested in section detection to an earlier stage where we convert html ast to ivy ast this also give a chance to produce better diagnistic message for nested in section that also includes a file name and location pr close ,fix
5107,ivy rename tviewfirsttemplatepass to tviewfirstcreatepass pr close ,refactor
5108,ivy introduce a firstupdatepass flag for tview instance this patch introduces a firstupdatepass flag which can be used inside of instruction code to determine if this is the first time each instruction is running inside of the update block of a template or a hostbindings function pr close ,refactor
5109,ivy remove the gethostnative utility function we already store a reference to a native host of a component view so we can drop the gethostnative utility function that wa getting the same reference from another data structure pr close ,refactor
5110,ivy move local reference into consts array followup from move the local reference array into the component defs consts in order to make it compress better before const c foo somecompngcomponentdef definecomponent template function element div null c after somecompngcomponentdef definecomponent consts foo template function element div null pr close ,perf
5111,core typo in undecoratedclasseswithdi aot failure message pr close ,refactor
5112,ivy implement unknown element detection in jit mode in viewengine we used to throw an error if we encountered an unknown element while rendering we have this already for ivy in aot but we didnt in jit these change implement the error for jit mode pr close ,feat
5113,zonejs work around t issue in typescript circularity detection misfire on the declaration of value here declaring an explicit type avoids the problem pr close ,fix
5114,compilercli remove unused cli private export these export are no longer used by the cli since since major version of the cli are now locked to major version of the framework a cli user will not be able to use fw on an outdated version of the cli that us these old apis pr close ,fix
5115,languageservice should not crash if expr end unexpectedly if there is any parser error when parsing template we should stop immediately and not proceed with template expression diagnostics this regression is caused by and affected vnext onwards pr close pr close ,fix
5116,ivy graceful evaluation of unknown or invalid expression during static evaluation of expression within ngtsc it may occur that certain expression or just part thereof can not be statically interpreted for some reason the static interpreter keep track of the failure reason and the code path that wa evaluated by mean of dynamicvalue which will allow descriptive error in some situation however the static interpreter would throw an exception instead resulting in a crash of the compilation not only doe this cause nondescriptive error more importantly doe it prevent the evaluated result from being partial ie part of the result can be dynamic if their value doe not have to be statically available to the compiler this commit refactors the static interpreter to never throw error for certain expression that it can not evaluate resolve fw pr close ,feat
5117,common remove async pipe from ngfor example using the async pipe a the very first example make it very confusing for beginner most people believe that async is required for ngfor i would remove that part to make the example solely focused on ngfor pr close ,docs
5118,form add a missing space pr close ,docs
5119,ivy dont crash on unknown pipe previously the compiler would crash if a pipe wa encountered which did not match any pipe in the scope of a template this commit introduces a new diagnostic error for unknown pipe instead pr close ,fix
5120,ivy dont crash on an unknown localref target previously the template binder would crash when encountering an unknown localref reference such a div reffoo when no directive ha exportas foo with this commit the compiler instead generates a template diagnostic error informing the user about the invalid reference pr close ,fix
5121,serviceworker ensure initialization before handling message resolve invariant violated initialize latest hash null ha no known manifest thanks to gkalpak and hsta for helping test and investigate this fix fix pr close ,fix
5122,ivy avoid native node retrieval from lview pr close ,perf
5123,ivy add new benchmark focused on template creation pr close ,perf
5124,ivy avoid repeated tnodeinitialinputs read pr close ,perf
5125,ivy avoid repeated native node retrieval and patching before this change instantiating multiple directive on the same host node would result in repeated rnode retrieval and patching this commint reorganises code around directive instance creation so the host node processing common to all directive happens once and only once a the additional benefit the directive instantiation logic get centralised in one function at the expense of patching logic duplication for root node pr close ,perf
5126,ivy inline postprocessdirective to avoid repeated iscomponentdef check pr close ,refactor
5127,ivy correct typing in instantiatealldirectives pr close ,refactor
5128,compilercli attach the correct viamodule to namespace import previously declaration that were imported via a namespace import were given the same bestguessowningmodule a the context where they were imported to this cause problem with resolving modulewithproviders that have a type that ha been imported in this way causing error like error in symbol uiroutermodule declared in uirouterangularuirouterngmoduledts is not exported from uirouterangularuirouterangulardts import into srcappchildmodulets this commit modifies the typescriptreflectionhostgetdirectimportofidentifier method so that it also understands how to attach the correct viamodule to the identifier of the namespace import resolve pr close ,fix
5129,upgrade drop unused import pr close ,refactor
5130,languageservice completion test should reuse existing host and service reusing the single instance of mockhost and language service make the test run much faster pr close ,test
5131,ivy remove code duplication from the embeddedviewrootnodes test pr close ,test
5132,ivy descend into icu container when collecting rootnodes pr close ,fix
5133,ivy descend into view container on ngcontainer when collecting rootnodes pr close ,fix
5134,ivy descend into view container on element when collecting rootnodes pr close ,fix
5135,ivy descend into view container on ngtemplate when collecting rootnodes pr close ,fix
5136,core better error message for undecoratedclasseswithdi migration currently if one of the project target could not be analyzed due to aot compiler program failure we gracefully proceed with the migration this is expected but we should not print a message at the end of the migration that the migration wa successful the migration wa only done partially hence it potentially incomplete and we should make it clear that once the failure are resolved the migration should be rerun pr close ,refactor
5137,ivy class binding benchmark pr close ,perf
5138,bazel update bazelschematics to bazel not updating to bazel yet due to a docker permission ci issue that wa observed on the angular repo that is unresolved see pr close ,feat
5139,languageservice improve signature selection for pipe with args pipe with argument like slice or slice should not produce diagnostic error pr close pr close ,fix
5140,bazel update bazelschematics to use ivy and new rollupbundle note the angularbazel schematic now appends the packagejson script field with ngcc property e browser module main if there is an existing script field with ngcc then the schematic modifies it in place removing firstonly and createivyentrypoints viewengine source under nodemodules need to be updated inplace for bazel a it doe not know how to use the ivy entry point that are created by the nonbazel ngcc command that is added to script ngcc property e browser module main firstonly createivyentrypoints pr close ,feat
5141,ivy avoid generating selector array for directive without a selector now that weve replaced ngbasedef with an abstract directive definition there are a lot more case where we generate a directive definition without a selector these change make it so that we dont generate the selector array if it going to be empty pr close ,perf
5142,ivy in reenable ivy in runtime integration test pr close ,test
5143,ivy in add xmb ee integration test this integration test now doe a full ee test of extraction build translation serve for both xliff and xmb format resolve pr close ,test
5144,compiler in ignore alttrans tag in xliff the parser wa accidentally reading the target tag below the alttrans target and overriding the correct target tag this already worked in localize but a test ha been added to confirm fix pr close ,fix
5145,ivy handle element with local ref in in block prior to this commit in logic which ensures that element removed in a translation are also removed in dom didnt take into account the fact that element may have local ref a a result remove operation failed since there is no corresponding tnode found this commit update the logic to skip all local ref while going though the list of node to ensure that dom match element present in translation pr close ,fix
5146,languageservice add support for text replacement add a replacementspan field on a completion that will allow typed text to be replaced with the suggested completion value if a user selects the completion previously the completion value would simply be appended to the text already typed eg if we had ti typed in a template and title wa recommended a a completion and selected the template would become tititle with replacementspan the original text ti will be replaced for title pr close ,feat
5147,core update migration description with the next version of the cli we dont need to add logging for the description of the schematic a part of the schematic itself this is because now the cli will print the description defined in the migrationsjson file see pr close ,refactor
5148,ivy in support inlining of xtb formatted translation file this commit implement the xtbtranslationparser which can read xtb formatted file pr close ,feat
5149,ivy in share messageserializer across translationparsers each of the xml based translationparsers wa providing it own messageserializer but they are all very similar so these have been consolidated into a single more generic messageserializer a a result of this the extra layer of folder in the project seemed unnecessary so they have been flattened pr close ,refactor
5150,ivy ensure override for multi true only appear once in final provider pr close ,fix
5151,ivy move bindingindex from lview to lframe bindingindex store the current location of the binding in the template function because it used to be stored in lview that lview wa not reentrant this could happen if a binding wa a getter and had a sideeffect of calling detectchanges by moving the bindingindex to lframe where all of the global state is kept in reentrant way we correct the issue pr close ,refactor
5152,languageservice simplify expressionvisitor in completionsts this commit simplifies the logic of expressionvisitor in completionsts specifically helper function uniquebyname and lowername are removed clean up the logic in visitelement reorder constructor params add method addattributevaluestocompletions addkeystocompletions and addsymbolstocompletions pr close ,refactor
5153,ivy in update localizetranslate to accept targetlocales the localizetranslate command line tool can now accept an array of target locale to support the case where translation file do not contain them specify this array via the targetlocales option note to early adopter in order to support this the original t option for the binary ha changed from being a glob pattern to an array of path which will have matching index to any provided targetlocales pr close ,fix
5154,ivy in support setting locale for each translation file previously the target locale of a translation file had to be extracted from the content of the translation file therefore it wa an error if the translation file did not provide a target locale now an array of locale can be provided via the translationfilelocales option that override any target locale extracted from the file this allows u to support translation file that do not have a target locale specified in their content fw fix pr close ,fix
5155,docsinfra upgrade cli command doc source to ececd updating angularmaster from clibuildsmaster relevant change in commit range modified helpnewjson pr close ,build
5156,ivy clean up classbinding perf test for readability pr close ,test
5157,ivy apply static stylesclasses directly to an element styleclassname property pr close ,perf
5158,core missinginjectable migration should not update type definition currently the missinginjectable migration seems to add injectable to thirdparty class in type definition this not an issue in general since we do not generate broken code by inserting a decorator into a type definition file though we can avoid adding the decorator since it wont have any effect and in general we should not write to non source file of the compilation unit pr close ,fix
5159,core missinginjectable migration should not migrate provider with useexisting we should not migrate the reference from useexisting this is because developer can only use the useexisting value a a token eg t ngmodule provider provide apprippleconfig usevalue rippleoptions provide matrippleoptions useexisting apprippleconfig export class appmodule in the case above nothing should be decorated with injectable the apprippleconfig class is just used a a token for injection pr close ,fix
5160,core missinginjectable migration should handle forwardref currently the migration is unable to migrate instance where the provider definition us forwardref since this is a common pattern we should support that from within the migration the solution to the problem is adding a foreign function resolver to the partialevaluator this basically match the usage of the static evaluation that is used by the ngtsc annotation pr close ,fix
5161,ivy remove ngbasedef remove ngbasedef from the compiler and any runtime code that wa still referring to it in the case where wed previously generate a base def we now generate a definition for an abstract directive pr close ,refactor
5162,ivy allow abstract directive to have an invalid constructor for abstract directive ie directive without a selector it may happen that their constructor is called explicitly from a subclass hence it parameter are not required to be valid for angulars di purpose prior to this commit however having an abstract directive with a constructor that ha parameter that are not eligible for angulars di would produce a compilation error a similar scenario may occur for injectables where an explicit use definition allows for the constructor to be irrelevant for example the situation where usefactory is specified allows for the constructor to be called explicitly with any value so it constructor parameter are not required to be valid for injectables this is handled by generating a di factory function that throw this commit implement the same solution for abstract directive such that a compilation error is avoided while still producing an error at runtime if the type is instantiated implicitly by angulars di mechanism fix pr close ,fix
5163,docsinfra document running doc example in ivy mode pr close ,docs
5164,languageservice do not show html element and attrs for ext template this commit remove html element and html attribute from the completion list for external template this is because these completion should be handled by the native html extension and not angular once we setup textmate grammar for inline template we could remove the html completion completely pr close pr close ,fix
5165,ivy support classname in micro benchmark the styling algorithm requires that the rnode ha a classname property in order to execute the fastpath this change add the emulation of this property pr close ,test
5166,ngcc add a migration for undecorated child class in angular view engine there are two kind of decorator inheritance both the parent and child class have decorator this case is supported by inheritdefinitionfeature which merges some field of the definition such a the input or query only the parent class ha a decorator if the child class is missing a decorator the compiler effectively behaves a if the parent class decorator is applied to the child class a well this is the undecorated child scenario and this commit add a migration to ngcc to support this pattern in ivy this migration ha phase first the ngmodules of the application are scanned for class in declaration which are missing decorator but whose base class do have decorator these class are the undecorated child this scan is performed recursively so even if a declared class ha a base class that itself inherits a decorator this case is handled next a synthetic decorator either component or directive is created on the child class this decorator copy some critical information such a selector and exportas a well a support any decorated field input etc a flag is passed to the decorator compiler which cause a special feature copydefinitionfeature to be included on the compiled definition this feature copy at runtime the remaining aspect of the parent definition which inheritdefinitionfeature doe not handle completing the full inheritance of the child class decorator from it parent class pr close ,feat
5167,ivy add a runtime feature to copy cmpdir definition this commit add copydefinitionfeature which support the case where an entire decorator component or directive is inherited from parent to child the existing inheritance feature inheritdefinitionfeature support merging of parent and child definition when both were originally present this merges thing like input output host binding etc copydefinitionfeature on the other hand compensates for a definition that wa missing entirely on the child class by copying field that arent ordinarily inherited like the template function itself this feature is intended to only be used a part of ngcc code generation pr close ,feat
5168,ngcc enable migration to apply schematic to library when upgrading an angular application to a new version using the angular cli builtin schematic are being run to update user code from deprecated pattern to the new way of working for library that have been built for older version of angular however such schematic have not been executed which mean that deprecated code pattern may still be present potentially resulting in incorrect behavior some of the logic of schematic ha been ported over to ngcc migration which are automatically run on library these migration achieve the same goal of the regular schematic but operating on published library source instead of used code pr close ,feat
5169,ngcc rework undecorated parent migration previously the currently disabled undecorated parent migration in ngcc would produce error when a base class could not be determined statically or when a class extends from a class in another package this is not ideal a it would cause the library to fail compilation without a workaround whereas those problem are not guaranteed to cause issue additionally inheritance chain were not handled this commit reworks the migration to address these limitation pr close ,refactor
5170,ivy mark synthetic decorator explicitly in ngccs migration system synthetic decorator can be injected into a compilation to ensure that certain class are compiled with angular logic where the original library code did not include the necessary decorator prior to this change synthesized decorator would have a fake ast structure a associated node and a madeup identifier in theory this may introduce issue downstream a decorator node is used for diagnostics so it must have position information having fake ast node without a position is therefore a problem note that this is currently not a problem in practice a injected synthesized decorator would not produce any diagnostics the decorator identifier should refer to an imported symbol therefore it is required that the symbol is actually imported moreover bundle format such a umd and commonjs use namespaces for import so a bare tsidentifier would not be suitable to use a identifier this wa also not a problem in practice a the identifier is only used in the setclassmetadata generated code which is omitted for synthetically injected decorator to remedy these potential issue this commit make a decorator identifier optional and switch it node over from a fake ast structure to the class name pr close ,refactor
5171,ngcc migrate service that are missing injectable a class that is provided a angular service is required to have an injectable decorator so that the compiler generates it injectable definition for the runtime application are automatically migrated using the missinginjectable schematic however library built for older version of angular may not yet satisfy this requirement this commit port the missinginjectable schematic to a migration that is ran when ngcc is processing a library this ensures that any service that is provided from an ngmodule or directivecomponent will have an injectable decorator pr close ,feat
5172,ngcc prevent reflected decorator from being clobbered ngcc ha an internal cache of computed decorator information for reflected class which could previously be mutated by consumer of the reflection host with the ability to inject synthesized decorator such decorator would inadvertently be added into the array of decorator that wa owned by the internal cache of the reflection host incorrectly resulting in synthesized decorator to be considered real decorator on a class this commit fix the issue by cloning the cached array before returning it pr close ,fix
5173,ivy apply styleclass binding directly to styleclassname this patch ensures that the style and class based binding are directly applied to an element style and classname attribute this patch optimizes the algorithm so that it doesnt construct an update an instance of stylingmaparray for style and class binding doesnt apply style and class based entry using classlist and style direct attribute are used instead doesnt split or iterate over all stringbased token in a string value obtained from a class binding this patch speed up the following case div class and div class class div style and div style style the overall speec increase is by over x pr close ,perf
5174,languageservice find expression asts using absolute span move to using the absolute span of an expression ast relative to an entire template rather than a relative span relative to the start of the expression to find an expression ast given a position in a template this is part of the change needed to support text replacement in template pr close ,refactor
5175,ivy improve microbenchmark reporting progress pr close ,test
5176,core add link to remaining migration guide pr close ,refactor
5177,ivy strictness flag for template type checking the template type checking ability of the ivy compiler are far more advanced than the level of template type checking that wa previously done for angular template up until now a single compiler option called fulltemplatetypecheck wa available to configure the level of template type checking however now that more advanced type checking is being done new error may surface that were previously not reported in which case it may not be feasible to fix all new error at once having only a single option to disable a large number of template type checking capability doe not allow for incrementally addressing newly reported type of error a a solution this commit introduces some new compiler option to be able to enabledisable certain kind of template type check on a finegrained basis pr close ,feat
5178,ivy split checktypeofreferences into dom and nondom flag view engine correctly infers the type of local ref to directive or to ngtemplates just not to dom node this commit split the checktypeofreferences flag into two separate half allowing the compiler to align with this behavior pr close ,fix
5179,ivy add flag to disable checking of text attribute for element that have a text attribute it may happen that the element is matched by a directive that consumes the attribute a an input in that case the template type checker will validate the correctness of the attribute with respect to the directive declared type of the input which would typically be boolean for the disabled input since empty attribute are assigned the empty string at runtime the template type checker would report an error for this template this commit introduces a strictness flag to help alleviate this particular situation effectively ignoring text attribute that happen to be consumed by a directive pr close ,feat
5180,ivy verify whether typescript version is supported during the creation of an angular program in the compiler a check is done to verify whether the version of typescript is considered supported producing an error if it is not this check wa missing in the ivy compiler so user may have ended up running an unsupported typescript version inadvertently resolve fw pr close ,feat
5181,ivy intruduce lframe to store global instruction information lframe store information specifice to the current lview a the code enters and leaf lviews we use enterview and leaveview respectively to build a a stack of lframes this allows u to easily restore the previous lview instruction state pr close ,refactor
5182,languageservice remove unused function createelementcssselector it no longer used and needed pr close ,refactor
5183,languageservice remove attrinfo interface it no longer used and needed pr close ,refactor
5184,languageservice create ngcompletionentry to replace tscompletionentry it is messy to keep casting completionentrykind from ngcompletionkind to tsscriptelementkind instead create a new type ngcompletionentry that is exactly the same a tscompletionentry but with the kind type overridden to ngcompletionkind this way we only have to cast it once and can do so in a safe manner pr close ,refactor
5185,core support running performance benchmark in browser pr close ,test
5186,ivy support abstract directive in template type checking recently it wa made possible to have a directive without selector which are referred to a abstract directive such directive should not be registered in an ngmodule but can still contain decorator for input output query etc the information from these decorator and the directive decorator itself need to be registered with the central metadataregistry so that other area of the compiler can request information about a given directive an example of which is the template type checker that need to know about the input and output of directive prior to this change however abstract directive would only register themselves with the metadataregistry a being an abstract directive without all of it other metadata like input and output this meant that the template type checker wa unable to resolve the input and output of these abstract directive therefore failing to check them correctly the typical error would be that some property doe not exist on a dom element whereas said property should have been bound to the abstract directive input this commit fix the problem by always registering the metadata of a directive or component with the metadataregistry test have been added to ensure abstract directive are handled correctly in the template type checker together with test to verify the form of abstract directive in declaration file fix pr close ,fix
5187,ivy add styling class benchmark pr close ,test
5188,ivy fix broken typechecking test on window one of the template typechecking test relies on the newline character which is different on window this commit fix the issue pr close ,fix
5189,bazel add missing comment about j provider to ngmodulebzl pr close ,refactor
5190,ivy in inline current locale at compiletime during compiletime translation inlining the localizelocale expression will now be replaced with a string literal containing the current locale of the translation pr close ,feat
5191,ivy in create and use islocalize helper pr close ,refactor
5192,ivy allow the locale to be set via a global property in the postlocalize world the current locale value is defined by setting localizelocale which is then read at runtime by angular in the provider for the localeid token and also passed to the ivy machinery viasetlocaleid the localize compiletime inlining tooling can replace occurrence of localizelocale with a string literal similar to how translation are inlined fw see pr close ,feat
5193,compiler add expression absolute span test for templateasts previously we had tested that expression parsed in a render ast had correctlydefined absolute span span relative to the entire template not the local expression sometimes we use template asts rather than render asts and it desirable to test for correct expression span in the template parser a well adding these test resolved one bug similar to the one fixed in fdfeddfeddfebbfd where expression in the value of a template attribute were not given an absolute span corresponding to the start of the attribute name rather than the start of the attribute value the diff on this commit is large partially because it involves some structural change of the template parser testing layout in particular the following is done move createmetalike function from templateparserspects to be exported from a new test utility file create an expressionsourcehumanizer similar to the one created in bdcacdafdcac to allow convenient testing of expression location create templateparserabsolutespanspects testing the span of expression parsed by the template parser this is very similar to the rastabsolutespanspec pr close ,test
5194,ivy input type coercion for template typechecking often the type of an input field dont fully reflect the type of assignable value this can happen when an input ha a gettersetter pair where the getter always return a narrow type and the setter coerces a wider value down to the narrow type for example you could imagine an input of the form typescript input get value string return thisvalue set valuev tostring string thisvalue vtostring here the getter always return a string but the setter accepts any value that can be tostringd and coerces it to a string unfortunately typescript doe not actually support this syntax and so angular user are forced to type their setter a narrowly a the getters even though at runtime the coercion work just fine to support these kind of pattern eg a used by material this commit add a compiler feature called input coercion when a binding is made to the value input of a directive like matinput the compiler will look for a static field with the name ngacceptinputtypevalue if such a field is found the typechecking expression for the input will use the static field type instead of the type for the input fieldallowing for the expression of a type conversion between the binding expression and the value being written to the input field to solve the case above for example matinput might write typescript class matinput rest of the directive static ngacceptinputtypevalue tostring string fw resolve pr close ,feat
5195,ivy fined tune micro benchmark parameter decrease minsampleduration to make it more likely that we cane fit into single time slice increase minsamplecountnoimprovement to make it more likely to find the best pr close ,test
5196,ivy improve styling performance change the existing implementation from using stringsplits to a char scan which performer the same thing the reason why split is slow is that s allocates new regexp every time this code executes regexp scan are a lot more expensive because they are more powerful pr close ,perf
5197,ivy handle method call of local variable in template type checker prior to this change a method call of a local template variable would incorrectly be considered a call to a method on the component class for example this pattern would produce an error ngtemplate letmethod method ngtemplate here the method call should be targeting the implicit variable on the template context not the component class this commit corrects the behavior by first resolving method in the template before falling back on the component class fix pr close ,fix
5198,ivy align ve ivy ref type in fulltemplatetypecheck false in view engine with fulltemplatetypecheck mode disabled the type of any inferred based on the entity being referenced this is a bug since the goal with fulltemplatetypecheck false is for ivy and ve to be aligned in term of type inference this commit add a checktypeofreference flag in the typecheckingconfig to control this inference and set it to false when fulltemplatetypecheck is disabled pr close ,fix
5199,docsinfra implement figure style pr originally addressed an update via issue to make image more visible with a white background implementation of gray lightbox this pr implement those style defined in pr pr close ,feat
5200,compiler do not throw when using abstract directive from other compilation unit library can expose directivecomponent base class that will be used by consumer application using such a base class from another compilation unit work fine with ngtsc but when using ngc the compiler will thrown an error saying that the base class is not part of a ngmodule eg can not determine the module for class x in y add x to the ngmodule to fix it this seems to be because the logic for distinguishing directive from abstract directive is scoped to the current compilation unit within ngc this cause abstract directive from other compilation unit to be considered a actual directive causing the exception pr close ,fix
5201,languageservice add global symbol for any this commit introduces a global symbol table in the language service for symbol that are available in the top level scope and add any to it see pr close pr close ,fix
5202,bazel remove deprecated ngsetupworkspace function this should be removed before for rc breaking change angularbazel ngsetupworkspace is no longer needed and ha been removed we assume you will fetch rulesnodejs in your workspace file and no other dependency remain here simply remove any call to this function and the corresponding load statement pr close ,fix
5203,docsinfra upgrade cli command doc source to ec updating angularmaster from clibuildsmaster relevant change in commit range modified helpgeneratejson helpupdatejson pr close ,build
5204,ivy add instruction for deoptigate pr close ,test
5205,docsinfra disable e size tracking in aio test pr close ,test
5206,docsinfra scroll to top when navigating to new page via address bar previously when navigating to a new page via a link the scroll position wa correctly restored to but navigating to a new page via typing the url in the browser address bar keep the old scroll position this commit ensures that the scroll position is restored to whenever the scrollservice is instantiated anew ie new page navigation the old behavior of retaining the scroll position on reload is kept by storing the old url when leaving a page and only applying the stored scroll position if the new url match the stored one fix pr close ,fix
5207,languageservice add directive selector bananainabox to completion this commit refactors attribute completion and fix two bug selector for directive are not provided bananainabox two way binding syntax are not provided pr close pr close ,fix
5208,ivy viewref need embededviewref declaration pr close ,refactor
5209,ivy rename getcomponentviewbyindex to getcomponentlviewbyindex pr close ,refactor
5210,ivy avoid unnecessary in pas while processing a template prior to this commit we always invoked second in pas in case whitespace removal is on which is a default even if a given template doesnt contain in information now we store a flag that indicates presence of in information in a template during first in pas and use it to check whether second pas is needed pr close ,perf
5211,compiler ensure that legacy id are rendered for icu when computing in message for template there are two pass this is because message must be computed before any whitespace is removed then on a second pas the message must be recreated but reusing the message id from the first pas previously icu were losing their legacy id that had been computed via the first pas this commit fix that by keeping track of the message from the first pas previousmessage for icu placeholder node fw pr close ,fix
5212,compiler add abstract nodewithin class to ml parsing this abstract class will be useful for identifying node that can hold in data pr close ,refactor
5213,compiler use type guard rather than type cast the code will now fail if the in property is of the wrong type pr close ,refactor
5214,compiler rename in ast to inmeta this better reflects what this type represents and what it is used for pr close ,refactor
5215,compiler clarify that message constructor take a customid previously the parameter wa id which is ambigous because it could be a computed value rather than a developer specified custom value pr close ,refactor
5216,compiler tidy up inmetavisitor context params pr close ,refactor
5217,compiler make imetavisitor stateless this commit clean up the imetavisitor code by moving all the state of the visitor into a context object that get passed along a the node are being visited this is in keeping with how visitor are designed but also make it easy to remove the definite assignment assertion from the class property also a inmessagefactory named type is exported to make it clearer to consumer of the createinmessagefactory function pr close ,refactor
5218,languageservice preserve crlf in template for languageservice this is a potential fix for suggested by andriuspra in currently crlf line ending are converted to lf and this cause the diagnostics span to be off in template that use crlf the line ending must be preserved in order to maintain correct span offset the solution is to add an option to the tokenizer to indicate such preservation pr close ,fix
5219,ngcc enable private ngmodule reexports in ngcc on request this commit adapts the private ngmodule reexport system using aliasing to ngcc not all ngcc compilation are compatible with these reexports a they assume a correspondence between j and dts file the primary concern here is supporting them for commonjsonly package pr close ,feat
5220,ivy enable reexport of the compilation scope of ngmodules privately this commit refactors the aliasing system to support multiple different aliasinghost implementation which control specific aliasing behavior in ngtsc see the readmemd a new host is introduced the privateexportaliasinghost this solves a longstanding problem in ngtsc regarding support for monorepo style private library these are library which are compiled separately from the main application and depended upon through typescript path mapping such library are frequently not in the angular package format and do not have entrypoints but rather make use of deep import style module specifier this can cause issue with ngtscs ability to import a directive given the module specifier of it ngmodule for example if the application us a directive foo from such a library foo the user might write typescript import foomodule from foomodule in this case foomoduledts is pathmapped into the program ordinarily the compiler would see this a an absolute module specifier and assume that the foo directive can be imported from the same specifier for such non apf library this assumption fails really foo should be imported from the file which declares it but there are two problem with this the compiler would have to reverse the path mapping in order to determine a pathmapped path to the file maybe foodirdts there is no guarantee that the file containing the directive is path mapped in the program at all the compiler would effectively have to guess foodir a a module specifier which may or may not be accurate depending on how the library and path mapping are set up it strongly desirable that the compiler not break it current invariant that the module specifier given by the user for the ngmodule is always the module specifier from which directivespipes are imported thus for any given ngmodule from a particular module specifier it must always be possible to import any directivespipes from the same specifier no matter how it packaged to make this possible when compiling a file containing an ngmodule ngtsc will automatically add reexports for any directivespipes not yet exported by the user with a name of the form ɵngexportɵmodulenameɵdirectivename this ha several effect it guarantee anyone depending on the ngmodule will be able to import it directivespipes from the same specifier it maintains a stable name for the exported symbol that is safe to depend on from code on npm effectively this private exported name will be a part of the package dts api and can not be changed in a nonbreaking fashion fix fw resolve pr close ,feat
5221,form fix grammar and add clarification to setvalue doc changed setvalue documentation for throwing an error a it contained a grammar mistake and also may have caused ambiguity around when exactly the method would throw pr close ,docs
5222,core document testbedget deprecation it wa replaced by testbedinject documenting such change pr close ,docs
5223,core add modulewithproviders generic type migration static method that return a type of modulewithproviders currently do not have to specify a type because the generic fall back to any this is problematic because the type of the actual module being returned is not present in the type information since ivy us dts file exclusively for downstream package rather than metadatajson file for example we no longer have the type of the actual module being created for this reason a generic type should be added for modulewithproviders that specifies the module type this will be required for all user in v but will only be necessary for user of ivy in v pr close ,feat
5224,compilercli remove unused method filesystemmkdir previously the filesystem abstraction featured a mkdir method in nodejsfilesystem the default filesystem implementation used in actual code the method behaved similar to nodejs fsmkdirsync ie failing if any parent directory is missing or the directory exists already in contrast mockfilesystem which is the basis or mock filesystem implementation used in test implemented mkdir a an alias to ensuredir which behaved more like nodejs fsmkdirsync with the recursive option set to true ie creating any missing parent directory and succeeding if the directory exists already this commit fix this inconsistency by removing the mkdir method which wa not used anyway and only keeping ensuredir which is consistent across our different filesystem implementation pr close ,refactor
5225,ngcc do not fail when multiple worker try to create the same directory when ngcc is running in parallel mode usually when run from the command line and the createnewentrypointformats option is set to true eg via the createivyentrypoints command line option it can happen that two worker end up trying to create the same directory at the same time this can lead to a race condition where both check for the directory existence see that the directory doe not exist and both try to create it with the second failing due the directory having already been created by the first one note that this only affect directory and not file because ngcc task operate on different set of file this commit avoids this race condition by allowing filesystems ensuredir method to not fail if one of the directory it is trying to create already exists and is indeed a directory this is fine for the ensuredir method since it purpose is to ensure that the specified directory exists so even if the mkdir call failed because the directory exists ensuredir ha still completed it mission related discussion fw resolve pr close ,fix
5226,ivy input type coercion for template typechecking often the type of an input field dont fully reflect the type of assignable value this can happen when an input ha a gettersetter pair where the getter always return a narrow type and the setter coerces a wider value down to the narrow type for example you could imagine an input of the form typescript input get value string return thisvalue set valuev tostring string thisvalue vtostring here the getter always return a string but the setter accepts any value that can be tostringd and coerces it to a string unfortunately typescript doe not actually support this syntax and so angular user are forced to type their setter a narrowly a the getters even though at runtime the coercion work just fine to support these kind of pattern eg a used by material this commit add a compiler feature called input coercion when a binding is made to the value input of a directive like matinput the compiler will look for a static function with the name ngcoerceinputvalue if such a function is found the typechecking expression for the input will be wrapped in a call to the function allowing for the expression of a type conversion between the binding expression and the value being written to the input field to solve the case above for example matinput might write typescript class matinput rest of the directive static ngcoerceinputvaluevalue tostring string string return null fw resolve pr close ,feat
5227,ivy give shim generation it own compiler option a a hack to get the ivy compiler ngtsc off the ground the existing allowemptycodegenfiles option wa used to control generation of ngfactory and ngsummary shim during compilation this option wa selected since it enabled in google but never enabled in external project a ngtsc is now mature and the role shim play in compilation is now better understood across the ecosystem this commit introduces two new compiler option to control shim generation generatengfactoryshims control the generation of ngfactory shim generatengsummaryshims control the generation of ngsummary shim the allowemptycodegenfiles option is still honored if either of the above flag are not set explicitly pr close ,feat
5228,core add migration guide link to schematic angular v schematic should print out a link to the migration guide associated with each schematic this way user have an easy way to find more information about the automatic code transformation they will see with ng update pr close ,docs
5229,core deprecate entrycomponents with ivy the entrycomponents array isnt necessary anymore these change mark it a deprecated so that it can be removed in a future version pr close ,refactor
5230,ivy throw better error for missing generic type in modulewithproviders currently if a modulewithproviders is missng it generic type we throw a cryptic error like error t value at position in the ngmoduleimports of todosmodule is not a reference object object these change add a better error to make it easier to debug pr close ,fix
5231,languageservice add angular pseudo element into completion pr close ,feat
5232,router adjust urltree redirect to replace url if in eager update resubmit now that google test can pas this requires to be patched original description from jasonaden without this change when using urltree redirects in urlupdatestrategyeager the url would get updated to the target location then redirected this resulted in having an additional entry in the history and thus the back button would be broken going back would land on the url causing a new redirect additionally there wa a bug where the redirect even without urlupdatestrategyeager could create a history with too many entry this wa due to kicking off a new navigation within the navigation cancelling logic with this pr the new navigation is pushed to the next tick with a settimeout allowing the page being redirected from to be cancelled before starting a new navigation related to fixrouter adjust urltree redirect to replace url if in eager update fix lint error pr close ,fix
5233,ivy type checking of event binding until now the template type checker ha not checked any of the event binding that could be present on an element for example mycmp changedhandlechangeevent clickhandleclickeventmycmp ha two event binding the change event corresponding with an output on the mycmp component and the click dom event this commit add functionality to the template type checker in order to type check both kind of event binding this mean that the correctness of the binding expression a well a the type of the event variable will now be taken into account during template type checking resolve fw pr close ,feat
5234,ngcc esmreflectionhostgetdeclarationofidentifier should handle aliased inner declaration in e module the class declaration consist of an iife with inner and outer declaration that represent the class the esmreflectionhost ha logic to ensure that getdeclarationofidentifier always return the outer declaration before this commit if an identifier referred to an alias of the inner declaration then getdeclarationofidentifier wa failing to find the outer declaration instead returning the inner declaration now the identifier is correctly resolved up to the outer declaration a expected this should fix some of the failing rd party package discussed in pr close ,fix
5235,bazel remove angular devkit and restore ngc postinstall this commit remove angulardevkitbuildangular from packagejson for a project that opts into bazel this is because the package add a dependency on nodesass which is rejected by bazel due to it absense this commit also appends to scriptspostinstall if it already exists this is needed because ng new in cli v now automatically add a postinstall step for ngcc pr close ,fix
5236,languageservice use strict comparison pr close ,refactor
5237,common remove deprecated support for intl api breaking change in v we deprecated support for the intl api in order to improve the browser support we are now removing these deprecated apis for v see the original change here for more info on why pr close ,fix
5238,core add cli instruction when localize polyfill is missing pr close ,fix
5239,ivy use reflectionhost to check export when writing an import this commit fix ngtscs import generator to use the reflectionhost when looking through the export of an e module to find the export of a particular declaration thats being imported this is necessary because some module format like commonjs have unusual export mechanic and the normal typescript tstypechecker doe not understand them this fix an issue with ngcc commonjs where export were not being enumerated correctly fw resolve pr close ,fix
5240,ngcc better detection of end of decorator expression for removal of decorator from decorate call fw resolve pr close ,fix
5241,ngcc support ignoremissingdependencies in ngcc config normally when ngcc encounter a package with missing dependency while attempting to determine a compilation ordering it will ignore that package this commit add a configuration for a flag to tell ngcc to compile the package anyway regardless of any missing dependency fw resolve pr close ,feat
5242,ngcc report the correct viamodule when reflecting over commonjs in the reflectionhost api a viamodule indicates that a particular value originated in another absolute module it should always be null for value originating in relativelyimported module this commit fix a bug in the commonjsreflectionhost where viamodule would be reported even for relativelyimported value which cause invalid import statement to be generated during compilation a test is added to verify the correct behavior fw resolve pr close ,fix
5243,ngcc support async flag default to true this allows disabling parallelism in ngcc if desired which is mainly useful for debugging the implementation creates the flag and pass it value to mainngcc no test are added since the feature mainly exists already ngcc support both parallel and serial execution this commit only allows switching the flag via the commandline pr close ,feat
5244,compiler absolute source span for template attribute expression prior to this commit the absolute span relative to template source file rather than the start of an expression of expression in a template attribute like ngif were generated incorrectly equating to the relative span this fix the bug by passing an absoluteoffset parameter when parsing template binding through some level of indirection this is required for the language service to support text replacement in pr close ,fix
5245,ivy ensure mapbased interpolation work with other mapbased source prior to this fix if a mapbased class or style binding wrote it value onto an elemenent the internal styling context would not register the binding if the initial value a a nochange value this situation occurs if a directive take control of the class or style input value and then return a nochange value if the initial value is empty this patch ensures that all binding are always registered with the tstylingcontext datastructure even if their initial value is an instance of nochange pr close ,fix
5246,ivy ensure error are thrown during checknochanges for styleclass binding prior to this fix all styleclass binding eg style and classfoo would quietly update a binding value if and when the current binding value change during checknochanges with this patch all styling instruction will properly check to see if the value ha changed during the second pas of detectchanges if checknochanges is active pr close ,fix
5247,ivy use container in meta if a message is a single icu prior to this commit metadata defined on icu container element wa not inherited by the icu if the whole message is a single icu for example ngcontainer inmeaningdescriptionidcount select ngcontainer this commit update the logic to use parent container in meta information for the case when a message consists of a single icu fix pr close ,fix
5248,core rename nglocaleiddef to ɵloc localeid defs are not considered public api so the property that contains them should be prefixed with angulars marker for private ɵ to discourage apps from relying on def apis directly this commit add the prefix and shortens the name from nglocaleiddef to loc this is because property name can not be minified by uglify without turning on property mangling which most apps have turned off and are thus sizesensitive pr close ,refactor
5249,ngcc avoid warning when reflecting on index signature member previously when ngcc wa reflecting on class member it did not account for the fact that a member could be of the kind indexsignature this can happen for example on abstract class a is the case for jsoncallbackcontext trying to reflect on such member and failing to recognize their kind resulted in warning such a warning unknown member type key string data any void while these warning are harmless they can be confusing and worrisome for user this commit avoids such warning by detecting class member of the indexsignature kind and ignoring them pr close ,fix
5250,ivy move all of the instruction state into a singe object turn out that writing to global state is more expensive than writing to a property on an object slower let count function increment count faster const state count function increment statecount this change move all of the instruction state into a single state object noopchangedetection benchmark pre refactoring u post refactoring u pr close ,refactor
5251,ivy handling classname a an input properly prior to this commit all classname input were not set because the runtime code assumed that the classmap instruction is only generated for class binding however the classname binding also produce the same classmap thus the code need to distinguish between class and classname this commit add extra logic to select the right input name and also throw an error in case class and classname binding are used on the same element simultaneously pr close ,fix
5252,ivy ignore nonproperty binding to input in template type checker prior to this change the template type checker would incorrectly bind nonproperty binding such a classstrong stylecolor and attrenabled to directive input of the same name this is undesirable a those binding are never actually bound to the input at runtime fix fix resolve fw pr close ,fix
5253,core tweek microbenchmarks to make them more consistent ┌────────────────────────────────────┬─────────┬──────┬───────────┬───────────┬───────┐ │ index │ time │ unit │ basetime │ baseunit │ │ ├────────────────────────────────────┼─────────┼──────┼───────────┼───────────┼───────┤ │ directiveinstantiate │ │ u │ │ u │ │ │ elementtextcreate │ │ u │ │ u │ │ │ interpolation │ │ u │ │ u │ │ │ listener │ │ u │ │ u │ │ │ mapbasedstyleandclassbindings │ │ m │ │ m │ │ │ noopchangedetection │ │ u │ │ u │ │ │ propertybinding │ │ u │ │ u │ │ │ propertybindingupdate │ │ u │ │ u │ │ │ styleandclassbindings │ │ m │ │ m │ │ │ stylebinding │ │ u │ │ u │ │ └────────────────────────────────────┴─────────┴──────┴───────────┴───────────┴───────┘ pr close ,refactor
5254,docsinfra update protractorwebdrivermanager to support latest chrome update protractor and ensure that the latest version of webdrivermanager v is installed which correctly installs a chromedriver version that is compatible with the latest version of chrome with the previous version of webdrivermanager chromedriver v would be installed by default which wa not compatible with the latest version of chrome v pr close ,build
5255,docsinfra ensure setuplocal and similar script build local package the setuplocal script and others that are based on it such a setuplocalviewengine mainly doe two thing replace the angular package with the locally built one for aio and the doc example aiotoolsexamplesshared it doe this by calling two other npm script aiouselocal and exampleuselocal respectively for these script to work the local angular package must be already built via scriptsbuildpackagesdistsh in order to make it easier for people to test against local package the script support a buildpackages option that if passed will result in building the local package a well given that the same local package are used for both aio and the example we only need to build the package once also to speed up execution on ci we do not need to build the package there because the package would have been built already in a previous ci job however the various setup npm script were not implemented correctly to meet these requirement specifically when running locally aiouselocal would build the package while exampleuselocal would not it wa supposed to use the already built package from aiouselocal the exampleuselocal script though wa configured to run before aiouselocal a a result the package were not built by the time exampleuselocal needed them which would cause an error this commit fix it by ensuring that aiouselocal which build the local angular package run before exampleuselocal so that the latter can use the same package already built by the former pr close ,build
5256,docsinfra consider all format when compiling doc example with ngcc previously when compiling the doc example with ngcc to run them in ivy mode we would only consider the e property however some package such a angularinmemorywebapi may not have that property in their packagejson they might still be compilable by ngcc if they define other format property such a module or main but ngcc would still fail if it could not find any of the specified property here only e error unable to process any format for the following entrypoints tried e nodemodulesangularinmemorywebapi this commit fix potential issue by considering all property that would be considered if ngcc wa run implicitly by angularcli and aligns the command with the one that will be generated for new apps pr close ,fix
5257,ivy improve debugging experience for stylesclasses this patch introduces the printtable and printsources method to debugstylingcontext which can be used via the windownggetdebugnode helper when debugging an application pr close ,feat
5258,docsinfra update protractorwebdrivermanager to support latest chrome update protractor and ensure that the latest version of webdrivermanager v is installed which correctly installs a chromedriver version that is compatible with the latest version of chrome with the previous version of webdrivermanager chromedriver v would be installed by default which wa not compatible with the latest version of chrome v pr close ,build
5259,docsinfra ensure setuplocal and similar script build local package the setuplocal script and others that are based on it such a setuplocalviewengine mainly doe two thing replace the angular package with the locally built one for aio and the doc example aiotoolsexamplesshared it doe this by calling two other npm script aiouselocal and exampleuselocal respectively for these script to work the local angular package must be already built via scriptsbuildpackagesdistsh in order to make it easier for people to test against local package the script support a buildpackages option that if passed will result in building the local package a well given that the same local package are used for both aio and the example we only need to build the package once also to speed up execution on ci we do not need to build the package there because the package would have been built already in a previous ci job however the various setup npm script were not implemented correctly to meet these requirement specifically when running locally aiouselocal would build the package while exampleuselocal would not it wa supposed to use the already built package from aiouselocal the exampleuselocal script though wa configured to run before aiouselocal a a result the package were not built by the time exampleuselocal needed them which would cause an error this commit fix it by ensuring that aiouselocal which build the local angular package run before exampleuselocal so that the latter can use the same package already built by the former pr close ,build
5260,docsinfra consider all format when compiling doc example with ngcc previously we would only consider the e property but some package such a angularinmemorywebapi may not have that they might still be compilable by ngcc is they have other format property eg module or main this commit fix potential issue by considering all property that would be considered via the cli integration and aligns the command to turn on ivy for doc example with the one used in new cli apps pr close ,fix
5261,languageservice reset mockhost after every spec instead of creating new l this commit speed up the test by calling mockhostreset in beforeeach instead of destroying the entire language service and creating a new one the creation of a new language service instance is expensive due to the need to initialize many core symbol when creating a new program this speed ups the test on my local machine from sec to sec pr close ,fix
5262,languageservice increase projectscript version in mockhostreset pr close ,fix
5263,upgrade remove unused version export in some module system closure it illegal to mutate an export this mutated export isnt used anyway so we can just remove it pr close ,fix
5264,core rename nginjectabledef to ɵprov injectable defs are not considered public api so the property that contains them should be prefixed with angulars marker for private ɵ to discourage apps from relying on def apis directly this commit add the prefix and shortens the name from nginjectabledef to prov for provider since injector defs are known a inj this is because property name can not be minified by uglify without turning on property mangling which most apps have turned off and are thus sizesensitive pr close ,refactor
5265,core rename nginjectordef to ɵinj injector defs are not considered public api so the property that contains them should be prefixed with angulars marker for private ɵ to discourage apps from relying on def apis directly this commit add the prefix and shortens the name from nginjectordef to inj this is because property name can not be minified by uglify without turning on property mangling which most apps have turned off and are thus sizesensitive pr close ,refactor
5266,ivy limit global state read write in host binding pr close ,perf
5267,ivy initialise input from static attrs on the first template pas only this change assures that data structure related to initial input one set from static attribute are created only once during the first template pas and no additional runtime check are done for subsequent pass additionally this commit change the data structure used by initial input on tnode previously initial input for a directive were stored at the directive index in lview this meant that an array holding initial input wa relativelly big and had many null element a placeholder for element directive injector etc after the change we only create an array of a size equal to a number of directive matched on a given tnode for the directiveinstantiate benchmark it boil to allocating a element array v element array previously pr close ,perf
5268,languageservice move completion test to completionsspects there are many spec in tspluginspects that exercise the behavior of completion these spec should belong in completionsspec instead in addition test for getexternalfiles added in tspluginspects fixed bug in mockhostreset to remove overriden script name add test for t diagnostics when angularonly true is not set pr close ,test
5269,ivy in add xliff alias for legacy message id support the legacymessageidformat is taken from the ininformat property but we were only considering xmb xlf and xlf value the cli also support xliff and xliff value for the ininformat this commit add support for those alias pr close ,fix
5270,ivy avoid dom element assertion if procedural renderer is used prior to this commit ivy runtime asserted that a given element is an instance of a dom node these asserts may not be correct in case custom renderer is used which operates object with a shape different than dom node this commit update the code to avoid the mentioned check in case procedural renderer is used pr close ,fix
5271,core add postinstall ngcc migration pr close ,feat
5272,ivy ensure sanitizer is not used when direct class application occurs prior to this patch if a mapclass binding is applied directly then that value will be incorrectly provided a sanitizer even if there is no sanitization present for an element pr close ,fix
5273,languageservice directive info when looking up attribute symbol now hovering over an attribute on an element will provide information about the directive that attribute match in the element if any more generally we return information about directive symbol matched on an element attribute i believe this is similar to how the indexer provides this kind of information though more precise in the sense that this commit provides directive information only if the directive selector exactly match the attribute selector in another sense this is a limitation in fact there are the limitation of directive matched on the element but with a selector of anything more than the attribute eg divstringmodel or stringmodelotherattr will not be returned a symbol matching on the attribute only one symbol can be returned currently if the attribute match multiple directive only one directive symbol will be returned furthermore we can not say that the directive symbol returned is determinstic resolution of these limitation can be discussed in the future at least the second limitation should be very easy to fixup in a future commit this relies solely on the template compiler and is agnostic to any ivy change so this is strictly a feature enhancement that will not have to be refactored when we migrate the language service to ivy pr close ,feat
5274,docsinfra update angular to next also remove workaround for template typechecking issue that wa fixed in fix pr close ,build
5275,core replace instanceof array pr close ,refactor
5276,languageservice test project cleanup this pr add e lib to the tsconfigjson of the test project so that promise could be used note this only affect diagnostics in the ide the tsconfig in language service mock host is the actual config value used and it already ha e lib other minor cleanup rename import in maints add more case to parsingcasests which are tested in later pr pr close ,test
5277,languageservice move diagnostics test to diagnosticsspects this commit move diagnostic spec in tspluginspects to diagnosticsspects pr close ,test
5278,core rename ngmoduledef to ɵmod module defs are not considered public api so the property that contains them should be prefixed with angulars marker for private ɵ to discourage apps from relying on def apis directly this commit add the prefix and shortens the name from ngmoduledef to mod this is because property name can not be minified by uglify without turning on property mangling which most apps have turned off and are thus sizesensitive pr close ,refactor
5279,core rename ngpipedef to ɵpipe pipe defs are not considered public api so the property that contains them should be prefixed with angulars marker for private ɵ to discourage apps from relying on def apis directly this commit add the prefix and shortens the name from ngpipedef to pipe this is because property name can not be minified by uglify without turning on property mangling which most apps have turned off and are thus sizesensitive pr close ,refactor
5280,ivy in support source locale inlining add a new flag to localizetranslate that allows the source locale to be specified when this locale is provided an extra copy of the file is made for this locale where the is no translation but all the call to localize are stripped out resolve fw pr close ,feat
5281,languageservice hover information for component ngmodules enables providing information about the ngmodule a component is in when it selector is hovered on in a template also enables differentiation of a component and a directive when a directive class name is hovered over in a typescript file next step is to enable hover information for directive part of pr close ,feat
5282,core rename ngfactorydef to ɵfac factory defs are not considered public api so the property that contains them should be prefixed with angulars marker for private ɵ to discourage apps from relying on def apis directly this commit add the prefix and shortens the name from ngfactorydef to fac this is because property name can not be minified by uglify without turning on property mangling which most apps have turned off and are thus sizesensitive note that the other defs ngpipedef etc will be prefixed and shortened in followup pr in an attempt to limit how large and conflicty this change is pr close ,refactor
5283,ivy check regular attribute that correspond with directive input prior to this change a static attribute that corresponds with a directive input would not be typechecked against the type of the input this is unfortunate a a static value always ha type string whereas the directive input type might be something different this typically occurs when a developer forgets to enclose the attribute name in bracket to make it a property binding this commit let static attribute be considered a binding with string value so that they will be properly typechecked pr close ,feat
5284,docsinfra fix template type check error in a limitation of ivy template type checker wa fixed where all directive input would incorrectly allow undefined to be passed even when the input type did not allow for it due to the fix some additional type error were uncovered in aio where potential undefined value would be passed to input that were not typed to allow undefined pr close ,build
5285,ivy disable strict null check for input binding this commit introduces an internal config option of the template type checker that allows to disable strict null check of input binding to directive this may be particularly useful when a directive is from a library that is not compiled with strictnullchecks enabled right now strict null check are enabled when fulltemplatetypecheck is turned on and disabled when it off in the near future several of the internal configuration option will be added a public angular compiler option so that user can have finegrained control over which area of the template type checker to enable allowing for a more incremental migration strategy pr close ,feat
5286,ivy do not always accept undefined for directive input prior to this change the template type checker would always allow a value of type undefined to be passed into a directive input even if the input type did not allow for it this wa due to how the type constructor for a directive wa generated where a partial mapped type wa used to allow for input to be unset this essentially introduces the undefined type a acceptable type for all input this commit remove the partial type from the type constructor which mean that we can no longer omit any property that were unset instead any property that are not set will still be included in the type constructor call having their value assigned to any before typescript class ngforoft static ngtypectortinit partialpickngforoft ngforofngfortrackbyngfortemplate ngforoft ngforofngtypectorinit ngforof foo bar after typescript class ngforoft static ngtypectortinit pickngforoft ngforofngfortrackbyngfortemplate ngforoft ngforofngtypectorinit ngforof foo bar ngfortrackby null a any ngfortemplate null a any this change only affect generated type check code the generated runtime code is not affected fix resolve fw pr close ,fix
5287,compilercli resolve type of exported ngif variable currently method getvardeclarations doe not try to resolve the type of exported variable from ngif directive it always return any type by resolving the real type of exported variable it is now possible to use this type information in language service and provide completion go to definition and quick info functionality in expression that use exported variable also language service will provide more accurate diagnostic error during development pr close ,fix
5288,core missinginjectable migration should respect provider of directive and component currenly the missinginjectable migration only migrates provider referenced from ngmodule definition the schematic currently doe not cover the migration for provider referenced in directive or component definition we need to handle the following key for directivescomponents directive provider component provider and viewproviders this commit ensures that the migration handle provider for these definition pr close ,refactor
5289,serviceworker continue serving api request on cache failure when response are cached ok during sw initialization but caching throw an error when handling api response this response never get to client fix response delivery by catching error add logging and test case fix pr close ,fix
5290,serviceworker make signature of caching method compatible make safe caching and unsafe caching method compatible so they can be swapped give more flexibility when writing http response processing code pr close ,refactor
5291,compiler record absolute span of template expression in parser currently the span of expression are recorded only relative to the template node that they reside in not their source file introduce a sourcespan property on expression asts that record the location of an expression relative to the entire source code file that it is in this may allow for reducing duplication of effort in ngtsctypechecksrcdiagnostics later on a well child of pr close ,feat
5292,ivy in run integration test in e mode the new cli build pipeline will automatically downlevel e to e if the tsconfig compilation is set to e this change ensures that the compiletime inlining of translation handle both the e code and the downleveled e code pr close ,test
5293,ivy in support lazyload template string helper there are numerous approach to downlevelling backticked template string to e this commit handle yet another one that babel applies pr close ,fix
5294,ivy in strip meta block from untranslated message if a message ha no translation then we should still strip the meta block from the message part before adding back to the ast pr close ,fix
5295,ivy in change unwrapmessagepartsfromlocalizecall to accept a nodepath in babel nodepath object have more useful information available than simple ast node but they are more difficult to create especially for testing this commit prepares the way for parsing more complex code downlevelling scenario pr close ,refactor
5296,ngcc fix formatting of missing dependency error previously the list of missing dependency wa not explicitly joined which resulted in the default joiner being used during stringification this commit explicitly join the missing dependency line to avoid unnecessary comma before the target entrypoint someentrypoint ha missing dependency dependency dependency dependency after the target entrypoint someentrypoint ha missing dependency dependency dependency dependency pr close ,refactor
5297,ngcc rename the executable from ivyngcc to ngcc previously the executable for the angular compatibility compiler ngcc wa called ivyngcc this would be confusing for user not familiar with our internal terminology especially given that we call it ngcc in all our doc and presentation this commit renames the executable to ngcc and replaces ivyngcc with a script that error with an informative message prompting the user to use ngcc instead jira issue fw pr close ,fix
5298,languageservice remove nondeterministic test a few spec in completionsspects are nondeterministic and do not provide much value to test a specific behavior of language service besides that they are also slow to run pr close ,test
5299,languageservice remove redundant marker method in mockhost remove the following method from mockhost getmarkerlocations replaced with getlocationmarkerfor getreferencemarkers replaced with getreferencemarkerfor pr close ,test
5300,core rename ngdirectivedef to ɵdir directive defs are not considered public api so the property that contains them should be prefixed with angulars marker for private ɵ to discourage apps from relying on def apis directly this commit add the prefix and shortens the name from ngdirectivedef to dir this is because property name can not be minified by uglify without turning on property mangling which most apps have turned off and are thus sizesensitive note that the other defs ngfactorydef etc will be prefixed and shortened in followup pr in an attempt to limit how large and conflicty this change is pr close ,refactor
5301,ivy better error message for unknown component for element in a template that look like custom element ie containing a dash in their name the template type checker will now issue an error with instruction on how the resolve the issue additionally a property binding to a nonexistent property will also produce a more descriptive error message resolve fw pr close ,feat
5302,core rename ngcomponentdef to ɵcmp component defs are not considered public api so the property that contains them should be prefixed with angulars marker for private ɵ to discourage apps from relying on def apis directly this commit add the prefix and shortens the name from ngcomponentdef to cmp this is because property name can not be minified by uglify without turning on property mangling which most apps have turned off and are thus sizesensitive note that the other defs ngdirectivedef etc will be prefixed and shortened in followup pr in an attempt to limit how large and conflicty this change is pr close ,refactor
5303,ivy guard host binding execution with a tnode flag based on the result of the directiveinstantiate executing host binding logic in creation mode account for of time spent in the directive instantiation even if a directive doesnt have host binding this is clearly wastful hence a new flag pr close ,perf
5304,ivy limit memory read in getorcreatenodeinjectorfornode pr close ,perf
5305,ivy stricter null check in setinputsfromattrs pr close ,perf
5306,form remove ngform element selector remove the deprecated ngform element selector and all of the code related to it breaking change ngformngform can no longer be used a a selector use ngformngform instead the ngfromselectorwarning directive ha been removed formsmodulewithconfig ha been removed use the formsmodule directly pr close ,refactor
5307,docsinfra upgrade cli command doc source to dd updating angularmaster from clibuildsmaster relevant change in commit range modified helpbuildjson helpxinjson pr close ,build
5308,router update description and example for resolve interface pr close ,docs
5309,router clarify that createurltree only us some navigationextras there is some confusion around which navigationextras value are used by createurltree this specifies that only value that change the url are used this came up during the discussion in pr close ,docs
5310,router removed extra semicolon pr close ,style
5311,compilercli produce diagnostic message in expression of prefixnot node pr close ,fix
5312,form replace instanceof array pr close ,refactor
5313,compiler replace instanceof array pr close ,refactor
5314,docsinfra upgrade cli command doc source to aecddbf updating angularmaster from clibuildsmaster relevant change in commit range modified helpgeneratejson pr close ,build
5315,ngcc support version range in projectdefault configuration by appending a version range to the package name it is now possible to target configuration to specific version of a package pr close ,feat
5316,ngcc support fallback to a default configuration it is now possible to include a set of default ngcc configuration that ship with ngcc out of the box this allows ngcc to handle a set of common package which are unlikely to be fixed without requiring the application developer to write their own configuration for them any package that are configured at the package or project level will override these default configuration this allows a reasonable level of control at the package and user level pr close ,feat
5317,ivy ensure stylingdebug instance provide context debug info this patch enables a styling debug instance which is apart of the debugnodestyles or debugnodeclasses data structure to expose it context value so that it can be easily debugged pr close ,refactor
5318,languageservice use indexdts for typing the current typing value in packagejson cause the import of angularlanguageservice in typescript to be generated a const languageservice requireangularlanguageservicelanguageservice in cjs output this break the import shim that overwrites the behavior of require at runtime changing the typing to indexdts fix the issue pr close ,fix
5319,ivy in turn on legacy messageid support by default for v we want the migration to the new in to be a simple a possible previously the developer had to positively choose to use legacy messsage id support in the case that their translation file had not been migrated to the new format by setting the legacymessageidformat option in tsconfigjson to the format of their translation file now this setting ha been changed to enableinlegacymessageformat a is a boolean that default to true the format is then read from the ininformat option which wa previously used to trigger translation in the preivy angular compiler pr close ,fix
5320,ivy speed up binding when no directive are present prior to this fix whenever a style or class binding is present the binding application process would require an instance of tstylingcontext to be built regardless of whether or not any binding resolution is needed just so that it know whether or not there are any collision this check is however unnecessary because if and only if there are directive present on the element then are collision possible this patch remove the need for styleclass binding to register themselves on to a tstylingcontext if there are no directive and present on an element this mean that all map and propbased styleclass binding are applied a soon a binding are updated on an element pr close ,perf
5321,ivy use instanceof operator to check for nodeinjectorfactory instance we used to have a custom version of the nodeinjectorfactory check that wa supposed to be faster to the direct usage of the instanceof operator this might have been the case in the past but the recent benchmark show that using instanceof speed up the directiveinstantiate by from time getting from m down to m pr close ,perf
5322,ivy introduce microbenchmark for directive instantiation pr close ,perf
5323,docsinfra ensure spy return new observable every time previously some spy in dovviewercomponent test would return the same ofundefined observable for all invocation of the spy in a test while there is usually only one invocation per spy in each test this is not always the case in case of multiple invocation within the same test subsequent call would return an already completed observable which deviate from the actual behavior of the spied function this commit fix it by ensuring a fresh ofundefined observable is returned on each invocation pr close ,test
5324,docsinfra unpin terser now that size regression is fixed the latest terser version includes a fix for the recent size regression so we can remove the pinning of transitive terser dependency to via packagejson resolution pr close ,build
5325,docsinfra fix some linting warning pr close ,refactor
5326,docsinfra enable fulltemplatetypecheck and fix failure pr close ,build
5327,docsinfra enable more typescript strictness flag pr close ,build
5328,docsinfra update angularcli to next the payload size increase in the e bundle is at least partially expected due to fixing some downleveling corner case related cli issue angularangularcli pr close ,build
5329,docsinfra update angularmaterial to next upgrading to angularmaterial next increase the bundle size slightly kb this is a natural expectation of library fixesimprovements pr close ,build
5330,docsinfra update payload size there seems to be a kb regression for ivy introduced in eea pr close ,build
5331,docsinfra clean up and update dependency to match latest cli this commit includes the following type of change remove unused dependency move dev dependency from devdependencies to dependency and vice versa for production dependency update type update dependency to more closely match the dependency installed by the latest cli for new apps also ensured that the latest version of webdrivermanager v wa installed for protractor which correctly installs a chromedriver version that is compatible with the latest version of chrome pr close ,build
5332,docsinfra replace mousewheel event with wheel event this commit replaces the nonstandard depecated mousewheel event which is not supported in firefox and possibly other browser too with the standard wheel event which work on all supported browser according to mdns compatibility table i manually tested it in chrome firefox edge and ie pr close ,refactor
5333,common fix typo pr close ,docs
5334,ivy in add compile time translation to integration test pr close ,test
5335,ivy in rename inerror to translationparsererror this closer reflects what caused the error pr close ,refactor
5336,ivy in implement compiletime inlining this commit implement a tool that will inline translation and generate a translated copy of a set of application file from a set of translation file pr close ,feat
5337,ivy move attribute array into component def currently ivy store the element attribute into an array above the component def and pass it into the relevant instruction however the problem is that upon minification the array will get a unique name which wont compress very well these change move the attribute array into the component def and pas in the index into the instruction instead before const c foo bar somecompngcomponentdef definecomponent template function element div c after somecompngcomponentdef definecomponent consts foo bar template function element div a couple of case that this pr doesnt handle template reference are still in a separate array in attribute are still in a separate array pr close ,perf
5338,ngcc expose createivyentrypoints option on ivyngcc this allows a postinstall hook to generate the same output a the cli integration doe see pr close ,feat
5339,ivy avoid memory allocation in the isanimationprop check accessing a string character at index allocates a new single character string a better faster check is to use charcodeat that doesnt trigger allocation this simple change speed up the elementtextcreate benchmark by pr close ,perf
5340,ivy add static attribute to the elementtextcreate benchmark pr close ,perf
5341,bazel fix unformatted bzl file ,style
5342,core remove deprecated renderer remove the renderer and related symbol which have been deprecated since version breaking change renderer ha been removed use renderer instead rendercomponenttype ha been removed use renderertype instead rootrenderer ha been removed use rendererfactory instead pr close ,refactor
5343,common expand type for ngforof input to work with strict null check currently the ngforof input accepts null or undefined a valid value although when using strict template input type checking which will be supported by ngtsc passing null or undefined with strict null check enabled cause a type check failure because the type for the ngforof input becomes too strict if strict null check are enabled the type of the input need to be expanded to also accept null or undefined to behave consistently regardless of the strictnullchecks flag this is necessary because whenever strict input type checking is enabled by default most of the angular project that use ngfor with the async pipe will either need to disable template type checking or strict null check because the async pipe return null if the observable hasnt been emitted yet see for example how this affect the angularcomponents repository and how much bloat the workaround involves pr close ,fix
5344,form formgroupname and formarrayname also accepts a number for consistency formgroupname and formaarrayname also accepts a number a input type like formcontrolname close pr close ,feat
5345,ivy unable to bind style zero fix not being able to bind zero a a value in style binding fix pr close ,fix
5346,ivy process nested animation metadata in view engine animation metadata could occur in nested array which would be flattened in the compiler when compiling a component for ivy however the compiler no longer statically evaluates a component animation metadata and is therefore unable to flatten it statically this resulted in an issue to find animation at runtime a the metadata wa incorrectly registered with the animation engine although it would be possible to statically evaluate the animation metadata in ngtsc doing so would prevent reusable animation exported from library from being usable a ngtscs partial evaluator is unable to read value inside library this is unlike ngcs usage of static symbol represented in a library metadatajson which explains how the view engine compiler is able to flatten the animation metadata statically a an alternative solution the metadata flattening is now done in the runtime during the registration of the animation metadata with the animation engine fix pr close ,fix
5347,docsinfra update inmemoryweapi and karmajasminehtmlreporter version the karmajasminehtmlreporter update also includes a fix for taraskarmajasminehtmlreporter fix pr close ,build
5348,form refactor validatorsemail regexp for easier comparison with whatwg version a mentioned in the previous commit the regexp used by validatorsemail is a slightly enhanced version of the whatwg one this commit refactors the regexp without changing it behavior to make it more closely match the format of whatwg version so that it is easier for people to compare it against the whatwg one and understand the difference the main change were changing the order of characterscharacter class inside eg azaz azaz mark all group a noncapturing since we do not use the captured value eg foo foo this could theoretically also have a positive performance impact but i suspect javascript engine are already optimizing away capturing group when they are not used pr close ,refactor
5349,form expand email validation description previously there wa no documentation of what validatorsemail expects a a valid email address making it difficult for people to determine whether it cover their requirement or not even more so that the used pattern slightly deviate from the whatwg version one only option wa to look at the source code and try to decipher the regexp pattern this commit add a highlevel description of the validator and mention it similarity to and difference from the whatwg version it also add a brief explanation of the regexps behavior and reference for more information in the source code to provide more context to maintainersusers trying to understand the implementation in the future fix fix close pr close ,docs
5350,ivy generate ngreflect property for in attribute prior to this change ngreflect property were not created in case an attribute wa marked a translatable for ex intitle this commit add the logic to generate ngreflect for such case pr close ,fix
5351,ivy missing schematic field in localize package the schematic added in is currently failing a the packagejson doe not reference it ng add angularlocalizenext angularlocalizenext added package from contributor in s installed package for tooling via npm the package that you are trying to add doe not support schematic you can try using a different version of the package or contact the package author to add ngadd support pr close ,fix
5352,ivy avoid exposing ng with closure compiler enhanced optimization prior to this commit the ng wa exposed in global namespace which turned out to be problematic when minifying code with closure since it sometimes clobber our ng global this commit aligns ivy debugging tool behavior with existing logic in platformbrowser package packagesplatformbrowsersrcdomutiltsl by avoiding ng in global namespace when closure compiler is used pr close ,fix
5353,core set migration schematic version to valid semver version pr close ,fix
5354,core update migration description with link to aio documentation pr close ,fix
5355,core update static flag documentation followup to that removed the logic that statically determines whether a query is dynamic this update the doc to reflect that and mention that the flag now default to false pr close ,docs
5356,core ngnoopzone should have the same signature with ngzone close pr close ,fix
5357,core add createmigrationcompilerhost current we need to create and override certain compiler host method in every schematic because schematic use a virtual f we this change we extract this logic to a common util pr close ,refactor
5358,ivy attempt rendering initial styling only if present pr close ,perf
5359,ivy limit tnodeinputs read on first template pas pr close ,perf
5360,ivy increase number of created view in the elementtextcreate benchmark pr close ,perf
5361,docsinfra update angular to next pr close ,build
5362,docsinfra align config with what cli generates for new apps this is mainly to avoid some warning when building the app such a warning in angularaiosrcenvironmentsenvironmentarchivets is part of the typescript compilation but it unused add only entry point to the file or include property in your tsconfig not turning on fulltemplatetypecheck due to lot of error pr close ,build
5363,docsinfra replace systemimport with import systemimport ha been deprecated in webpack and produce the following warning when building the app warning in srcappcustomelementscodeprettyprinterservicets systemimport is deprecated and will be removed soon use import instead switching to import to get rid of the warning fix close pr close ,refactor
5364,docsinfra pin terser to to avoid optimization bug this commit pin terser to version instead of which it is currently resolved to to avoid this bug terserterser see for more detail pr close ,build
5365,docsinfra upgrade angularcli to next pr close ,build
5366,docsinfra turn on ivy the angulario project us angular and cli v which by default turn on ivy mode however since ecdd we explicitly opt out of ivy this commit remove the enabledivy false configuration thus allowing the default behavior of having ivy on note this commit only change the angulario project the doc example need to be updated separately first to angular and cli v and then to ivy pr close ,build
5367,docsinfra update current payload size pr close ,build
5368,languageservice create staticreflector once only the creation of staticreflector in createmetadataresolver is a very expensive operation because it involves numerous module resolution to make matter worse since the api of the reflector doe not provide the ability to invalidate it internal cache it ha to be destroyed and recreated on every program change this ha a huge impact on performance this pr fix this problem by carefully invalidating all staticsymbols in a file that ha changed thereby reducing the overhead of recomputation on program change pr close ,fix
5369,core make static query flag optional this is a resubmit of switch back to having the static flag be optional on viewchild and contentchild query in preparation for changing it default value pr close ,feat
5370,core default to dynamic query these change switch to defaulting the static flag on viewchild and contentchild query to false in addition to removing the logic that statically determines whether a query is dynamic pr close ,feat
5371,languageservice improve language service performance pr close ,perf
5372,ivy in add legacyidmode integration test pr close ,test
5373,ivy in render legacy message id in localize if requested the localize library us a new message digest function for computing message id this mean that translation in legacy translation file will no longer match the message id in the code and so will not be translated this commit add the ability to specify the format of your legacy translation file so that the appropriate message id can be rendered in the localize tagged string this result in larger code size and requires that all translation are in the legacy format going forward the developer should migrate their translation file to use the new message id format pr close ,feat
5374,compiler clean up inmetavisitor constructor the initialization of the createinmessage property can be done where it is declared to avoid needing to type it a any pr close ,refactor
5375,compiler move test helper to test file the processinmeta function is only called from a single test so let move it there to keep the main source simpler pr close ,refactor
5376,core mark eventemitterisasync a internal to hide from api doc the isasync property is not part of the public api and should not appear in the api doc pr close ,docs
5377,docsinfra ignore ngdef member in api doc ngdef property such a nginjectordef are not considered part of the public api and should not appear in the api doc this commit add a filter to remove these property from the doc metadata pr close ,fix
5378,upgrade add unit test for angularjsurlcodecs parse method add unit test coverage for new logic added in and for existing logic that wa untested testupgrade add unit test for angularjsurlcodecs parse method add additional coverage and fix spacing testupgrade add unit test for angularjsurlcodecs parse method add unit test coverage for new logic added in and for existing logic that wa untested testupgrade add unit test for angularjsurlcodecs parse method add additional coverage and fix spacing testupgrade add unit test for angularjsurlcodecs parse method add unit test coverage for new logic added in and for existing logic that wa untested testupgrade add unit test for angularjsurlcodecs parse method add unit test coverage for new logic added in and for existing logic that wa untested testupgrade add unit test for angularjsurlcodecs parse method add additional coverage and fix spacing testupgrade add unit test for angularjsurlcodecs parse method add unit test coverage for new logic added in and for existing logic that wa untested pr close ,test
5379,core undecoratedclasseswithdi migration should ignore referenced resource currently the undecoratedclasseswithdi migration leverage ngc in order to work with metadata resolution since ngc by default try to resolve referenced resource on initialization of the underlying t program it can result in unexpected migration failure due to missing resource file this is especially an issue since the cli wrap the angularcompilerprogram with special logic ie to support sc preprocessing etc we dont have all of this since we instantiate a vanilla ngc program the solution to the problem is to simply treat resource request a valid and returning a fake content the migration is not dependent on template or stylesheets so it the simplest and most robust solution fix pr close ,refactor
5380,core remove enableivy compiler option from migration test ecd explicitly set enableivy false for all migration inside the core package this actually hide migration issue because the migration itself should ensure that it instantiates the right compiler program if it relies on angularcompilercli we should remove these option from all migration test to ensure that we catch issue with migration running in version where ivy is enabled by default eg wa accidentally hidden due to the enableivy false option pr close ,test
5381,core staticqueries migration should never use ngtsc ecd enabled ivy by default this is problematic a migration like staticqueries depend on the angularcompilerprogram ngc in order to perform the migration from version to version in order to ensure that the migration always run with ngc and doesnt get the ngtscprogram we need to explicitly disable ivy when creating the angularcompilercli program for the migration this code is still relevant even though the update from version to version landed developer can run ng update from version and immediately get to version where ivy is enabled by default and in that case we need to ensure that ngtsc is not accidentally used similar to pr close ,refactor
5382,ivy add runtime translation to integration test app pr close ,test
5383,ivy in do not render message id unnecessarily in an attempt to be compatible with previous translation file the angular compiler wa generating instruction that always included the message id this wa because it wa not possible to accurately regenerate the id from the call to localize alone in line with this commit change the compiler so that it only render id if they are custom one provided by the template author note when translating message generated by the angular compiler from in tag in template the localizetranslate function will compute message id if no custom id is provided using a common digest function that only relies upon the information available in the localize call this computed message id will not be the same a the message id stored in legacy translation file such file will need to be migrated to use the new common digest function this only affect developer who have been trialling localize have been calling loadtranslations and are not exclusively using custom id in their template pr close ,fix
5384,ivy in support colon in localize metadata metadata block are delimited by colon previously the code naively just looked for the next colon in the string a the end marker this commit support escaping colon within the metadata content the angular compiler ha been updated to add escaping a required pr close ,fix
5385,ivy in move marker block serialization to helper previously the metadata and placeholder block were serialized in a variety of place moreover the code for creating the localizedstring ast node wa doing serialization which break the separation of concern now this is all done by the code that render the ast and is refactored into helper function to avoid repeating the behaviour pr close ,refactor
5386,ivy in better translation warning the missing translation and invalid placeholder warning now contain the meaning if one wa provided pr close ,fix
5387,ivy in throw an error if a translation contains an invalid placeholder previously if a translation contains a placeholder that doe not exist in the message being translated that placeholder is evaluated a undefined translation should never contain such placeholder name so now translate will throw a helpful error in instead pr close ,fix
5388,languageservice module definition on directive hover add information about the ngmodule a directive is declared in when the directive class name is hovered over in the form directive ngmoduledirective class close pr close ,feat
5389,docsinfra use recommended type assertion angular us tslintrecommended by default the default for noanglebrackettypeassertion is true see pr close ,docs
5390,bazel ngmodule action description should include compile mode similarly to tslibrary compilation action the ngmodule compile action should include the current compile mode in the action description this make it consistent with tslibrary target and also avoids confusion when both output flavor are requested currently when both output flavor are requested eg in the ngpackage rule both devmode and prodmode compilation have the same action name this is confusing and look like the given target is built twice due to a bug which is obviously not the case though pr close ,refactor
5391,ivy generate ngfactorydef for injectables with we moved the factory for component directive and pipe into a new field called ngfactorydef however i decided not to do it for injectables because they needed some extra logic these change set up the ngfactorydef for injectables a well for reference the extra logic mentioned above is that for injectables we have two code path for injectables that dont configure how they should be instantiated we create a factory that proxy to ngfactorydef source injectable class service output class service static nginjectabledef defineinjectable factory servicengfactoryfn static ngfactoryfn t new t service for injectables that do configure how theyre created we keep the ngfactorydef and generate the factory based on the metadata source injectable usevalue defaultimpl class service output export class service static nginjectabledef defineinjectable factory defaultimpl static ngfactoryfn t new t service pr close ,refactor
5392,router fix typo for urlupdatestrategy pr close ,docs
5393,upgrade fix angularjsurlcodec to support safari safari throw an error when the new url constructor is called with an undefined base this change check whether the base is undefined and then call the corresponding version of the url constructor fixupgrade simplify solution by replacing undefined with coauthoredby pete bacon darwin petebacondarwincom simplify solution by replacing undefined with coauthoredby pete bacon darwin petebacondarwincom fixupgrade avoid passing an empty string a the base a well browser other than safari may have issue with the empty string pr close ,fix
5394,core make static query flag optional switch back to having the static flag be optional on viewchild and contentchild query in preparation for changing it default value pr close ,feat
5395,core default to dynamic query these change switch to defaulting the static flag on viewchild and contentchild query to false in addition to removing the logic that statically determines whether a query is dynamic pr close ,feat
5396,serviceworker remove deprecated versionedfiles option breaking change remove deprecated option versionedfiles from service worker asset group configuration in ngswconfigjson before json assetgroups name test resource versionedfiles txt after json assetgroups name test resource file txt pr close ,feat
5397,docsinfra show hamburger button on getting started guide in cee the gettingstarted guidetutorial wa renamed to start but the corresponding cs class that control the display of the topleft hamburger and it automatically derived based on the url wa not updated this commit update the class to ensure that the hamburger is not hidden when navigating to the getting started guide pr close ,fix
5398,ivy only restore registered module if user compiles module with testbed there are a couple scenario that are problematic and need special handling a user ha a custom implementation of lazyloaded module set some provider override then compiles the module so it can be loaded in a followup test the user set different override for the module and then compiles this is problematic because we need to be sure the module registered in the first test is not used so we need to clear it out of the module list in ngmodulefactoryregistration a user ha a similar lazyloaded module factory implementation but relies on the module being registered automatically this can happen for example a a side effect of importing the ngfactory file pr close ,fix
5399,languageservice add closing quote in invalid test template fix an invalid typescript code in the language service test i must have missed this while reviewing previously sorry about that pr close ,fix
5400,ivy refresh child component before executing viewquery function child component refresh must happen before executing the viewqueryfn because child component could insert a template from the host that contains the result of the viewquery function see related test added in this pr pr close ,fix
5401,languageservice allow retreiving synchronized analyzed ngmodules sometimes module retreived from the language service need to be synchronized to the last time they were updated and not updated onthefly this pr add a flag to typescriptservicehostgetanalyzedmodules that retreives cached analyzed ngmodules rather than potentially recomputing them pr close ,feat
5402,languageservice turn on strict mode for test project this is the last part in refactoring of the test project this pr turn on strict mode for typechecking and fixed test that fail under this mode pr close ,fix
5403,ivy avoid repeat global state access in in instruction remove repeat global state access from the in instruction in the case where we have the information available already pr close ,perf
5404,ivy rtestbed should clean up registered module after each test pr close ,fix
5405,languageservice remove mocktypescripthostreadfilecontent readfilecontent ha the exact same functionality a readfile but it is not actually part of tslanguageservicehost interface it not actually needed so replace it with readfile instead pr close ,test
5406,serviceworker add info about recovering from degraded driver state related to pr close ,docs
5407,ivy ensure classstyle value are debuggable through debugelement this patch change the ivy debugelement code to always read style and class value directly from the native element instead of reading them through the styling context the reason for this change is because ivy doe not make use of a debug renderer and will therefore not have access to any classesstyles applied directly through the renderer unless it read the value directly from the element pr close ,fix
5408,ngcc handle presence of both ctorparameters and decorate recently ngpackagr wa updated to include a transform that used to be done in tsickle where only constructor parameter decorator are emitted in tsickles format not any of the other decorator ngcc used to extract decorator from only a single format so once it saw the ctorparameters static property it assumed the library is using the tsickle format therefore none of the decorate call were considered this resulted in missing decorator information preventing proper processing of a package this commit change how decorator are extracted by always looking at both the static property and the decorate call merging these source appropriately resolve fw pr close ,fix
5409,ngcc ensure private export are added for modulewithproviders ngcc may need to insert public export into the bundle source a well a to the entrypoints declaration file a the ivy compiler may need to create import statement to internal library type the way ngcc know which export to add is through the reference registry to which reference to thing that require a public export are added by the various analysis step that are executed one of these analysis step is the augmentation of declaration file where function that return modulewithproviders are updated so that a generic type argument is added that corresponds with the ngmodule that is actually imported this type ha to be publicly exported so the analyzer step ha to add the module type to the reference registry a problem occurs when modulewithproviders already ha a generic type argument in which case no update of the declaration file is necessary this may happen when ngcc is processing additional bundle format so that the declaration file ha already been updated while processing the first bundle format or when a package is processed which already contains the generic type in it source in both scenario it may occur that the referenced ngmodule type doe not yet have a public export so it is crucial that a reference to the type is added to the reference registry which ngcc failed to do this commit fix the issue by always adding the referenced ngmodule type to the reference registry so that a public export will always be created if necessary resolve fw pr close ,fix
5410,router make initialnavigation part of the public api initialnavigation is used in extraoptions which is already part of the public api thus initialnavigation should be too not publicly exporting it from routerindexts seems an omission since the type is already annotated with the publicapi jsdoc tag by publicly exporting initialnavigation it will also correctly appear in the api doc on angulario pr close ,docs
5411,ivy support ngadd in localize package pr close ,feat
5412,docsinfra do not ngcc the module entry point cli v doesnt read them any more pr close ,build
5413,docsinfra update to clinext pr close ,build
5414,ivy include ngprojectas into attribute array prior to this commit the ngprojectas attribute wa only included with a special flag and in a parsed format a a result projected node wa missing ngprojectas attribute a well a other attribute added after ngprojectas one this is problematic since app code might rely on the presence of ngprojectas attribute for example in cs this commit fix the problem by including ngprojectas into attribute array a a regular attribute and also make sure that the parsed version of the ngprojectas attribute with a special marker is added after regular attribute thus we set them correctly at runtime this change also aligns view engine and ivy behavior pr close ,fix
5415,docsinfra upgrade cli command doc source to ab updating angularmaster from clibuildsmaster relevant change in commit range modified helpgeneratejson pr close ,build
5416,docsinfra correctly run on ie since db tocservice us foreach to iterate over a nodelist this break in ie which doe not support nodelistforeach this commit wrap the returned nodelist in a regular array to have access to array method such a foreach fix pr close ,fix
5417,docsinfra upgrade cli command doc source to cbf updating angularmaster from clibuildsmaster relevant change in commit range modified helpbuildjson pr close ,build
5418,ngcc make the buildmarker error more clear the previous message wa confusing a it could be interpreted a only deleting the package mentioned now we compute and display the actual nodemodules path to remove see pr close ,fix
5419,ivy ensure testbed restores field to the most original value pr close ,fix
5420,ivy remove extra implementation of getdebugnode pr close ,test
5421,docsinfra upgrade cli command doc source to df updating angularmaster from clibuildsmaster relevant change in commit range modified helpnewjson pr close ,build
5422,ivy ensure multiple mapbased binding do not skip intermediate value this patch fix a bug where the mapbased cursor move too far and skip intermediate value when the correct combination of singleprop binding and mapbased binding are used together pr close ,fix
5423,ivy improve debugging experience for stylesclasses this patch introduces the printtable and printsources method to debugstylingcontext which can be used via the windownggetdebugnode helper when debugging an application pr close ,feat
5424,ivy ensure stylingdebug instance provide context debug info this patch enables a styling debug instance which is apart of the debugnodestyles or debugnodeclasses data structure to expose it context value so that it can be easily debugged pr close ,refactor
5425,ivy remove extra safestyle detection code pr close ,perf
5426,ivy ensure windownggetdebugnode return debug info for component element prior to this patch the windownggetdebugnode method would fail to return the debug information for an element that is a host element to a component pr close ,fix
5427,ivy make sure animationworld prodserver and devserver work a expected pr close ,build
5428,languageservice remove mockdata from mocktypescripthost remove mockdata from the constructor parameter of mocktypescripthost since the entire tour of hero toh project is now loaded from disk added a new method reset to mocktypescripthost that is necessary to reset the state of the project before each spec if run to make sure previous override are cleared pr close ,test
5429,ivy move all styling util code into utilsstylingutilsts pr close ,refactor
5430,ivy move stylinginterfacests to interfacesstylingts pr close ,refactor
5431,ivy move stylinginstructionsts to instructionsstylingts pr close ,refactor
5432,ivy remame stylingnext directory to styling pr close ,refactor
5433,ivy combine styling testing file into one pr close ,refactor
5434,languageservice fix failing test after merge and created a conflict in test that caused ci to turn red this pr fix the failing test pr close ,fix
5435,languageservice add missing test for templateurls add missing test for duplicate missing template diagnostics pr close ,test
5436,languageservice create proper test project language service us a canonical tour of hero project to test various feature but the file are all contained in testdatats which is hard to read and often contains error that are difficult to catch without proper ide syntax highlighting the directory structure is also not clear from first glance this pr refactors the test project into standalone file in the proper format next up update the interface of mocktypescript to only accept scriptnames remove testdatats pr close ,test
5437,languageservice expose determining the ngmodule of a directive this set up the language service to support this pr expose a getdirectivemodule method on typescriptservicehost that return the ngmodule owning a directive given the directive typescript node or it angular staticsymbol both type are supported to reduce extraneous helper method pr close ,feat
5438,bazel ngpackagedata should support nontext file pr close ,fix
5439,ivy avoid unnecessary dom read in styling instruction before this refactoring native node classlist style property were read even if not used the reason for this wa desire to avoid code duplication between procedural and nonprocedural renderers unfortunatelly for the case which will be used by most user a procedura renderer the classlist style property were read twice making the setstyle setclass function the most expensive one self time in several benchmark large table expanding row this refactoring add a bit of code duplication in order to get better runtime performance the code duplication will be removed when we drop check for a procedural renderer pr close ,perf
5440,ivy run the expandng row benchmark with e pr close ,perf
5441,ivy expose windownggetdebugnode helper pr close ,feat
5442,ivy in start generated placeholder name at ph currently the expression used in a template string are automatically named ph ph etc whereas interpolation used in in template generate placeholder automatically named interpolation interpolation etc this commit aligns the behavior by starting the generated placeholder name for expression at ph then ph etc it also document this behavior in the documentation of localize a it wa not mentioned before pr close ,fix
5443,languageservice provide diagnostics for invalid styleurls similar to diagnostics for invalid templateurls check that styleurls actually point to a valid url close pr close ,feat
5444,ivy ensure that windowng utility are published when ngmodules are used prior to this patch if any backwardscompatible angular code wa using ivy then the builtin windowng debug utilies would not be exposed pr close ,fix
5445,ivy in update the compiler to output messageids now that the localize translation are messageid based the compiler must render messageids in it generated localize code this is because the messageid used by the compiler is computed from information that doe not get passed through to the localize tagged string for example the generated code for the following template html div idstatic intitlemd titleintroductiondiv will contain these localization statement t if nginclosuremode desc d meaning m const msgexternalappspects googgetmsgintroduction in msgexternalappspects else in localize mdintroduction since localize is not able to accurately regenerate the sourcemessage and so the messageid from the generated code it must rely upon the messageid being provided explicitly in the generated code the compiler now prepends all localized message with a metadata block containing the id and the meaning and description if defined note that this metadata block will also allow translation file extraction from the compiled code rather than relying on the legacy viewengine extraction code this will be implemented postv although these metadata block add to the initial code size compiletime inlining will completely remove these string and so will not impact on production bundle size pr close ,fix
5446,ivy in use messageid for matching translation a discussed in sourcemessage string are not sufficient for matching translation this commit update angularlocalize to use messageids for translation matching instead also the runtime translation will now log a warning to the console if a translation is missing breaking change translation loaded via the loadtranslations function must now use messageid for the translation key rather than the previous sourcemessage string pr close ,fix
5447,ivy in runtime translation api to use messageid previously the translation key used for translation wa the sourcemessage but it turn out that this is insufficient because meaning and customid metadata affect the translation key now runtime translation is keyed off the messageid pr close ,refactor
5448,ivy in add syntax support for localize metadata block this commit document and extends the basic localize implementation to support adding a metadata block to the start of a tagged message all the passthough version doe is to strip this block out similar to what it doe to placeholder name block pr close ,feat
5449,ivy in reenable skipped test the packageslocalizetestutils folder wa not being included in the unit test because the glob for the spec file wa only looking in the top level folder pr close ,test
5450,ngcc support umd global factory in comma list previously we were looking for a global factory call that look like t factoryglobalng globalng globalngcommon globalngcore but in some case it look like t global global self factoryglobalng globalng globalngcommon globalngcore note the global global self at the start of the statement this commit make the test when finding the global factory function call resilient to being in a comma list pr close ,fix
5451,ivy get rid of styling cleanup function outside of styling code prior to this patch each time advance would run or when a templatefn or hostbindings code exit then the core change detection code would check to see whether the styling data need to be reset this patch remove that functionality and place everything inside of the scheduled styling exit function this mean that each time one or more styling binding run even if the value hasnt changed then an exit function will be scheduled and that will do all the cleanup pr close ,refactor
5452,ivy remove styling state storage and introduce direct style writing this patch is a final major refactor in styling angular this pr includes three main fix all temporary state taht is persisted between template styleclass application and styleclass application in host binding is now removed remove the styling and stylingapply instruction introduces a direct apply mode that is used apply propbased styleclass in the event that there are no mapbased binding a well a property collision pr close pr close ,refactor
5453,ivy avoid repeat lview read in property instruction currently all property instruction eventually call into elementpropertyinternal which in turn call to getlview however all of the instruction already have access to the lview these change switch to passing in the lview a a parameter pr close ,perf
5454,ivy correct debug array name pr close ,fix
5455,ivy convert all nodebased benchmark to use a testing harness pr close ,perf
5456,compilercli fix typo in diagnostic template info fix pr close ,fix
5457,bazel support tslibrary target a entrypoints for ngpackage within an angular package it can happen that there are entrypoints which do not contain feature that belong into an ngmodule or need metadata file to be generated for example the cdk cdktesting and cdkcoercion entrypoints besides other entrypoints in the cdk package those entrypoints do not need metadata to be generated and no not use the ngmodule rule currently the ngpackage rule properly pick up such entrypoints and build bundle doe downleveling etc the only thing it miss is that no packagejson file are generated for the entrypoint this mean that consumer will not be able to use these entrypoints built with tslibrary except accessing the individual bundling explicitly the ngpackage rule should follow the full apf specification for such entrypoints partially building bundle and doing the downleveling is confusing and a breaking issue the motifivation of supporting this besides making the rule behavior consistent the incomplete output is not acceptable is that using the ngmodule rule doe not make sense to be used for nonangular entrypoints especially since it depends on angular package to be specified a bazel action input just to compile vanilla typescript with angularcompilercli pr close ,feat
5458,ivy debugnode throw exception when querying some property pr close ,fix
5459,ivy avoid unnecessary in instruction generation for ngtemplate with structural directive if an ngtemplate contains a structural directive for example ngif ngtsc generates extra template function with template instruction call when ngtemplate tag also contains in attribute on it we generate instart and inend instruction around it which is unnecessary and breaking runtime this commit add a logic to make sure we do not generate in instruction in case only template is present pr close ,fix
5460,core make injectorget return default value with injectflagsself flag on fix pr close ,fix
5461,languageservice let const another flyby cleanup pr close ,refactor
5462,languageservice remove nonnull assertion on mockhost member nodemodulespath is now initialized in the constructor so there is no need for a nonnull assertion a suggested in pr close ,refactor
5463,languageservice remove callback function in test code remove addcodeandcallback function opting instead to add code to a file and then testing expectation on that filename also renames contains to expectcontains to clarify it expectation pr close ,refactor
5464,languageservice use tslshostfileexists to resolve module the moduleresolutionhost implementation inside reflectorhost currently relies on reading the snapshot to determine if a file exists and use the snapshot to retrieve the file content it is more straightforward and efficient to use the already existing method fileexists instead at runtime the typescript languageservicehost is really a project so both fileexists and readfile method are defined a a microoptimization skip f lookup for tsx file pr close ,fix
5465,ivy in reorganize entrypoints for better reuse this is a refactoring that move the source code around to provide a better platform for adding the compiletime inlining move the global sideeffect import from the primary entrypoint to a secondary entrypoint angularlocalizeinit this ha two benefit first it allows the top level entrypoint to contain treeshakable shareable code second it give the sideeffect import more of an action oriented name which indicates that importing it doe something tangible move all the source code into the top src folder and import the localize related function into the localizeinitindexts entrypoint this allows the different part of the package to share code without a proliferation of secondary entrypoints ie localizeutils avoid publicly exporting any utility at this time the only public api at this point are the global localize function and the two runtime helper loadtranslations and cleartranslations this doe not mean that we will not expose additional helper for rd party tooling in the future but it avoid u preemptively exposing something that we might want to change in the near future note it is not possible to have the localize code in the same bazel package a the rest of the code if we did this then the bundled angularlocalizeinit entrypoint code contains all of the helper code even though most of it is not used equally it is not possible to have the localize type ie localizefn and translatefn defined in the angularlocalizeinit entrypoint because these type are needed for the runtime code which is inside the primary entrypoint importing them from angularlocalizeinit would run the sideeffect the solution is to have a bazel subpackage at packageslocalizesrclocalize which contains these type and the localize function implementation the primary packageslocalize entrypoint import the type without any sideeffect the secondary packageslocalizeinit entrypoint import the localize function and attache it to the global scope a a sideeffect without bringing with it all the other utility function breaking change the entrypoints have changed to attach the localize function to the global scope import from angularlocalizeinit previously it wa angularlocalize to access the loadtranslations and cleartranslations function import from angularlocalize previously it wa angularlocalizeruntime pr close ,feat
5466,languageservice enable logging on typescripthost this pr add loggin method to typescripthost so that proper logging to file could be done three new method are added log error and debug pr close ,feat
5467,ngcc resolve import in dts file for umdcommonjs bundle in ngccs reflection host for umd and commonjs bundle custom logic is present to resolve import detail of an identifier however this custom logic is unable to resolve an import for an identifier inside of declaration file a such file use the regular esm import syntax a a consequence of this limitation ngtsc is unable to resolve modulewithproviders import that are declared in an external library in that situation ngtsc determines the type of the actual ngmodule that is imported by looking in the library declaration file for the generic type argument on modulewithproviders in this process ngtsc resolve the import for the modulewithproviders identifier to verify that it is indeed the modulewithproviders type from angularcore so when the umd reflection host wa in use this resolution would fail therefore no ngmodule type could be detected this commit fix the bug by using the regular import resolution logic in addition to the custom resolution logic that is required for umd and commonjs bundle fix pr close ,fix
5468,ngcc correctly read static property for aliased class in esm bundle a class with decorator may be emitted a follows javascript var myclass let myclass myclass class myclass myclassdecorators here be decorator such a class ha two declaration the publicly visible let myclass and the implementation class myclass node in a refactoring took place to handle such class more consistently however the logic to find static property wa mistakenly kept identical to it broken state before the refactor by looking for static property on the implementation symbol the one for class myclass whereas the static property need to be obtained from the symbol corresponding with the let myclass declaration a that is where the decorator property is assigned to in the example above this commit fix the behavior by looking for static property on the public declaration symbol this fix an issue where decorator were not found for class that do in fact have decorator therefore preventing the class from being compiled for ivy fix pr close ,fix
5469,ivy improve microbenchmark profiling pr close ,refactor
5470,ivy initialise tnode input output on the first creation pas this perffocused refactoring move the tnodes input output initialization logic to the first template pas close to the place where directive are matched and resolved this code change make it possible to updatemode check for both property binding and listener registration pr close ,perf
5471,languageservice provide diagnostic for invalid templateurls templateurls that do not point to actual file are now diagnosed a such by the language service support for styleurls will come in a next pr this introduces a utility method getpropertyvalueoftype that scan typescript asts until a property assignment whose initializer of a certain type is found this pr also notice a couple of thing that could be improved in the languageservice implementation such a enumerating directive property and unifying common logic that will be fixed in future pr part of pr close ,feat
5472,ivy migrate debug spec from render migrate the remaining renderdebugspects to acceptance pr close ,refactor
5473,ivy migrate export spec from render the remaining test wa using j block and wa already tested with ngif in the existing acceptance test pr close ,refactor
5474,ngcc consistently use outer declaration for class in ngccs reflection host for compiled j bundle such a esm special care need to be taken for class a there may be an outer declaration referred to a declaration and an inner declaration referred to a implementation for a given class therefore there will also be two tssymbols bound per class and ngcc need to switch between those declaration and symbol depending on where certain information can be found prior to this commit the ngccreflectionhost interface had method getclasssymbol and findclasssymbols that would return a tssymbol these class symbol would be used to kick off compilation of component using ngtsc so it is important for these symbol to correspond with the publicly visible outer declaration of the class however the esm reflection host used to return the tssymbol for the inner declaration if the class wa declared a follows javascript var myclass class myclass for the above code esmreflectionhostgetclasssymbol would return the tssymbol corresponding with the class myclass declaration whereas it should have corresponded with the var myclass declaration a a consequence no ngmodule could be resolved for the component so no componentsdirectives would be in scope for the component this resulted in error during runtime this commit resolve the issue by introducing a ngccclasssymbol that contains reference to both the outer and inner tssymbol instead of just a single tssymbol this avoids the unclarity of whether a tssymbol corresponds with the outer or inner declaration more detail can be found here fix close fw pr close ,fix
5475,ngcc move classsymbol to become ngccclasssymbol pr close ,refactor
5476,ivy avoid repeat lview read in pipe instruction all of the pipebind instruction call into ispure and unwrapvalue which in turn call getlview internally these internal call are redundant because we already have the lview from the load call just before it pr close ,perf
5477,ivy guard listening to output with isdirectivehost pr close ,perf
5478,ivy drop loadrendererfn argument from the listener instruction pr close ,refactor
5479,ivy limit tnodeoutputs read pr close ,perf
5480,ivy remove duplicated tnode utility before this refactoring we had utility function to check if a given tnode ha matching directive this pr leaf just one such function one that doe le memory read pr close ,refactor
5481,ivy introduce benchmark for listener registration pr close ,perf
5482,docsinfra upgrade cli command doc source to dfc updating angularmaster from clibuildsmaster relevant change in commit range modified helpgeneratejson pr close ,build
5483,languageservice lazily instantiate metadataresolver the instantiation of the resolver also requires instantiation of the staticreflector and the latter requires resolution of core angular symbol module resolution should not be done during instantiation to avoid potential cyclic dependency between the plugin and the containing project so the singleton pattern is used to create the resolver pr close ,fix
5484,languageservice make test better by adding more assertion this commit add more assertion to a few smoke test in typescripthostspects pr close ,test
5485,ivy avoid megamorphic read during property binding while determining a property name to bind to we were checking a mapping object resulting in the megamorphic read replacing such read with a series of if check speed up rproprty update benchmark m down to m pr close ,perf
5486,ivy binding update benchmark pr close ,perf
5487,core initialize global ngdevmode without toplevel side effect fix pr close ,fix
5488,core deprecate testbedget a deprecated from use testbedinject see fix pr close ,feat
5489,languageservice remove unnecessary size check presumably the size of the result array wa checked so that a t source file wouldnt have to be created if there were no diagnostics however it is very likely that a t program already ha the tssourcefile for file when diagnostics are queried this removal is just to make the function a minimal amount simpler pr close ,refactor
5490,languageservice move to using mockhost a much a possible update test that still do not use mockhost for certain operation like addcode pr close ,refactor
5491,core add dynamic query schematic add a schematic that will remove the explicit static false flag from dynamic query eg t import directive viewchild contentchild elementref from angularcore directive export class mydirective viewchildchild static false child any viewchildsecondchild read elementref static false secondchild elementref contentchildthirdchild static false thirdchild any t import directive viewchild contentchild elementref from angularcore directive export class mydirective viewchildchild child any viewchildsecondchild read elementref secondchild elementref contentchildthirdchild thirdchild any pr close ,feat
5492,languageservice keep analyzedmodules cache when source file dont change this change will improve performance of language service when working in external template pr close ,perf
5493,ivy remove styling state storage and introduce direct style writing this patch is a final major refactor in styling angular this pr includes three main fix all temporary state taht is persisted between template styleclass application and styleclass application in host binding is now removed remove the styling and stylingapply instruction introduces a direct apply mode that is used apply propbased styleclass in the event that there are no mapbased binding a well a property collision pr close pr close ,refactor
5494,ivy remove styling state storage and introduce direct style writing this patch is a final major refactor in styling angular this pr includes three main fix all temporary state taht is persisted between template styleclass application and styleclass application in host binding is now removed remove the styling and stylingapply instruction introduces a direct apply mode that is used apply propbased styleclass in the event that there are no mapbased binding a well a property collision pr close ,refactor
5495,bazel remove angularbazel protractor rule now provided by bazelprotractor breaking change angular bazel user using protractorwebtestsuite from angularbazel npm package should now switch to the bazelprotractor npm package this should impact very few user and the user that are impacted have a very easy upgrade path to switch to fetching the protractorwebtestsuite rule via the bazelprotractor npm package pr close ,refactor
5496,ivy unable to override componentfactoryresolver provider in test pr close ,fix
5497,ivy check for animation synthetic prop in dev mode only pr close ,perf
5498,ivy migrate content spec from render migrate the remaining rendercontentspects to acceptance some j block one were already migrated with ngif pr close ,refactor
5499,docsinfra upgrade cli command doc source to aecb updating angularmaster from clibuildsmaster relevant change in commit range modified helpservejson pr close ,build
5500,languageservice use module resolution cache this pr fix a critical performance issue where the language service make a massive number of filesystem call when performing module resolution this is because there is no caching to make matter worse module resolution is performed for every program change which mean every few keystroke trigger a massive number of f call pr close ,fix
5501,ivy match class and attribute value without casesensitivity prior to this commit a directive with a selector selectortitledir would not match an element like div classtitledir in ivy whereas it would in ve the same issue wa present for selectortitletitledir and titletitledir this fix the ivy behavior by changing the matching algorithm to use lowercased value note that some render test needed to be changed to reflect that the compiler generates lowercase selector these test are in the process to be migrated to acceptance to use testbed in another pr anyway pr close ,fix
5502,ivy test caseinsensitive selector add two acceptance test to show a current difference in behavior between ivy and ve a directive with a selector titledir match an element with classtitledir in ve but not in ivy same thing for an attribute value pr close ,test
5503,ivy restore global state after running refreshview prior to this commit the previousorparenttnode wa set to null after performing all operation within refreshview function it causing problem in more complex scenario for example when change detection is triggered during di see test added a a part of this commit a a result global state might be corrupted this commit capture current value of previousorparenttnode and restores it after refreshview call pr close ,fix
5504,ivy replace select instruction with advance replaces the select instruction with a new one called advance instead of the jumping to a specific index the new instruction go forward x amount of element the advantage of doing this is that it should generate code the compress better pr close ,perf
5505,ivy template compiler should render correct localize placeholder name the googgetmsg function requires placeholder name to be camelcased this is not the case for localize here placeholder name need match what is serialized to translation file specifically such placeholder name keep their casing but have all character that are not in az az and converted to pr close ,fix
5506,core migrate testbedget to testbedinject this is cleanupfollowup for pr pr close ,refactor
5507,ivy capture template source mapping detail during preanalysis prior to this change the template source mapping detail were always built during the analysis phase under the assumption that preanalysed template would always correspond with external template this ha turned out to be a false assumption a inline template are also preanalyzed to be able to preload any stylesheets included in the template this commit fix the bug by capturing the template source mapping detail at the moment the template is parsed which is either during the preanalysis phase when preloading is available or during the analysis phase when preloading is not supported test have been added to exercise the template error mapping in asynchronous compilation where preloading is enabled similar to how the cli performs compilation fix pr close ,fix
5508,languageservice add definition for styleurls add support for styleurls definition in the same way templateurl definition are provided clicking on styleurl will take a user to the respective file unifies some code in determining a url definition we first check if a url is a templateurl if it not we check that it a styleurl or return no definition pr close ,feat
5509,ivy run tree benchmark with bundle and ngdevmode off pr close ,perf
5510,ivy introduce a nodebased microbenchmarks harness pr close ,perf
5511,form correct parameter name in jsdoc pr close ,docs
5512,ngcc print an informative message when an integration test fails pr close ,test
5513,ngcc add debug logging for the duration of different operation this give an overview of how much time is spent in each operationphase and make it easy to do rough comparison of how different configuration or change affect performance pr close ,refactor
5514,ngcc process task in parallel in async mode ngcc support both synchronous and asynchronous execution the default mode when using ngcc programmatically which is how angularcli is using it is synchronous when running ngcc from the command line ie via the ivyngcc script it run in async mode previously the work would be executed in the same way in both mode this commit improves the performance of ngcc in async mode by processing task in parallel on multiple process it us the nodejs builtin cluster module to launch a cluster of nodejs process and take advantage of multicore system preliminary comparison indicate a x to x speed improvement when processing the angulario app apparently depending on the o number of available core system load etc further investigation is needed to better understand these number and identify potential area of improvement inspired bybased on alxhubs prototype alxhubangularcbbdb original design doc jira issue fw pr close ,perf
5515,ngcc implement task selection for parallel task execution this commit add a new taskqueue implementation that support executing multiple task in parallel while respecting interdependency between them this new implementation is currently not used thus the behavior of ngcc is not affected by this change the parallel taskqueue will be used in a subsequent commit that will introduce parallel task execution pr close ,refactor
5516,ngcc abstract task selection behind an interface this change doe not alter the current behavior but make it easier to introduce taskqueues implementing different task selection algorithm for example to support executing multiple task in parallel while respecting interdependency between them inspired bybased on alxhubs prototype alxhubangularcbbdb pr close ,refactor
5517,ngcc remove unused entrypointprocessingmetadata data and type previously ngcc needed to store some metadata related to the processing of each entrypoint this metadata wa stored in a map in the form of entrypointprocessingmetadata and passed around a needed after some recent refactorings it turn out that this metadata with it only remaining property hasprocessedtypings wa no longer used because the relevant information wa extracted from other source such a the processdts property on task this commit clean up the code by removing the unused code and type pr close ,refactor
5518,ngcc take advantage of early knowledge about format property processability in the past a task processability didnt use to be known in advance it wa possible that a task would be created and added to the queue during the analysis phase and then later during the compilation phase it would be found out that the task ie the associated format property wa not processable a a result certain check had to be delayed until a task processing had started or even until all task had been processed example of check that had to be delayed are whether a task can be skipped due to compileallformats false whether there were entrypoints for which no format at all wa successfully processed it turn out that a made clear by the refactoring in bff once a task start being processed it is expected to either complete successfully with the associated format being processed or throw an error in which case the process will exit in other word a task processability is known in advance this commit take advantage of this fact by moving certain check earlier in the process eg in the analysis phase instead of the compilation phase which in turn allows avoiding some unnecessary work more specifically when compileallformats is false task are created only for the first suitable format property for each entrypoint since the rest of the task would have been skipped during the compilation phase anyway this ha the following advantage it avoids the slight overhead of generating extraneous task and then starting to process them before realizing they should be skipped in a potential future parallel execution mode unnecessary task might start being processed at the same time a the first useful task even if their output would be later discarded wasting resource alternatively extra logic would have to be added to prevent this from happening the change in this commit avoids these issue when an entrypoint is not processable an error will be thrown upfront without having to wait for other task to be processed before failing pr close ,refactor
5519,ngcc add support for asynchronous execution previously ngccs programmatic api would run and complete synchronously this wa necessary for specific usecases such a how the angularcli invokes ngcc a part of the typescript module resolution process but not for others eg running ivyngcc a a postinstall script this commit add a new option async that enables turning on asynchronous execution ie it signal that the caller is ok with the function call to complete asynchronously which allows ngcc to potentially run in a more efficient mode currently there is no difference in the way task are executed in sync v async mode but this change set the ground for adding new execution option that require asynchronous operation such a processing task in parallel on multiple process note when using the programmatic api the default value for async is false thus retaining backwards compatibility when running ngcc from the command line ie via the ivyngcc script it run in async mode to be able to take advantage of future optimization but that is transparent to the caller pr close ,refactor
5520,ngcc abstract work orchestrationexecution behind an interface this change doe not alter the current behavior but make it easier to introduce new type of executor for example to do the required work in parallel on multiple process inspired bybased on alxhubs prototype alxhubangularcbbdb pr close ,refactor
5521,ngcc abstract updating packagejson file behind an interface to persist some of it state ngcc need to update packagejson file both in memory and on disk this refactoring abstract these operation behind the packagejsonupdater interface making it easier to orchestrate them from different context eg when running task in parallel on multiple process inspired bybased on alxhubs prototype alxhubangularcbbdb pr close ,refactor
5522,ngcc only back up the original prepublishonly script and not the overwritten one in order to prevent ngccd package eg library from getting accidentally published ngcc overwrites the prepublishonly npm script to log a warning and exit with an error in case we want to restore the original script eg undo ngcc processing we keep a backup of the original prepublishonly script previously running ngcc a second time eg for a different format would create a backup of the overwritten prepublishonly script if there wa originally no prepublishonly script a a result if we ever tried to undo ngcc processing and restore the original prepublishonly script the errorthrowing script would be restored instead this commit fix it by ensuring that we only back up a prepublishonly script iff it is not the one we created ourselves ie the errorthrowing one pr close ,fix
5523,ngcc minor code cleanup following this commit address the review feedback from which wa merged before addressing the feedback there pr close ,refactor
5524,languageservice return empty external file during project initialization this pr partially fix a circular dependency problem whereby the creation of a project query angular plugin for external file but the discovery of external file requires root file to be defined in a project the right approach is to return empty array if project ha no root file pr close ,fix
5525,languageservice add script to rebuild refresh angular dist the language service integration test should reinstall the angular distribution every time it is built add a yarn builddist convinience script so building the distribution doesnt have to happen on the repo root this new script also refreshes the installed module building is expesnive so it is not bundled with testing script pr close ,feat
5526,ivy warn instead of throwing for unknown property log a warning instead of throwing when running into a binding to an unknown property in jit mode since we arent using a schema for the runtime validation anymore this allows u to support browser where property are unsupported pr close ,fix
5527,ivy unable to bind to property that start with class or style fix ivy picking up property binding that start with class or style a if theyre style binding fix pr close ,fix
5528,ivy maintain coalesced listener order prior to this commit listener order wa not preserved in case we coalesce them to avoid triggering unnecessary change detection cycle for performance reason we were attaching listener to existing event at head always using first listener a an anchor to avoid going through the list thus breaking the order in which listener are registered in some scenario this order might be important for example with ngmodelchange and input listener so this commit update the logic to put new listener at the end of the list in order to avoid performance implication we keep a pointer to the last listener in the list so adding a new listener take constant amount of time pr close ,fix
5529,core improve the missing localize error message we need to be clearer to developer who upgrade to v next and get this error why they have a problem and what they have to do about it once we have a better cli schematic story where this import will be included by default in new application and a cli migration will add it when upgrading apps to v we could simplify or remove this error message pr close ,fix
5530,ivy node placed in incorrect order inside ngfor with ngcontainer fix an issue where ivy incorrectly insert item in the beginning of an ngfor if the ngfor is set on an ngcontainer the issue come from the fact that we choose the ngcontainer comment node a the anchor point before which to insert the content however the node might be after any of the node inside the container these change switch to picking out the first node inside of the container instead pr close ,fix
5531,ivy remove superfluous bind function historically bind used to be a separate instruction with a series of refactoring it became a utility function but after recent code change it doe not provide any valuable abstraction help on the contrary it can be seen a a performance problem force unnecessary comparison to nochange during change detection pr close ,refactor
5532,ivy handle expression in in attribute properly prior to this commit complex expression that require additional statement to be generated were handled incorrectly in case they were used in attribute annotated with in flag the problem wa caused by the fact that extra statement were not appended to the temporary var block so they were missing in generated code this commit updated the logic to use the convertpropertybinding which contains the necessary code to append extra statement the convertexpressionbinding function wa removed a it duplicate the convertpropertybinding one for the most part and is no longer used pr close ,fix
5533,docsinfra do not include github link in table of content the doc template for cli command clicommandtemplatehtml includes an h element with github link for long description since the content of h element is replicated in the autogenerated table of content the github link were replicated a well which is undesirable this commit fix it by explicitly excluding githublinks element when extracting the content for the toc in tocserviceextractheadingsafehtml this is similar to what we do for the autogenerated headerlink anchor pr close ,fix
5534,docsinfra exclude heading anchor icon text from toc tooltips the table of content toc is autogenerated based on the content of heading element on the page at the same time anchor link are autogenerated and added to each heading element note that the material icon used for the anchor icon make use of ligature which mean that the icon are specified by using their textual name a text content of the icon element a a result the name of the icon is included in the parent element textcontent previously the tocservice used to strip off these anchor element when generating the content of toc item but not when generating the content of their tooltips thus tooltips for toc item would confusingly include a link suffix link is the textual name of the icon used in heading anchor link this commit fix this by deriving the tooltip content from the transformed text content which already ha anchor link stripped off instead of from the original heading content pr close ,fix
5535,serviceworker recover from existingclientsonly mode when there is a valid update previously when the serviceworker entered a degraded mode existingclientsonly or safemode it would remain in that mode for the rest of the lifetime of serviceworker instance note that serviceworkers are stopped by the browser after a certain period of inactivity and a new instance is created a soon a the serviceworker need to handle an event such a a request from the page those new instance would start from the normal mode the reason for this behavior is to err on the side of caution if we cant be sure why the serviceworker entered the degraded mode it is risky to try recovering on the same instance and might lead to unexpected behavior however it turn out that the existingclientsonly mode can only be a result of some error happening with the latest version eg a hash mismatch in the manifest therefore it is safe to recover from that mode once a new valid update is successfully installed and to start accepting new client this commit ensures that the mode is set back to normal when a an update is successfully installed and b the current mode is existingclientsonly besides making the behavior more predictable instead of relying on the browser to decide when to terminate the current serviceworker instance and create a new one this change can also improve the developer experience when people notice the error during debugging and fix it by deploying a new version either to production or locally it is confusing that the serviceworker will fetch and install the update a seen by the request in the network panel in devtools but not serve it to client with this change the update will be served to new client a soon a it is installed fix pr close ,feat
5536,serviceworker keep serving client on older version if latest is invalidated previously when the latest version wa invalidated eg due to a hash mismatch the sw entered a degraded existingclientsonly mode and removed all client from it clientversion map essentially stopping to serve any client based on the code and surrounding comment the intention seems to have been to only remove client that were on the invalidated version but keep other client on older version this commit fix it by only unassigning client what were on the latest version and keep client assigned to older version pr close ,fix
5537,serviceworker add helper function for making navigation request helper function for making navigation request were created in several place inside the test suite so this commit creates a toplevel such helper and us that in all test that need it pr close ,test
5538,serviceworker remove redundant argument to versionfailed the latest argument wa only ever set to the value of comparing thislatesthash with the appversion hash which is already computed inside versionfailed so there is no reason to pas it a an argument a well this doesnt have any impact on the current behavior of the sw pr close ,refactor
5539,ivy in do not generate jsdoc comment for localize previously the template compiler would generate the same jsdoc comment block for localize a for googgetmsg but it turn out that the closure compiler will complain if the desc and meaning tag are used for nongetmsg call for now we do not generate the comment for localize call they are not being used at the moment in the future it would be good to be able to extract the description and meaning from the localize call rather than relying upon the getmsg call which we do now so we need to find a workaround for this constraint pr close ,fix
5540,ivy in handle translated text containing html comment fix fw pr close ,fix
5541,ivy ensure binding ordering doesnt mess up when a nochange value is encountered prior to this fix if a nochange value wa assigned to a binding or an interpolation value rendererd a nochange value then the presence of that value would cause the internal counter index value to not increment properly this patch ensures that this doesnt happen and that the counterbitmask value update accordingly pr close ,fix
5542,languageservice use tscompletionentry for completion this is a prerequisite to fix a bug in template completion whereby completion of the string ti for the variable title result in tititle this is because the position where the completion is requested is used to insert the completion text this is incorrect instead a replacementspan should be used to indicate the span of text that need to be replaced angulars own completion interface is insufficient to hold this information instead we should just use tscompletionentry also added string enum for completionkind which is similar to tsscriptelementkind but contains more info about html entity pr close ,fix
5543,core typo in doc and test pr introduced platform and any for providedin and the doc ha a minor typo also a test name wa not changed accordingly to the refactoring done pr close ,style
5544,benchpress remove two mutable export from largetableutilts mutable export ie using this pattern export let x export function f x is problematic to transpile to commonjs and googmodule system we are working on banning it google internal codebase the workaround is adding an explcit getter function pr close ,refactor
5545,ivy guard directiverelated operation with a tnode flag pr close ,perf
5546,ivy simplify property binding metadata storage since property binding metadata storage is guarded with the ngdevmode now and several instruction were merged together we can simplify the way we store and read property binding metadata pr close ,refactor
5547,core move meta method that only have one version from domadapter pr close ,refactor
5548,core move misc method that only have one version from domadapter pr close ,refactor
5549,core move domadapter style method to serverrenderer pr close ,refactor
5550,core move serveronly domadapter method into serverrenderer pr close ,refactor
5551,languageservice readd regressed templateurl test commit ce per regressed test for templateurl definition this pr readds those test pr close ,fix
5552,ivy add missing closure extern for localize pr close ,fix
5553,common httpparams fromobject accepts readonlyarraystring fix pr close ,feat
5554,ivy add clihelloworldivyin integration test this test us localization in the appcomponent component an in attribute in the template a call to the localize tag in the component constructor pr close ,test
5555,core update the in design doc pr close ,docs
5556,ivy remove inconfigurelocalize instruction this ha been replaced by the loadtranslations function in angularlocalizeruntime pr close ,refactor
5557,ivy remove inlocalize instruction this ha been replaced by the localize tag pr close ,refactor
5558,ivy update the compiler to emit localize tag this commit change the angular compiler ivyonly to generate localize tagged string for component template that use in attribute breaking change since localize is a global function it must be included in any application that use in this is achieved by importing the angularlocalize package into an appropriate bundle where it will be executed before the renderer need to call localize for cli based project this is best done in the polyfillsts file t import angularlocalize for noncli application this could be added a a script to the indexhtml file or another suitable script file pr close ,refactor
5559,ivy implement localize global function pr close ,feat
5560,common remove redundant line from karma config the file in the pattern do not exist pr close ,test
5561,ivy prevent error when querying for element outside angular context debugelementquery also search element that may have been created outside of angular ex with documentappendchild the current behavior attempt to get the lcontext of these node but throw an error because the lcontext doe not exist pr close ,fix
5562,ivy cleanup di test from render the test were already migrated to acceptance with ngforngif but were leftover in case j block ended up supported in ivy pr close ,refactor
5563,docsinfra expand select glob pattern in verifydocscodeownershipjs this allows the script to recognise some match that it would miss before and avoid listing them a missing ideally the script should be able to understand the glob in codeowners and correctly find matching filesystem pathshowever for the limited purpose of the script and for just a couple of relevant glob implementing this would be an overkill implemented the manual expansion instead we might revisit if the need change pr close ,test
5564,docsinfra modify verifyguidecodeownershipjs to also check api doc example this script can be used for manually checking that all doc guidesexamplesimages have owner in githubcodeowners this commit add support for also checking codeownership of api doc example in packagesexamples the script is also renamed to the more generic and accurate verifydocscodeownershipjs pr close ,test
5565,core undecoratedclasseswithdecoratedfields migration commits empty update commit aedadffbfaf introduced a new migration for undecorated class with decorated angular class member currently the migration always call treebeginupdate and treecommitupdate even if there are no change this cause unnecessary update to be reported to developer running ng update once an update is commited the cli will report the update regardless of whether any change were made or not this behavior can be observed in the ngupdatemigrations integration test see notice how all source file are denoted a updated even though there are no change pr close ,refactor
5566,zonejs a path traversal attack in test simpleserverjs is vulnerable to a trivial path traversal attack ie an attacker can supply a path like etcpasswd to read arbitrary file on the server this change fix the issue by properly resolving the path and then only serving file under the current directory a intended this is not really a security issue given the code is not part of angular but rather just testing infrastructure for angular itself and the ci server are not expected to contain confidential information but still worth fixing for code hygiene pr close ,fix
5567,ivy properly initialise global state in the elementtextcreate benchmark pr close ,perf
5568,bazel update to the latest microsoftapiextractor pr close ,feat
5569,docsinfra upgrade cli command doc source to da updating angularmaster from clibuildsmaster relevant change in commit range modified helpeejson pr close ,build
5570,ivy add a micro benchmark for mapbased style and class binding this patch introduces a new micro benchmark that performance test against mapbased style and class binding in ivy running together on the same element pr close ,perf
5571,ivy add a micro benchmark for style and class binding this patch introduces a new micro benchmark that performance test against style and class binding in ivy running together on the same element pr close ,perf
5572,core make platformlocation treeshakable convert platformlocation into a treeshakable provider pr close ,perf
5573,core add di support for providedin platformany extend the vocabulary of the providedin to also include platform and any scope injectable providedid platform tree shakable injector for platform injector class myservice pr close ,feat
5574,ngcc handle compilation diagnostics previously any diagnostics reported during the compilation of an entrypoint would not be shown to the user but either be ignored or cause a hard crash in case of a fataldiagnosticerror this is unfortunate a such error instance contain information on which code wa responsible for producing the error whereas only it error message would not therefore it wa quite hard to determine where the error originates from this commit introduces behavior to deal with error diagnostics in a more graceful way such diagnostics will still cause the compilation to fail however the error message now contains formatted diagnostics close resolve fw pr close ,fix
5575,ivy normalize rooted path to include a drive letter in window the angular compiler ha an emulation system for various kind of filesystems and run it testcases for all those filesystems this allows to verify that the compiler behaves correctly in all of the supported platform without needing to run the test on the actual platform previously the emulated window mode would normalize rooted path to always include a drive letter whereas the native mode did not perform this normalization the consequence of this discrepancy wa that running the test in native window wa behaving differently compared to how emulated window mode behaves potentially resulting in test failure in native window that would succeed for emulated window this commit add logic to ensure that path are normalized equally for emulated window and native window mode therefore resolving the discrepancy pr close ,test
5576,core wire up missinginjectable migration for ngupdate initially the missinginjectable migration wa only being used in google wiring the migration up in the cli migration wa planned to be done in a followup pr close ,refactor
5577,ivy ngcc improve the ngcc version changed error message if a project ha nested project that contain nodemodules folder that get processed by ngcc it can be confusing when the ngcc version change since the error message is very generic the ngcc compiler ha changed since the last ngcc build please completely remove nodemodules and try again this commit augments the error message with the path of the entrypoint that failed so that it is more obvious which nodemodules folder to remove breaking change this commit remove the public export of hasbeenprocessed this wa exported to be availble to the cli integration but wa never used the change to the function signature is a breaking change in itself so we remove the function altogether to simplify and lower the public api surface going forward pr close ,fix
5578,ivy remove unused ɵɵtextbinding instruction pr close ,refactor
5579,platformbrowser remove redundant jsdoc tag from browsersanitizationproviderspostr the jsdoc tag wa introduced in and wa not intentional according to this discussion on slack pr close ,docs
5580,languageservice rename host to tslshost disambiguate the name of the language service host used in constructing a typescript language service host by renaming the host property to tslshost pr close ,refactor
5581,core introduce testbedinject to replace testbedget testbedget is not type safe fixing it would be a massive breaking change the angular team ha proposed replacing it with testbedinject and deprecate testbedget deprecation from testbedget will come a a separate commit issue fix breaking change injectorget now accepts abstract class to return typesafe value previous implementation returned any through the deprecated implementation pr close ,feat
5582,languageservice cleanup test for hover move generic test method to mocktypescripthost so they could be shared across all test this is in preparation for adding more test to hover when new feature get added pr close ,refactor
5583,languageservice create directivekind enum hovering over a selector the quickinfo display string is something like component appcomponent where component is the symbol kind prior to this there wa no type to indicate the possible value of a symbol this pr creates an enum to represent that pr close ,fix
5584,ivy remove global state access from inputsrelated function pr close ,refactor
5585,ivy remove superflous argument to the createtnodeatindex function pr close ,refactor
5586,languageservice invalidate reflector cache when program change this commit fix a bug introduced in the recent refactoring whereby cache become stale when the program change this is because staticreflector keep it own cache that are not clearable the previous refactoring tried to reuse the same instance leading to outofsync program state clearing out the entire cache is very inefficient instead we could just invalidate the symbol in the file that have changed this requires change to the api of staticreflector but put this on hold until the refactoring of language service for ivy commences pr close pr close ,fix
5587,ivy remove renderstringify call for text node creation value passed to the ɵɵtext instruction are string or undefined in the generated code so no need to stringify those again pr close ,perf
5588,ivy run registerpostorderhooks in the first template pas only pr close ,perf
5589,ivy add element and text creation benchmark pr close ,perf
5590,ivy remove repeated memory read write in addcomponentlogic pr close ,perf
5591,core undecorated class migration should not decorate class if not needed currently the undecorated class migration decorates base class if no explicit constructor is defined on all class in the inheritance chain we only want to decorate base class which define a constructor that is inherited additionally for best practice all class in between the class that inherits the constructor and the one that defines it are also decorated pr close ,refactor
5592,core undecoratedclasses migration should properly construct object literal from metadata the undecoratedclasseswithdi migration currently creates invalid object literal from parsed ngc metadata file if there are object literal property with key that contain special character eg consider a decorated base class with a host binding using classx currently the migration par and convert the metadata to typescript code but incorrectly us classx unquoted a identifier pr close ,refactor
5593,core cleanup bazel target name for schematic test apparently the name of the bazel test target in the schematic are incorrect this commit update the target name to match their bazel package name pr close ,test
5594,core undecoratedclasseswithdi migration should never use ngtsc ecddfbdedbbbfbf enabled ivy by default this is problematic a migration like undecoratedclasseswithdi depend on the angularcompilerprogram ngc in order to perform the migration from version to version in order to ensure that the migration always run with ngc and doesnt get the ngtscprogram we need to explicitly disable ivy when creating the angularcompilercli program for the migration pr close ,refactor
5595,core remove more misc unused utility from domadapters pr close ,refactor
5596,core remove testingonly event utility from domadapters pr close ,refactor
5597,core remove testingonly node getters and invoke from domadapters pr close ,refactor
5598,core remove testingonly childnodes and firstchild fns from domadapters pr close ,refactor
5599,core remove testingonly dom manipulation utils from domadapters pr close ,refactor
5600,core remove testingonly style utils from domadapters pr close ,refactor
5601,languageservice add definition for templateurl add support for getdefinitionat when called on a templateurl property assignment the currrent architecture for getting definition is designed to be called on template so we have to introduce a new gettsdefinitionandboundspan method to get angularspecific definition in typescript file and pas a readtemplate closure that will read the content of a template using typescriptservicehostgettemplates we can probably go in and make this nicer in a future pr though im not sure what the best architecture should be yet part of angularvscodenglanguageservice pr close ,feat
5602,docsinfra add empty codegenapi jsdoc tag definition this avoids warning such a the following example warn invalid tag found doc platformbrowseréµbrowsersanitizationproviderspostr const from file platformbrowsersrcbrowserts pr close ,build
5603,docsinfra add note about setting up example on window close pr close ,docs
5604,docsinfra upgrade cli command doc source to dcff updating angularmaster from clibuildsmaster relevant change in commit range modified helpupdatejson pr close ,build
5605,serviceworker add example app for swpush api doc previously the swpush api doc were using hardcoded code snippet this commit switch to using code snippet from an actual example app which ensures that the code shown in the doc will at least continue to compile successfully pr close ,docs
5606,ivy move directive component and pipe factory to ngfactoryfn reworks the compiler to output the factory for directive component and pipe under a new static field called ngfactoryfn instead of the usual factory property in their respective defs this should eventually allow u to inject any kind of decorated class eg a pipe note these change are the first part of the refactor and they dont include injectables i decided to leave injectables for a followup pr because there some more case we need to handle when it come to their factory furthermore directive component and pipe make up most of the compiler output test that need to be refactored and itll make followup pr easier to review if the test are cleaned up now this is part of the larger refactor for fw pr close ,refactor
5607,ivy debug node name should match user declaration pr close ,fix
5608,languageservice update integration test information the documentation for the langauge service plugin integration test appears to be stale remove section about new version of typescript which appear not to be tested and update the information about generating and updating goldens to reflect the new way of doing so add information about install deps in the repo root this directory and building angular before testing also remove trailing whitespace on one line pr close ,docs
5609,ivy store binding metadata in the ngdevmode only binding metadata are only needed for property binding when testbed test are being run this commit guard binding metadata storage with the ngdevmode flag which save of a proerty binding processing time in the production mode and reduces bundle size pr close ,perf
5610,ivy replace enter leave view with selectview after a series of recent refactorings enterview and leaveview became identical this pr merges both into one concept of view selectio similar to a node selection this reduces number of concept and code size pr close ,refactor
5611,ivy minimise writes to the lviewbindingindex binding root this commit remove all the duplicated logic of setting lviewbindingindex from enterview enterview is on the critcal path perfwise so we should avoid having any logic in there and minimise memory read write this simple refactoring in this pr reduces time spent in noop change detection by from m down to m on a local machine where measurement were taken pr close ,perf
5612,core remove misc dom utils from domadapters pr close ,refactor
5613,core remove shadow dom utility from domadapters pr close ,refactor
5614,core remove misc completely unused function from domadapter pr close ,refactor
5615,core remove animation utility from domadapters pr close ,refactor
5616,core remove cookie and comment testing utility from domadapters pr close ,refactor
5617,core remove unused attribute utility from domadapters pr close ,refactor
5618,core remove innerhtml and outerhtml testing utility from domadapters pr close ,refactor
5619,ngcc do not analyze dependency for non angular entrypoints when ngcc is called for a specific entrypoint it ha to determine which dependency to transitively process to accomplish this ngcc traverse the full import graph of the entrypoints it encounter for which it us a dependency host to find all module import since import look different in the various bundle format ngcc support a specific dependency host is used depending on the information provided in an entrypoints packagejson file if there not enough information in the packagejson file for ngcc to be able to determine which dependency host to use ngcc would fail with an error if however the entrypoint is not compiled by angular it is not necessary to process any of it dependency none of them can have been compiled by angular so ngcc doe not need to know about them therefore this commit change the behavior to avoid recursing into dependency of entrypoints that are not compiled by angular in particular this fix an issue for package that have dependency on the datefns package this package ha various secondary entrypoints that have a packagejson file only containing a typing field without providing additional field for ngcc to know which dependency host to use by not needing a dependency host at all the error is avoided fix pr close ,fix
5620,docsinfra upgrade cli command doc source to a updating angularmaster from clibuildsmaster relevant change in commit range modified helpgeneratejson pr close ,build
5621,docsinfra upgrade cli command doc source to ec updating angularmaster from clibuildsmaster relevant change in commit range modified helpaddjson helpdeployjson helpgeneratejson pr close ,build
5622,languageservice add generic decorator property verification this pr make finding class declaration property in decorator are applied to more generic to all property that may be in a decorator and add helper method enabling getting the property assignment of a property value and verifying that a property assignment is actually in a decorator applied to a class this is done so that it will be easier to provide angular definition for decorator property moving forward most immediately this will provide decorator class verification for pr close ,refactor
5623,ivy enable prodserver on the largetable benchmark pr close ,build
5624,languageservice remove redudant templateinfo type the templateinfo type is an extension of astresult but it is not necessary at all instead improve the current interface for astresult by removing all optional fileds and include the templatesource in astresult instead pr close ,refactor
5625,ivy reset binding index before executing a template in refreshview call prior to this change the bindingindex of a given lview wa reset after processing a template however change detection can be triggered a a result of view query processing thus leading to subsequent refreshview call and executing a template which in turn operates with the binding index that is not reset after the previous refreshview call this commit update the logic to reset binding index before we execute a template so binding index is correct for instruction inside template function pr close ,fix
5626,ivy ngtsc throw if flatmoduleoutfile is set to null in ngc is wa valid to set the flatmoduleoutfile option to null this is sometimes necessary if a tsconfig extends from another one but the fatmoduleoutfile option need to be unset note that undefined doe not exist a value in json now if ngtsc is used to compile the project ngtsc will fail with an error because it try to do string manipulation on the flatmoduleoutfile this happens because ngtsc only skip flat module index if the option is set to undefined since this is not compatible with what wa supported in ngc and such exception should be avoided the flat module check is now aligned with ngc typeerror can not read property replace of null at objectnormalizeseparators homecircleciprojectnodemodulesangularcompilerclisrcngtscutilsrcpathjs at new ngtscprogram homecircleciprojectnodemodulesangularcompilerclisrcngtscprogramjs additionally setting the flatmoduleoutfile option to an empty string currently result in unexpected behavior no error is thrown but the flat module index file will be t no file name just extension this is now also fixed by treating an empty string similarly to null pr close ,fix
5627,ivy use the schema registry to check dom binding previously ngtsc attempted to use the dts schema for html element to check binding to dom property however the typescript libdomdts schema doe not perfectly align with the angular domelementschemaregistry and these inconsistency would cause issue in apps there is also the concern of supporting both customelementsschema and noerrorsschema which would have been very difficult to do in the existing system with this commit the domelementschemaregistry is employed in ngtsc to check binding to the dom previous work on producing template diagnostics is used to support generation of this different kind of error with the same high quality of error message pr close ,feat
5628,core add undecorated class with decorated field schematic add a schematic that add a directive decorator to undecorated class that have field that use angular decorator pr close ,feat
5629,languageservice add test for crlf line ending this commit add a noop test for exposing the bug in the way language service handle crlf line ending in template there is no easy fix for now but the test should be enabled once a fix is in place pr close ,test
5630,upgrade position old setup guide a legacy until it can be removed pr close ,docs
5631,ivy improve nan check in change detection this commit drop our custom changedetection specific equality comparison util in favour of the standard objectis which ha desired semantics there are multiple advantage of this approach le code to maintain on our end avoid nan check if both value are equal rewrite nan check so we dont trigger v deoptimizations pr close ,perf
5632,ivy read selected index only when need in prop binding pr close ,perf
5633,ivy split hook processing into init and check phase angular hook come after flavour init hook oninit aftercontentinit afterviewinit check hook onchanges dochanges aftercontentchecked afterviewchecked we need to do more processing for init hook to ensure that those hook are run once and only once for a given directive even in case of error a soon a all init hook execute to completion we are only left with the check to execute it turn out that keeping track of the remaining init hook to execute is rather expensive multiple lview flag read writes and check but we can observe that non of this tracking is needed a soon a all init hook are completed this pr take advantage of the above observation and split hook processing function into initspecific slower but le common checkspecific faster and more common note there is code duplication in this pr and it is left like this intentinally handinlining this perfcritical code make the view refresh process substentially faster pr close ,perf
5634,ivy autocall select for nonempty view only pr close ,perf
5635,ivy make hammer support treeshakable currently it not possible to treeshake away the coordination layer between hammerjs and angulars eventmanager this mean that you get the hammerjs support code in your production bundle whether or not you actually use the library this commit remove the hammer provider from the default platformbrowser provider list and instead provides them a part of a hammermodule apps on ivy just need to import the hammermodule at root to turn on hammer support otherwise all hammer code will treeshake away view engine apps will require no change breaking change previously in ivy application hammer provider were included by default with this commit apps that want hammer support must import hammermodule in their root module pr close ,feat
5636,ivy convert all ngtsc diagnostics to tsdiagnostics historically the angular compiler ha produced both native typescript diagnostics called tsdiagnostics and it own internal diagnostic format called an apidiagnostic this wa done because typescript tsdiagnostics can not be produced for file not in the tsprogram and template type checking diagnostics are naturally produced for external html template file this design isnt optimal for several reason downstream tooling such a the cli must support multiple format of diagnostics adding to the maintenance burden tsdiagnostics have gotten a lot better in recent release with support for suggested change highlighting of the code in question etc none of these change have been of any benefit for apidiagnostics which have continued to be reported in a very primitive fashion a future plugin model will not support anything but tsdiagnostics so generating apidiagnostics is a blocker for ngtscasaplugin the split complicates both the typing and the testing of ngtsc to fix this issue this commit change template typechecking to produce tsdiagnostics instead instead of reporting a special kind of diagnostic for external template file error in a template are always reported in a tsdiagnostic that highlight the portion of the template which contains the error when this template text is distinct from the source t file for example when the template is parsed from an external resource file additional contextual information link the error back to the originating component a template error can thus be reported in separate way depending on how the template wa configured for inline template string which can be directly mapped to offset in the t code tsdiagnostics point to real range in the source this is the case if an inline template is used with a string literal or a nosubstitution string for example typescript component template pbar bazp export class testcmp bar string the above template contains an error no baz property of testcmp the error produced by t will look like pbar bazp testts error t property baz doe not exist on type testcmp did you mean bar for template string which can not be directly mapped to offset in the t code a logical offset into the template string will be included in the error message for example typescript const sometemplate pbar bazp component template sometemplate export class testcmp bar string because the template is a reference to another variable and is not an inline string constant the compiler will not be able to use absolute position when parsing the template a a result error will report logical offset into the template string pbar bazp testts testcmp template error t property baz doe not exist on type testcmp testts component template template error occurs in the template of component testcmp this error message us logical offset into the template string and also give a reference to the template expression from which the template wa parsed this help in locating the component which contains the error for external template templateurl the error message is delivered within the html template file testcmphtml instead and additional information contextualizes the error on the templateurl expression from which the template file wa determined pbar bazp testcmphtml error t property baz doe not exist on type testcmp testts component templateurl testcmphtml error occurs in the template of component testcmp pr close ,feat
5637,ivy run template typechecking for all component pr close ,fix
5638,ivy handle empty binding in template type checker when a template contains a binding without a value the template parser creates an emptyexpr node this would previously be translated into an undefined value which would cause a crash downstream a undefined is not included in the allowed type so it wa not handled properly this commit prevents the crash by returning an actual expression for empty binding fix fix pr close ,fix
5639,docsinfra upgrade cli command doc source to daeda updating angularmaster from clibuildsmaster relevant change in commit range modified helpgeneratejson pr close ,build
5640,compiler return enableivy true when using readconfiguration pr close ,fix
5641,ivy remove the tsc passthrough option this option make ngc behave a tsc and wa originally implemented before ngtsc existed it wa designed so we could build jitonly version of angular package to begin testing ivy early and is not used at all in our current setup pr close ,refactor
5642,ivy get name directly from nativenode nativeelement can return null so an error can occur when accessing nodename from nativeelement pr close ,fix
5643,ivy support selectorless directive a base class following this add support for directive without a selector to ivy pr close ,fix
5644,ngcc ignore format property that exist but are undefined previously ngcc assumed that if a format property wa defined in packagejson it would point to a valid formatpath ie a file that is an entrypoint for a specific format this is generally the case except if a format property is set to a nonstring value such a packagejson either directly in the packagejson which is unusual or in ngccconfigjs which is a valid usecase when one want a format property to be ignored by ngcc for example the following config file would cause ngcc to throw moduleexports package testpackage entrypoints override fesm undefined this commit fix it by ensuring that only format property whose value is a string are considered by ngcc for reference this regression wa introduced in fix pr close ,fix
5645,core remove disabled injectablepipe migration initially the plan wa to have a migration that add injectable to all pipe in a cli project so that the pipe can be injected in ivy similarly to how it worked in view engine due to the planned refactorings which ensure that directive component and pipe also have a factory definition this migration is no longer needed for ivy additionally since it is already disabled due to bcccfbafcdfa and we have a more generic migration known a missinginjectable that could do the same a injectablepipe we remove the migration from the codebase pr close ,refactor
5646,bazel pin microsoftapiextractor the api of microsoftapiextractor changed in a minor version which is cause an error when using dts flattening downstream api wil be updated on master pr close ,fix
5647,bazel use crossplatform file read of golden file pr close ,test
5648,ivy ngtemplateoutlet error when switching between null and template value fix an error that is thrown by ngtemplateoutlet under ivy when switching from a template to null and back to a template the error is thrown because the reference to the previous viewref is never cleared and the directive try to detach a view that ha already been detached fix pr close ,fix
5649,ivy simplify walktnodetree method for readability pr close ,refactor
5650,ngcc handle deep import that already have an extension during the dependency analysis phase of ngcc import are resolved to file on disk according to certain module resolution rule since module specifier are typically missing extension or can refer to indexjs barrel file within a directory the module resolver attempt several postfix when searching for a module import on disk module specifier that already include an extension however would fail to be resolved a ngccs module resolver failed to check the location on disk without adding any postfix close pr close ,fix
5651,ngcc avoid repeated file resolution during dependency scan during the recursive processing of dependency ngcc resolve the requested file to an actual location on disk by testing various extension for recursive call however the path is known to have been resolved in the module resolver therefore it is safe to move the path resolution to the initial caller into the recursive process note that this is not expected to improve the performance of ngcc a the call to resolvefilewithpostfixes is known to succeed immediately a the provided path is known to exist without needing to add any postfix furthermore the filesystem cache whether file exist so the additional check that we used to do wa cheap pr close ,refactor
5652,serviceworker mention that datagroups only cache nonmutating request fix pr close ,docs
5653,ivy update microbenchmark instruction pr close ,docs
5654,docsinfra upgrade cli command doc source to aaef updating angularmaster from clibuildsmaster relevant change in commit range modified helpgeneratejson helpnewjson pr close ,build
5655,languageservice fix diagnostic test this commit fix many diagnostic test have have incorrectuncaught assertion also added more assertion to make sure t diagnostics are clear a few test util method are removed to reduce clutter and improve readability pr close ,test
5656,languageservice omit typechecking for finding directive remove unnecessary private method getdeclarationfromnode and moved some logic to utils instead so that it can be tested in isolation of the language service infrastructure the use of typechecker to check the directive is also not necessary since resolvegetnonnormalizeddirectivemetadata will check if the directive is actually an angular entity pr close ,refactor
5657,ivy avoid forof loop at runtime typescript downlevels forof loop for e target a a result generated output contains extra code including a trycatch block which ha code size and performance implication this is especially important for runtime code where we want to keep it a small a possible this commit change forof loop in runtime code to regular for loop pr close ,perf
5658,zonejs update zonejs to bundle size changed in both zonejslegacy and zoneevergreenjs zonejslegacy package increased a little because the following feature and fix handle mspointer event pr to add zonesymbol customization support zoneevergreenjs package decreased because the mspointer pr only for legacy the objectdefineproperty patch is moved to legacy pr close ,build
5659,ivy avoid first template pas check during view creation pr close ,perf
5660,ivy ngcc should only index dts export within the package ngcc need to solve a unique problem when compiling typing for an entrypoint it must resolve a declaration within a j file to it representation in a dts file since such dts file can be used in deep import without ever being referenced from the root dts it not enough to simply match exported type to the root dts ngcc must build an index of all dts file previously this operation had a bug it scanned all dts file in the dts program not only those within the package thus if a class in the program happened to share a name with a class exported from a dependency dts ngcc might accidentally modify the wrong dts file causing a variety of issue downstream to fix this issue ngccs dts scanner now limit the dts file it index to only those declared in the current package pr close ,fix
5661,ivy in ngcc handle inline export in commonjs code one of the compiler task is to enumerate the export of a given e module this can happen for example to resolve foobar where foo is a namespace import typescript import a foo from foo ngmodule directive foodirectives in this case the compiler must enumerate the export of foot in order to evaluate the expression foodirectives when this operation occurs under ngcc it must deal with the different module format and type of export that occur in commonjs code a problem arises when certain export are downleveled typescript export const directive foodir bardir can be downleveled to javascript exportsdirectives foodir bardir previously ngtsc and ngcc expected that any export would have an associated tsdeclaration node export class export function etc all retain tsdeclarations even when downleveled but the export const construct above doe not therefore ngcc would not detect directive a an export of foot and the evaluation of foodirectives would therefore fail to solve this problem the core concept of an exported declaration according to the reflectionhost api is split into a concretedeclaration which ha a tsdeclaration and an inlinedeclaration which instead ha a tsexpression differentiating between these allows ngcc to return an inlinedeclaration for directive and correctly keep track of this export pr close ,fix
5662,languageservice cleanup diagnostics pr close ,refactor
5663,languageservice instantiate metadataresolver once instead of destroying and recreating metadataresolver every time the program change create one instance and reuse it throughout the lifetime of the language service since angular staticsymbols are invalidated when program get outofdate this should be safe this should make the language service more more performant pr close ,fix
5664,core make sanitization treeshakable in ivy mode in ve the sanitizer is always available in browsermodule because the ve retrieves it using injection in ivy the injection is optional and we have instruction instead of component definition array the implication of this is that in ivy the instruction can pull in the sanitizer only when they are working with a property which is known to be unsafe because the injection is optional this work even if no sanitizer is present so in ivy we first use the sanitizer which is pulled in by the instruction unless one is available through the injector then we use that one instead this pr doe few thing it make sanitizer optional in ivy it make domsanitizer tree shakable it aligns the semantics of ivy sanitizer with that of the ivy sanitization rule it refactors domsanitizer to use same function a ivy sanitization for consistency pr close ,perf
5665,languageservice differentiate inline and external template this commit creates two concrete class inline and external templatesource to differentiate between template in t file and html file knowing the template type make the code much more explicit which filetype we are dealing with with these two class there is no need for gettemplateat method in typescripthost removing this method is safe since it is not used in the extension this reduces the api surface of typescripthost pr close ,refactor
5666,ivy add style binding nodebased micro benchmark pr close ,test
5667,ivy add property binding nodebased micro benchmark pr close ,test
5668,ivy remove code duplication from node perf benchmark pr close ,test
5669,ivy interpolation microbenchmark pr close ,perf
5670,ivy noop change detection microbenchmark pr close ,perf
5671,docsinfra upgrade cli command doc source to fec updating angularmaster from clibuildsmaster relevant change in commit range modified helpservejson pr close ,build
5672,languageservice return tscompletioninfo for getcompletionsat part of languageservice refactoring change all language service apis to return t value since angular l will be a proper tsserver plugin this reduces the need to transform result among angular t lsp pr close ,refactor
5673,router fix router description pr close ,docs
5674,compiler allow selectorless directive a base class in angular today the following pattern work typescript export class basedir constructorinjectviewcontainerref protected vcr viewcontainerref directive selector child export class childdir extends basedir constructor inherited from basedir a decorated child class can inherit a constructor from an undecorated base class so long a the base class ha metadata of it own for jit mode this pattern work regardless of metadata in aot in angular ivy this pattern doe not work without the directive annotation identifying the base class a a directive information about it constructor parameter will not be captured by the ivy compiler this is a result of ivy locality principle which is the basis behind a number of compilation optimization a a solution directive without a selector will be interpreted a a directive base class annotation such a directive can not be declared in an ngmodule but can be inherited from to implement this a few change are made to the ngc compiler the error for a selectorless directive is now generated when an ngmodule declaring it is processed not when the directive itself is processed selectorless directive are not tracked along with other directive in the compiler preventing other error like their absence in an ngmodule from being generated from them pr close ,feat
5675,docsinfra fix broken toc ul style fix pr close ,fix
5676,languageservice remove test for external template the tsserver is not meant to handle html file so there is no point sending an open request the existing test is wrong because the quickinfo return const name never which should be property widgetcomponentname pr close ,test
5677,languageservice cleanup typescripthost cleanup the logic in typescripthost a to when langauge service state should be synchronized with the editor state the model employed follows that of tsserver in which case it is the caller responsiblity to synchronize host data before any l method are called pr close ,refactor
5678,core add missing tsconfigbuildjson dependency for some reason on osx this transitive dependency is not being passed through to the final t build that rely on this rule so the build fails with a missing file error the specified path doe not exist sandboxdarwinsandboxexecrootangularpackagestsconfigbuildjson pr close ,build
5679,zonejs update release doc instruction pr close ,docs
5680,ivy split view processing into render create and refresh update pas pr close ,perf
5681,core add undecorated class migration schematic introduces a new migration schematic that follows the given migration plan first case the schematic detects decorated directive which inherit a constructor the migration ensures that all base class until the class with the explicit constructor are properly decorated with directive or component in case one of these class is not decorated the schematic add the abstract directive decorator automatically second case the schematic detects undecorated declaration and copy the inherited directive component or pipe decorator to the undecorated derived class this involves nontrivial import rewriting identifier aliasing and aot metadata serializing a decorator are not always part of source file pr close ,feat
5682,common update locationshim to notify onchange listener before emitting angularjs event the locationshim ha onchange listener to allow for synchronization logic between angularjs and angular when the angularjs routing event are emitted first this can cause angular code to be out of sync notifying the listener earlier solves the problem pr close ,fix
5683,form use a number a input value for formcontrolname pr changed the doc to use a string a the input value of formcontrolname a it used to only accept a string this ha been changed and formcontrolname now accepts a string or a number so the example in the doc can use a binding a they used to pr close ,docs
5684,form formcontrolname also accepts a number this commit relaxes the type of the formcontrolname input to accept both a string and a number currently when using a formarray most template look like div formarraynametags div ngforlet tag of tagsarraycontrols index a i input formcontrolnamei div div here formcontrolname receives a number whereas it input type is a string this is fine for ve and fulltemplatetypecheck but not for ivy which doe a more thorough type checking on input with fulltemplatetypecheck enabled and throw type number is not assignable to type string it is fixable by using formcontrolnamei but you have to know the difference between ab and ab and change it all over the application codebase this commit allows the existing code to still typecheck pr close ,feat
5685,languageservice return tsdiagnostic for getdiagnostics part of language service refactoring now that the language service is a proper tsserver plugin all l interface should return t value this pr refactors the nggetdiagnostics api to return tsdiagnostic instead of ngdiagnostic pr close ,refactor
5686,languageservice remove context used for module resolution the language service relies on a context file that is used a the canonical containing file when performing module resolution this file is unnecessary since the language service host current directory always default to the location of tsconfigjson for the project which would give the correct result this refactoring allows u to simplify the typescript host and also remove the need for custom logic to find tsconfigjson pr close ,fix
5687,zonejs update developermd for changelog instruction pr close ,docs
5688,zonejs browserlegacy should not reference zone pr close ,fix
5689,ivy remove load instruction these change remove the ɵɵload instruction which isnt being generated anymore pr close ,refactor
5690,ivy combine query load instruction combine the loadviewquery and loadcontentquery instruction since they have the exact same internal logic based on a discussion here pr close ,refactor
5691,ivy dont read global state when interpolated value dont change pr close ,perf
5692,bazel disable treeshaking when generating fesm and umd bundle there ha been a regression where enabling rollup treeshaking cause error during runtime because it will drop const access which will always evaluate to true or false however such const in angularcore can not be dropped because their value is changed when ngcc is run on angularcore ve const switchivyenabledpostr true const switchivyenabledprer false const ivyenabled switchivyenabledprer ivy after ngcc const switchivyenabledpostr true const switchivyenabledprer false const ivyenabled switchivyenabledpostr fesm loadpath type const legacyofflinemode thiscompiler instanceof compiler return legacyofflinemode thisloadfactorypath thisloadandcompilepath esm loadpath type const legacyofflinemode ivyenabled thiscompiler instanceof compiler return legacyofflinemode thisloadfactorypath thisloadandcompilepath from the above we can see that ivyenabled is being treeshaken away when generating the fesm bundle which is causing runtime error such a can not find module lazylazymodulengfactory since in ivy we will always load the factory pr close ,fix
5693,compiler do not remove whitespace wrapping in expansion similar to interpolation we do not want to completely remove whitespace node that are sibling of an expansion for example the following template html div strongitems leftstrong count plural item other item div wa being collapsed to html divstrongitems leftstrongcount plural item other itemsdiv which result in the text looking like item left instead it should be collapsed to html divstrongitems leftstrong count plural item other itemsdiv which result in the text looking like item left analysis of the code and manual testing ha shown that this doe not cause the generated id to change so there is no breaking change here pr close ,fix
5694,ivy reuse compilation scope for incremental template change previously if only a component template changed then we would know to rebuild it component source file but the compilation wa incorrect if the component wa part of an ngmodule since we were not capturing the compilation scope information that had a been acquired from the ngmodule and wa not being regenerated since we were not needing to recompile the ngmodule now we register compilation scope information for each component via the componentscoperegistry interface so that it is available for incremental compilation the componentdecoratorhandler now read the compilation scope from a componentscopereader interface which is implemented a a compound reader composed of the original localmodulescoperegistry and the incrementalstate fix pr close ,fix
5695,core move renderer migration lint rule into google folder move the renderertorenderer migration google tslint rule into the new google directory this is done for consistency a we recently moved all google migration rule into a new google folder see feeffdeedfadfe pr close ,refactor
5696,compiler allow selectorless directive a base class in angular today the following pattern work typescript export class basedir constructorinjectviewcontainerref protected vcr viewcontainerref directive selector child export class childdir extends basedir constructor inherited from basedir a decorated child class can inherit a constructor from an undecorated base class so long a the base class ha metadata of it own for jit mode this pattern work regardless of metadata in aot in angular ivy this pattern doe not work without the directive annotation identifying the base class a a directive information about it constructor parameter will not be captured by the ivy compiler this is a result of ivy locality principle which is the basis behind a number of compilation optimization a a solution directive without a selector will be interpreted a a directive base class annotation such a directive can not be declared in an ngmodule but can be inherited from to implement this a few change are made to the ngc compiler the error for a selectorless directive is now generated when an ngmodule declaring it is processed not when the directive itself is processed selectorless directive are not tracked along with other directive in the compiler preventing other error like their absence in an ngmodule from being generated from them pr close ,feat
5697,form use a number a input value for formcontrolname pr changed the doc to use a string a the input value of formcontrolname a it used to only accept a string this ha been changed and formcontrolname now accepts a string or a number so the example in the doc can use a binding a they used to pr close ,docs
5698,form formcontrolname also accepts a number this commit relaxes the type of the formcontrolname input to accept both a string and a number currently when using a formarray most template look like div formarraynametags div ngforlet tag of tagsarraycontrols index a i input formcontrolnamei div div here formcontrolname receives a number whereas it input type is a string this is fine for ve and fulltemplatetypecheck but not for ivy which doe a more thorough type checking on input with fulltemplatetypecheck enabled and throw type number is not assignable to type string it is fixable by using formcontrolnamei but you have to know the difference between ab and ab and change it all over the application codebase this commit allows the existing code to still typecheck pr close ,feat
5699,router rename incorrect class name pr close ,docs
5700,ivy remove dependency on global state from iscreationmode pr close ,refactor
5701,ivy remove global state access in elementcreate pr close ,refactor
5702,ivy remove unnecessary view type check pr close ,perf
5703,ivy remove global state access in createembeddedviewandnode pr close ,perf
5704,languageservice make definition and quickinfo compatible with t l now that the angular l is a proper tsserver plugin it doe not make sense for it to maintain it own language service api this is part one of the effort to remove our custom languageservice interface this interface is cumbersome because we have to do two transformation ng def t def lsp definition the t l interface is more comprehensive so this allows the angular l to return more information pr close ,fix
5705,ivy remove global state access from setupattributes pr close ,perf
5706,ivy remove unused code pr close ,refactor
5707,ivy show error when trying to publish ngccd package publishing of ngcc package should not be allowed it is easy for a user to publish an ngccd version of a library they have workspace library which are being used in a workspace application if a user build a library and afterwards the application the library will be transformed with ngcc and since ngcc taint the distributed file that should be published with this change we use the npmyarn prepublishonly hook to display and error and abort the process with a non zero error code when a user try to publish an ngcc version of the package more info pr close ,feat
5708,docsinfra upgrade cli command doc source to bbbeda updating angularmaster from clibuildsmaster relevant change in commit range modified helpnewjson pr close ,build
5709,ivy ngcc correctly update packagejson when createnewentrypointformats is true previously when run with createnewentrypointformats true ngcc would only update packagejson with the new entrypoint for the first format property that mapped to a formatpath subsequent property mapping to the same formatpath would be detected a processed and not have their new entrypoint format recorded in packagejson this commit fix this by ensuring packagejson is updated for all matching format property when writing an entrypointbundle pr close ,fix
5710,ivy ngcc remove redundant entrypoint argument from writebundle the entrypoint is already available through the bundle argument so passing it separately is redundant pr close ,refactor
5711,ivy ngcc remove formatproperty from entrypointbundle remove the formatproperty property from the entrypointbundle interface because the property is not directly related to that type it wa only used in one place when calling filewriterwritebundle but we can pas formatproperty directrly to writebundle pr close ,refactor
5712,ivy ngcc split work into distinct analyzecompileexecute phase this refactoring more clearly separate the different phase of the work performed by ngcc setting the ground for being able to run each phase independently in the future and improve performance via parallelization inspired bybased on alxhubs prototype alxhubangularcbbdb pr close ,refactor
5713,ivy ngcc only try to process the necessary property this change basically move some check to happen up front and ensures we dont try to process any more property than we absolutely need the property would not be processed before either but we would consider them before finding out that they have already been processed or that they do not exist in the entrypoints packagejson this change should make no difference in the work done by ngcc but it transforms the code in a way that make the actual work known earlier thus making it easier to parallelize the processing of each property in the future pr close ,refactor
5714,ivy ngcc make entrypointjsonpropertyrelated type and check a little more strict pr close ,refactor
5715,ivy ngcc fix return type on makeentrypointbundle in commit bbab part of pr the implementation of makeentrypointbundle wa changed such that it now always return entrypointbundle and not null however the return type wa not updated and a result we continued to unnecessarily handle null a a potential return value in some place this commit fix the return type to reflect the implementation and remove the redundant code that wa dealing with null pr close ,refactor
5716,ivy ngcc report an error if a target ha missing dependency previously we either crashed with an obscure error or silently did nothing now we throw an exception but with a helpful message pr close ,fix
5717,ivy ngcc do not consider builtin nodejs module a missing ngcc analyzes the dependency structure of the entrypoints it need to process a the compilation of entrypoints is ordering sensitive any dependent upon entrypoint must be compiled before it dependees a part of the analysis of the dependency graph it is detected when a dependency of entrypoint is not installed in which case that entrypoint will be marked a ignored for library that work with angular universal to run in nodejs import into builtin nodejs module can be present ngccs dependency analyzer can only resolve import within the typescript compilation which builtin module are not part of therefore such import would erroneously cause the entrypoint to become ignored this commit fix the problem by taking the nodejs builtins into account when dealing with missing import fix pr close ,fix
5718,ivy ngcc prevent crash when analyzed target is ignored ngcc analyzes the dependency structure of the entrypoints it need to process a the compilation of entrypoints is ordering sensitive any dependent upon entrypoint must be compiled before it dependees a part of the analysis of the dependency graph it is detected when a dependency of entrypoint is not installed in which case that entrypoint will be marked a ignored when a target entrypoint to compile is provided it could occur that given target is considered ignored because one of it dependency might be missing this situation wa not dealt with currently instead resulting in a crash of ngcc this commit prevents the crash by taking the above scenario into account pr close ,fix
5719,docsinfra ensure the locally built package exist and are uptodate in yarn setuplocal the setuplocal npm script us ngpackagesinstaller to replace the angular package with the locally built one previously it would a assume that the package were built and b it would do anything if the currently installed version already correspond to locally built package even if not the latest version this could lead to all sort of error such a confusing error message distpackagesdist wa missing using outdated build artifact from distpackagesdist without a warning not installing the latest locally built package because the one installed already corresponded to locally built but older one this commit fix these issue by ensuring that the local package are always built before being used by ngpackagesinstaller the local package are installed even if the one install already correspond to local package note special ci script are introduced for use on ci that skip building the local package since that step would have been taken care of in a more efficient way in a previous ci step pr close ,build
5720,docsinfra correctly handle multiple occurrence of an option in ngpackagesinstaller pr close ,fix
5721,docsinfra support building the local angular package in ngpackagesinstaller previously when ngpackagesinstaller needed to install the local angular package to a project it assumed the distpackagesdist would exist and contain uptodate built package ie it wa up to the user to have built the package first by running the appropriate script however many people not familiar with the aio infrastructure assumed that yarn buildlocal or yarn buildwithivy would take care of all the necessary step to avoid getting confusing error or worse yet using outdated local package ngpackagesinstaller now ha an option to build the package before using them one caveat is that the build script doe not currently work on window so a warning is printed instead letting the user know they need to somehow take care of it themselves note since the build script is using bazel running it should not be expensive if the directory is uptodate ie no change have been made to source code after the last build note this commit add support for buildpackages but doe not change the default behavior not building the package it will be turned on in a subsequent commit pr close ,feat
5722,docsinfra minor refactorings and code simplification in ngpackagesinstaller pr close ,refactor
5723,ivy ngcc correctly detect format processed in previous run previously ngcc would avoid processing a formatpath that a property in packagejson mapped to if either the property wa marked a processed or the formatpath ie the file wa processed in the same ngcc run since the compiledformats set wa not persisted across run this could lead in a situation where a formatpath would be compiled twice if for example property a and b both mapped to the same formatpath and one would run ngcc for property a and then b this commit fix it by ensuring that a soon a a formatpath ha been processed all corresponding property are marked a processed which persists across ngcc run pr close ,fix
5724,ivy ngcc avoid unnecessary operation when we only need one format processed previously when ngcc wa called with compileallformats false ie how angularcli call it it would not attempt to process more property once the first wa successfully processed however it would continue looping over them and perform some unnecessary operation such a determining the format each property map to which can be an expensive operation for some property mapping to either umd or commonjs checking whether each property ha been processed which involves checking whether any property ha been processed with a different version of ngcc each time potentially marking property a processed which involves a filewrite operation this commit avoids the unnecessary operation by entirely skipping subsequent property once the first one ha been successfully processed while this theoretically improves performance it is not expected to have any noticeable impact in practice since the list of propertiestoconsider is typically small and the most expensive operation marking a property a processed ha low likelihood of happening plus these operation are a tiny fraction of ngccs work pr close ,perf
5725,ivy ngcc avoid unnecessary filewrite operation when marking property a processed previously when ngcc needed to mark multiple property a processed eg a processed format property and typing or all supported property for a nonangular entrypoint it would update each one separately and write the file to disk multiple time this commit change this so that multiple property can be updated at once with one filewrite operation while this theoretically improves performance reducing the io operation it is not expected to have any noticeable impact in practice since these operation are a tiny fraction of ngccs work this change will be useful for a subsequent change to mark all property that map to the same formatpath a processed once it is processed the first time pr close ,perf
5726,ivy ngcc remove unused check for format support now that ngcc support all entrypointformats there is no need to check if a format is supported so this operation wa a noop pr close ,refactor
5727,docsinfra ui polish change margin to the header so that the the label aligns with the header make code in api page prewrap so that you can see the actual text on the screen help with issue modified text to be title case in label api to be consistent with rest of app label removed unused table of content sc file toc sc file reorg cleanup soften header fontweight in api page make linenums ordered list inside code example always show a number pr close ,fix
5728,upgrade avoid using static inherited method using parentinjectorpromiseall which is a static method inherited from syncpromise cause closure compiler or some related tool to complain typeerror packagesupgradesrccommonsrcdowngradecomponentparentinjectorpromiseall is not a function switching to syncpromiseall the static method on the parent class to avoid this error pr close ,refactor
5729,docsinfra fix stackblitz project and zip for testing guide example update the stackblitzjson config file used for generating stackblitz project and zip archive to include the correct file taking into account the current layout of the example project update the boilerplate file for testing example to match the current layout of the example project pr close ,build
5730,docsinfra correct list of file included in zip to match current layout pr close ,build
5731,docsinfra remove unused stackblitzzip configuration for setup example the generated stackblitz project and zip archive are no longer used and they are broken anyway so removing them altogether to avoid confusion note still keeping the example project because that is referenced in the setup guide pr close ,build
5732,zonejs support promiseallsettled pr close ,feat
5733,zonejs update gulp task to gen changelog automatically pr close ,build
5734,zonejs update changelog of zonejs pr close ,build
5735,languageservice introduce angularonly flag this pr change the language service to work in two different mode t angular plugin augments t language service to provide additonal angular information this only work with inline template and is meant to be used a a local plugin configured via tsconfigjson angular only plugin only provides information on angular template no t info at all this effectively disables native t feature and is meant for internal use only default mode is angularonly false so that we dont break any user already using angular l a local plugin a part of the refactoring undefined is removed from type alias because it is considered bad practice gotsstylenullableundefinedtypealiases type alias must not include null or undefined in a union type nullable alias typically indicate that null value are being passed around through too many layer of an application and this cloud the source of the original issue that resulted in null they also make it unclear when specific value on a class or interface might be absent pr close ,feat
5736,ivy directive matching not working in some case when preceded by styling attribute fix ivy directive matching not capturing attribute selector when there is one class binding one style binding and a regular binding that precede the attribute that would match the directive the issue appears to come from the fact that we werent skipping over style binding correctly which wa throwing the loop off not to go into bindingsmode and to skip some of the binding when matching pr close ,fix
5737,ivy remove global state acces from postprocessdirective pr close ,perf
5738,ivy remove firsttemplatepass check from directive instantiation pr close ,perf
5739,ivy remove code duplication around root component view creation pr close ,refactor
5740,ivy remove firsttemplatepass check for component view creation pr close ,perf
5741,ivy ngcc emits static field before extra statement this commit change the emit order of ngcc when a class ha multiple static field being assigned previously ngcc would emit each static field followed immediately by any extra statement specified for that field this cause issue with downstream tooling such a build optimizer which expects all of the static field for a class to be grouped together ngtsc already group static field and additional statement this commit change ngccs ordering to match pr close ,fix
5742,ivy debugelementtriggereventhandler not picking up event registered via renderer fix ivy debugelementtriggereventhandler to picking up event that have been registered through a renderer unlike viewengine this pr resolve fw pr close ,fix
5743,core add missing closing brace in directive input example pr close ,docs
5744,ivy pas schema field to nested view prior to this commit the schema configuration wa applied to toplevel view only that lead to problem when using unknown prop with element inside nested view for example generated a a result of ngif this commit pass schema information down to nested view to make sure that all the check are consistent pr close ,fix
5745,languageservice getsourcefile should only be called on t file pr close ,fix
5746,upgrade compile downgraded component synchronously if possible angularjs compilation is a synchronous operation unless having to fetch a template which is not supported for downgraded component previously ngupgrade tried to retain the synchronous nature of the compilation for downgraded component when possible by using a synchronous thenable implementation parentinjectorpromise this wa accidentally broken in by replacing a call to parentinjectorpromisethen which can be synchronous with a call to promiseall which is asynchronous this commit fix this by introducing a syncpromiseall static method similar to promiseall but retaining the synchronous capability of syncpromise which parentinjectorpromise inherits from fix pr close ,fix
5747,upgrade extract promiserelated utility to separate file and add test pr close ,refactor
5748,ivy speed up ngtsc if project ha no template to check if a project being built with ngtsc ha no template to check then ngtsc previously generated an empty typecheck file this seems to trigger some pathological behavior in t where the entire user program is rechecked which is extremely expensive this likely ha to do with the fact that the empty file is not considered an e module meaning the module structure of the program ha changed this commit cause an export to be produced in the typecheck file regardless of it other content which guarantee that it will be an e module the pathological behavior is avoided and template typechecking is fast once again pr close ,fix
5749,docsinfra upgrade cli command doc source to bcbc updating angularmaster from clibuildsmaster relevant change in commit range added helpdeployjson pr close ,build
5750,ivy add readme to indexer module describe the indexer module for angular compiler developer include scope of analysis provided by the module and the indexer it target a firstparty pr close ,docs
5751,docsinfra update main bundle size pr contains perf and code cleanup change that add byte to the main bundle size perf gain and code clarity justify this increase unfortunately the size verification job is rejecting this pr a it report size gain from a fixed size and not relative increase of size from a particular pr it wa decided during the internal team discussion to bump up size limit to correctly reflect current state of the master and increase from this pr pr close ,build
5752,ivy avoid creating holey lview array pr close ,perf
5753,ivy limit creationmode check pr close ,perf
5754,ivy stricter null check pr close ,perf
5755,ivy call refreshcontentqueries only when there are content query defined pr close ,perf
5756,ivy remove unnecessary call to setpreviousorparenttnode setpreviousorparenttnode is set in enterview so no need to reset it just before entering a view pr close ,refactor
5757,ivy only refresh child component if those are defined in a given view pr close ,perf
5758,ivy rewrite refreshdynamicembeddedviews for clarity pr close ,refactor
5759,ivy avoid repeated tviewfirsttemplatepass writes pr close ,perf
5760,zonejs add test code to ensure not include sourcemap pr close ,test
5761,zonejs remove sourcemappingurl from bundle close pr close ,build
5762,zonejs dont rely on global node typing outside of node directory pr close ,fix
5763,docsinfra upgrade cli command doc source to eaecb updating angularmaster from clibuildsmaster relevant change in commit range modified helpgeneratejson pr close ,build
5764,ivy ngcc render decorator in umd and commonjs bundle correctly in a fix wa implemented to render namespaced decorator import correctly however it turn out that the fix only worked when decorator information wa extracted from static property not when using decorate call this commit fix the issue by creating the decorator metadata with the full decorator expression instead of only it name close pr close ,fix
5765,ivy ngcc recognize suffixed tslib helper an identifier may become repeated when bundling multiple source file into a single bundle so bundlers have a strategy of suffixing nonunique identifier with a suffix like since ngcc operates on such bundle it need to process potentially suffixed identifier in their canonical form without the suffix the ngxpagination package wa previously not compiled fully a most decorator were not recognized this commit ensures that identifier are first canonicalized by removing the suffix such that they are properly recognized and processed by ngcc fix pr close ,fix
5766,ivy ngcc categorize the various decorate call upfront any decorator information present in typescript is emitted into the generated javascript source by mean of decorate call this call contains both the decorator a they existed in the original source code together with call to tslib helper that convey additional information on eg type information and parameter decorator these different kind of decorator call were not previously distinguished on their own but instead all treated a decorator by themselves the decorator that were actually tslib helper call were conveniently filtered out because they were not imported from angularcore a characteristic that ngcc us to drop certain decorator note that this posed an inconsistency in ngcc when it process angularcores umd bundle a the tslib helper function have been inlined in said bundle because of the inlining the tslib helper appear to be from angularcore so ngcc would fail to drop those apparent decorator this inconsistency doe not currently cause any issue a ngtsc is specifically looking for decorator based on their name and any remaining decorator are simply ignored this commit rewrite the decorator analysis of a class to occur all in a single phase instead of all throughout the reflectionhost this allows to categorize the various decorate call in a single sweep instead of constantly needing to filter out undesired decorate call on the go a an added benefit the computed decorator information is now cached per class such that subsequent reflection query that need decorator information can reuse the cached info pr close ,refactor
5767,zonejs should expose some other internal intefaces pr close ,fix
5768,core debugelementlisteners not cleared on destroy currently the debugelementlisteners array are retained after the node is destroyed this mean that theyll continue to fire through triggereventhandler and can cause memory leak this ha already been fixed in ivy but these change fix it in viewengine for consistency pr close ,fix
5769,ivy set localeid when using the injector in browsermodule the value of localeid is defined in the applicationmoduleproviders after appinitializer ha run this pr ensures that localeid is also set for ivy at the same moment which allows the application to fetch the locale from a backend for example fix fw resolve pr close ,fix
5770,ivy error when using forwardref in injectables useclass fix ivy throwing an error when something is passed in a a forwardref into injectables useclass option the error wa being thrown because we were trying to get the provider factory off of the wrapper function rather than the value itself this pr resolve fw pr close ,fix
5771,core clarify contentchildren behavior describe that contentchildren doesnt search within other component template doesnt go across component boundary pr close ,docs
5772,ivy fix broken testcase in window in several testcases were added that were failing in window the reason wa that a recent rebase missed a required change to interact with the compiler virtualized filesystems this commit introduces the required usage of the vfs layer to fix the testcase pr close ,test
5773,ivy correctly bind targettoidentifier to the templatevisitor templatevisitorvisitboundattribute currently ha to invoke visiting expression manually this is fixed in previously it did not bind targettoidentifier to the visitor before deferring to the expression visitor which break the targettoidentifier code this fix that and add a test to ensure the closure processed correctly this change is urgent without it many indexing target in g are broken pr close ,fix
5774,zonejs add changelog gulptask for zonejs pr close ,build
5775,ivy translate typecheck diagnostics to their original source pr close ,feat
5776,ivy include value span for attribute variable and reference template ast node for bound attribute variable and reference will now retain a reference to the source span of their value which allows for more accurate type check diagnostics pr close ,feat
5777,ivy let ngtsc annotate type check block with source position the type check block tcb that ngtsc generates for achieving type checking of angular template need to be annotated with positional information in order to translate typescript diagnostics for the tcb code back to the location in the user template this commit augments the tcb by attaching trailing comment with ast node such that a node can be traced back to it source location pr close ,feat
5778,ivy move ngtscs tcb generation test util to separate file pr close ,refactor
5779,ivy index template reference variable bound attributesevents add support for indexing template referenecs variable and property and method call inside bound attribute and bound event this is mostly an extension of the existing indexing infrastructure pr close ,feat
5780,ivy update material to recent commit from master branch previously the ivy branch of the material aka component repo wa used which contains some change that were necessary to work with ivy these change are not longer necessary a material master branch is fully working with ivy today to be uptodate with recent material development and it support for more recent dependency eg typescript it is desirable for u to be on a newer version of material this commit move the material test away from the ivy branch to a recent commit on master we are not targeting the master branch itself a that would introduce a moving target into angulars ci check which is undesirable lastly the usage of gulp to run material test is changed into using bazel a material itself is now also built with bazel pr close ,test
5781,ivy introduce new benchmark for view create destroy traverse pr close ,perf
5782,zonejs dont fire unhandledrejection if zone handled error close pr close ,fix
5783,zonejs handle mspointer event correctly close pr close ,fix
5784,zonejs patch shadydom close pr close ,fix
5785,docsinfra remove obsolete format attribute from code example the format attribute is an artifact of an old version of the doc tooling before moving it into the angularangular repo and no longer doe anything people are still copypasting it from existing example this commit remove all occurrence of the format attribute on code example pr close ,refactor
5786,docsinfra remove linenumsfalse since it is now the default pr close ,refactor
5787,docsinfra always default to no linenums in aiocode previously linenums defaulted to true if the content wa more than line long and false otherwise since in most case linenums add unnecessary visual noise this commit change linenums to always default to false regardless of the size of the content it can be still be turned on by explicitly setting to true or a number pr close ,fix
5788,ivy avoid extra parameter in query instruction currently we always generate the read parameter for the view and content query instruction however since most of the time the read parameter wont be set well end up generating null which add byte for each query when minified these change make it so that the read parameter only get generated if it ha a value pr close ,perf
5789,zonejs move property patch to legacy close pr close ,fix
5790,zonejs should remove on symbol property after removealllisteners close pr close ,fix
5791,zonejs hook should set correct current zone close pr close ,fix
5792,upgrade support element in upgraded component templatetemplateurl function pr close ,feat
5793,zonejs zonemix should import correct browser module close pr close ,fix
5794,zonejs dont wrap uncaught promise error close pr close ,fix
5795,zonejs loadpatch and symbol should be in zoneextern for closure compiler pr close ,fix
5796,ivy support attribute selector in dynamic component creation this commit fix a bug where we assumed all dynamically created component would have tagname selector so we passed through the tag name to the renderer a the first index of the selector for component with attribute selector the tag name would be so the renderer would try to create an element with tag name and throw now we default to a div element the same way that view engine did close pr close ,fix
5797,ivy minor code cleanup pr close ,refactor
5798,bazel compile target used for indexing by kythe with ivy this switch all angular target to be built with the same angular compiler architecture cn ivy that the angular indexer us this eliminates issue with crossreferences to transitive dependency not being generated because of the way such dependency are loaded by the legacy compiler arch pr close ,feat
5799,ivy pas information about used directive selector on element extend indexing api interface to provide information about used directive selector on template element this enables an indexer to xref element attribute to the directive that match them the current way this matching is done is by mapping selector to indexed directive however this fails in case where the directive is not indexed by the indexer api like for transitive dependency this solution is much more general pr close ,feat
5800,zonejs handle new api of electron close pr close ,fix
5801,zonejs update dart zone link close pr close ,fix
5802,ivy ngcc implement undecoratedparentmigration implementing the undecorated parent migration described in pr close ,feat
5803,ivy ngcc support ngcc migration this commit implement support for the ngcc migration a designed in pr close ,feat
5804,ivy ngcc move decorator analysis type into their own file pr close ,refactor
5805,ivy use reflectionhost to find base class when analyzing component directive etc we capture it base class previously this assumed that the code is in t format which is not always the case eg ngcc now this code is replaced with a call to reflectionhostgetbaseclassexpression which abstract the work of finding the base class pr close ,refactor
5806,ivy add getbaseclassidentifier to reflectionhost this method will be useful for writing ngcc migration that need to be able to find base class pr close ,feat
5807,ivy ngtsc remove unnecessary type on helper the classdeclaration already contains the name tsidentifier type so there is no need to include it explicitly here pr close ,refactor
5808,ivy ensure that runineachfilesystem clean up after itself previously the last filesystem being tested wa left a the current filesystem now it is reset to an invalidfilesystem to ensure future test are not affected pr close ,test
5809,core move google migration rule into single directory move all google migration tslint rule into a single directory this make it easier to wire up multiple migration rule in google without having to update the rule directory each time a new migration is available pr close ,refactor
5810,ivy introduce missinginjectable migration for google introduces a new migration schematic for adding the injectable decorator to provider class which are currently not migrated previously in viewengine class which are declared a provider sometimes dont require the injectable decorator eg with ivy provider class need to be explicitly decorated with the injectable decorator if they are declared a provider of a given module this commit introduces a migration schematic which automatically add the explicit decorator to place where the decorator is currently missing the migration logic is designed in a cli devkit and tslint agnostic way so that we can also have this migration run a part of a public cli migration w ng update this will be handled a part of a followup to reiterate on console output etc resolve fw pr close ,feat
5811,ivy component created with wrong context when passing root node to component factory the way the componentfactorycreate is set up at the moment is that if a rootselectorornode is passed in the root context will be injected instead of creating dedicated one for the component a far a i can tell there doesnt seem to be a reason to do this and nothing seems to break because of it these change switch to always create the root context pr close ,fix
5812,ivy debugnodequery not picking up node inserted through renderer in viewengine node that were inserted through renderer would also be picked up by debugnodequery and debugnodequeryall this worked because everything in viewengine went through renderer and debugrenderer in dev mode which wa able to keep track of the child node a theyre being inserted this no longer work in ivy because we dont use debugrenderer and debug node work a little differently these change work around the issue by walking the dom a the logical tree is being walked and looking for match note that this is not optimal because were walking similar tree multiple time viewengine could do it more efficiently because all the insertion go through renderer however thats not the case in ivy this approach is being used because matching the viewengine behavior would mean potentially introducing a depedency from renderer to ivy which could bring ivy code into viewengine we would have to make renderer know about debug node it allows u to capture node that were inserted directly via the dom pr close ,fix
5813,compiler avoid copying from prototype while cloning an object this commit update the clone function of the applysourcespantransformer class where the forin loop wa used resulting in copying from prototype to own property thus consuming more memory prior to nodejs v version before there wa an optimization that wa improving the situation and since that logic wa removed in favor of other optimization the situation with memory consumption caused by the forin loop got worse this commit add a check to make sure we copy only own property over to cloned object close pr close ,perf
5814,ivy incorrect changedetectorref injected into pipe used in component input when injecting a changedetectorref into a pipe the expected result is that the ref will be tied to the component in which the pipe is being used this work for most case however when a pipe is used inside a property binding of a component see test case a an example the current tnode is pointing to component host so we end up injecting the inner component view these change fix the issue by only looking up the component view of the tnode if the tnode is a parent this pr resolve fw pr close ,fix
5815,ivy remove all old styling code prior to refactor in the previous patch all the existing styling code wa turned off in favor of using the new refactored ivy styling code this patch is a follow up patch to that and remove all old unused styling code from the render directory pr close ,refactor
5816,ivy support projecting container created by query read pr close ,fix
5817,ivy support icu expression inserted in ngtemplateoutlets inside ngfors this commit fix a bug where icu expression inserted into ngtemplateoutlets that are inside ngfor block would throw an error we were assuming in view insertion code that text node would always exist by the time a view creation block had executed this is not true for text node created dynamically by icu because this happens in the update block in inapply this change ensures such dynamically created node are skipped when encountered too early a they will be attached later by in code anyway pr close ,fix
5818,ivy ensure ngclass doe not overwrite other dir data we currently have a handwritten version of the ivy directive def for ngclass so we can switch between ivy and view engine behavior this generated code need to be kept uptodate with what the ivy compiler generates pr recently changed classmap such that it now requires allocation of host binding slot this mean that the allochostvars function must be called in the ngclass directive def to match compiler output but the handwritten directive def wa not updated this caused a bug where ngclass wa inappropriately overwriting data for other directive because space wa not allocated for it value pr close ,fix
5819,bazel increase memory limit of ngc under bazel from to gb this commit bump the heap size of nodengc under bazel to gb instead of the previous gb this brings it in sync with what the t compiler us in g and fix a bug where ngc would crash with oom in worker mode pr close ,fix
5820,docsinfra fix logo to have branded red color replace logo nav x logo file with one that ha the correct branding red color in shield pr close ,fix
5821,ivy avoid using array splice pr close ,perf
5822,languageservice remove unused class and method pr close ,refactor
5823,docsinfra improve small screen experience for doc card layout make doc card expand to full width in smaller screen size reduce spacing around card container to match general spacing pattern seen in angulario improve sc formatting pr close ,fix
5824,docsinfra fix mobile toc style return mobile toc style from bug in pr give doc page header a width limit so it doe not run into the github icon link pr close ,fix
5825,ivy record absolute position of template expression currently template expression and statement have their location recorded relative to the html element they are in with no handle to absolute location in a source file except for a linecolumn location however the linecolumn location is also not entirely accurate a it point an entire semantic expression and not necessarily the start of an expression recorded by the expression parser to support record of the source code expression originate from add a new sourcespan field to astwithsource that record the absolute byte offset of an expression within a source code implement part of refactoring template parsing for stability pr close ,feat
5826,ivy reduce code duplication and code size pr close ,refactor
5827,ivy match query result on the tview level pr close ,perf
5828,ivy make styling instruction use the new styling algorithm this commit is the final patch of the ivy styling algorithm refactor this patch swap functionality from the old styling mechanism to the new refactored code by changing the instruction code the compiler generates and by pointing the runtime instruction code to the new styling algorithm pr close ,refactor
5829,ivy correct circular dependency which cause g failure pr close ,refactor
5830,ivy clean up rnode retrieval add better debug support for tnode pr close ,refactor
5831,element handle falsy initial value fix angularangular pr close ,fix
5832,ivy remove deep import into the compiler the compilercli should only reference code that can be imported from the main entrypoint of compiler pr close ,refactor
5833,ivy support older cli version that do not pas a list of changed file version of cli prior to angularangularclieee did not expose the hostgetmodifiedresourcefiles method this meant that null wa being passed through to the incrementalstatereconcile method to indicate that there were either no change or the host didnt support that method this commit fix a bug where we were checking for undefined rather than null when deciding whether any resource file had changed causing a null reference error to be thrown this bug wa not caught by the unit testing because the test set up the changed file via a slightly different process not having access to the compilerhost and these test were making the erroneous assumption that undefined indicated that there were no changed file pr close ,fix
5834,platformbrowser debug element query predicate not compatible with strictfunctiontypes currently developer can use the by class to construct common debugelement query predicate eg bydirectivemydirective the directive and all predicate are currently returning a predicate that work for debugelement node this return type is too strict since the predicate is not specific to debugelement instance and can also apply to debugnode instance meaning that developer are currently able to use the directive predicate when using queryallnodes this is a common practice but will break when the project is compiled with typescript strictfunctiontypes flag a the debugelement predicate type is not assignable to predicate for debugnode in order to make these predicate usable with strictfuntiontypes enabled we adjust the predicate type to reflect what is actually needed for evaluation of the predicate pr close ,fix
5835,serviceworker ensure compatibility with typescript strict flag a part of fw the angularserviceworker package is made compatible with the typescript strict flag read more about the strict flag here pr close ,refactor
5836,form ensure compatibility with typescript strict flag a part of fw the angularforms package is made compatible with the typescript strict flag read more about the strict flag here pr close ,refactor
5837,router compatibility with typescript strict flag a part of fw the angularrouter package is made compatible with the typescript strict flag read more about the strict flag here pr close ,refactor
5838,platformbrowser compatibility with typescript strict flag a part of fw the angularplatformbrowser package is made compatible with the typescript strict flag read more about the strict flag here pr close ,refactor
5839,upgrade ensure compatibility with typescript strict flag a part of fw the angularupgrade package is made compatible with the typescript strict flag read more about the strict flag here pr close ,refactor
5840,common ensure compatibility with typescript strict flag a part of fw the angularcommon package is made compatible with the typescript strict flag read more about the strict flag here pr close ,refactor
5841,ivy semantic module check incorrectly handle nested array in view engine developer can pas bootstrap and entry component a nested array eg t export const myotherentrycomponents a b c ngmodule entrycomponents mycomp myotherentrycomponents currently using nested array for these property cause unexpected error to be reported in ivy since the semantic ngmodule check arent properly recursing into the nested entrybootstrap component this issue ha been unveiled by enabling the strict function parameter check pr close ,fix
5842,ivy incorrect type definition for ɵɵdefinecomponent currently the ɵɵdefinecomponent method ha incorrect type definition the directive and pipe metadata property the incorrect type allow developer to pas in already instantiated directivedef or componentdef object this can cause unexpected failure because the definition internally only expects type object and now incorrectly try to read the ngdirectivedef or ngcomponentdef of existing definition this issue ha been unveiled by enabling the strict function parameter type flag where the directive definition are determined from each array element in the directive or pipe property which can throw pr close ,fix
5843,compiler ensure compatibility with typescript strict flag a part of fw the angularcompiler package is made compatible with the typescript strict flag this already unveiled a few bug so the strictness flag seems to help with increasing the overall code health read more about the strict flag here pr close ,refactor
5844,core ensure compatibility with typescript strict flag a part of fw the angularcore package is made compatible with the typescript strict flag this already unveiled a few bug so the strictness flag seems to help with increasing the overall code health read more about the strict flag here pr close ,refactor
5845,core allow z variation of cs transforms in sanitizer pr close ,fix
5846,ivy support undefined and null in static interpreter previously the usage of null and undefined keywords in code that is statically interpreted by ngtsc resulted in a dynamicvalue a they were not recognized a special entity this commit add support to interpret these keywords pr close ,feat
5847,ivy ngcc render namespaced imported decorator correctly the support for decorator that were imported via a namespace eg import a core from angularcore wa implemented piecemeal this meant that it wa easy to miss situation where a decorator identifier needed to be handled a a namepsaced import rather than a direct import one such issue wa that umd processing of decorator wa not correct the namespace wa being omitted from reference to decorator now the type have been modified to make it clear that a decoratoridentifier could hold a namespaced identifier and the corresponding code that us these type ha been fixed fix pr close ,fix
5848,docsinfra upgrade jasminekarmarelated dependency note jasminets is intentionally held back at because of a bug in svicjasminets pr close ,build
5849,docsinfra remove unused jasminemarbles dependency pr close ,build
5850,docsinfra run test in random order and make them pas this commit update the necessary config file to run the angulario and doc tooling unit test in random order and fix the test that were failing due to their dependence on the previous ordered execution besides being a good idea anyway running test in random order is the new default behavior in jasmine so this commit is in preparation of upgrading jasmine to the latest version pr close ,test
5851,core fix typo in eventbinding code example item is an object so it is stringified to object object using it name property produce a more meaningful message pr close ,docs
5852,ivy dont match directive against attribute binding fix ivy matching directive against attribute binding eg attrsomedirectivefoo work by excluding attribute binding from the attribute array during compilation this ha the added benefit of generating le code note my initial approach to implementing this wa to have a different marker for attribute binding so that they can be ignored when matching directive however a i wa implementing it i realized that the attribute in that array were only used for directive matching a far a i could tell i decided to drop the attribute binding completely because it result in le generated code pr close ,fix
5853,ivy a couple of typo in error message fix a couple of typo that were noticed after the initial pr got merged in pr close ,fix
5854,ivy cleanup implementation of container related instruction pr close ,refactor
5855,languageservice eagarly initialize data member data member in typescriptservicehost of map type should be eagerly initialized to address issue this eliminates the need to constantly check for truthiness and make code much more readable more pr to follow to address issue pr close ,fix
5856,ivy use googlocale for closure compiler to define default localeid prior to this commit default value for localeid wa not setup for closure compiler in closure compiler we can use googlocale a a default value which will be replaced at build time with current locale pr close ,fix
5857,ivy avoid generating extra parameter for host property binding currently we reuse the same instruction both for regular property binding and property binding on the host the only difference between the two is that when it on the host we shouldnt support input we have an optional parameter called nativeonly which is used to differentiate the two however since nativeonly is preceeded by another optional parameter sanitizer we have to generate two extra parameter for each host property binding every time eg propertysomeprop somevalue null true these change add a new instruction called hostproperty which avoids the need for the two parameter by removing nativeonly which is always set and it allows u to omit sanitizer when it isnt being used these change also remove the nativeonly parameter from the updatesynthetichostbinding instruction because it only generated for host element which mean that we can assume that it value will always be true pr close ,perf
5858,docsinfra never show linenums for triplebackticked code block pr close ,build
5859,core remove repeated example pr close ,docs
5860,docsinfra upgrade cli command doc source to afecb updating angularmaster from clibuildsmaster relevant change in commit range modified helpanalyticsjson pr close ,build
5861,compilercli return original sourcefile instead of redirected sourcefile from getsourcefile close pr close ,fix
5862,ivy align ngmodule assertion with viewengine aligns ivy ngmodule assertion message with the one from viewengine and add a few that hadnt been implemented pr close ,fix
5863,docsinfra fix indentation in rxlibrary example pr close ,style
5864,docsinfra display cli positional option enum value previously we only displayed enum value for named option now positional option get equal justice fix pr close ,build
5865,docsinfra fix api list search color and style add more spacing to input correct placeholder color in input add aria label to input for accessibility clean up layout style and mobile view fix pr close ,fix
5866,ivy index template element for selector attribute directive add support for indexing element in the indexing module opening and selfclosing html tag have their selector indexed a well a the attribute on the element and the directive applied to an element pr close ,feat
5867,zonejs fix zone for jasmine if zonejs is sent undefined callback it proceeds to attempt to call them then fails catch it own fail rewrite the stack to hide the mistake and report a typeerror with a callstack unrelated to input throw early if the callback is undefined a can happen if j or anyified t call zone invoketask check for undefined oncommplete callback to zonejs jasmine wrapper pr close ,fix
5868,bazel pas custom bazel compiler host rather than rewriting one switch back to passing a custom bazel host instead of rewriting one that is passed to compile now that the angular indexer is stable revert featbazel allow passing and rewriting an old bazel host this reverts commit accfafcafefddebcf pr close ,fix
5869,ivy ngcc resolve main property path correctly there are two place in the ngcc processing where it need to load the content of a file given by a general path when determining the format of an entrypoint to do this ngcc us the value of the relevant property in packagejson but in the case of main it must parse the content of the entrypoint file to decide whether the format is umd or commonjs when parsing the source file for dependency to determine the order in which compilation must occur the relative import in each file are parsed and followed recursively looking for external import previously we naively assumed that the path would match the file name exactly but actually we must consider the standard module resolution convention eg the extension j may be missing or the path may refer to a directory containing an indexjs file this commit fix both place this commit now requires the dependencyhost instance to check the existence of more file than before at worst all the different possible postfix this should not create a significant performance reduction for ngcc since the result of the check will be cached and similar work is done inside the t compiler so what we lose in doing it here is saved later in the processing the main performance loss would be where there are lot of file that need to be parsed for dependency that do not end up being processed by t but compared to the main ngcc processing this dependency parsing is a small proportion of the work done and so should not impact much on the overall performance of ngcc fw pr close ,fix
5870,ivy handle icu with placeholder in case other nested icu are present prior to this fix the logic to set the right placeholder format for icu wa a bit incorrect if there wa a nested icu in one of the root icu case that led to a problem where placeholder in subsequent branch used the wrong placeholder format instead of placeholder one this commit update the logic to make sure we properly transform all placeholder even if nested icu are present pr close ,fix
5871,ivy handle modulewithproviders in rtestbed correctly prior to this commit it wa impossible to override provider defined via modulewithproviders using testbedoverrideprovider api the problem wa caused by the fact that we were not taking into account these provider while calculating accumulated set of provider override this commit update the logic to extract provider from modulewithproviders and calculate the final set of override taking them into account pr close ,fix
5872,compilercli remove unused dependency shelljs since fc compilercli is no longer depending on shelljs for production code we still use it in test and infrastructuretooling incidentally this should also help with pr close ,build
5873,docsinfra run ay audit on certain page on ci pr close ,ci
5874,docsinfra support checking the score on all audit category previously the testpwascore script would only check the pwa score all category were reported but a min score could only be specified for pwa this commit add support for checking the score on all available category such a ay performance seo etc pr close ,feat
5875,docsinfra slightly improve log output of testpwascore this commit slightly improves the log outout of the testpwascore script eg by showing the total duration indenting message to group them together etc it also includes various minor refactorings these change are in preparation of augmenting the script to support checking the score on all available category such a ay performance seo etc in a subsequent commit pr close ,refactor
5876,docsinfra switch testpwascore to use headless chrome this is slightly faster currently this doesnt make a noticeable difference since the total time is s but it might add up if we decide to run audit on multiple page pr close ,refactor
5877,docsinfra upgrade lighthouse to pr close ,build
5878,ivy limit usage of global state pr close ,refactor
5879,ivy dont pas lview where only tview is needed pr close ,refactor
5880,docsinfra upgrade cli command doc source to feaac updating angularmaster from clibuildsmaster relevant change in commit range modified helpaddjson helpbuildjson helpupdatejson pr close ,build
5881,ivy remove instruction usage from other instruction remove direct call from one instruction into another move the shared logic into a separate function and remove the state getters from the shared function this pr resolve fw pr close ,refactor
5882,docsinfra add prominent archive mode banner styling fix pr close ,feat
5883,docsinfra fix code hover style in toc fix pr close ,fix
5884,docsinfra fix get started button rendering fix pr close ,fix
5885,docsinfra fix layout of filenotfound page the sidenavcontent element which is also the filenotfound element already ha the necessary padding especially the top padding is important to ensure the element is not obscured by the topbar pr close ,fix
5886,docsinfra clean up global listener after scrollservice test the scrollservice set up some global window listener previously these listener were never unregistered this wa not a problem in the real app because the scrollservice instance exists for the lifetime of a user session in test however where the window instance is among all test the listener would survive the scrollservice test this in addition to the fact that we used a mock viewportscroller which did not return the expected type from getscrollposition caused error to be thrown in unrelated test ie whenever a scroll event wa emitted on window see here for an example failure this commit fix it by adding an ngondestroy method that unregisters the listener and ensuring it is called after each scrollservice test pr close ,test
5887,docsinfra show and style correctly the no result found message pr close ,fix
5888,docsinfra improve searchresults layout on smaller screen previously the searchresults layout wa switch from horizontal to vertical at px yes since some search query can yield more than searchareas even px are too narrow to accomodate a horizontal layout this commit change the breakpoint at which the layout switch to vertical from px to px pr close ,fix
5889,docsinfra remove redundant searchresults style previously searcharea had a default style of display flex but it wa overriden to display block in medium query for maxwidth px and minwidth px a a result it only had display flex between px and px since no flex layout feature are necessary inside searcharea this commit change the style to always be display block ie the default for div element pr close ,fix
5890,docsinfra clean up aiosearchresults style pr close ,refactor
5891,docsinfra make indentation in searchresultsscss consistent with other sc file pr close ,style
5892,docsinfra engine yarn version can now be up to pr close ,build
5893,ivy handle rooted resource path correctly previously resource path beginning with aka rooted path which are not actually absolute filesystem path but are relative to the typescript project root directory were not handled correctly the leading wa stripped and the path wa resolved a if it wa relative but with no containing file for context this led to resource in different rootdirs not being found instead such rooted path are now resolved without typescript help by checking each root directory a test is added to this effect pr close ,fix
5894,ivy ngcc resolve main property path correctly when determining if a main path point to a umd or commonjs format the content of the file need to be loaded and parsed previously it wa assumed that the path referred to the exact filename but did not account for normal module resolution semantics where the path may be missing an extension or refer to a directory containing an indexjs file fw pr close ,fix
5895,ivy remove duplicate forward ref logic remove a file that duplicate the logic for resolving forwardref but isnt being used anywhere this pr resovles fw pr close ,refactor
5896,ivy update icu placeholder format to match closure compiler since googgetmsg doe not process icu postprocessing is required via googinmessageformat and placeholder format used for icu and regular message inside googgetmsg are different the current implementation that assumed the same placeholder format need to be updated this commit update placeholder format used inside icu from placeholder to placeholder to better align with closure icu placeholder that were left a is prior to this commit are now replaced with actual value in postprocessing step inside inpostprocess pr close ,fix
5897,ivy handle ngsp in in translation correctly prior to this commit the  unicode symbol that represents ngsp in translation wa not handled correctly ie wa not replaced with a whitespace thus appearing on a screen this commit add postprocessing and replaces the mentioned symbol with a whitespace pr close ,fix
5898,ivy verify no translation are generated for bound attribute this commit add a test that verifies no translation are generated for bound attribute and also check a a part of the verify function that ve and ivy handle this case the same way pr close ,test
5899,ivy in should not alloc expando slot when there is no new var instart wa calling allocexpando even if there wa new variable created this created a new expando instruction with the value which wa later interpreted a the start of a new expando block instead of just skipping instruction fw resolve pr close ,fix
5900,ivy inconsistent value returned by debugnodecontext fix ivy return value for debugnodecontext not being consistent for the case where there is both a structural directive and a component on a node in viewengine the instance of the component would be returned whereas in ivy the context of the directive is returned also add a couple of extra test case for how debugnodecontext deal with directive this pr resolve fw pr close ,fix
5901,ivy add selfclosing elementcontainer instruction add a new elementcontainer instruction that can be used to avoid two instruction elementcontainerstart and elementcontainerend for ngcontainer that ha textonly content this is particularly useful when we have ngcontainer inside in section this pr resolve fw pr close ,perf
5902,bazel remove unused lockfile the corresponding packagejson file wa removed in cdb it look like the lockfile wa left behind by accident pr close ,refactor
5903,ivy ngcc handle pathmappings to file rather then directory path can be mapped directly to file which wa not being taken into account when computing basepaths for the entrypointfinders now if a pathmapping pattern doe not exist or is a file then we try the containing folder instead fix pr close ,fix
5904,ivy ngcc only find dependency when targeting a single entrypoint previously ngcc had to walk the entire nodemodules tree looking for entrypoints even if it only needed to process a single target entrypoint and it dependency this added up to a few second to each execution of ngcc which is noticeable when being run via the cli integration now if an entrypoint target is provided only that target and it entrypoints are considered rather than the whole folder tree pr close ,perf
5905,ivy ngcc add a cache to the filesystem when profiling ngcc it is notable that a large amount of time is spent dealing with an exception that is thrown and handled internally by f when checking the existence of a file we check file existence a lot in both finding entrypoints and when t is compiling code this commit add a simple cached filesystem which wrap a real filesystem delegate this will reduce the number of call through to fsexists and fsreadfile on the delegate initial benchmark indicate that the cache is miss to hit ratio for exists is about which mean that we save about of the call to fsexistssync note that this implement a nonexpiring cache so it is not suitable for a long lived filesystem where file may be modified externally the cache will be updated if a file is changed or moved via call to filesystem method but it will not be aware of change to the file system from outside the filesystem service for ngcc we must create a new filesystem service for each run of mainngcc and ensure that all file operation including t compilation use the filesystem service this ensures that it is very unlikely that a file will change externally during mainngcc processing pr close ,perf
5906,ivy ngcc remove unwanted logging message this message get called if a format ha already been compiled and we only want the first so the message itself is wrong but it is also not very useful anyway pr close ,fix
5907,ivy handle namespaced import correctly the ngcc tool add namespaced import to file when compiling the ngtsc tooling wa not processing type correctly when they were imported via such namespaces for example export declare class somemodule static withoptions modulewithprovidersɵngccbasemodule in this case the basemodule wa being incorrectly attributed to coming from the current module rather than the imported module represented by ɵngcc fix pr close ,fix
5908,docsinfra increase waiting time to reduce flakiness on ci example failure pr close ,ci
5909,ivy ngcc compute potential dts file from j file if a package delcares a class internally on an ngmodule ngcc need to be able to add a public export to this class type previously if the typing file for the declared is not imported from the typing entrypoint file then ngcc can not find it now we try to guess the dts file from the equivalent j file pr close ,fix
5910,zonejs restore definition of global this partially reverts some change from these broke the gsync of zonejs because we use the output of the typescript compiler directly rather than rely on the rollup commonjs plugin to define the global symbol pr close ,fix
5911,compiler give astwithsource it own visit method astwithsource contains more information that ast and should have it own visit method if desired this implement that pr close ,fix
5912,ivy ngcc resolve pathmapped module correctly nonwildcard pathmappings were not being matched correctly further pathmapped secondary entrypoints that were imported from the associated primary entrypoint were not being martched correctly fix pr close ,fix
5913,core export provider interface that are part of the public api type some of the provider interface that the provider and staticprovider type comprise were not exported from angularcore a a result the doc for these symbol did not appear on angulario even though both provider and staticprovider are part of the public api see also this commit fix it by exporting all necessary provider interface pr close ,fix
5914,ivy remove interpolation instruction make the interpolatex instruction internalonly and remove their use of global state this pr resolve fw pr close ,refactor
5915,bazel revert location of xin output to bazelgenfiles this is needed in g where the translation system is sensitive to the full path of the output for bazel user we dont want this because it would force them to disable a bazel option that prevents using the deprecated ctxnewfile api pr close ,fix
5916,core add automatic migration from renderer to renderer add a schematic and tslint rule that automatically migrate the consumer from renderer to renderer support renaming import renaming property and method argument type casting to renderer mapping all of the method from the renderer to renderer note that some of the renderer method dont map cleanly between renderers in these case the migration add a helper function at the bottom of the file which ensures that we generate valid code with the same return value a before eg here what the migration for createtext look like before class somecomponent createandaddtext const node thisrenderercreatetextthiselementnativeelement hello nodetextcontent world after class somecomponent createandaddtext const node renderercreatetexthelperthisrenderer thiselementnativeelement hello nodetextcontent world function renderercreatetexthelperrenderer any parent any value any const node renderercreatetextvalue if parent rendererappendchildparent node return node this pr resolve fw pr close ,feat
5917,core in template syntax guide make svg example more clear add ee test for svg template example fix template syntax example app linting error runtime exception template type error deprecated type casting deprecated currency pipe example relates to pr close ,docs
5918,zonejs fix typo relates to pr close ,test
5919,bazel allow passing and rewriting an old bazel host update the decision made in this is for the angular indexer inside google the indexer currently pass and ngcwrappedcompile accepts a bazel host to use but because many method are overwritten specially for angular compilation a better approach is to pas an old bazel compiler host and siphon method needed off of it before creating a new host this enables that pr close ,feat
5920,docsinfra update dgenipackages dependency the new version now ha the postprocesshtml package so we dont need it in angularangular any more pr close ,build
5921,ivy move classmap interpolation logic internally add the new classmapinterpolate through classmapinterpolate instruction which handle interpolation inside the class attribute and move the interpolation logic internally this allows u to remove the interpolationx instruction in a followup pr these change also add an error if an interpolation is encountered inside a style tag eg stylewidth value up until now this would actually generate valid instruction because stylemap go through the same code path a classmap which doe support interpolation at runtime however stylemap would set invalid style that look like div stylewidth in viewengine interpolation inside style werent supported either however there wed output invalid style like div styleunsafe even if the content wa trusted pr close ,refactor
5922,ivy verify equality of ngbasedef metadata between compiler and core there no build time dependency from angularcore to angularcompiler so core cant directly refer to compiler type to overcome this limitation there a facade layer defined in the compiler and duplicated in core such that during runtime all type will correctly align there a testcase in the compiler that verifies that all such facade type are compatible across core and compiler such that the core type cant get misaligned with the actual definition in the compiler this suite of test were missing the rbasemetadatafacade facade type so it wa possible for this type to get out of sync pr close ,test
5923,ivy include type parameter for ngbasedef declaration when a class us angular decorator such a input output and friend without an angular class decorator they are compiled into a static ngbasedef field on the class with the typescript declaration of the class being altered to declare the ngbasedef field to be of type ɵɵbasedef this type however requires a generic type parameter that corresponds with the type of the class however the compiler did not provide this type parameter a a result compiling a program where such invalid ngbasedef declaration are present will result in compilation error this commit fix the problem by providing the generic type parameter fix pr close ,fix
5924,bazel update packagesbazeltestngcwrappedngctest test after update to rulesnodejs type are no longer automatically discovered by ngcwrapped which us part of tslibrary so this test needed updating so that the type file it generates is added a an explicit dep pr close ,build
5925,bazel add build incompatiblelistbasedexecutionstrategyselectionfalse flag this option is changed to true in bazel and expose a possible regression in bazel error observed is in npmpackage target packagescommonlocalespackage error homecirclecingpackagescommonlocalesbuildbazel assembling npm package packagescommonlocalespackage failed no usable spawn strategy found for spawn with mnemonic skylarkaction your spawnstrategyor strategy flag are probably too strict visit for migration advises suspect is executionrequirements never schedule this action remotely because it not computationally expensive it just copy file into a directory it not worth copying input and output to a remote worker also dont run it in a sandbox because it resolve an absolute path to the bazelout directory allowing the pack and publish runnables to work with no symlinkprefix see local pr close ,build
5926,bazel remove deprecated rulesnodejs nodemoduleinfo provider pr close ,build
5927,bazel cleanup entrypoint target pr close ,build
5928,bazel update to bazel and fix compat in angularbazel package ctxactionsdeclarefile now used in angularbazel ngmodule rule a ctxnewfile is now deprecated fix error file ngmodulebzl line in expectedouts ctxnewfilectxgenfilesdir ctxlabelname use ctxactionsdeclarefile instead of ctxnewfile use incompatiblenewactionsapifalse to temporarily disable this check this can be worked around with incompatiblenewactionsapi flag but may a well fix it proper so downstream doesnt require this flag due to this code also depset is no longer iterable by default without a flag this required fixing in a few spot in angularbazel fix foo pr close ,build
5929,core handle undefined meta in injectargs in the recent version of the cli we introduced a ctor downleveler tranformer for ve jit build based on the one found in tsickle to fix the tdz issue of forwardref however this caused a regression a the injector is not handling that a position paramtype can be undefined which is bubbled down to and will crash fix pr close ,fix
5930,ivy ngcc handle toplevel helper call in commonjs some format of commonjs put the decorator helper call outside the class iife a statement on the top level of the source file this commit add support to the commonjsreflectionhost for this format pr close ,feat
5931,core update link to external in doc pr close ,docs
5932,ivy properly handle reprojection with an empty set of node to reproject pr close ,fix
5933,ivy attach host element for view created via testbedcreatecomponent prior to this commit host element of a view created via testbedcreatecomponent wa not attached to the component host making it problematic to use testbedcreatecomponent api in component factory which might be used for testing purpose only this behavior is observed in google app test and wa supported by ve so this commit aligns ivy and ve pr close ,fix
5934,bazel allow passing a custom bazel compiler host to ngc compile enable user to pas a custom bazel compilerhost to use for an angular compilation this support user who must override the typescript compiler host pr close ,feat
5935,docsinfra upgrade cli command doc source to edecc updating angularmaster from clibuildsmaster relevant change in commit range modified helpbuildjson helpdocjson pr close ,build
5936,ivy chain host binding instruction add chaining to the property attribute and updatesynthetichostbinding instruction when theyre used in a host binding this pr resolve fw pr close ,perf
5937,docsinfra detect docregions on more file type pug svg yml pr close ,fix
5938,router adjust urltree redirect to replace url if in eager update without this change when using urltree redirects in urlupdatestrategyeager the url would get updated to the target location then redirected this resulted in having an additional entry in the history and thus the back button would be broken going back would land on the url causing a new redirect additionally there wa a bug where the redirect even without urlupdatestrategyeager could create a history with too many entry this wa due to kicking off a new navigation within the navigation cancelling logic with this pr the new navigation is pushed to the next tick with a settimeout allowing the page being redirected from to be cancelled before starting a new navigation related to pr close ,fix
5939,ivy handle icu expression in executeactiononnode when walktnodetree wa refactored the case of icu expression wa forgotten because it wa handled in the else previously this pr fix that to handle it like elementcontainer fw resolve pr close ,fix
5940,ivy ngtsc ngtsccompilerhost should cope with directory that look like file the t compiler is likely to test path with extension and try to load them a file therefore fileexists and method that rely on it need to be able to distinguish between real file and directory that have path that look like file this came up a a bug in ngcc when trying to process ngxvirtualscroller which relies upon a library called tweenjstweenjs pr close ,fix
5941,serviceworker remove redundant cache operation at this point the response will have been cached or scheduled to be cached in other code path so caching it again is redundant pr close ,refactor
5942,serviceworker cache opaque response when request exceeds timeout threshold pr close ,fix
5943,serviceworker cache opaque response in data group with freshness strategy previously presummably due to a typo the oktocacheopaque argument of datagroupcacheresponse wa essentially never taken into account since opaque response have a non status code and thus resok is always false this commit fix the typo which allows opaque response to be cached when oktocacheopaque is true ie in data group using the freshness strategy fix pr close ,fix
5944,serviceworker make the caching behavior more explicit this commit doesnt change the behavior wrt caching but it make it more explicit that only nontimedout response are cached in case of a timeout re would be set to a programmatically created response so cacheresponse which check for resok would not have cached it anyway but this make change make it more explicit and more similar to the equivalent part in handlefetchwithfreshness pr close ,refactor
5945,serviceworker better simulate opaque request previously opaque response where handled a little differently than other response from the mock server more specifically they were not tracked so no assertion could be made for them and their body mixin method such a arraybuffer json text would throw an error due to body being null this commit ensures opaque response are also captured on the mock server and also change body mixin method to better simulate the specd behavior these improvement will be necessary to test caching of opaque response in a subsequent commit pr close ,test
5946,serviceworker properly reset mock server state for each test pr close ,test
5947,serviceworker simplify test helper pr close ,test
5948,serviceworker remove obsolete async test helper jasmine natively support returning promise from spec function for quite some time now we dont need special async helper pr close ,test
5949,ivy incorrect namespace for root node created through viewcontainerref currently in ivy whenever we encounter a new namespace we set it in the global state so that all subsequent node are created under the same namespace next time a template is run the namespace will be reset back to html this break down if the last node that wa rendered wa under the svg or mathml namespace and we create a component through viewcontainerrefcreate because the next template function hasnt run yet and it hasnt had the chance to update the namespace the result is that the root node of the new component will retain the wrong namespace and may not end up rendering at all eg if were trying to show a div inside the svg namespace this issue ha the potential to affect a lot of apps because all component inserted through the router also go through viewcontainerrefcreate pr close ,fix
5950,docsinfra upgrade cli command doc source to edb updating angularmaster from clibuildsmaster relevant change in commit range modified helpgeneratejson pr close ,build
5951,docsinfra upgrade cli command doc source to abb updating angularmaster from clibuildsmaster relevant change in commit range modified helpdocjson helptestjson pr close ,build
5952,ivy ngcc dont crash if entrypoints have multiple invalid dependency if an entrypoint ha missing dependency then it can not be processed and is marked a invalid similarly if an entrypoint ha dependency that have been marked a invalid then that entrypoint too is invalid in all these case ngcc should quietly ignore these entrypoints and continue processing what it can previously if an entrypoint had more than one entrypoint that wa transitively invalid then ngcc wa crashing rather than ignoring the entrypoint pr close ,fix
5953,ivy dont mask error by calling lifecycle hook after a crash the angular runtime frequently call into user code for example when writing to a property binding since user code can throw error call to it are frequently wrapped in a tryfinally block in ivy the following pattern is common typescript enterview try callusercode finally leaveview this ha a significant problem however leaveview ha a side effect it call any pending lifecycle hook that mightve been scheduled during the current round of change detection generally it a bad idea to run lifecycle hook after the application ha crashed the application is in an inconsistent state directive may not be instantiated fully query may not be resolved binding may not have been applied etc invariant that the app code relies upon may not hold further crash or broken behavior are likely frequently lifecycle hook are used to make assertion about these invariant when these assertion fail they will throw and swallow the original error making debugging of the problem much more difficult this commit modifies leaveview to understand whether the application is currently crashing via a parameter safetorunhooks this parameter is set by modifying the above pattern typescript enterview let safetorunhooks false try callusercode safetorunhooks true finally leaveview safetorunhooks if callusercode crash then safetorunhooks will never be set to true and leaveview wont call any further user code the original error will then propagate back up the stack and be reported correctly a test is added to verify this behavior pr close ,fix
5954,ivy ngcc do not analyze file outside the current package our module resolution prefers j file over dts file because occasionally library publish their typing in the same directory structure a the compiled j file ie adjacent to each other the standard t module resolution would pick up the typing file and add that to the tsprogram and so they would be ignored by our analyzer but we need those j file if they are part of the current package but this meant that we also bring in j file from external import from outside the package which is not desired this wa happening for the firestorage entypoint that wa importing the firebasestorage path in this commit we solve this problem for the case of import coming from a completely different package by saying that any file that is outside the package root directory must be an external import and so we do not analyze those file this doe not solve the potential problem of import between secondary entrypoints within a package but so far that doe not appear to be a problem pr close ,fix
5955,ivy ngcc pas bundle to decorationanalyzer rather than passing a number of individual argument we can just pas an entrypointbundle which already contains them this is also a precursor to using more of the property in the bundle pr close ,refactor
5956,ivy ngcc no need to pas iscore explicitly it is part of entrypointbundle so we can just use that which is generally already passed around pr close ,refactor
5957,ivy ngcc expose the entrypoint from the entrypointbundle interface this will allow user of the entrypointbundle to use some of the entrypoint property without u having to pas them around one by one pr close ,refactor
5958,ivy ngcc pas whole entrypoint object to makeentrypointbundle this simplifies the interface somewhat but also allows u to make use of other property of the entrypoint object in the future pr close ,refactor
5959,ivy ngcc support bare array constructor param decorator previously we expected the constructor parameter decorator property to be an array wrapped in a function now we also support an array not wrapped in a function pr close ,fix
5960,ivy ngcc infer entrypoint typing from format path some package do not actually provide a typing field in their packagejson but typescript naturally infers the typing file from the location of the javascript source file this commit modifies ngcc to do a similar inference when finding entrypoints to process fix fw pr close ,fix
5961,ivy customize ngcc via configuration file there are scenario where it is not possible for ngcc to guess the format or configuration of an entrypoint just from the file on disk such scenario include unwanted entrypoints a spurious packagejson make ngcc think there is an entrypoint when there should not be one deepimport entrypoints some package allow deepimports but do not provide packagejson file to indicate to ngcc that the imported path is actually an entrypoint to be processed invalidmissing packagejson property for example an entrypoint that doe not provide a valid property to a required format the configuration is provided by one or more ngccconfigjs file if placed at the root of the project this file can provide configuration for named package and their entrypoints that have been npm installed into the project if published a part of a package the file can provide configuration for entrypoints of the package the configured of a package at the project level will override any configuration provided by the package itself pr close ,feat
5962,ivy ngcc refactor mock filesystems to make each spec independent previously each test relied on large shared mock filesystems which make it difficult to reason about what is actually being tested this commit break up these big mock filesystems into smaller more focused chunk pr close ,test
5963,ivy ngcc remove use of mockfs in test now that ngcc us a filesystem throughout we no longer need to rely upon mocking out the real filesystem with mockfs pr close ,test
5964,ivy rename applyxyz to executeactiononxyz for clarity pr close ,refactor
5965,ivy remove code duplication from applyxyz function pr close ,refactor
5966,ivy simplify walktnodetree method for readability pr close ,refactor
5967,ivy implement a virtual filesystem layer in ngtsc ngcc to improve cross platform support all file access and path manipulation is now done through a well known interface filesystem for testing a number of mockfilesystem implementation are provided these provide an inmemory filesystem which emulates operating system like osx unix and window the current file system is always available via the static method filesystemgetfilesystem this is also used by a number of static method on absolutefspath and pathsegment to avoid having to pas filesystem object around all the time the result of this is that one must be careful to ensure that the filesystem ha been initialized before using any of these static method to prevent this happening accidentally the current file system always start out a an instance of invalidfilesystem which will throw an error if any of it method are called you can set the current filesystem by calling filesystemsetfilesystem during testing you can call the helper function initmockfilesystemos which take a string name of the o to emulate and will also monkeypatch aspect of the typescript library to ensure that t is also using the current filesystem finally there is the ngtsccompilerhost to be used for any typescript compilation which us a given filesystem all test that interact with the filesystem should be tested against each of the mock filesystems a series of helper have been provided to support such test runineachfilesystem wrap your test in this helper to run all the wrapped test in each of the mock filesystems addtestfilestofilesystem use this to add file and their content to the mock file system for testing loadtestfilesfromdisk use this to load a mirror image of file on disk into the inmemory mock filesystem loadfakecore use this to load a fake version of angularcore into the mock filesystem all ngcc and ngtsc source and test now use this virtual filesystem setup pr close ,refactor
5968,core update code sample for output attribute the current code sample for directive output attribute is incorrect a it doe not provide the usage of output attribute rather it provides the usage of exportas attribute this commit update the code sample by correcting the code sample with correct usage of output attribute fix related work this commit continues from the unfinished work pr close ,docs
5969,ivy chain multiple inexp call implement function chaining for inexp to reduce the output size fw resolve pr close ,perf
5970,docsinfra separate vendorspecific cs selector in some vendorspecific selector were combined in one ruleset a pointed out in this comment this would result in the whole ruleset being ignored by all browser since one invalidunrecognized selector invalidates the declaration block this commit fix it by defining a separate ruleset per selector the list of vendorspecific selector is also adjusted to better target the currently supported browser pr close ,fix
5971,docsinfra clean up some style pr close ,style
5972,ivy use fataldiagnosticerror to throw more descriptive error while extracting query information prior to this commit the logic to extract query information from class field used an instance of regular error class to throw an error a a result some useful information like reference to a specific field wa missing replacing error class with fataldiagnosticerror one make the error more verbose that should simplify debugging pr close ,refactor
5973,core change from cs event to dom event pr close ,docs
5974,bazel update packagesbazeltestngcwrappedngctest test after update to rulesnodejs type are no longer automatically discovered by ngcwrapped which us part of tslibrary so this test needed updating so that the type file it generates is added a an explicit dep pr close ,build
5975,bazel add build incompatiblelistbasedexecutionstrategyselectionfalse flag this option is changed to true in bazel and expose a possible regression in bazel error observed is in npmpackage target packagescommonlocalespackage error homecirclecingpackagescommonlocalesbuildbazel assembling npm package packagescommonlocalespackage failed no usable spawn strategy found for spawn with mnemonic skylarkaction your spawnstrategyor strategy flag are probably too strict visit for migration advises suspect is executionrequirements never schedule this action remotely because it not computationally expensive it just copy file into a directory it not worth copying input and output to a remote worker also dont run it in a sandbox because it resolve an absolute path to the bazelout directory allowing the pack and publish runnables to work with no symlinkprefix see local pr close ,build
5976,bazel remove deprecated rulesnodejs nodemoduleinfo provider pr close ,build
5977,bazel cleanup entrypoint target pr close ,build
5978,bazel update to bazel and fix compat in angularbazel package ctxactionsdeclarefile now used in angularbazel ngmodule rule a ctxnewfile is now deprecated fix error file ngmodulebzl line in expectedouts ctxnewfilectxgenfilesdir ctxlabelname use ctxactionsdeclarefile instead of ctxnewfile use incompatiblenewactionsapifalse to temporarily disable this check this can be worked around with incompatiblenewactionsapi flag but may a well fix it proper so downstream doesnt require this flag due to this code also depset is no longer iterable by default without a flag this required fixing in a few spot in angularbazel fix foo pr close ,build
5979,docsinfra return full width highlight to sidenav pr close ,fix
5980,bazel exclude all angular schematic folder from metadata build fix pr close ,fix
5981,ivy integrate indexing pipeline with ngtscprogram add an indexingcontext class to store indexing information and a transformer module to generate indexing analysis integrate the indexing module with the rest of ngtscprogram and add integration test close pr close ,feat
5982,ivy support equality operator in static interpreter previously the usage of equality operator and wa not supported in ngtscs static interpreter this commit add support for such operator and includes test fix pr close ,fix
5983,serviceworker registration failed on safari since angular v and commit bddae parseurl can be called without relativeto thus new url can be called with relativeto undefined safari doe not like it and the service worker registration fails j new url ok new url undefined typeerror close pr close ,fix
5984,bazel remove unsupported cs preprocessors from ng new under bazel we dont yet support stylus and le and thus we should not offer the user to generate application which are known not to work close pr close ,fix
5985,bazel update ng new schema to match the current ng new schema of schematicsangular the schema used in ngnew bazel includes several outdated option with this update we match the current version of schematicsangular relates to pr close ,fix
5986,ivy chain multiple attribute instruction similarly to what we did in these change implement chaining for the attribute instruction this pr resolve fw pr close ,perf
5987,ivy injecting incorrect renderer into child component in viewengine injecting a renderer return a renderer that is specific to the particular component however in ivy we inject the renderer for the parent view instead this cause it to set incorrect ngcontent attribute when creating element through the renderer the issue come from the fact that the renderer is created according to the current lview but because di happens before weve entered the lview of the component thats injecting the renderer we end up with one thats one level up we work around the issue by finding the lview that corresponds to the previousorparenttnode inside of the parent view and associating the renderer with it this pr resolve fw pr close ,fix
5988,docsinfra change typography font size to be rem based pr close ,feat
5989,compiler fix element not making a new parsesourcespan change the element constructor in rast to create a new parsesourcespan when regenerating it rather than extending an object which doe not contain the overloaded tostring pr close ,fix
5990,ivy sync viewrefs between multiple viewcontainerrefs previously multiple viewcontainerref instance obtained by injecting viewcontainerref multiple time each had private state that could be out of sync with actual lcontainer if view were insertedremovedqueried across the different instance in particular each instance had it own array which tracked viewrefs inserted via that instance this commit move the viewrefs array onto the lcontainer itself so that it can be shared across multiple viewcontainerref instance a test is added that verifies viewcontainerrefs now provide a consistent view of the container fw resolve pr close ,fix
5991,docsinfra upgrade cli command doc source to adeb updating angularmaster from clibuildsmaster relevant change in commit range modified helpgeneratejson pr close ,build
5992,ivy ensure that change to component resource trigger incremental build optimization to skip compiling source file that had not changed did not account for the case where only a resource file change such a an external template or style file now we track such dependency and trigger a recompilation if any of the previously tracked resource have changed this will require a change on the cli side to provide the list of resource file that changed to trigger the current compilation by implementing compilerhostgetmodifiedresourcefiles close pr close ,fix
5993,ivy removing unused property from in interface fix pr close ,refactor
5994,ivy make bind an internalonly function the function bind ha been internalized wherever it wa needed this pr make sure that it is no longer publicly exported fw resolve pr close ,refactor
5995,upgrade provide unit test helper for wiring up injector add two new helper function that can be used when unit testing angular service that depend upon upgraded angularjs service or vice versa the function return a module angularjs or ngmodule that is configured to wire up the angular and angularjs injector without the need to actually bootstrap a full hybrid application this make it simpler and faster to unit test service pr close ,feat
5996,compiler stringify objectcreatenull token pr close ,fix
5997,docsinfra upgrade angularcli to beta pr close ,build
5998,compiler allow parsing template with custom leadingtriviachars move the definition leadingtriviachars included in parsing a template to the parameter of parsetemplate this allows overriding of the default leadingtriviachars which is needed by some pipeline like the indexing pipeline because leadingtriviachars may throw off the recorded span of selector pr close ,refactor
5999,compiler recursive ast expression visitor not passing context currently the recursiveastvisitor that is part of the template expression parser doe not always properly pas through the context that can be specified when visting a given expression only a handful of ast type pas through the context while others are accidentally left out this cause unexpected and inconsistent behavior and basically make the context parameter not usable if the type of template expression is not known eg the template variable assignment migration currently depends on the recursiveastvisitor but sometimes break if developer use thing like conditionals in their template variable assignment fix pr close ,refactor
6000,ivy quote dot in directive input and output a temporary check is in place to determine whether a key in an object literal need to be quoted during emit previously only the presence of a dash caused a key to become quoted this however is not sufficient for angularflexlayout to compile properly a it ha dot in it input this commit extends the check to also use quote when a dot is present fix pr close ,fix
6001,ivy avoid unnecessary function call in in instruction currently the placeholder parameter inside inlocalize is defaulted to which mean that well always hit the objectkeys call below since it very likely that we wont have placeholder in the majority of string these change add an extra guard so that we dont hit it on every invocation pr close ,perf
6002,ivy improve error message when ngmodule property are not array pr close ,fix
6003,ivy evaluate non existing property access a undefined close pr close ,fix
6004,ivy chain multiple property instruction currently each property binding generates an instruction like this propertyprop ctxvalue propertyprop ctxvalue the problem is that were repeating the call to property for each of the property since the property instruction return itself we can chain all of the call which is more compact and it look like this propertyprop ctxvalueprop ctxvalue these change implement the chaining behavior for regular property binding and for synthetic one however interpolated one are still handled like before because they use a separate instruction this pr resolve fw pr close ,perf
6005,languageservice remove nglshost ngls dependency nglshost angularlanguageservicehost ngls angularlanguageservice nglshost should not depend on ngls because it introduces circular dependency instead the gettemplateast and gettemplatastatposition method should be moved to nglshost and exposed a public method this remove the circular dependency and also remove the need for the awkward setsite method in nglshost pr close ,refactor
6006,docsinfra move autolink filter to dedicated directory these filter have generic name eg filterpipes which do not make their purpose obvious moving them to a dedicated autolinkfilters directory should help with that pr close ,refactor
6007,docsinfra do not autolink to the common previously our autolinking feature would match in url such a to the common package and automatically create a link to that which wa undesirable while it is possible to work around that via code classnoautolink most people didnt even realize the issue since in this case it is possible to reliably know it is a false match this commit fix it by applying a custom autolink filter that ignores all doc for if it come before fix pr close ,fix
6008,docsinfra upgrade cli command doc source to abf updating angularmaster from clibuildsmaster relevant change in commit range modified helpdocjson pr close ,build
6009,ivy index identifier discovered in template add support for indexing of property read method call in a template visit ast of template syntax expression to extract identifier child of pr close ,feat
6010,ivy move bind instruction into inexp inexp now us bind internally rather than having the compiler generate it in order to bring it in line with other function like textbinding property fw resolve pr close ,refactor
6011,ivy reprojected icu expression node when creating embedded view when using createembeddedview after the creation of an icu expression the node for the current selected case were not reprojected only the anchor comment node wa moved to the new location now we reproject correctly all the child node of an icu expression when an anchor comment node is projected fw resolve pr close ,fix
6012,docsinfra fix search result header color pr close ,fix
6013,bazel builder workspace should use nodejs v the generated bazel workspace by the angularbazel builder should use the latest stable nodejs version this is necessary because some package like seleniumwebdriver which are part of the default bazel setup in order to support ng ee depend on a minimum nodejs version of this mean that running ee test in a plain new bazel cli project ng new projectname collectionangularbazel error command error seleniumwebdriveralpha the engine node is incompatible with this module expected version got error found incompatible module pr close ,fix
6014,docsinfra check and track payload size for testaiolocal and testaiolocalivy pr close ,ci
6015,docsinfra run pwa score test after unitee test previously we run the pwa score test before unitee test because the latter would destroy the dist directory required by the former since cli unitee test no longer detroy the dist directory so it is now safe to run the unitee test first this is preferrable since they are conceptually lowerlevel and any error message in case of breakage are more specificactionable related discussion about cli behavior angularangularcli angularangularcli pr close ,ci
6016,ivy ngcc recognize static property on the outer symbol in e package that have been compiled using an older version of typescript can have their decorator at the toplevel of the e bundle instead of inside the iife that is emitted for the class before this change ngcc only took static property assignment inside the iife into account therefore missing the decorator that were assigned at the toplevel this commit extends the e host to look for static property in two place testcases for all bundle format that contain e have been added to ensure that this work in the various flavour a patch is included to support umd bundle the umd factory affect how typescript bind the static property to symbol see the docblock of the patch function for more detail pr close ,feat
6017,ivy update ɵɵtextbinding to not take index split core functionality off into a shared internal function ɵɵtextbinding will no longer require an index alters the compiler to stop generating an index argument for the instruction update test update some usage of ɵɵtextbinding in in to use the helper function instead pr close ,refactor
6018,ivy setup boilerplate for component indexing api set up the skeleton for a compiler api that index component and their template on an independent indexing step part of pr close ,feat
6019,languageservice remove any in getquickinfoatposition pr close ,fix
6020,ivy remove lview argument from locatedirectiveorprovider the dis locatedirectiveorprovider function operates on tview tnode data structure only so doesnt need to access lview this refactoring change the argument list so the mentioned function take le info to do it work this refactoring is also mandatory for the upcoming query matching move to tview pr close ,refactor
6021,ivy dont throw when attempting to destroy a destroyed componentref currently in ivy we throw when attempting to destroy a componentref that ha been destroyed however in viewengine we didnt which can cause some test to break these change remove the error to match viewengine these change resolve fw pr close ,fix
6022,ivy ngcc capture entrypoints in toplevel pathmapped folder the entrypointfinder computes the base path to consider when searching for entrypoints when there are pathmappings provided it work out the best top level basepaths that cover all the potential mapping if this computed basepath happens to coincide with an entrypoint path itself then we were missing it now we check for an entrypoint even at the basepath itself related to pr close ,fix
6023,docsinfra update browserlist configuration file more specifically remove chrome which wa needed for googlebot support but not any more remove ie because we dont expect developer to be using them expand support from last version to last major version pr close ,build
6024,aio add missing description to devto link pr close ,docs
6025,core temporarily remove deprecated jsdoc tag for a textbedstaticget overload followup to which did the same for testbed but testbedstatic wa necessary too pr close ,fix
6026,docsinfra enable only vertical scrolling for contributor bio auto will enable scrolling only when needed overflowy will ensure to keep the scrolling horizontally only pr close ,fix
6027,docsinfra upgrade cli command doc source to bee updating angularmaster from clibuildsmaster relevant change in commit range modified helpbuildjson pr close ,build
6028,compilercli fix failing ivy template compliance test commit beffddcdfccebbaae ha been created before cbdafeeafabebad landed and therefore the newly created compliance test wa using an outdated expectation this commit update the compliance test to no longer contain the outdated expectation pr close ,test
6029,ivy unable to bind to implicit receiver in embedded view to provide some context the implicit receiver is part of the parsed angular template ast any property read in binding interpolation etc read from a given object usually the component instance in that case there is an implicit receiver which can also be specified explicitly by just using this eg html ngtemplatethismypropertyngtemplate this work a expected in ivy and view engine but break in case the implicit receiver is not used for property read for example html mydir myfngreetfnbindthismydir in that case the this will not be properly translated into the generated template function code because the ivy compiler currently always treat the ctx variable a the implicit receiver this is not correct and break compatibility with view engine rather we need to ensure that we retrieve the root context for the standalone implicit receiver similar to how it work for property read a seen in the example above with thismyproperty note that this requires some small change to the expressionconverter because we only want to generate the eenextcontent instruction if the implicit receiver is actually usedneeded view engine determines if that is the case by recursively walking through the converted output ast and checking for usage of the ovariableco variable see herevecheck this would work too for ivy but involves most likely more code duplication since template are isolated in different function and it another pas through the output ast for every template expression vecheck resolve fw pr close ,fix
6030,ivy call factory function with correct type for derived class in a derived service class with no decorator and therefore no factory of it own the factory function of the base class will be used instead previously this logic had a bug where the factory function would be called with no argument which would incorrectly create an instance of the base class this commit add logic to call the base class factory and pas the type of the derived class which will correctly construct an instance of the derived class using the base class factory a test is also added to verify correctness of this behavior pr close ,fix
6031,ivy fix type of factory function to allow explicit type factory function written by the compiler optionally allow an explicit type to be passed if called with this type an instance of the given type will be created instead of the type for which the factory wa generated this is used to power inheritance of angular type a if the constructor of a class is inherited from it superclass then the factory function of the superclass must be used it ha all the di info to construct an instance of the derived class this commit adjusts typing in a few place to allow factory function to be called with this extra type parameter pr close ,refactor
6032,ivy distinguish inherited injectable defs by token in older browser such a ie inheritance of static property on class type is implemented by copying the property this make hasownproperty unreliable for checking if a static property is defined directly on a class or is inherited this cause problem when trying to read the nginjectabledef property of inherited service a in ie even inherited definition will appear to be local instead the token property on nginjectabledef can be leveraged to detect when a definition is read which doesnt belong to the type itself pr close ,fix
6033,ivy require token for nginjectabledef the compiler generates a token field when it emits an nginjectabledef but this field wa not required by defineinjectable or the injectabledef interface nor wa it added by injectiontoken this commit make token required and add it where missing pr close ,feat
6034,bazel do not modify tsconfigjson before this change user tsconfigjson is cloned and some option controlled by bazel are removed otherwise bazel would complain about warning your tsconfigjson file specifies option which are overridden by bazel compileroptionstarget and compileroptionsmodule are controlled by downstream dependency such a tsdevserver compileroptionstyperoots is always set to the type subdirectory of the nodemodules attribute compileroptionsrootdir and compileroptionsbaseurl are always the workspace root directory since the warning ha been removed in rulestypescriptdd there no need to clone and backup tsconfigjson pr close ,fix
6035,docsinfra layout ui polish pr close ,feat
6036,docsinfra upgrade cli command doc source to dbab updating angularmaster from clibuildsmaster relevant change in commit range modified helpbuildjson helpgeneratejson helpnewjson helpservejson helptestjson pr close ,build
6037,core add missing static flag to viewinsertion test view query ddeceacbecbdbad ha been created before the change to the viewchild and contentchild decorator meaning that it still us the query without the static flag this result in failure in master because ha been merged pr close ,test
6038,ivy fix strict null check failure in ngcc test dceeacecfedbabddbc ha been created a few day ago and wasnt rebased on top of recent change that introduces a commonjs host this mean that test for the commonjs host havent been updated to work with the change from from and now fail in master pr close ,test
6039,ivy ngcc should process undecorated base class currently undecorated class are intentionally not processed with ngcc this is causing unexpected behavior because decorator handler such a basedefts are specifically interested in class definition without toplevel decorator so that the base definition can be generated if there are angularspecific class member in order to ensure that undecorated baseclasses work a expected with ivy we need to run the decorator handler for all toplevel class declaration not only for those with decorator this is similar to when ngtsc run decorator handler when analyzing sourcefiles resolve fw fix pr close ,fix
6040,ivy ngcc prevent crash for package without main property when determining the module type of a bundle pointed to by the main property ngcc need to read the bundle to figure out if it is commonjs or umd format however when the main property doe not exist ngcc would crash while determining the path to the main bundle file this commit fix the crash by checking if the main property is present at all before attempting to derive a full path to the bundle file fix fix fw pr close ,fix
6041,docsinfra update angular to vnext and angularmaterial to v pr close ,build
6042,docsinfra update angularcli to v this restores named lazy chunk which were broken during betarc ie the lazy chunk were named pr close ,build
6043,ivy correctly set tviewfirstchild with runtime in tviewfirstchild wa defined a the first node with index but when we use runtime in then the instruction instart can be the one with index and the first node will be index or more with this fix we set tviewfirstchild when we see the first node with index or later if tviewfirstchild is still null fw resolve pr close ,fix
6044,ivy remove repeated getlview call pr close ,refactor
6045,ivy improve debug message for assertdatainrange pr close ,refactor
6046,docsinfra avoid hardcoding url to redirect on archive mode related discussion pr close ,refactor
6047,docsinfra do not redirect doc url on archive deployment to avoid showing outdated info such a event resource etc but still allow people to see doc for older version we redirect nondocumentation url to doc recentlyish we have added documentation content under the cli and start pathprefixes but we havent added them to the list of documentation url that should not be redirected a a result on archive deployment eg they are redirected to doc making it impossible to see the documentation for these version unless you know about the modestable workaround this commit fix it by adding cli and start to the list of documentation url that are excluded from redirection pr close ,fix
6048,docsinfra make archive redirection test dry pr close ,refactor
6049,bazel update to nodejs rule entrypoint attribute of nodejsbinary rollupbundle is now a label symlinking of nodemodules for yarninstall temporarily disabled except for integrationbazel until the fix for make it into a future bazel release pr close ,build
6050,bazel update to nodejs rule bazel nodejs rule ha new feature to symlink nodemodules with yarninstall and bazel includes new manageddirectories feature which enables this pr close ,build
6051,ivy add acceptance test for view insertion this work is being done ahead of change to how view insertion is done in ivy in accordance with this design document the idea is to make sure we have acceptance test ahead of that change pr close ,test
6052,ivy static evaluation of typescript spread helper the usage of array spread syntax in source code may be downleveled to a call to typescript spread helper function from tslib depending on the option downleveliteration and emithelpers this prof problematic for ngcc when it is processing e format a the static evaluator wont be able to interpret those call a custom foreign function resolver is not sufficient in this case a tslib may be emitted into the library code itself in that case a helper function can be resolved to an actual function with body such that it wont be considered a foreign function instead a reflection host can now indicate that the definition of a function corresponds with a certain typescript helper such that it becomes statically evaluable in ngtsc resolve pr close ,feat
6053,ivy inherently call ɵɵselect refactors compiler to stop generating ɵɵselect instruction alters template execution to always call the equivalent of ɵɵselect before running a template in update mode update test to not check for or call ɵɵselect the goal here is to reduce the size of generated template pr close ,refactor
6054,common expose the httpuploadprogressevent interface a public api fix pr close ,fix
6055,serviceworker avoid uncaught rejection warning when registration fails service worker api navigatorserviceworkerregister can fail in multiple way for example in chrome with an unstable network connection you can have the following error an unknown error occurred when fetching the script in the current state it creates an uncaught in promise typeerror style of error which can not be caught by the user on his own i think it better to log the error over raising an error that can not be caught pr close ,fix
6056,docsinfra fail hard if the cli source is not what we expect previously we just logged a warning but we should fail to prevent silently allowing the doc to look wrong if something change on the cli side of thing pr close ,build
6057,docsinfra upgrade cli command doc source to cccf updating angularmaster from clibuildsmaster relevant change in commit range modified helpservejson pr close ,build
6058,docsinfra remove unneeded allowemptycodegenfiles option in ivy mode previously when switching to ivy mode eg to run test on ci we had to add allowemptycodegenfiles true to the angularcompileroptions in tsconfigappjson this isnt necessary any more potentially since we switched to dynamic import for loading lazy module in so this commit remove it from the switchtoivyjs script pr close ,build
6059,docsinfra white background and corresponding figure update pr close ,feat
6060,ivy remove check for function type in renderstringify the renderstringify function show up pretty high in the cpu profiling turn out that this function contained unnecessary typeof check for function type the check only make sense is used in error message the pr also alligns how ivy and view engine stringify function used in interpolation pr close ,perf
6061,ivy debugnodeattributes not preserving attribute name casing in ivy the debugnodeattributes is populated directly from the dom but the problem is that the browser will lowercase all attribute name these change preserve the case by first going through the tnodeattrs populating the map with the casesensitive name and saving a reference to the lower case name afterwards when were going through the attribute from the dom we can check whether weve mapped the attribute by it casesensitive name already this pr resolve fw pr close ,fix
6062,ivy trigger directive input for each template creation a directive input that doesnt use a binding is triggered during the creation phase but this wa only executed at the first template pas and not on subsequent one now only the creation of the update instruction is executed on the first template pas anything else is executed every time a template is created fw resolve pr close ,fix
6063,docsinfra fix cli command github link the view link were broken because the version used to compute the git tag for the github url included a build sha now we clean that off before using it in the url the link are to the json schema that defines the documentation for the command this is accurate but confusing because the content for the long description is stored in a separate markdown file referenced from this schema file this commit add a second set of link for the long description if it exists which link directly to the markdown file close pr close ,build
6064,ivy remove ɵɵelementattribute instruction pr close ,refactor
6065,ivy dont project removed placeholder with runtime in when translated content wa projected all of the content wa reappended even the placeholder that had been removed in the translation to avoid that we added a new flag on tnode that specifies that a node is detached in which case it should be ignored by the projection fw resolve pr close ,fix
6066,bazel exclude component schematic from build see without this bazel attempt to build schematic template a srcs pr close ,fix
6067,ivy error for empty binding on ngtemplate fix ivy throwing an error if it run into an empty property binding on an ngtemplate eg ngtemplate somethingngtemplate by not generating an update instruction for it fix this pr resoves fw pr close ,fix
6068,ivy ngcc use space in overwritten packagejson content for readability when ngcc process an entrypoint it update packagejson with metadata about the processed format previously it overwrote the packagejson with the stringified json object without space this made the file difficult to read for example when looking at the file while debugging an ngcc failure this commit fix it by using space in the new packagejson content pr close ,fix
6069,bazel load global stylesheet in dev and prod global stylesheet should be injected a a link tag in indexhtml for both dev and prod app pr close ,fix
6070,ivy remove ɵɵelementproperty instruction remove ɵɵelementproperty instruction update test that were using it note there is one test under renderintegrationspects that is commented out and need to be reviewed basically i could not find a good why to test what it wa doing because it wa doing thing that i am not sure we could generate in an acceptance test pr close ,refactor
6071,ivy support ngcontent in runtime in translation added a new syntax for projection ¤ will represent ngcontent node so that we can treat them specifically when we enter an in block with the instruction instart a new delayprojection variable is set to true to prevent the instruction projection from projecting the node once we reach the inend instruction and encounter a projection in the translation we will project it node if a projection wa removed from a translation then it node wont be projected at all the variable delayprojection is restored to false at the end of inend so that it doesnt stop projection outside of in block fw resolve pr close ,feat
6072,ivy allow empty case for icu expression we used to ignore empty string for optimization purpose but it turn out that empty string are also valid value for icu case and we shouldnt ignore those fw resolve pr close ,fix
6073,serviceworker mention that http is required unless on localhost fix pr close ,docs
6074,ivy in ngdevmode use named object literal and array for easier debuggingprofiling pr close ,feat
6075,ivy rename debugts to lviewdebugts pr close ,refactor
6076,ivy type checking handle implicit ngtemplate variable when an ngtemplate element ha a variable declaration without a value it is assigned the value of the implicit property in the embedded view context the template compiler insert a property access to implicit for template variable without a value however the typecheck code generation logic did not this resulted in incorrect typechecking code being generated fix fw pr close ,fix
6077,ivy type checking apply attribute to property name mapping some html attribute dont correspond to their dom property name in which case the runtime will apply the appropriate transformation when assigning a property using it attribute name one example of this is the for attribute for which the dom property is named htmlfor the typechecking machinery in ngtsc must also take this mapping into account a it generates typecheck code in which unclaimed property binding are assigned to property of subtypes of htmlelement fix fix fw pr close ,fix
6078,ivy limit allocation of lqueries object before this change we would systematically call lqueriesclone when executting elementstart elementcontainerstart instruction this wa often unnecessary a lqueries can be mutated under condition only we are crossing an element that ha directive with content query new query must be added we are descending into element hierarchy creating a child element of an existing element and the current lqueries object is tracking shallow query shallow query are removed with this pr lqueiresclone is only done when needed and this gratelly reduces number of lqueries object created in the expanding row benchmark number of allocated and often gced just after lqueries is reduced from k k this represents over mb of memory that is not allocated pr close ,perf
6079,core cleanup code with sideeffects which wa preventing treeshaking pr close ,refactor
6080,core fix typo in style binding comment pr close ,docs
6081,ivy add ɵɵupdatesynthetichostbinding command refactors ɵɵcomponenthostsyntheticproperty into ɵɵupdatesynthetichostbinding to better align it with other new instruction pr close ,refactor
6082,ivy correctly project bare icu expression projecting bare icu expression failed because we would assume that component content node would be projected later and doing so at that point would be wasteful but icu node are handled independently and should be inserted immediately because they will be ignored by projection fw resolve pr close ,fix
6083,ivy add back ngdevmode to rinjector import the definition so that it doesnt cause breakage with closure conformance rule fw resolve pr close ,fix
6084,docsinfra compile module first for ivy when loading element module in view engine ngmodule factory are created for each ngmodule and loaded when the module is requested ivy doesnt generate the factory by design and only load the module class so it must be compiled after being loaded pr close ,docs
6085,docsinfra update loading of custom element to use dynamic import syntax remove the usage of ngmodulefactoryloader and stringbased import for lazy loading pr close ,refactor
6086,docsinfra add v in version dropdown fix pr close ,fix
6087,ivy debugnodequeryall matching sibling node inside of debugnodequeryall we walk through all of the descendant of the node that were querying against however the logic that walk sideways through a node sibling also applies to the root node this mean that eventually well match against it node a well which will give u invalid result these change add an extra check to ensure that we arent matching against the sibling of the root node this pr resolve fw pr close ,fix
6088,docsinfra remove deprecated buffer usage from stackblitz builder fix pr close ,docs
6089,ivy unable to project into multiple slot with default selector with view engine it wa possible to declare multiple projection definition and to programmatically project node into the slot eg html ngcontentngcontent ngcontentngcontent using viewcontainerrefcreatecomponent allowed projecting node into one of the projection defs through index this no longer work with ivy a the projectiondef instruction only retrieves a list of selector instead of also retrieving entry for reserved projection slot which appear when using the default selector multiple time a seen above in order to fix this issue the ivy compiler now pass all projection slot to the projectiondef instruction meaning that there can be multiple projection slot with the same wildcard selector this allows multislot projection a seen in the example above and it also allows u to match the multislot node projection order from view engine to avoid breaking change it basically ensures that ivy fully match the view engine behavior except of a very small edge case that ha already been discussed in fw with the conclusion of working a intended read more here pr close ,fix
6090,docsinfra update tooltip of event link pr close ,fix
6091,ivy module with provider are processed too early currently with ivy modulewithprovider provider are processed in order of declaration in the ngmodule import this technically make make sense but is a potential breaking change a modulewithprovider provider are processed after all imported module in view engine in order to keep the behavior of view engine the rinjector is updated to no longer process modulewithprovider provider egarly resolve fw pr close ,fix
6092,docsinfra upgrade cli command doc source to bbdf updating angularmaster from clibuildsmaster relevant change in commit range modified helpupdatejson pr close ,build
6093,core typescript related migration should cater for bom fixschematicsangular typescript related migration should cater for bom in the cli updaterecorder method such a insertleft remove etc accepts position which are not offset by a bom this is because when a file ha a bom a different recorder will be used which caters for an addition offsetdelta the main reason for this is that when a developer is writing a schematic they shouldnt need to compute the offset based if a file ha a bom or not and is handled out of the box example t recorderinsertleft true however this is unfortunate in the case if a t sourcefile is used and one us getwidth and getstart method they will already be offset by which at the end it result in a double offset and hence the problem fix pr close ,fix
6094,ivy align debugnodedebugelement behavior with view engine two issue with debugnodedebugelement in ivy were causing problem in user test the debugnodes returned by ivy were not actually instance of debugnode this wa due to an issue with the ivy switch logic in debugnodets the declaration of the exported debugnode reference wa set to debugnodeprer a any the cast prevented the ivy switch transform from detecting this a a switchable declaration the transform can not handle arbitrary syntax and export must be of the form const x yprer or they will not work the cast to any in this case wa not needed so this commit remove it debugnodes returned by ivy multiple time for the same element were not referenceidentical this wa previously considered a minor breaking change in ivy but testing ha shown that user depend on referential equality of debugnodes this commit cache a debugnode on a dom node when first creating it to allow returning the same instance in subsequent operation pr close ,fix
6095,ivy fix sanitization state leaking issue due to sanitization being stored a a tempglobal value between instruction unit test randomly failed because one test failed to clean up it temporary value this patch fix this issue ,test
6096,ivy add attributemarkerin for in attribute inattributes instruction always occur after the element instruction this mean that we need to treat in attribute differently by defining a specific attributemarker we can ensure that we wont trigger directive input with untranslated attribute value fw resolve pr close ,feat
6097,ivy trigger directive input with in translation changed runtime in to define attribute with binding or matching directive inputsoutputs a element property a we are supposed to do in angular this pr fix the issue where directive input wouldnt be trigged fw resolve pr close ,fix
6098,ivy name lquery object for easier memory allocation tracking pr close ,refactor
6099,ivy template inputsoutputs should not be bound in template scope the rtargetbinder bind an angular template ast computing semantic information regarding the template and making it accessible one of the binding pass previously had a bug where for the following template div ngiffoo a foodiv which desugars to ngtemplate ngif ngiffoo letfoongif divdiv ngtemplate would have the ngif binding processed twice in both the scope which contains the ngtemplate and the scope inside the template the bug arises because during the latter foo is a variable defined by letfoo and so the rtargetbinder would incorrectly learn that foo inside ngif map to that variable this commit fix the bug by only processing input output and templateattrs from template in the outer scope pr close ,fix
6100,ivy correct timing of ngmodulefactory registration commit dfa introduced registration of ngmodules with id when compiled with aot and ffd corrected the timing to avoid issue with tree shaking neither of these approach were correct this commit fix the timing to match view engine and avoid tree shaking issue a well a fix a bug with the registration of imported module id a new ivyonly test is added which verifies that module get registered correctly under realworld condition pr close ,fix
6101,ivy generate explicit type annotation for ngmodulefactory call in ngfactories prior to this commit there were no explicit type setup for ngmodulefactory call in ngfactories so typescript inferred the type based on a given call in some case when generic type were used for componentsdirectives that turned out to be problematic so we add explicit typing for ngmodulefactory call pr close ,fix
6102,ivy use in locale data to determine the plural form of icu expression plural icu expression depend on the locale different language have different plural form until now the locale wa hard coded a enus for compatibility reason if you use ivy with aot and bootstrap your app with bootstrapmodule then the localeid token will be set automatically for ivy which is then used to get the correct plural form if you use jit you need to define the localeid provider on the module that you bootstrap for testbed you can use either configuretestingmodule or overrideprovider to define that provider if you dont use the compat mode and start your app with rendercomponent you need to call ɵsetlocaleid manually to define the localeid before bootstrap we expect this to change once we start adding the new in apis so dont rely on this function there a reason why it a private export pr close ,feat
6103,ivy fix symbol in example ast pr close ,docs
6104,ivy improve debug documentation pr close ,docs
6105,element move clarification about custom element moved clarification that custom element are a subtype of web component to the first use of the term custom element pr close ,docs
6106,common fix typo in ngswitch directive description pr close ,docs
6107,changelog cleanup release note the removal of angularhttp is now mentioned under breaking change this remove several duplicate entry from the changelog and remove long and incorrect close link to source on github those link were present in the commit message and are incorrectly seen a issue reference additionally code reference are wrapped in backticks for proper formatting pr close ,docs
6108,ivy enable sanitization support for the new styling algorithm this patch is one of the final patch to refactor the styling algorithm to be more efficient performant and le complex this patch enables sanitization support for mapbased and propbased style binding pr close ,refactor
6109,core templatevarassignment schematic should link to deprecation guide instead of linking to a markdown file explaining what the migration warning are about we should link to the deprecation guide which now also contains an entry for that schematic this make the deprecation explanation consistent and more centralized pr close ,docs
6110,ivy add ɵɵtextinterpolatex instruction ɵɵtextbinding ɵɵinterpolationx instruction will now just be ɵɵtextinterpolate instruction pr close ,feat
6111,docsinfra upgrade cli command doc source to e updating angularmaster from clibuildsmaster relevant change in commit range modified helpanalyticsjson helpbuildjson helpeejson helpservejson helptestjson helpxinjson pr close ,build
6112,ivy fix pr collision with static true and new test this fix a collision between and where the latter added usage of viewchild without the static flag present but the former made the flag required pr close ,fix
6113,core require static flag on query in typing this commit make the static flag on viewchild and contentchild required breaking change in angular version it required that all viewchild and contentchild query have a static flag specifying whether the query is static or dynamic the compiler previously sorted query automatically but in developer are required to explicitly specify which behavior is wanted this is a temporary requirement a part of a migration see for more detail viewchildren and contentchildren query are always dynamic and so are unaffected pr close ,fix
6114,ivy evaluate mapbased styling binding with a new algorithm this patch in the second runtime change which refactors how styling binding work in angular this patch refactors how mapbased style and class binding work using a new algorithm which is faster and le complex than the former one this patch is a followup to an earlier refactor which enabled support for propbased stylename and classname binding see fcacbbcaafcafbbcbc pr close ,refactor
6115,ivy testbed support for reusing nonexported component this is a new feature of the ivy testbed a common user pattern is to test one component with another this is commonly done by creating a testfixture component which exercise the main component under test this pattern is more difficult if the component under test is declared in an ngmodule but not exported in this case overriding the module is necessary in g and view engine it possible to use an ngsummary to override the recompilation of a component and depend on it aot compiled factory the way this is implemented however specifying a summary for a module effectively override much of the testbeds other behavior for example the following is legal typescript testbedconfiguretestingmodule declaration foocmp testfixture import foomodule aotsummaries foomodulengsummary here foocmp is declared in both the testing module and in the imported foomodule however because the summary is provided foocmp is not compiled within the context of the testing module but is made available for testfixture to use even if it wasnt originally exported from foomodule this pattern break in ivy because summary are a noop this amount to a true double declaration of foocmp which raise an error fixing this in user code is possible but is difficult to do in an automated or backwards compatible way an alternative solution is implemented in this pr this pr attempt to capture the user intent of the following previously unsupported configuration typescript testbedconfiguretestingmodule declaration foocmp testfixture import foomodule note that this is the same a the configuration above in ivy a the aotsummaries value provided ha no effect the user intent here is interpreted a follows foocmp is a preexisting component thats being used in the test via import of foomodule it may or may not be exported by this module foocmp should be part of the testing module scope that is it should be visible to testfixture this is because it listed in declaration this feature effectively make the testbed testing module special it able to declare component without compiling them if theyre already compiled or configured to be compiled in the import and crucially the behavior match the first example with the summary making ivy backwards compatible with view engine for test that use summary pr close ,feat
6116,ivy refactor getbeforenodeforview for readability pr close ,refactor
6117,ivy dont throw on unmatched placeholder replacement in inpostprocess depending on which placeholder the translation us there are some legitimate case where we might not use all placeholder replacement in inpostprocess for example if some of the placeholder of the original message have been removed in the translation fw resolve pr close ,fix
6118,bazel remove out of date known issue with webstorm wa resolved in pr close ,docs
6119,core staticquery migration should use permalink for migration guide cbbaccabfedaf updated the staticquery migration to refer to the new guide on aio unfortunately these url are currently not valid a the guide is only available on nextangulario right now in order to make the link work permanently eg if we eventually remove the guide in future major version we use the permalink from the v subdomain pr close ,docs
6120,core add more info to static query guide pr close ,docs
6121,core update static query schematic with guide link pr close ,docs
6122,core update deprecation guide pr close ,docs
6123,core add migration guide for static query pr close ,docs
6124,platformwebworker deprecate platformwebworker deprecation platformwebworker ha been around since the initial release of angular version it began a an experiment to leverage angulars rendering architecture and try something different to run an entire web application in a web worker weve learned a lot from this experiment and have come to the conclusion that pushing entire application to run in a web worker is not a recipe for success for most application this is due to a number of unresolved issue including poor or nonexistent support for web worker apis in web crawlersindexers poor support in build and bundling tooling a a result a of angular version we are deprecating the platformwebworker apis in angular this consists of both npm package angularplatformwebworker and angularplatformwebworkerdynamic going forward we will focus our effort related to web worker around their primary use case of offloading cpuintensive but not critical work fw resolve pr close ,feat
6125,core deprecate integration with the web tracing framework wtf deprecation angular previously ha supported an integration with the web tracing framework wtf for performance testing of angular application this integration ha not been maintained and likely doe not work for the majority of angular application today a a result we are deprecating the integration in angular version this deprecation cover the following public apis wtfscopefn wtfcreatescope wtfstarttimerange wtfendtimerange wtfleave fw resolve pr close ,feat
6126,core staticquery migration should warn about syntax failure currently if a project ha sourcefiles with syntax failure and the migration ha been started on a broken project we silently migrate a much a possible but never notify the developer that the project wa in a broken state and that he can rerun the migration after the failure are fixed additionally the template strategy doe not need to exit gracefully if it detects angular semantic diagnostics on generated file template type checking these diagnostics are not relevant for the query timing analysis pr close ,refactor
6127,core staticquery migration should always use template strategy we are removing the prompt for the staticquery migration and make the template strategy the migration strategy for the migration the usage strategy is good for bestpractices but for now we want to ensure that the migration is a seamless a possible and that is only achievable my reusing the same logic that view engine us for determining the timing of a query pr close ,refactor
6128,core update queryspecific test in core pr close ,test
6129,compiler update example and compiler test pr close ,test
6130,common update common test to use static flag pr close ,test
6131,core update core test unrelated to query to use static flag pr close ,test
6132,ivy createnodeatindex no longer depends on l pr close ,refactor
6133,ivy createnodeatindex link tnodes on first pas only pr close ,refactor
6134,ivy tfunctions should not depend on ldata pr close ,refactor
6135,core unify setpreviousorparenttnode and setisparent into single setpreviousorparenttnode pr close ,refactor
6136,ivy clean up findcomponentview for speed pr close ,perf
6137,ivy clean up createnodeatindex for speed pr close ,perf
6138,ivy extract multiple read to local var pr close ,perf
6139,ivy improve assert error message pr close ,fix
6140,ivy use string concatination instead template string pr close ,perf
6141,ivy ensure new attribute instructons are available in jit pr close ,refactor
6142,ivy generate new ɵɵattribute instruction in host binding pr close ,refactor
6143,ivy extract repetitious code for adding update instruction pr close ,refactor
6144,ivy add new attribute interpolation instruction pr close ,refactor
6145,ivy add new ɵɵattribute instruction add the ɵɵattribute instruction add compilation handling for δattribute instruction update test pr close ,refactor
6146,ivy add attribute interpolation test pr close ,test
6147,ivy rtestbed doesnt allow template override with an empty string prior to this change a component wa considered unresolved ie having dynamic resource that should be loaded like external template or stylesheets even if template override wa provided a an empty string for example via testbedoverridetemplateusingtestingmodule call this commit fix the condition that previously treated empty string a an absent template value pr close ,fix
6148,ivy ngcontainer with viewcontainerref creates two comment with ivy injecting a viewcontainerref for a ngcontainer element result in two comment generated in the dom one comment a host element for the elementcontainer and one for the generated lcontainer which is needed for the created viewcontainerref this is problematic a developer expect the same anchor element for the lcontainer and the elementcontainer in order to be able to move the host element of ngcontainer without leaving the actual lcontainer anchor element at the original location this worked differently in view engine and various application might depend on the behavior where the viewcontainerref share the anchor comment node with the host comment node of the ngcontainer for example cdktable from angularcdk move around the host element of a ngcontainer and also expects embedded view to be inserted next to the moved ngcontainer host element see resolve fw pr close ,fix
6149,ivy ngcc turn on commonjs support pr close ,feat
6150,ivy ngcc implement commonjsrenderingformatter pr close ,feat
6151,ivy ngcc implement commonjsdependencyhost pr close ,feat
6152,ivy ngcc implement commonjsreflectionhost pr close ,feat
6153,ivy use reflectionhost in absolutemodulestrategy the absolutemodulestrategy in ngtsc assumed that the source code is formatted a typescript with regard to module export in ngcc this is not always the case so this commit change absolutemodulestrategy so that it relies upon a reflectionhost to compute the export of a module pr close ,fix
6154,ivy handle pipe in in attribute properly prior to this change we processed binding expression including binding with pipe in in attribute before we generate update instruction a a result slot offset for pipebind instruction were calculated incorrectly now we perform binding expression processing when we generate update block instruction so offset are calculated correctly pr close ,fix
6155,compilercli compliance test not always reporting test failure currently the angularcompilercli compliance test sometimes do not throw an exception if the expected output doe not match the generated javascript output this can happen for the following case expected code includes character that is not part of known alphabet eg δ is still used in a new compliance test after rebasing a pr expected code asserts that a string literal match a string with escaped quote eg expects const var quoted pr close ,test
6156,bazel allow tslibrary interop with listtyped input compileaction should take a list since we compute it within one node in the build graph this need to be cleaned up since bazel is getting stricter with disallowing iteration over depsets pr close ,fix
6157,core migration should parse cli workspace config a json currently we try to parse cli workspace configuration gracefully by using the native jsonparse method this mean that the cli workspace configuration need to follow the strict json specification because otherwise the migration would not be able to find typescript configuration in the cli project where json workspace configuration are supported in order to handle such workspace configuration we leverage the json parsing logicfrom the angulardevkitcore which is also used by the cli pr close ,refactor
6158,docsinfra upgrade cli command doc source to faea updating angularmaster from clibuildsmaster relevant change in commit range modified helpupdatejson pr close ,build
6159,ivy rename queryrelated function for clarity pr close ,refactor
6160,ivy avoid calling query instruction from static query instruction pr close ,refactor
6161,ivy avoid repeated read of lview from global state pr close ,refactor
6162,ivy avoid calling other instruction from the loadviewquery instruction pr close ,refactor
6163,core temporarily remove deprecated jsdoc tag for a textbedget overload pr introduced a new testbedget signature and deprecated the existing one this raise a lot of tslint deprecation warning in project using a strict t config see for context so we are temporarily removing the deprecated annotation in favor of a plain text warning until we properly fix it ref fix fw pr close ,fix
6164,docsinfra add commonupgrade to author package for api doc this fix an issue where the commonupgrade packge isnt included on page reload when change are made to the commonupgrade package pr close ,docs
6165,common update api doc for unified location service for upgrading pr close ,docs
6166,ivy rewrite flatten function to be more memory efficient the flatten function used concat and slice which created a lot of intermediary object allocation because flatten is used from query any benchmark which used query would exhibit high minor gc count pr close ,refactor
6167,core remove deprecated testbeddeprecatedoverrideprovider api breaking change in pr we fixed a bug in testbedoverrideprovider where eager provider were not being instantiated correctly however it turned out that since this bug had been around for quite a bit many apps were relying on the broken behavior where the provider would not be instantiated to assist in the transition the testbeddeprecatedoverrideprovider method wa temporarily introduced to mimic the old behavior so that apps would have a longer time period to migrate their code year and version later it is time to remove the temporary method this commit remove testbeddeprecatedoverrideprovider altogether any usage of testbeddeprecatedoverrideprovider should be replaced with testbedoverrideprovider this may mean that provider that were not created before will now be instantiated which could mean that your test need to provide more mock or stub for the dependency of the newly instantiated provider pr close ,fix
6168,docsinfra fix testdocsexamplesivy job context a part of the testdocsexamplesivy job we run concurrent build on each vm each for a different exampleproject additionally all example project share the same nodemodules via a symlink to aiotoolsexamplessharednodemodules so all concurrent build operate on the same file previously we preran ngcc with property module to process the fesm bundle since we have switched to e in ade we now need the esm bundle a a result the initial ngcc run is redundant and ngcc run again during each build to process the fesm bundle since there are concurrent build we often end up with multiple ngcc instance processing the same package and trying to write to the same directory at the same time causing a file already exists error this commit fix it by preprocessing the esm bundle so there is no need to rerun ngcc during each concurrent build fix pr close ,ci
6169,changelog remove docsinfra change pr close ,docs
6170,ivy minor cleanup prevent sparse array pr close ,perf
6171,ivy add test around directive attribute ghosting this battery of test is to ensure the instruction we are generating have the same behavior in ivy ha they did in viewengine pr close ,test
6172,bazel ng test should run specific tswebtestsuite pr close pr close ,fix
6173,ivy move instruction back to ɵɵ there is an encoding issue with using delta δ where the browser will attempt to detect the file encoding if the character set is not explicitly declared on a script tag and chrome will find the δ character and decide it is window encoding which misinterprets the δ character to be some other character that is not a valid j identifier character so back to the frog eye we go ɵɵ i am ineffable i am forever pr close ,refactor
6174,ivy remove ngprivatedata megamorphic prop access pr close ,refactor
6175,ivy move rendertemplate into renderutilts because it is only used in test pr close ,refactor
6176,common stricter type for slicepipe add overload to the transform method of slicepipe to have better type than any for value and any a a return with this commit using slice in an ngfor still allow to typecheck the content of the ngfor with fulltemplatetypecheck enabled in ivy div ngforlet user of user slice usertypo div typo doe not exist on type usermodel whereas it is currently not catched a the return of slice is any neither in ve nor in ivy breaking change slicepipe now only accepts an array of value a string null or undefined this wa already the case in practice and it still throw at runtime if another type is given but it is now a compilation error to try to call it with an unsupported type pr close ,feat
6177,ivy move render viewcontainerref test to acceptance move all manual render viewcontainerref test that use property binding to acceptance test with testbed two issue surfaced and refer to a difference between ivy and view engine multislot projection is not working with ivy fw viewcontainerref throw if index is invalid while view engine clamped index fw pr close ,test
6178,ivy add todos pr close ,test
6179,ivy remove new component use from inheritance test pr close ,test
6180,ivy ngtsc do not wrap argument unnecessarily previously we defensively wrapped expression in case they ran afoul of precedence rule for example it would be easy to create the t ast structure callternarya b c but might result in printed code of a b c whereas the actual structure we meant to generate is a b c however the typescript renderer appears to be clever enough to provide parenthesis a necessary this commit remove these defensive paraenthesis in the case of binary and ternary operation fw pr close ,fix
6181,ivy typechecking should infer string type for interpolation previously interpolation were generated into tcbs a a commaseparated list of expression letting typescript infer the type of the expression a the type of the last expression in the chain this is undesirable a interpolation always result in a string type at runtime therefore typechecking of binding such a img src link where link is an object would incorrectly report a typeerror this commit adjusts the emitted tcb code for interpolation where a chain of string concatenation is emitted starting with the empty string this ensures that the inferred type of the interpolation is of type string pr close ,fix
6182,ivy translate template node to typescript using a visitor pr close ,refactor
6183,ivy evaluate propbased styling binding with a new algorithm this is the first refactor pr designed to change how styling binding ie style and class behave in ivy instead of having a heavy elementbyelement context be generated for each element this new refactor aim to use a single context for each tnode element that is examined and iterated over when styling value are to be applied to the element this patch brings this new functionality to propbased binding such a styleprop and classname pr close ,refactor
6184,platformbrowserdynamic avoid swallowing error in cachedresourceloader test previously in order to assert that the promise wa not resolved an error wa thrown when the promise wa resolved successfully at the same catch wa used to silence the expected promise rejection however the chained catch handler would also catch and swallow the error thrown on resolving the promise making the test pas even if the promise wa not rejected this commit fix it by ensuring that the error thrown on resolving the promise is not caught by the rejection handler pr close ,test
6185,platformbrowserdynamic make cachedresourceloader test more reliable previously this test would occasionally fail eg on ci with template cache wa not found in templatecache this wa due to a combination of that test which remove the cache being run right before the failing test the async testbedcompilecomponents operation run in the beforeeach block which set the cache not having completed before the it block this commit fix the issue by ensuring the cache is always set before instantiating cachedresourceloader this commit also move some operation that are only needed in one test from the beforeeach block to that test it block fix pr close ,test
6186,ivy add expandingrows performance benchmark which run in viewengine and ivy pr close ,test
6187,ivy move integration test into acceptance move most of the test from renderintegrationspec into acceptance note that there are still a handful of test left in render because we dont have a way of moving all of them to go through testbed since they either have rspecific assertion or we dont have access to the same apis a the raw instruction pr close ,test
6188,ivy unable to bind safevalue to clippath fix not being able to pas in a safevalue to a clippath binding because clippath wasnt in the list of exception pr close ,fix
6189,ivy add additional lifecycle hook acceptance test move additional lifecycle hook test from render to acceptance pr close ,test
6190,ivy add onchanges acceptance test move render test to acceptance test pr close ,test
6191,ivy add ondestroy acceptance test port render ondestroy test over to be acceptance test remove old render test if possible note the onlyinivy test for one area where ivy ha a different behavior than viewengine pr close ,test
6192,ivy add afterviewinit acceptance test migrates afterviewinit and afterviewchecked render test to acceptance test pr close ,test
6193,ivy onaftercontentinit acceptance test port onaftercontentinit test from render to acceptance test pr close ,test
6194,ivy docheck lifecycle acceptance test port render docheck test to acceptance test pr close ,test
6195,ivy oninit lifecycle acceptance test port render lifecycle oninit test to acceptance test pr close ,test
6196,ivy document rule for the global state access pr close ,docs
6197,bazel update to latest stable chromium on osx and linux for karma under bazel we were on for both of these platform which is fairly old this update also requires a temporary patch to the bazelkarma npm package to disable chrome sandboxing on osx a it is broken under bazel a of chromium window is still on chromium but updating this will require upstream change to ruleswebtesting a the archive name executable name ha changed a of for window and hardcoded path in ruleswebtesting break thing pr close ,build
6198,ivy ngcc fix test to work on window pr close ,test
6199,ivy ngcc use ha to check map membership previously we were relying upon the get method to return undefined but it is clearer and safer to always check with ha first pr close ,refactor
6200,ivy ngcc implement umddependencyhost the dependency resolution that work out the order in which to process entrypoints must also understand umd format pr close ,feat
6201,ivy ngcc separate typing rendering from src rendering previously the same renderer wa used to render typing dts file but the new umdrenderer is not able to render typing file correctly this commit split out the typing rendering from the src rendering to achieve this the previous renderers have been refactored from subclass of the abstract renderer class to class that implement the renderingformatter interface which are then passed to the renderer and dtsrenderer to modify it rendering behaviour along the way a few utility interface and class have been moved around and renamed for clarity pr close ,fix
6202,ivy ngcc turn on umd processing pr close ,feat
6203,ivy ngcc implement umdrenderer pr close ,feat
6204,ivy ngcc implement umdreflectionhost pr close ,feat
6205,ivy ngtsc support namespaced forwardref call in some case the forwardref helper ha been imported via a namespace eg coreforwardref this commit add support for unwrapping such namespaced import when ngtsc is statically evaluating code pr close ,feat
6206,ivy ngcc remove unnecessary code pr close ,test
6207,ivy ngcc fake core and tslib should be typing file previously these fake file were full typescript source file t but this is not necessary a we only need the typing not the implementation pr close ,refactor
6208,ivy ngcc abstract how module statement are found this will be important for umd support pr close ,refactor
6209,ivy ngcc support namespaced identifier in umd format import are always namespaced this commit make ngcc more tolerant of such structure pr close ,fix
6210,ivy enhance the inmemorytypescript helper the getdeclaration function now search down into the ast for matching node which is needed for umd testing pr close ,test
6211,ivy fix esm test code to use var rather than const pr close ,test
6212,ivy use a named type for importmanager import structure previously we were using an anonymous type specifier string qualifier string throughout the code base this commit give this type a name and ensures it is only defined in one place pr close ,refactor
6213,ivy ngcc check the actual file that is passed to renderimports previously we were just checking that the object wa any object but now we check that it is the file object that we expected pr close ,test
6214,docsinfra add commonupgrade to api package source close pr close ,docs
6215,common update argument length in urlcodecareequal method and angularjsurlcodecareequal method dgeni requires that method argument be at least character long pr close ,refactor
6216,ivy evaluate external declaration usage a dynamic previously ngtsc would fail to evaluate expression that access property from eg the window object this resulted in hard to debug error message a no indication on where the problem originated wa present in the output this commit clean up the handling of unknown property access such that evaluating such expression no longer fail but instead result in a dynamicvalue fix pr close ,fix
6217,ivy add exhaustive inheritance test add inheritance test for many combination of directive component and bare class inheritance add test that are failing in ivy but should work mark them with xit and a todo remove render unit test that cover the same thing pr close ,test
6218,ivy more accurate type narrowing for ngif directive a structural directive can specify a template guard for an input such that the type of that input binding can be narrowed based on the guard return type previously such template guard could only be method of which an invocation would be inserted into the typecheck block tcb for ngif the template guard narrowed the type of it expression to be nonnullable using the following declaration typescript export declare class ngif static ngtemplateguardngifedir ngif expr e expr is nonnullablee this work fine for usage such a ngifperson but start to introduce falsepositives when eg an explicit nonnull check like ngifperson null is used a the method invocation in the tcb would not have the desired effect of narrowing person to become nonnullable typescript if ngifngtemplateguardngifdirective ctxperson null usage of ctxperson within this block would not have been narrowed to be nonnullable this commit introduces a new strategy for template guard to allow for the binding expression itself to be used a template guard in the tcb now the tcb generated for ngifperson null would look a follows typescript if ctxperson null this time ctxperson will successfully have been narrowed to be nonnullable this strategy can be activated by declaring the template guard a a property declaration with binding a literal return type see for an example where this led to a false positive pr close ,feat
6219,bazel disable sandbox on mac o removing the sandbox improves build time by almost for a hello world ng new application ng build with sandbox second ng build without sandbox second pr close ,fix
6220,common add ability to watch for angularjs url update through onurlchange hook the locationshim replacement for location wa added to centralize dealing with the browser url additionally an onurlchange method wa added to angulars location service this pr add a corresponding method to the locationshim so update from angularjs can be tracked in angular pr close ,feat
6221,ivy do not throw if host style is on a template node in view engine we would simply ignore host style binding on template node in ivy we are throwing a can not read length of undefined error instead for backwards compatibility we should also ignore these binding rather than blowing up pr close ,fix
6222,ivy dont relink the whole tree when tnode exists pr close ,perf
6223,ivy move render query test to acceptance move all manual render query test that use the elementproperty instruction to testbed acceptance test pr close ,test
6224,ivy support subclass service that only inherit injectable in view engine it is possible to instantiate a service that that ha no injectable decorator a long a it satisfies one of it ha no dependency and so a constructor with no parameter this is already supported in ivy it ha no constructor of it own and subclass a service which ha dependency but ha it own injectable decorator this second scenario wa broken in ivy in ivy previous to this commit if a class to be instantiated did not have it own injectable decorator and did not provide a constructor of it own then it would be created using new with no argument ie falling back to the first scenario after this commit ivy correctly us the nginjectabledef inherited from the superclass to provide the factory for instantiating the subclass fw pr close ,fix
6225,ivy port templateref test over to acceptance test move template ref test from render unit test to acceptance test mark test testing ivy specific change a onlyinivy deletes old render unit test that are no longer necessary pr close ,test
6226,router type cast correctly for ie bug breaking url unification when comparing object pr corrected behavior where objectkeys sometimes return an undefined value however the type didnt reflect this in the code that fix actually missed one value that could return undefined this pr corrects this by casting the type to what they can be in ie this ensures the code behaves a it should when this edge case come up pr close ,fix
6227,router ensure navigation start with the current url value incase redirect is skipped in some case where multiple navigation happen to the same url the router will not process a given url in those case we fall into logic that reset state for the next navigation one piece of this resetting is to set the browserurltree to the most recent urlafterredirectsi however there wa bug in this logic because in some case the urlafterredirects is a stale value this happens any time a url wont be processed and the previous url will also not be processed this creates unpredictable behavior not the least of which end up being a broken back button this pr kick off new navigation with the current value the router assumes is in the browser all the logic around how to handle future navigation is based on this value compared to the current transition so it important to kick off all new navigation with the current value so in the edge case described above we dont end up with an old value being set into browserurltree fix related to pr close ,fix
6228,ivy deprecate ɵɵinject and ɵɵdefineinjectable they are to be removed before the end of rc pr close ,refactor
6229,ivy mark δdefineinjectable a codegenapi pr close ,refactor
6230,ivy migrate ɵɵ prefix back to δ now that issue are resolved with closure compiler we can move back to our desired prefix of δ pr close ,refactor
6231,core improve message for staticquery migration slightly improves the message for the staticquery migration in order to make the terminal output le verbose but more helpful unfortunately we are limited in what we can print due to the devkit not providing much utility for printing good message from a migration schematic pr close ,refactor
6232,core staticquery migration should not fallback to test strategy currently if something fails in the selected strategy eg aot failure the migration currently accidentally fall back to the test strategy this is not helpful a we want to give developer the possibility to rerun the migration after fixing potential aot failure pr close ,fix
6233,core staticquery migration error not printed properly apparently the devkit logger is not able to properly print out error object so we need to convert them to a string before in order to make the error visible to the user this is not testable without an ee test that validates the cli terminal output pr close ,fix
6234,ivy move common integration test to acceptance pr close ,test
6235,bazel use existing npmyarn lock file this pr fix bazel builder to create yarninstall rule in workspace if yarnlock is present otherwise npminstall rule if packagelockjson is present if none is present default to yarninstall and create an empty yarnlock file pr close pr close pr close ,fix
6236,docsinfra update to fix pr close ,build
6237,ivy move discoveryutils test to acceptance rewrite the discovery util test to use testbed pr close ,test
6238,ivy move change detection test into acceptance move most of the r change detection test into acceptance note a handful of test werent migrated because they were testing an api that isnt exposed publicly yet the should throw if binding in child of current view have changed and should not throw if binding in ancestor of current view have changed test were removed because there not nice way of hitting the same code path with testbed and doing the same assertion a with the raw instruction im open to idea on how we could do them there were a few test that assert that the innerhtml look in a particular way ive switched them to use textcontent because ivy and viewengine produce slightly different dom the test were only checking whether the text ha changed anyway pr close ,test
6239,ivy move property render test to acceptance move all manual render property binding test to testbed acceptance test unfortunately three property binding test could not be migrated a these rely on manual ivy template code that is not supported within testbed these can be revisited a discussed in the framework team meeting pr close ,test
6240,ivy move render directive test to acceptance move all manual render directive test to testbed acceptance test pr close ,test
6241,ivy move render rendererfactory test to acceptance move all manual render test which are located within the rendererfactoryspects file to acceptance test a few test that use ivyspecific logic which is not replicable with testbed remain in the render folder eg using rendertemplate additionally migrated test that assert the lifecycles of the rendererfactory are set to ivy only a the lifecycle seems to be different in ivy tracked with fw pr close ,test
6242,router ie bug can break url unification when comparing object this pr fix an issue where ie can return undefined in with an objectkeys call solution is to add a runtime check on the value based on the type being passed this shouldnt be necessary but is needed only for ie unit test doesnt work for this pr because it cant be replicated easily pr close ,fix
6243,ivy handle window drive correctly at the moment the module resolver will end up in an infinite loop in window because we are assuming that the root directory is always however in window this can be any drive letter example c or d etc with this change we also resolve the drive letter in window when using absolutefspathfrom for consistence so under foo will be converted to cfoo this is also needed because of relative path with different drive letter pr close ,fix
6244,ivy align ngmodule registration timing with viewengine currently in ivy ngmodule registration happens when the class is declared however this is inconsistent with viewengine and requires extra generated code these change remove the generated code for registermodulefactory pas the id through to the ngmoduledef and do the module registration inside ngmodulefactorycreate this pr resolve fw pr close ,fix
6245,ivy pure function acceptance test move test related to the purefunction instruction from render to acceptance test leaf behind one test for intemplate javascript that is not supported syntax yet pr close ,test
6246,ivy use testbed for render in test pr close ,test
6247,docsinfra upgrade cli command doc source to da updating angularmaster from clibuildsmaster relevant change in commit range modified helpbuildjson helpeejson helpservejson helptestjson helpxinjson pr close ,build
6248,ivy move pipe test into acceptance move over the test from pipespec into acceptance note that the two wrappedvalue test havent been moved over because impure pipe always throw changed after checked error in testbed this seems to be consistent with viewengine pr close ,test
6249,ivy skip analysis of unchanged component now that the dependent file and compilation scope are being tracked in the incremental state we can skip analysing and emitting source file if none of their dependent file have changed since the last compile the computation of what file and their dependency are unchanged is computed during reconciliation this commit also remove the previous emission skipping logic since this approach cover those case already pr close ,feat
6250,ivy track compilation scope dependency for component to support skipping analysis of a file containing a component we need to know that none of the declaration that might affect it ngtsc compilation have not changed the file that we need to check are those that contain class from the compilationscope of the component these class are already tracked in the localmodulescoperegistry this commit modifies the ivycompilation class to record the file that are in each declared class compilationscope via a new method recordngmodulescopedependencies that is called after all the handler have been resolved further if analysis is skipped for a declared class then we need to recover the analysis from the previous compilation run to support this the incrementalstate class ha been updated to expose the metadatareader and metadataregistry interface this is included in the metaregistry object to capture these analysis and also in the localmetareader a a fallback to use if the current compilation analysis wa skipped pr close ,feat
6251,ivy track file dependency due to partial evaluation a part of incremental compilation performance improvement we need to track the dependency of file due to expression being evaluated by the partialevaluator the partialevaluator now accepts a dependencytracker object which is used to track which file are visited when evaluating an expression the interpreter computes this originatingfile and store it in the evaluation context so it can pas this to the dependencytracker the incrementalstate object implement this interface which allows it to be passed to the partialevaluator and so capture the file dependency pr close ,feat
6252,ivy clean up ngtsc code no behavioural change pr close ,refactor
6253,docsinfra ensure hidden cli command are excluded from sitemapxml previously the processor that excludes certain cli command filterhiddencommand wa being run after the createsitemap processor resulting in those command to be present in sitemapxml while the actual page where missing this also resulted in s when search engine crawler tried to index the missing url this commit fix it by ensuring that the filterhiddencommand processor is run before the createsitemap processor pr close ,build
6254,ivy move output test to acceptance move most of the test in outputspec into acceptance note that one test is left in render because it testing mixing in custom logic with instruction which we cant replicate using testbed pr close ,test
6255,ivy move content projection test to acceptance move all manual render content projection test that use the ɵɵelementproperty to acceptance test additionally a few other content projection test were moved over to acceptance eventually well be able to move all remaining content projection test to acceptance pr close ,test
6256,ivy use testbed for render component test pr close ,test
6257,core clean up support for e constructor delegation this commit move the delegated constructor detection to a helper function and also add more test coverage the original code for this came from thanks to tsdo close close fw pr close ,refactor
6258,bazel use rbeautoconfig and new container after this pr is merged maintainer no longer need to update bazelrc file toolchain and platform related flag for rbe build and test unless there is a breaking change in bazel related to those flag maintainer just need to update the pin of bazeltoolchains repo regularly in the packagesbazelpackagebzl file according to to include the latest checkedin toolchain configs if rbeautoconfig can not find appropriate toolchain configs for the version of bazel in the version of bazeltoolchains repo that is currently used by this project it will pull down the container and generate the configs on the fly a the beginning of the buildtest pr close ,feat
6259,core staticquery usage migration strategy should detect ambiguous query usage currently we always just set the timing to false if we arent able to analyze a given call expression or new expression eg t ngoninit thirdpartycallsync thisquerydosomething in that case the thirdpartycallsync function come from the nodemodules and is only defined through type while there is no code for the actual function logic that can be analyzed this make it impossible to tell whether the given call expression actually cause the specified arrow function to be executed synchronously or not in order to be able to make this better we now peek into the passed arrow function and check for a synchronous query usage if so we set the query timing to static and mark it a ambiguous this ensures that the usage strategy is le magical and more correct with thirdparty code additionally since function like settimeout are not analyzable but known to be asynchronous there is a hardcoded list of known function which shouldnt be marked a ambiguous resolve fw a planned within pr close ,fix
6260,core update coreall sizetracking golden file even though we dont run the sizetracking test on ci right now we update the golden size map a part of the sizetracking tool update the sizemap difference should generally be kept uptodate to be able to determine which pr contribute size to a given file pr close ,test
6261,form properly convert number to string for formcontrolname input pr close ,docs
6262,form add comment of the value pr close ,docs
6263,ivy update devkit in hello world test to rc pr close ,test
6264,ivy move property and attribute test to acceptance split existing property acceptance test into propertybinding and propertyinterpolation port test from render instruction test to acceptance test remove redundant or unnecessary test that are covered by existing acceptance test pr close ,test
6265,core staticquery migration should handle query on accessors currently the staticquery migration ignores query declared on getters or setter a these are not part of a propertydeclaration we need to handle these query in order to cover all query within a given project the usage strategy is not able to detect timing for query on accessors so we add a todo and print a message the template strategy is able to detect the proper timing for such query because it not dependent on detecting the usage of the query resolve fw pr close ,fix
6266,ivy add onlyinivy perf counter expectation we have an issue where we would like to be able to test perf counter metric in acceptance test but we are unable to do so because it will break when those same test are run with viewengine this pr add a testing utility to onlyinivy that allows for testing of performance counter and even give readable error for what value on ngdevmode is incorrect ha typing for decent autocompletion a well pr close ,test
6267,docsinfra handle search criterion from chrome search provider fix pr close ,fix
6268,bazel pas correct argument to in window under window the server binary ha an extension of exe and the current logic is not handling that partially address pr close ,fix
6269,ivy drop element prefix for all stylingrelated instruction this is the final patch to migrate the angular styling code to have a smaller instruction set in preparation for the runtime refactor all stylingrelated instruction now work both in template and hostbindings function and do not use element a a prefix for their name before elementstyling elementstyleprop elementclassprop elementstylemap elementclassmap elementstylingapply after styling styleprop classprop stylemap classmap stylingapply pr close ,refactor
6270,ivy migrate all hostspecific styling instruction to elementlevel styling instruction this patch remove all hostspecific styling instruction in favor of using elementlevel instruction instead because of the previous patch that made sure selectn worked between styling call all host level instruction are not needed anymore this patch change each of those instruction call to use any of the elementstyling elementstyle and elementclass styling instruction instead pr close ,refactor
6271,core cs sanitizer now allows parens in file name resolve an issue where image that were created with a name like foo png would not pas cs url sanitization pr close ,fix
6272,router move activatedroute example to miniapp pr close ,docs
6273,core staticquery migration should gracefully exit if aot compiler throw the staticquery template strategy leverage the aot compiler in order to determine the query timing unfortunately the aot compiler ha open bug that can cause unexpected failure which make the template strategy unusable in rare case these rare exception need to be handled gracefully in order to avoid confusion and to provide a more smooth migration additionally migration strategy setup failure are now reported with stack trace a the ng update command doe not print stack trace this make it easier to reproduce and report migration issue pr close ,fix
6274,core migration not always migrating all file in an angular cli project scenario where project only reference toplevel sourcefiles through the tsconfig file option we currently do not migrate referenced sourcefiles this can be fixed checking all referenced sourcefiles which arent coming from an external library this is similar to how tslint determines project sourcefiles pr close ,fix
6275,core staticquery migration fails with default parameter value currently when someone ha a call expression within the ngoninit call and we try to peek into that function with respect to the current function context the schematic error because a call expression argument is undefined this is valid because the target function declaration defines that parameter with a default value in order to fix this we need to respect parameter default value pr close ,fix
6276,ivy unable to bind safestyle a camel case property fix not being able to bind a safestyle a a camel cased style property eg stylebackgroundimagesomesafestyle the issue wa due to the fact that we only check the dash case property name to determine whether to sanitize a value this pr resolve fw pr close ,fix
6277,docsinfra remove scroll position from sessionstorage when a serviceworker update ha been activated close pr close ,fix
6278,core run schematic test with public migration collection bcccfbafcdfa changed how the schematic test are executed test no longer use the schematic collection that is also used by the cli ng update command and therefore the migration collection could technically be invalid in order to ensure that the public migration collection is guaranteed to work and to avoid duplication within two schematic collection the change are partially reverted and only the disabled injectablepipe schematic ha it own collection pr close ,test
6279,core staticquery migration should not prompt if no query are used currently we always prompt when the staticquery migration run this is not always needed because some application do not even use viewchild or contentchild query and it just cause confusion if developer need to decide on a migration strategy while there is nothing to migrate in order to avoid this confusion we no longer prompt for a strategy if there are no query declared within the project pr close ,fix
6280,ivy move host binding test to acceptance switch over all host binding test to use testbed and to be under acceptance pr close ,test
6281,ivy remove elementindex param from all elementlevel styling instruction this patch is one commit of many patch that will unify all styling instruction across both templatelevel binding and hostlevel binding this patch in particular remove the elementindex param because it is already set prior to each styling instruction via the selectn instruction pr close ,refactor
6282,ivy add more dom manipulation counter to ngdevmode pr close ,feat
6283,docsinfra upgrade cli command doc source to ddbac updating angularmaster from clibuildsmaster relevant change in commit range modified helpaddjson helpeejson helpgeneratejson helpupdatejson pr close ,build
6284,bazel directly spawn native bazel binary instead of launching a nodejs process that in turn spawn bazel binary the builder could now directly spawn the native binary this make the bootup process slightly more efficient and allows the builder to control spawn option this work with both bazel and ibazel pr close ,fix
6285,core consistently use ng for sourcemap url currently in jit mode nginjectabledef ngdirectivedef ngpipedef and ngmoduledef use ng which display them in the top domain in chrome dev tool whereas ngcomponentdef us ng which display component in a separate domain you can currently see appmodule userservice ng appcomponent templatehtml appcomponentjs this commits replaces all ng with ng to display every angular entity in the ng domain ng appmodule userservice appcomponent pr close ,fix
6286,ivy ensure selectn instruction are always generated around styleclass binding prior to this patch the selectn instruction would only be generated when property binding are encountered which meant that stylingrelated binding were skipped this patch ensures that all stylingrelated binding ie class and style binding are always prepended with a select instruction prior to being generated in aot pr close ,fix
6287,aio add awade jigsaw into resource pr close ,docs
6288,ivy break apart stylingmap into stylemap and classmap instruction this patch break up the existing elementstylingmap into elementclassmap and elementstylemap instruction it also break apart hoststlyingmap into hostclassmap and hoststylemap instruction this change allows for better treeshaking and reduces the complexity of the styling algorithm code for style and class binding pr close ,refactor
6289,ivy ngcc handle missing entrypoint dependency better if an entrypoint ha a missing dependency then all the entrypoints that would have pointed to that dependency are also removed from the dependency graph previously we were still processing the dependency of an entrypoint even if it had already been removed from the graph because it depended upon a missing dependency that had previously been removed due to another entrypoint depending upon it this caused the dependency processing to crash rather than gracefully logging and handling the missing invalid entrypoint fix pr close ,fix
6290,ivy ngcc add debug message for invalid entrypoints pr close ,feat
6291,router ensure historystate is set in eager update mode without this change historystate isnt being set when updating the browser url in eager update mode pr close ,fix
6292,router fix a problem with router not responding to back button there wa a problem with a combination of the eager url update browser back button and hybrid application detail provided in internal ticket this fix handle the problem by setting routerbrowserurltree when all condition have failed meaning the browser doesnt do anything with the navigation other than update internal data structure without this change the problem wa an old value wa stored in routerbroserurltree causing some new navigation to be compared to an old value and breaking future navigation pr close ,fix
6293,form fix import line ending pr close ,docs
6294,ivy avoid unnecessary function call when bound value doesnt change in the existing implementation the elementpropertyinternal function meant to set element property wa executed even if a bound value didnt change the elementpropertyinternal wa inspecting the incoming value and after comparing it to nochange exiting early all in all it meant that we were unnecessarily invoking the elementpropertyinternal function for case where bound value didnt change based on my bencharks running change detection without any model update in a tight loop this unnecessary function call wa causing slowdown in the change detection process pr close ,perf
6295,form fix controlvalueaccessor registeronchange code example pr close ,docs
6296,compilercli log ngcc skipping message a debug instead of info related to pr close ,fix
6297,core fix interpolate identifier in aot this commit fix a regression introduced in pr where the interpolate symbol in view engine wa improperly prefixed with the ɵɵ that signifies private instruction for ivy it resulted in interpolation of value not working correctly in aot mode this commit remove the prefix pr close ,fix
6298,docsinfra update app code to work with ivy this commit also enables more test to be run on ci with ivy pr close ,fix
6299,ivy allow rtestbedcompiler to work in ngccprocessed apps previously rtestbedcompiler wa dynamically defining an ngmoduledecorated compilermodule class inside a method call since ngcc only process toplevel class this class wa not transformed causing failure in unit test see for detail this commit fix it by using compilengmoduledefs directly similar to the fix in fix pr close ,fix
6300,ivy use compilerhostresolvemodulenames if available sometimes we need to override module resolution behaviour we do this by implementing the optional method resolvemodulenames on compilerhost this commit ensures that we always try this method first before falling back to the standard tsresolvemodulename pr close ,fix
6301,ivy ngcc prefer javascript source file when resolving module import package that do not follow apf may have the declaration file in the same directory a one source format typically e this is problematic for ngcc a it need to create a typescript program with all javascript source of an entrypoint whereas typescript module resolution mechanism would have resolved an internal module import to the external facing dts declaration file instead of the javascript source file this behavior result in the program to be analysed being incomplete this commit introduces a custom compiler host that recognizes the above scenario and rewires the resolution of a dts declaration file to it javascript counterpart if applicable fix pr close ,fix
6302,ivy properly treeshake away staticinjector ivy us rinjector but we are currently pulling in both the staticinjector view engine injector and the rinjector when running with ivy this commit add an ivy switch so calling injectorcreate pull in the correct implementation of the injector depending on whether you are using ve or ivy this save u about kb in the bundle pr close ,fix
6303,ivy support injection flag for provider deps without new previously we were supporting injection flag for provider deps but only if they fit the format new optional this commit fix resolution of provider deps to also support optional without the new this keep u backwards compatible with what view engine supported pr close ,fix
6304,docsinfra reenable aiomonitoring circleci job and change time the aiomonitoringnext circleci job wa disabled due to a failure in it turned out the failure wa caused because the job happened to run after a change had been merged into master and right before it wa deployed to causing the test not to match the deployed version this commit reenables the job and move it to a different time when it is le likely that pr will be being merged and thus reducing the risk of a similar timming issue fix pr close ,ci
6305,ivy inherited listener from grand super class invoked multiple time fix event listener that come from more than one level of inheritance being invoked multiple time this pr resolve fw pr close ,fix
6306,ivy store view directly on lcontainer store the view that are part of a container directly on the lcontainer rather than maintaining a dedicated subarray this pr resolve fw pr close ,perf
6307,ivy support forward ref in provider deps currently we are not properly resolving forward ref when they appear in deps for provider created with the usefactory strategy this commit wrap provider deps in the resolveforwardref call so the token are passed into the inject function a expected pr close ,fix
6308,docsinfra upgrade material and cdk to rc i bumped the payload size limit to reflect the current value the change have been insignificant pr close ,build
6309,docsinfra upgrade framework and cli to rc brings in small payload size fix pr close ,build
6310,ivy host binding and listener not being inherited from undecorated class fix hostbinding and hostlistener declaration not being inherited from base class that dont have an angular decorator this pr resolve fw pr close ,fix
6311,core staticquery migration fails if option can not be transformed currently the staticquery migration fails at the final step of updating a query when the query already specifies option which can not be transformed easily eg the option are computed through a function call viewchild getqueryopts or viewchild myoptionsvar in these case we technically could add additionally logic to update the query option but given that this is an edgecase and it potentially overengineering the migration schematic we just always add a todo for the timing and print out the determined query timing in the console the developer in that case just need to manually update the logic for the query option to contain the printed query timing potentially related to pr close ,refactor
6312,bazel bump ibazel to for window fix pr close ,fix
6313,languageservice load language service from tsconfig this pr change the integration test to load language service the way it would be loaded in the editor if the language service is specified in tsconfig itd only be loaded for angular project specifying it a globalplugins load it unconditionally whenever tsserver is brought up pr close ,test
6314,languageservice add external template this is in preparation for more rigorous testing of external template since itll work differently under the new tsserver plugin model pr close ,test
6315,languageservice implement definitionandboundspan this pr add the implementation for definitionandboundspan because it now preferred over definition vscode would send this new request for go to definition a part of this pr the implementation for definition is refactored and simplified goldens for both method are checked in pr close ,feat
6316,ivy ngcc remove the last remnant of path and canonicalpath the ngcc code now us absolutefspath and pathsegment to do all it path manipulation pr close ,refactor
6317,ivy ngcc tighten up typing in esmreflectionhost spec pr close ,test
6318,ivy ngcc add mockfilesystem pr close ,refactor
6319,ivy ngcc implement abstract filesystem this commit introduces a new interface which abstract access to the underlying filesystem there is initially one concrete implementation nodejsfilesystem which is simply wrapping the f library of nodejs going forward we can provide a mockfilesystem for test which should allow u to stop using mockfs for most of the unit test we could also implement a cachedfilesystem that may improve the performance of ngcc pr close ,refactor
6320,ivy ngcc move the dependency resolving stuff around for umdrequirejs support we will need to have multiple dependencyhost implementation this commit prepares the ground for that pr close ,refactor
6321,ivy ngcc support additional path to process by passing a pathmappings configuration a subset of the tscompileroptions interface we can instuct ngcc to process additional path outside the nodemodules folder pr close ,feat
6322,ivy add helper method to absolutefspath pr close ,feat
6323,ivy ngcc implement new module resolver when working out the dependency between entrypoints ngcc must parse the import statement and then resolve the import path to the actual file this is complicated because module resolution is not trivial previously ngcc used the nodejs requireresolve with some hacking to resolve module this change refactors the dependencyhost to use a new custom moduleresolver which is optimized for this use case moreover because we are in full control of the resolution we can support t path alias where not all import come from nodemodules this is the case in some cli project where there are compiled library that are stored locally in a dist folder see fw pr close ,refactor
6324,ivy ngcc tidy up mainngcc pr close ,refactor
6325,compilercli ngcc track nonangular entrypoints previously we completely ignored entrypoints that had not been compiled with angular since we do not need to compile them with ngcc but this make it difficult to reason about dependency between entrypoints that were compiled with angular and those that were not now we do track these nonangular compiled entrypoints but they are marked a compiledbyangular false pr close ,refactor
6326,ivy ngcc check private dependency in integration test the test now attempt to compile an entrypoint angularcommon that ha a transient private dependency a private dependency is one that is only visible by looking at the compiled j code rather than the generated t typing file this prof that we cant rely on typing file alone for computing the dependency between entrypoints pr close ,test
6327,ivy ngcc tidy up dependencyresolver helper method this method wa poorly named for what it doe and did not have a return type pr close ,refactor
6328,compilercli ngcc remove unnecessary sourcepath parameter the transformer and renderer class do not actually need a sourcepath value a by the time they are doing their work we are only working directly with full absolute path pr close ,refactor
6329,docsinfra update the aio app to framework and cli rc i updated the payload size limit a well there still seem to be size regression in the framework but at least the polyfills now us the evergreen build of zone so we shaved off a few kb there pr close ,build
6330,ivy injectable pipe schematic generating incorrect import statement currently the injectable pipe schematic generates invalid import like import import pipe pipetransform injectable from angularcore from angularcore the issue wasnt caught by the unit test because the invalid import still contains the valid one fix pr close ,fix
6331,ivy move export test to acceptance pr close ,refactor
6332,languageservice remove tsserverlibrary from rollup globals this pr remove tsserverlibrary from rollup globals since the symbol should not appear by the time rollup is invoked tsserverlibrary is used for type only so the import statement should not be emitted by tsc pr close ,fix
6333,docsinfra use the test from the stable branch in aiomonitoringstable circleci job previously the aiomonitoringstable job which run test against wa using the test from the master branch a a result if the master branch included change in those test that were not yet backported to the stable branch and thus deployed to the test would fail this commit fix this by using the test from the stable branch to test against fix pr close ,ci
6334,docsinfra split the aiomonitoring circleci job into two job previously the aiomonitoring job wa testing both the stable and the next version this commit split the test into two separate job still run a part of the same workflow this speed up the test since the two job can now run in parallel and make it easier to isolate failure eg identify which branch is failing disable one of the two etc credit to petebacondarwin wink pr close ,ci
6335,docsinfra reuse setup circleci job in aiomonitoring pr close ,ci
6336,docsinfra reenable aiomonitoring circleci job the job started failing for due to change in test that only affected and wa disabled in this commit reenables the job since it doe not block anything and it will be fixed in a subsequent commit pr close ,ci
6337,docsinfra fix typo in workspaceconfigmd file fixed typo in project asset configuration section inside workdspaceconfigmd pr close ,docs
6338,ivy correctly reflect undefined value fix ivy reflecting property with undefined value rather than omitting them also fix that ivy doesnt clear the reflected value when property value change from something that is defined to undefined this pr resolve fw pr close ,fix
6339,ivy component should support entry component from another module pr close ,fix
6340,ivy move di test for inject to acceptance pr close ,refactor
6341,ivy move di test for flag to acceptance including test for optional self skipself and host pr close ,refactor
6342,ivy move di test for directive injection to acceptance pr close ,refactor
6343,ivy move di test for di token to acceptance move test for special token like injector elementref templateref viewcontainerref changedectetorref and custom string token pr close ,refactor
6344,ivy move di test for attribute to acceptance pr close ,refactor
6345,ivy pin deps on hello world size test we recently had an unexpected size regression in the hello world test because the cli devkit released an rc that regressed u and the dependency were not pinned this change ensures that we only update dependency like devkit deliberately so we do not have mysterious breakage caused by other package pr close ,test
6346,bazel update peerdep range pr close ,fix
6347,ivy output should not be subscribe twice when listener pr close ,fix
6348,ivy property binding use correct index extract and document code that will be common to interpolation instruction ensures that binding index are updated at the proper time during compilation add additional test related pr close ,fix
6349,bazel exclude commonupgrade in metadatatsconfigjson it ha a dependency on angularupgrade which is not part of the dependency in packagejson so postinstall would fail pr close ,fix
6350,ivy undeprecate inject pr close ,refactor
6351,ivy remove debug utility from ivy production build prior to this commit we were pulling debugnode and debugelement into production build because browsermodule automatically pulled in ngprobe and thus getdebugnode in ivy this is not necessary because ivy ha it own set of debug utility we should use these existing tool instead of ngprobe this commit add an ivy switch so we do not pull in ngprobe utility when running with ivy this save u kb in prod build pr close ,fix
6352,aio clarify next to a same directory close pr close ,docs
6353,common add upgrade subpackage to ngpackage rule for angularcommon followup to to include angularcommonupgrade in the npm package close pr close ,fix
6354,bazel transitive npm deps in ngmodule breaking change ngmodule now depends on a minimum of buildbazelrulesnodejs pr close ,fix
6355,serviceworker support bypassing sw with specific headerquery param add support for bypassing the serviceworker for a request by using the ngswbypass header or query parameter fix pr close ,feat
6356,compiler support skipping leading trivia in template sourcemaps leading trivia such a whitespace or comment is confusing for developer looking at sourcemapped template since they expect the sourcemap segment to start after the trivia this commit add skipping trivial character to the lexer and then implement that in the template parser pr close ,feat
6357,docsinfra switch from noop nojasminefocus tslint rule to ban the nojasminefocus rule ha been removed from vrsourcetslintrules since version theoretically practically it remained until version this commit remove the nonexistent rule and the obsolete dependency and us tslints ban rule instead a recommended pr close ,build
6358,docsinfra upgrade tslint to and codelyzer to this commit also change the tslintjson config file to reasonably closely match what the cli would generate for a new app pr close ,build
6359,docsinfra make typechecking stricter by enabling noimplicitany pr close ,build
6360,docsinfra remove obsolete iepolyfillsjs now that defferential loading it supported by the cli remove the obsolete iepolyfillsjs and associated dependency all polyfills in iepolyfillsjs are now included in the polyfillses bundle except for classlistjs that is only needed in order to support ngclass on svg element which we dont use pr close ,build
6361,docsinfra upgrade angularcli to beta this commit also change the config file and their layout to reasonably closely match what the cli would generate for a new app related jira issue tool pr close ,build
6362,docsinfra upgrade angularmaterial to beta pr close ,build
6363,docsinfra upgrade angular to beta pr close ,build
6364,core add missing aria attribute to html sanitizer allow aria attribute from the waiaria spec which were stripped by the htmlsanitizer close pr close ,feat
6365,serviceworker add test for registrationoptionsregistrationstrategy pr close ,test
6366,serviceworker dry up sw registration logic pr close ,refactor
6367,serviceworker allow configuring when the sw is registered fix pr close ,feat
6368,serviceworker improve swregistrationoptions doc and add example pr close ,docs
6369,serviceworker expand swregistrationoptions test and move to separate file pr close ,test
6370,serviceworker expose swregistrationoptions token to allow runtime config previously the serviceworker registration option should be defined a an object literal in order for them to be compatible with aheadoftime compilation thus making it impossible to base the serviceworker behavior on runtime condition this commit allows specifying the registration option using a regular provider which mean that it can take advantage of the usefactory option to determine the config at runtime while still remaining compatible with aot compilation pr close ,feat
6371,serviceworker rename registrationoptions to swregistrationoptions this is in preparation of making registrationoptions part of the public api in a subsequent commit pr close ,refactor
6372,upgrade rename angularmodule to angularmodule with the ngupgrade internal angularmodule method wa renamed to angularmodule to avoid a webpack bug merging afterwards resulted in some broken test because it still used the old angularmodule method name the pr had been tested on ci against a revision that did not contain the rename this commit fix the broken test by renaming the remaining occurrence of angularmodule pr close ,test
6373,upgrade do not break if onmicrotaskempty emits while a digest is in progress previously under certain circumstance ngzoneonmicrotaskempty could emit while a digest wa in progress thus triggering another digest which in turn would throw a digest already in progress error furthermore throwing an error from inside the onmicrotaskempty subscription would result in unsubscribing and stop triggering further digest when onmicrotaskempty emitted usually emitting while a digest wa already in progress wa a result of unintentionally running some part of angularjs outside the angular zone but there are valid if rare usecases where this can happen see for detail this commit address the issue a follows if a digest is in progress when onmicrotaskempty emits do not trigger another digest to avoid the error evalasync is used instead to ensure that the binding are evaluated at least once more since there is still a high probability that the situation is a result of programming error ie some angularjs part running outside the angular zone a warning will be logged but only if the app is in dev mode fix pr close ,fix
6374,docsinfra loosen condition to reduce flakiness on ci the exact message depend on the timing of several event and may vary between run this occasionally cause flake on ci this commit reduces the risk of flake by loosen the condition to only check for what we actually care about fix pr close ,ci
6375,docsinfra wait for condition to reduce flakiness on ci pr close ,ci
6376,docsinfra switch from promise to asyncawait in test pr close ,refactor
6377,docsinfra add jennifer to fwdocsintro codeowners add codeowners for schematic doc pr close ,docs
6378,ivy dont include query field in type constructor previously ngtsc included query field in the list of field which can affect the type of a directive via it type constructor this feature however ha yet to be built and view engine in default mode doe not do this inference this caused an unexpected bug where private query field which should be an error but are allowed by view engine cause the type constructor signature to be invalid this commit fix that issue by disabling the logic to include query field pr close ,fix
6379,ivy generate default any type for type ctor generic params ngtsc generates type constructor which infer the type of a directive based on it input previously a bug existed where this inference would fail in the case of any input value for example the inference of ngforof fails when an any is provided a it cause typescript to attempt to solve t any in this case t get inferred a the empty object type which is not desirable the fix is to assign generic type in type constructor a default type of any which typescript us instead of when inference fails pr close ,fix
6380,compiler fix compiler crash due to isskipself of null pr close pr close ,fix
6381,router deprecate loadchildrenstring the proposed e dynamic import is now supported by the angular cli and the larger toolchain this render the loadchildren string api largely redundant a import is far more natural is le errorprone and is standard compliant this commit deprecates the string form of loadchildren in favor of dynamic import deprecation when defining lazyloaded route angular previously offered two option for configuring the module to be loaded both via the loadchildren parameter of the route most angular developer are familiar withthe string form of this api for example the following route definition configures angular to load a lazymodule ngmodule from lazyroutelazymodulets path lazy loadchildren lazyroutelazymodulelazymodule this magic string configuration wa previously necessary a there wa no dynamic module loading standard on the web this ha changed with the pending standardization of dynamic import expression which are now supported in the angular cli and in web tooling in general import offer a more natural and robust solution to dynamic module loading the above example can be rewritten to use dynamic import path lazy loadchildren importlazyroutelazymodulethenmod modlazymodule this form of lazy loading offer significant advantage in term of type checking via typescript simplicity of generated code future potential to run natively in supporting browser see caniuse dynamic import a a result angular is deprecating the loadchildren string syntax in favor of e dynamic import an automatic migration will run during ng upgrade to convert your existing angular code to the new syntax pr close ,feat
6382,upgrade rename module constant to avoid webpack bug when targeting e a is the default in cli const is not downleveled to var and thus declaring const module throw an error due to webpack wrapping the code in a function call with a module argument even when compiling for the web environment related webpackwebpack fix pr close ,refactor
6383,bazel add aioguidebazel pr close ,docs
6384,common rename locationupgradeservice and remove angularupgrade dependency pr close ,refactor
6385,common add fallback for url parsing in older browser ie edge pr close ,test
6386,common provide replacement for angularjs location service this commit provides a replacement for location the new service is written in angular and can be consumed into existing application by using the downgraded version of the provider prior to this addition application upgrading from angularjs to angular could get into a situation where angularjs wanted to control the url and would often parse or se rialize the url in a different way than angular additionally angularjs wa alerted to url change only through the digest cycle this provided a buggy feedback loop from angular to angularjs with this new locationupgradeprovider the location method and event are provided in angular and use angular apis to make update to the url additionally change s to the url made by other part of the angular framework such a the router will be listened for and will cause event to fire in angularjs but will no longer attempt to update the url since it wa already updated by the angular framework this centralizes url read and writes to angular and should help provide an easier path to upgrading angularjs application to angular pr close ,feat
6387,common add upgrade package dependency commonupgrade pr close ,build
6388,common add urlcodec type for use with upgrade application this abstract class and angularjsurlcodec are used for serializing and deserializing piece of a url string angularjs had a different way of doing this than angular and using this class in conjunction with the locationupgradeservice an application can have control over how angularjs url are serialized and deserialized pr close ,feat
6389,common adjust mockplatformlocation to set state to new object when using the history api setting a new state and retrieving it doe not pas a test to the object used to set the state in other word historystate is always a copy this change make the mockplatformlocation behave in the same way pr close ,fix
6390,common add ability to track all location change this feature add an onurlchange to angulars location class this is useful to track all update coming from anywhere in the framework without this method it difficult or impossible to track update run through locationgo or locationreplacestate a the browser doesnt publish event when historypushstate or replacestate are run pr close ,feat
6391,common add angularcommonupgrade package for locationrelated apis angularjss location service doesnt have a direct counterpart in angular this is largely because the location service in angular wa pulled out of the router but wa not purposebuilt to stand on it own this commit add a new angularcommonupgrade package with the beginning of a new locationupgradeservice this service will more closely match the api of angularjs and provide a way to replace the location service from angularjs pr close ,feat
6392,common add apis to read component piece of url without this change the framework doesnt surface url part such a hostname protocol and port this make it difficult to rebuild a complete url this change provides new apis to read these value pr close ,feat
6393,common add ability to retrieve the state from location service previously there wasnt a way to retrieve historystate from the location service the only time the framework exposed this value wa in navigation event this meant if you werent using the angular router there wasnt a way to get access to this historystate value other than going directly to the dom this pr add an api to retrieve the value of historystate this will be useful and needed to provide a backwardscompatible location service that can emulate angularjss location service since we will need to be able to read the state data in order to produce angularjs location transition event this feature will additionally be useful to any application that want to access state data through angular rather than going directly to the dom apis pr close ,feat
6394,common add mockplatformlocation to enable more robust testing of location service prior to this change we had a mocklocationstrategy to replace the path and hash location strategy however there wasnt a good way to test the platformlocation which is needed for doing thing such a setting historystate using backforward etc pr close ,feat
6395,ivy dont reuse a tsprogram more than once in ngtsc ngtsc previously could attempt to reuse the main tsprogram twice this occurred when template typechecking wa enabled and then an incremental build wa performed this break a typescript invariant tsprograms can only be reused once the creation of the template typechecking program reuses the main program rendering it moot then on the next incremental build the main program would be subject to reuse again which would crash inside typescript this commit fix the issue by reusing the template typechecking program from the previous run on the next incremental build since under normal circumstance the file in the typechecking program arent changed this should be just a fast testing strategy a test is added in the incrementalspec which validates that program reuse with typechecking turned on doe not crash the compiler fix pr close ,fix
6396,docsinfra fix typo in the aiotoolsexamplesreadme remove an a that wa accidentally repeated twice in the aiotoolsexamplesreadmemd file pr close ,docs
6397,ivy dont throw error when evaluating function with more than one statement resolve function with more than one statement to unknown dynamic value rather than throwing an error pr close ,fix
6398,ivy remove megamorphic read from renderstringify the renderstringify function is used in a lot of performancesensitive place however it contains a megamorphic read which is used primarily for error message these change introduce a new function that can be used to stringify output for error and remove the megamorphic read from renderstringify this pr resolve fw pr close ,perf
6399,ivy ngcc simplify newentrypointfilewriter code the line that compute the path for this writer were confusing this commit simplifies and clarifies what is being computed pr close ,refactor
6400,ivy ngcc do not copy external file when writing bundle only the j file that are actually part of the entrypoint should be copied to the new entrypoint folder in the newentrypointfilewriter previously some typing and external j file were being copied which wa messing up the nodemodules structure fix pr close ,fix
6401,bazel make name param in ng add optional pr close ,fix
6402,bazel make sure only single copy of angularbazel is installed when ng add is invoked independently of ng new a node installation of angularbazel is performed by the cli before invoking the schematic this step appends angularbazel to the dependency section of packagejson the schematic then appends the same package to devdependencies this lead to the warning warning packagejson dependency ha dependency angularbazel with range beta that collides with a dependency in devdependencies of the same name with version beta pr close ,fix
6403,docsinfra upgrade rxjs in doc example to related to pr close ,build
6404,docsinfra upgrade rxjs to related to pr close ,build
6405,ivy query not being inherited from undecorated class fix view and content query not being inherited in ivy if the base class hasnt been annotated with an angular decorator eg component or directive also reworks the way the ngbasedef is created so that it is added at the same point a the query rather than inside of the input and output decorator this pr partially resolve fw support for host binding will be added in a followup because this pr is somewhat large a it is pr close ,fix
6406,ivy add injectablepipe schematic add a schematic that will annotate all pipe class with injectable so that they can be injected this pr resolve fw pr close ,feat
6407,ivy support moduleid a ngmodules id field value prior to this commit the check that verifies correct id field type wa too strict and didnt allow moduleid a ngmodules id field value this change add a special handling for moduleid and us it a id of ngmodule if specified pr close ,fix
6408,ivy let ngtscs shim host delegate resolvemodulenames method now that ngtsc performs type checking using a dedicated ngtypecheckts file ngtscprogram always wrap it tscompilerhost in a shim host this shim fails to delegate resolvemodulenames so no custom module resolution logic is considered this introduces a problem for the cli a the compiler host it pass kick of ngcc for any imported module such that ivy compatibility compiler run automatically behind the scene this commit add delegation of the resolvemodulenames to fix the issue fix pr close ,fix
6409,docsinfra upgrade cli command doc source to cf updating angularmaster from clibuildsmaster relevant change in commit range modified helpbuildjson pr close ,build
6410,common prevent repeated application of httpparams mutation previously an instance of httpparams would retain it list of mutation after they have been materialized a a result of a read operation not only doe this unnecessarily hold onto memory more importantly doe it introduce a bug where branching of off a materialized instance would reconsider the set of mutation that had already been applied resulting in repeated application of mutation this commit fix the bug by clearing the list of pending mutation after they have been materialized such that they will not be considered once again for branched off instance fix pr close ,fix
6411,docsinfra pin version of package installed in preview server docker image this minimises the risk of unexpected failure due to breaking change when building a new image eg a a result of an unrelated config change in dockerfile pr close ,build
6412,docsinfra upgrade preview server docker image to debian previously the preview server docker image wa based on debian jessie recently jessieupdates and jessiebackborts were removed from the debian mirror more info thus breaking new build of the image instead of updating etcaptsourceslist to remove the obsolete source this commit upgrade to debian stretch the gce vm running the preview server docker container wa also upgraded from debian to this morning other change removed dependency on chkconfig which is not supported on debian installing nginx from the regular repository instead of backports upgraded to pm v which can handle hooking itself up to system startup better without chkconfig see above updated test to reflect the fact that nginx ha dropped the reason phrase in response status line for http in compliance with the spec http http ok http http pr close ,build
6413,docsinfra increase build artifact size limit for preview server in the size of the build artifact ha increased due to turning on differential loading which generates an es pair for each j resource to avoid the preview server rejecting the build artifact a in this commit increase the max allowed artifact size from mb to mb current artifact size after is mb pr close ,build
6414,core staticquery migration should not fail for test file currently when someone run ng update with the staticquery migration the migration can fail with an error saying that the aot compiler could not be created this can happen if the cli project contains a test tsconfigjson that is picked up by the schematic due to the fact that spec tsconfig file can not be ran with ngc eg test component are not part of a module not all source file are guaranteed to be included test tsconfig project will now use a new test migration strategy where all query within test are left untouched and a todo is added pr close ,refactor
6415,ivy explicitly compile ngmoduledef for rootscopemodule in rtestbed this commit unifies the way auxillary rootscopemodule and dynamictestmodule are compiled in rtestbed by calling compilengmoduledefs explicitly for rootscopemodule this change also resolve the problem where testbeds code wa used from the angularcore npm package due to the jit flag the ngmodule decorator on the rootscopemodule wa transformed to rootscopemoduledecorators but actual ngmoduledef wa never defined pr close ,fix
6416,compilercli lower some exported expression the compiler us metadata to represent what it statically know about various expression in a program occasionally expression in the program for which metadata is extracted may contain subexpressions which are not representable in metadata one such construct is an arrow function the compiler doe not always need to understand such expression completely for example for a provider defined with usevalue the compiler doe not need to understand the value at all only the outer provider definition in this case the compiler employ a technique known a expression lowering where it rewrite the provider expression into one that can be represented in metadata chiefly this involves extracting out the dynamic part the usevalue expression into an exported constant lowering is applied through a heuristic which considers the containing statement a well a the field name of the expression previously this heuristic wa not completely accurate in the case of route definition and the loadchildren field which is lowered if the route definition using loadchildren existed inside a decorator invocation lowering wa performed correctly however if it existed inside a standalone variable declaration with an export keyword the heuristic would conclude that lowering wa unnecessary for ordinary provider this is true however the compiler attempt to fully understand the route token and thus even if an array of route is declared in an exported variable any loadchildren expression within still need to be lowered this commit enables lowering of already exported variable under a limited set of condition where the initializer expression is of a specific form this should enable the use of loadchildren in route definition pr close ,feat
6417,ivy generate ɵɵproperty in host binding pr close ,feat
6418,ivy include context name for template function for ngcontent previously a template context name would only be included in an embedded template function if the element that the template wa declared on ha a tag name this is generally true for element except for ngcontent that doe not have a tag name by omitting the context name the compiler could introduce duplicate template function name which would fail at runtime this commit fix the behavior by always including the context name in the template function name regardless of tag name resolve fw pr close ,fix
6419,ivy generate ɵɵpropertyinterpolatex instruction compiler now generates ɵɵpropertyinterpolatex instruction pr close ,feat
6420,ivy ngcc insert new import after existing one previously ngcc would insert new import at the beginning of the file for convenience this is problematic for import that have sideeffects a the sideeffects imposed by such import may affect the behavior of subsequent import this commit teach ngcc to insert import after any existing import special care ha been taken to ensure inserted constant will still follow after the inserted import resolve fw pr close ,fix
6421,ivy avoid generating instruction for empty style and class binding fix ivy throwing an error because it try to generate styling instruction for empty style and class binding this pr resolve fw pr close ,fix
6422,core templatevarassignment migration incorrectly warns currently the templatevarassignment migration incorrectly warns if the template writes to a property in the component that ha the same astpropertywrite´ name a a template input variable but different receiver eg html somepropelement will be incorrectly reported a template variable assignment button ngforlet element of list clicksomepropelement nullresetbutton similarly if an output writes to a component property with the same name a a template input variable but the expression is within a different template scope the schematic currently incorrectly warns eg html button ngforlet element of listelementbutton the element null expression doe not refer to the element template input variable button clickelement nullbutton pr close ,refactor
6423,core add schematic to move deprecated document import pr close ,feat
6424,ivy class should not mess up matching for bound dir attribute previously we had a bug where directive matching could fail if the directive attribute wa bound and followed a certain number of class this is because in the matching logic we were treating class like normal attribute we should instead be skipping class in the attribute matching logic otherwise class will match for directive with attribute selector and a we are iterating through them in two when they are stored a nameonly not in namevalue pair it may throw off directive matching for any bound attribute that come after this commit change the directive matching logic to skip class altogether pr close ,fix
6425,bazel restore ng build prod ng build by default build the prodapp because there is not a dev build in bazel this pr restores the prod to do the same to prevent achitect from showing missing config error pr close ,fix
6426,ivy ngcc do not copy declaration file into bundle clone previously all of a program file would be copied into the ivyngcc folder where ngcc then writes it modification into the set of source file in a program however is much larger than the source file contained within the entrypoint of interest so many more file were copied than necessary even worse it may occur that an unrelated file in the program would collide with an already existing source file resulting in incorrectly overwriting a file with unrelated content this behavior ha actually been observed with angularanimations and angularplatformbrowseranimations where the former package would overwrite declaration file of the latter package this commit fix the issue by only copying relevant source file when cloning a bundle content into ivyngcc fix pr close ,fix
6427,common properly check nan value close pr close ,fix
6428,ivy let ngtsc evaluate default parameter in the callee context previously during the evaluation of a function call where no argument wa provided for a parameter that ha a default value the default value would be taken from the context of the caller instead of the callee this commit fix the behavior by resolving the default value of a parameter in the context of the callee pr close ,fix
6429,ivy let ngtsc evaluate the spread operator in function call previously ngtscs static evaluator did not take spread operator into account when evaluating function call nor did it handle rest argument correctly this commit add support for static evaluation of these language feature pr close ,feat
6430,languageservice add test for quickinfo and definition quickinfo is used for hover tooltip definition is used for go to definition pr close ,test
6431,ivy generate ɵɵproperty instruction pr close ,feat
6432,ivy error when calling remove or detach on an empty view container fix ivy throwing an error if remove or detach are called on an empty viewcontainerref this pr resolve fw pr close ,fix
6433,docsinfra upgrade cli command doc source to eaaae updating angularmaster from clibuildsmaster relevant change in commit range modified helpanalyticsjson helpbuildjson helpgeneratejson relevant change in commit range since pr modified helpgeneratejson close pr close ,build
6434,ivy set ngreflect property for unbound directive input we only set ngreflect property on directive input binding this pr ensures that we also add ngreflect property on unbound input for backwards compatibility fw resolve pr close ,fix
6435,ivy introduce a flag to control template typechecking for ivy template typechecking is enabled by default in the view engine compiler the feature in ivy is not quite ready for this yet so this flag will temporarily control whether template are typechecked in ngtsc the goal is to remove this flag after rolling out template typechecking in google in ivy mode and making sure the feature is a compatible with the view engine implementation a possible initially the default value of the flag will leave checking disabled pr close ,feat
6436,ivy support any when typechecking template this commit add support in the template typechecking engine for the any cast operation testing strategy tcb test included pr close ,feat
6437,ivy match microsyntax template directive correctly previously templatetemplateattrs wa introduced to capture attribute binding which originated from microsyntax eg binding in ngfor this mean that a template node can have two different structure depending on whether it originated from microsyntax or from a literal ngtemplate in the literal case the node behaves much like an element node it ha attribute input and output which determine which directive apply in the microsyntax case though only the templateattrs should be used to determine which directive apply previously both the tbinder and the templatedefinitionbuilder were using the wrong set of attribute to match directive combining the attribute input output and templateattrs of the template node regardless of it origin in the tdbs case this wasnt a problem since the tdb collect a global set of directive used in the template so it didnt matter whether the directive wa also recognized on the ngtemplate tbinders api distinguishes between directive on specific node though so it more sensitive to mismatching in particular this showed up a an assertion failure in template type checking in certain case when a directive wa accidentally matched on a microsyntax template element and also had a binding which referenced a variable declared in the microsyntax this resulted in the typechecker attempting to generate a reference to a variable that didnt exist in that scope the fix is to distinguish between the two case and select the appropriate set of attribute to match on accordingly testing strategy tested in the tbinder test pr close ,fix
6438,ivy support for template typechecking pipe binding this commit add support for template typechecking a pipe binding which previously wa not handled by the typechecking engine in compatibility mode the argument to transform are not checked and the type returned by a pipe is any in full typechecking mode the transform method type signature is used to check the pipe usage and infer the return type of the pipe testing strategy tcb test included pr close ,feat
6439,ivy template typecheck the entire program in file if possible the template typechecking engine previously would assemble a typechecking program by inserting type check block tcbs into existing user file this approach proved expensive a typescript ha to reparse and retypecheck those file when processing the typechecking program instead a far more performant approach is to augment the program with a single typechecking file into which all tcbs are generated additionally type constructor are also inlined into this file this is not always possible both tcbs and type constructor can sometimes require inlining into user code particularly if bound generic type parameter are present so the approach taken is actually a hybrid these operation are inlined if necessary but are otherwise generated in a single file it is critically important that the original program also include an empty version of the typechecking file otherwise the shape of the two program will be different and typescript will throw away all the old program information this lead to a painfully slow type checking pas on the same order a the original program creation a shim to generate this file in the original program is therefore added testing strategy this commit is largely a refactor with no externally observable behavioral difference and thus no test are needed pr close ,perf
6440,ivy logical not and safe navigation operation handling in tcbs this commit add support in the template typechecking engine for handling the logical not operation and the safe navigation operation safe navigation in particular is tricky a the view engine implementation ha a rather inconvenient flaw view engine check a safe navigation operation ab a typescript a null ab null a any the type of this expression is always any a the false branch of the ternary ha type any thus using nullsafe navigation throw away the type of the result and break typechecking for the rest of the expression a flag is introduced in the typechecking configuration to allow ivy to mimic this behavior when needed testing strategy tcb test included pr close ,feat
6441,ivy add backwards compatibility config to template typechecking view engine implementation of naive template typechecking is le advanced than the current ivy implementation a a result ivy catch lot of typing bug which ve doe not a a result it necessary to tone down the ivy template typechecker in the default case this commit introduces a mechanism for doing that by passing a config to the template typechecking engine through this configuration particular check can be loosened or disabled entirely testing strategy tcb test included pr close ,feat
6442,ivy include directive base class metadata when generating tcbs previously the template typechecking code only considered the metadata of directive class actually referenced in the template if those directive had base class any inputsoutputsetc of the base class were not tracked when generating the tcb this resulted in binding to those input being incorrectly attributed to the host component or element this commit us the new metadata package to follow directive inheritance chain and use the full metadata for a directive for tcb generation testing strategy template typechecking test included pr close ,fix
6443,ivy move metadata registration to it own package previously metadata registration the recording of collected metadata during analysis of directive pipe and ngmodules wa only used to produce the localmodulescope and thus wa handled by the localmodulescoperegistry however the template typechecker also need information about registered directive outside of the ngmodule scope determination rather than reuse the scope registry for an unintended purpose this commit introduces new abstraction for metadata registration and lookup in a separate metadata package which the scope registry implement this pave the way for a future commit to make use of this metadata for the template typechecking system testing strategy this commit is a refactoring which introduces no new functionality so existing test are sufficient pr close ,refactor
6444,ivy check class and style binding properly previously binding to class and style were treated like any other property binding that is they would result in typechecking code that attempted to write directly to class or style on the element node this is incorrect however the mapping from angulars class and style onto the dom property is nontrivial for now this commit avoids the issue by only checking the expression themselves and not the assignment to the element property testing strategy tcb test included pr close ,fix
6445,ivy template typechecking for reference in template previously the template typechecking engine processed template in a linear manner and could not handle reference within a template one reason for this is that reference are nonlinear a reference can be used before it declaration consider the template html refvalue input ref accommodating this required refactoring the typechecking code generator to be able to produce type check block tcb code nonlinearly now each template is processed and a list of tcb operation tcbops are created nonlinearity is modeled via dependency between operation with the appropriate protection in place for circular dependency testing strategy tcb test included pr close ,feat
6446,ivy typechecking for some previously unsupported expression this commit add support for the generation of typechecking expression for form which were previously unsupported array literal map literal keyed property access nonnull assertion testing strategy tcb test included fix fw resolve pr close ,feat
6447,ivy add test for typecheckblockts this commit add a test suite for the type check block generation which doesnt require running the entire compiler specifically it doesnt even require the creation of a tsprogram pr close ,test
6448,ivy register ngmodules with id when compiled with aot this commit add registration of aot compiled ngmodules that have id property set in their metadata such module have a call to registerngmoduletype emitted a part of compilation the jit behavior of this code is already in place this is required for module loading system such a g which rely on getmodulefactory pr close ,feat
6449,ivy replace ɵ with escape code pr close ,test
6450,ivy ensure view created in constructor dont break query previous to this change we assumed embedded view could only be created after their parent template node had completed processing a a result we only set up query logic for container after directive on the node were created however this assumption didnt take into account the case where a directive on a template node could create view in it constructor this commit fix query logic to work with view created in constructor in that case we need to create a query container before the new view is rendered so query result in the view arent lost but since the query container is created before directive have completed processing we also have to ensure that query result gathered later on the template node are inserted before that query container otherwise query result in embedded view will clobber query result on template node this splice mode may be slightly slower than the normal matching for query on container but we should only fall back to this strategy in the edge case where view are created in constructor we should encourage developer to create view in ngoninit instead pr close ,fix
6451,docsinfra increase wait for sw on all origin to avoid ci flake in the wait period for sw on localhost wa increased to avoid ci flake for the pwa score test this commit expands the fix to nonlocalhost origin to avoid flake in the aiomonitoring job when circleci vmsnetwork are slow for reference example failure pr close ,ci
6452,docsinfra make tsconfig path detection in switchtoivy more robust in light of that will change the path of tsconfigappjson this commit switch from a hardcoded tsconfigappjson path to looking it up in angularjson to be more futureproof pr close ,build
6453,docsinfra change buildwithivy script to switchtoivy previously the buildwithivy script could be used to build the aio project with ivy once it had been prepared with ivyngcc etc and then restored the configuration eg tsconfigjson to nonivy mode a a result it wa not useful for running other command eg unitee test in ivy mode this commit renames the script to switchtoivy and employ a different model similar to ngpackagesinstaller where the project is setup to run in ivy mode and then all subsequent command are executed in that mode until restored since this is currently only used on ci there is no automatic way to switch back to nonivy mode but it could be implemented in the future if needed finally the script now modifies srctsconfigappjson instead of tsconfigjson to ensure that the angularcompileroptions are not ignoredoverwritten this is also closer to what the cli generates with the enableivy option pr close ,build
6454,docsinfra use preivy package in testaiolocalivy to test ngcc to better test ngcc in addition to ivy on angulario change the testaiolocalivy circleci job to use the preivy angular package and have ngcc transform them to ivy one pr close ,ci
6455,docsinfra remove unnecessary cast to any pr close ,refactor
6456,ivy allow testbedcreatecomponent to create component in isolation prior to this change component created via testbedcreatecomponent in the same test were placed into the same root context which caused problem in conjunction with fixtureautodetectchanges usage in the same test specifically change detection wa triggered immediately for created component starting from the nd one even if it wa not requireddesired this commit make ivy and ve behavior consistent now every component created via testbedcreatecomponent is isolated from each other current solution us host element id naming convention which is not ideal but help avoid public api surface change at this point we might revisit this approach later note this commit also add extra test to verify bootstrap and change detection behavior in case of multiple component in bootstrap array in ngmodule to make sure this behavior is aligned between ivy and ve pr close ,fix
6457,core staticquery template strategy should not parse stylesheets currently the templatestrategy for the static query migration us the angular compiler in order to determine the query timing this is problematic a the angularcompilerprogram also collect metadata for referenced component stylesheets which arent necessarily present eg in a cli project the component can reference a sas file it not guaranteed that the standalone angular compiler plugin support sas without custom logic that is brought in by the angular cli webpack plugin in order to avoid any failure for invalid stylesheets we just disable normalizing of all referenced stylesheets pr close ,refactor
6458,core allow developer to select staticquery migration strategy currently there are two available migration strategy for the staticquery schematic both have benefit and negative which depend on what the developer prefers since we cant decide which migration strategy is the best for a given project the developer should be able to select a specific strategy through a simple choice prompt in order to be able to use prompt in a migration schematic we need to take advantage of the inquirer package which is also used by the cli schematic prompt schematic prompt are usually only statically defined in the schema additionally the schematic need to be made async because with prompt the schematic can no longer execute synchronously without implementing some logic that block the execution pr close ,refactor
6459,bazel do not typecheck core schematic file currently for angular bazel project ngc need to be run in the postinstall npm script in order to generate required summary file we need to update the postinstall tsconfig to not checkrebuild the angularcore schematic code which ha transitive dependency which are only available inside of a cli project a this is not guaranteed to be the case with angular bazel project we need to make sure that we dont checkrebuild these file pr close ,fix
6460,animation fixed some closing bracket on query animation page pr close ,docs
6461,bazel bump cli and angulardevkit to v beta pr close ,build
6462,compilercli export tooling definition pr close ,feat
6463,core use shakeable global definition the ngdevmode and nginclosuremode are special in that they should be set to false on production build in order to shake out code associated with it angular cli doe this in but in the toplevel usage wa changed from ngdevmode to globalngdevmode and the same for nginclosuremode this indirection prevents the static analysis in terser from effecting the replacement pr close ,fix
6464,core dont include a local eventlistener in typing with dts bundle coredts will include an eventlistener class a it used in this will conflict with the dom eventlistener a anything in coredts which is using the dom eventlistener will fallback in using the one defined in the same module and hence build will fail because their implementation is different with this change we rename the local eventlistener to debugeventlistener the later one is non exported fix pr close ,fix
6465,bazel fix missing deps in tsdevserver target under modulesplaygroundsrcwebworkers pr close ,build
6466,bazel fix deps of test pr close ,build
6467,bazel fix failure in target due to transitive npm deps pr close ,build
6468,bazel remove tsapiguardiandeps yarninstall pr close ,build
6469,bazel update to nodejs rule and pin version in angularbazel peer deps and for bazelschematics pr close ,build
6470,ivy let ngtsc unwrap expression when resolving forwardref previously ngtsc would fail to resolve forwardref call if they contained additional parenthesis or cast this commit change the behavior to first unwrap the ast node to see past such insignificant node resolving the issue fix pr close ,fix
6471,ivy let ngtsc statically evaluate arrayconcat call previously only static evaluation of arrayslice wa implemented in ngtscs static evaluator this commit add support for arrayconcat close pr close ,feat
6472,ivy make metadata call sideeffect free in closure when compiling angular class the compiler may decide to append statement with specific metadata thats only required for jit this includes thing like decorator metadata a well a ngmodule scope data when the compiler generates such call the call site are marked with uglifys pure annotation so the optimizer will remove them in production build however closure doe not have the pure or similar annotation we have a utility function nosideeffects in the runtime for this purpose this commit wrap setclassmetadata and setngmodulescope function body in nosideeffect closure to allow closure remove them pr close ,fix
6473,ivy properly coalesce event handler in presence of query the tnodecleanup data structure can contain sequence of element sequence of entry event handler directive output mixed with element sequence of entry querylist cleanup before this fix we would always skip element in the tnodecleanup while looking up event handler cleanup element skip are not correct in case of query cleanup presence and this commit corrects the algorithm to jump or element depending on a type of cleanup encountered pr close ,fix
6474,languageservice use proper type instead of any pr close ,fix
6475,docsinfra increase wait for sw on localhost to avoid ci flake the server used for testing on localhost ha le optimization eg serf uncompressed file so we need to wait longer the serviceworker to be loaded and registered to allow lighthouse to reliably detect it especially on slower environment eg ci related fix pr close ,ci
6476,docsinfra switch testpwascorejs to asyncawait pr close ,refactor
6477,languageservice no need to bootstrap initnodespecjs pr close ,build
6478,ivy directiveinject should fall back to inject if a component ha it definition set by definecomponent a opposed to jit getter then it will generate a factory that us directiveinject to retrieve it dependency this can be problematic in test code because test could use the injection utility before bootstrapping the component and directiveinject relies on the view having been created this commit tweak directiveinject to fall back to inject if the view ha not been created this will allow injection to work in test even if it is called before the component is bootstrapped pr close ,fix
6479,ivy support providing component and dirs in test previous to this commit providing a component or directive in a test module without injectable would throw because the injectable factory would not be found providing component in test in addition to declaring or importing them is not necessary but it should not throw an error this commit ensures factory data is saved when component defs and directive defs are created which allows them to be processed by the module injector note that bootstrapping is still required for this setup to work because directiveinject doe not support case where the view ha not been created this case will be handled in a future commit pr close ,fix
6480,ivy coalesced listener should preventdefault if any return false we had a bug where eventpreventdefault wa not always called if listener were coalesced this is because we were overwriting the previous listener result every time we called the next listener so listener early in the chain that returned false would be ignored and preventdefault would not be called this commit fix that issue so now preventdefault is called if any listener in a coalesced chain return false this brings u in line with view engine behavior pr close ,fix
6481,compilercli pas config path to tsparsejsonconfigfilecontent the config path is an optional argument to tsparsejsonconfigfilecontent when passed it is added to the returned object a optionsconfigfilepath and tsc itself pass it in the new t incremental build functionality relies on this property being present when using the compilercli readconfiguration the config path option isnt passed preventing consumer like ngtoolswebpack from obtaining a complete config object this pr fix this omission and should allow jit user of ngtoolswebpack to set the incremental option in their tsconfig and have it be used by the t program i tested this in jit and saw a small decrease in build time in a small project in aot the incremental option didnt seem to be used at all due to how ngc us the t apis related to pr close ,fix
6482,router support nonngfactory promise in loadchildren typing pr close ,fix
6483,serviceworker fix small typo in devops guide pr close ,docs
6484,ivy multi provider override support in testbed overriding multi provider value provider with multi true flag via testbed require additional handling all existing multiprovider value for the same token should be removed from the override list so that they are not included into the final value of a given provider this commit add this logic to make sure we handle multi provider correctly pr close ,fix
6485,ivy debugnodeproperties not preserving type of value fix the debugnodeproperties casting all of the value to a string this pr resolve fw pr close ,fix
6486,ivy cache multiple read to an element stylingcontext because the styling context may be stored in a different location and be apart of a sub array reading the styling context each time a host binding is evaluated is costly this patch ensures that the active styling context is cached so that multiple interaction with styling binding can easily retrieve the styling context efficiently pr close ,perf
6487,docsinfra temporarily lower the min required pwa score for localhost test the pwa score test have been occasionally failing on ci recently possibly due to ci vmnetwork issue this commit temporarily disables them until we investigate the rootcause andor put a workaround in place the pwa score test are still run against the deployed version which dont suffer a much or pr with public preview a part of the testaiopreview job and on upstream build a part of the deployaio job related to pr close ,ci
6488,docsinfra convert searchworkerjs to typescript pr close ,build
6489,docsinfra update to cli beta pr close ,build
6490,core migration do not properly handle multiple template in source file currently if there are multiple source file within a given typescript source file only the last template in the source file is checked a we store template in a map with the source file path a key this is problematic a multiple template can live within the same source file and we therefore accidentally overwrite existing entry in the resolved template map pr close ,refactor
6491,core add staticquery template strategy introduces a new strategy for the staticquery schematic that is enabled by default in order to provide a migration that work for the most angular application and make the upgrade a easy a possible the template strategy leverage the view engine angular compiler logic in order to determine the query timing that is currently used within application using view engine pr close ,refactor
6492,compiler export staticquery detection logic the angularcompiler package currently contains the logic for determining whether given query are used statically or dynamically this logic would be necessary in order to build a schematic that leverage the angular compiler apis in order to simulate the query timing based on what viewengine computed at compilationtimeruntime exporting the logic that is necessary to detect the timing should not affect the public api a the angularcompiler package is denoted a private in publicapimd pr close ,refactor
6493,core move usage detection into usage strategy in order to support multiple strategy for detecting the query timing the query usage logic ha been moved into a query usage strategy pr close ,refactor
6494,bazel remove nodejssynchost nodejssynchost is no longer provided by buildercontext in architect v and it usage caused subtle path resolution issue in window this pr clean up angularbazel builder to use all native path and f method pr close ,refactor
6495,bazel install package after ng add when invoked independently pr close pr close ,fix
6496,ivy use in locale data to determine the plural form of icu expression plural icu expression depend on the locale different language have different plural form until now the locale wa hard coded a enus for compatibility reason if you use ivy with aot and bootstrap your app with bootstrapmodule then the localeid token will be set automatically for ivy which is then used to get the correct plural form if you use jit you need to define the localeid provider on the module that you bootstrap for testbed you can use either configuretestingmodule or overrideprovider to define that provider if you dont use the compat mode and start your app with rendercomponent you need to call ɵsetlocaleid manually to define the localeid before bootstrap we expect this to change once we start adding the new in apis so dont rely on this function there a reason why it a private export pr close ,feat
6497,ivy attempt to coalesce listener only in presence of directive pr close ,perf
6498,docsinfra add missing ngconf image a of bfeadf the image is referenced in announcementsjson but it wa already removed a it wasnt used at the time in fda pr close ,fix
6499,docsinfra add missing dependency chromelauncher lighthouselogger we are using chromelauncher and lighthouselogger in testpwascore but we do not explicitly list them a devdependencies so we are relying on the fact that they happen to be hoisted in nodemodules by yarn this may unexpectedly break in the future this commit fix this by explicitly listing them a devdependencies pr close ,build
6500,docsinfra upgrade lighthouse to also log the lighthouse version in testpwascore to aid in debugging pr close ,build
6501,ivy keep inannotated attribute in element attribute list prior to this change element attribute annotated with in prefix were removed from element attribute list and processed separately by inspecific logic this behavior is causing issue with directive matching since attribute are not present in the list of attrs for matching purpose this commit update in logic to retain attribute in the main attribute list thus allowing directive matching logic to work correctly pr close ,fix
6502,ivy log error instead of rethrowing them in order to be backwards compatible with view engine ivy should log error by default in the testbed error handler rather than rethrowing them rethrowing the error is a breaking change that cause issue with library like ngrx that have async behavior and custom error handling this logging approach ha issue for both ve and ivy because it can allow test to pas inappropriately if error are thrown inside listener however since rethrowing would be breaking and requires a larger redesign we should wait until postivy pr close ,fix
6503,ivy use existing goog declaration for googgetmsg check previously this check wa done with bracket property access on the global object globalgoog this will not be minified when closure compiles this code which break because goog will have been minified but the check wont have taken that into consideration cause build failure in g because the actual property goog is forbidden in some published j code to ensure obfuscation a todo is added to validate that this logic is correct a it difficult to test within the angular repo pr close ,fix
6504,docsinfra ignore lazy loading example in ivy pr close ,test
6505,ivy dont load factory when using ivy related to related to angularangularcli pr close ,fix
6506,ivy use ɵɵ instead of δ for now the δ caused issue with other infrastructure and we are temporarily changing it to ɵɵ this commit also patch tsapiguardiantest and aio to understand ɵɵ pr close ,refactor
6507,core resolve t compile issue due to lenient tsconfig the code failed presubmit in google because the original t config wa not a strict a the one used elsewhere in angularangular and google pr close ,fix
6508,ivy support in without closure so far using runtime in with ivy meant that you needed to use closure and googgetmsg or a polyfill this pr change the compiler to output both closure nonclosure code while the unused option will be treeshaken by minifiers this mean that if you use the angular cli with ivy and load a translation file you can use in and the application will not throw at runtime for now it will not translate your application but at least you can try ivy without having to remove all of your in code and configuration pr close ,feat
6509,common add injectable to common pipe pr close ,fix
6510,core staticquery schematic should check template query can technically be also accessed within component template eg html mycomp bindingmyquerymycomp in that case the query with the property myquery is accessed statically and need to be marked with static true there are other edge case that need to be handled a the template property read doesnt necessarily resolve to the actual query property for example html foo myqueryfoo mycomp bindingmyquerymycomp in this scenario the binding doesnt refer to the actual query because the template reference variable take precedence the query doesnt need to be marked with static true this time this commit ensures that the staticquery migration schematic now handle this case properly also template property read that access query from within a ngtemplate are ignored a these cant access the query before the view ha been initialized resolve fw pr close ,refactor
6511,core move schematic component template visitor to utils pr close ,refactor
6512,bazel doc formatting pr close ,fix
6513,ivy update publicapi to codegenapi on ivy instruction remove publicapi annotation from ivy instruction add new codegenapi annotation to ivy instruction update tsapiguardian to support the new annotation properly pr close ,refactor
6514,ivy avoid storing raw selector in projectiondef currently in ivy we pas both the raw and parsed selector to the projectiondef instruction because the parsed selector are used to match most node whereas the raw one are used to match against node with the ngprojectas attribute the raw selector add a fair bit of code that wont be used in most case because ngprojectas is somewhat rare these change rework the compiler not to output the raw selector in the projectiondef but to parse the selector in ngprojectas and to store it on the tattributes the logic for matching ha also been changed so that it match the preparsed ngprojectas selector against the list of projection selector pr close ,perf
6515,aio add missing mentor for collaborator also improve the presentation of the org chart pr close ,docs
6516,aio add globegitter to angular collaborator pr close ,docs
6517,platformbrowser insert appid in style contentattr and hostattr pr close ,fix
6518,docsinfra upgrade cli command doc source to cad updating angularmaster from clibuildsmaster relevant change in commit range modified helpbuildjson helpgeneratejson helpnewjson helpservejson helptestjson pr close ,build
6519,core fix explicitquerytiming failure span pr close ,refactor
6520,ivy coalesce handler for event with the same name on the same element pr close ,perf
6521,ivy add δpropertyinterpolate instruction add the instruction add test for all instruction add todo to remove all test when we are able to test this with testbed after the compiler is updated pr close ,feat
6522,ivy fix formatting issue with select comment pr close ,refactor
6523,ivy move property instruction move the property instruction to it own file move shared function that should not be public to the existing sharedts file add the export of propertyts to allts pr close ,refactor
6524,ivy do not use spread operation in styling while investigating styling performance regression it wa discovered that a single fnargs operation wa causing a performance hit because the generated e spread operation us concat and read from the argument value which are not very efficient this patch change that around to use fnapply instead pr close ,perf
6525,core run migration schematic for v beta and rc release currently the staticquery and templatevarassignment schematic only run for which doe not include any beta or release candidate we want to run the schematic in the beta and rc in order to get early feedback about the schematic enabling it promptly with v stable release can result in accidental breakage that we would like to fixidentify before pr close ,refactor
6526,core staticquery schematic should handle abstract class query can not only be accessed within derived class but also in the super class through abstract method eg abstract class baseclass abstract getembeddedform ngform ngoninit thisgetembeddedformdosomething class subclass extends baseclass viewchildngform form ngform getembeddedform return thisform same applies for abstract property which are implemented in the base class through accessors this case is also now handled by the schematic resolve fw pr close ,refactor
6527,ivy prefix all generated instruction update all instruction to be prefixed with the greek delta symbol pr close ,refactor
6528,bazel pin version of nodejs rule in angularbazel peer deps and bazelschematics pr close ,build
6529,core di modulelevel info fix pr close ,docs
6530,core staticquery schematic should handle function callback currently the staticquery schematic is not able to properly handle call expression that pas function declaration that access a given query eg t ngoninit thiscallfunction thismyquerydosomething callfunctioncb any cb in that case the passed function is executed synchronously in the ngoninit lifecycle and therefore the query need to be detected a static we can fix this by keeping track of the current function context and using it to resolve identifier to the passed argument pr close ,refactor
6531,core staticquery schematic should handle binary expression currently we only check getters for property access expression this is wrong because property access expression do not always cause the getter to be triggered eg t set a get a ngoninit thisa true in that case the schematic currently incorrectly check the getter while this is a binary expression and the property access is used a leftside of the binary expression in that case we need to check the setter declaration of the property and not the getter in order to fix this we need to also check tsbinaryexpression node and check getterssetters based on the used operator token there are three type of binary expression value assignment using in that case only the setter is triggered compound assignment eg using in that case getter and setter are triggered comparison eg using in that case only the getter is triggered pr close ,refactor
6532,core update api doc example to use static injector pr close ,docs
6533,router use pipe in activatedroute example copying the example mentioned at activated route to stackblitz doesnt compile thats because the example doe not use pipe ive updated the example to include pipe pr close ,docs
6534,ivy rename stylinginstructions to styling pr close ,refactor
6535,ivy creation mode not run on view detached from change detection fix the creation mode block not being run on component which have been detached from change detection this pr resolve fw fix pr close ,fix
6536,ivy not throwing error for unknown property on container node fix ivy not throwing an error if it run into an invalid property binding on a container node eg div ngforlet row of row instead of div ngforlet row if row this pr resolve fw pr close ,fix
6537,ivy add dev mode counter information to styling in order to optimize performance for stylingrelated operation in angular debug counter need to be introduced this patch add various counter to ngdevmode which are fired each time a stylingrelated binding is updated pr close ,fix
6538,ivy ngcc exit early if the targeted package ha been compiled previously we always walked the whole folder tree looking for entrypoints before we tested whether a target package had been processed already this could take sec this commit doe a quick check of the target package before doing the full walk which brings down the execution time for ngcc in this case dramatically time nodemodulesbinivyngcc t angularcommon compiling angularcore fesm a esm compiling angularcore fesm a esm compiling angularcore esm a esm compiling angularcore esm a esm compiling angularcommonhttp fesm a esm compiling angularcommonhttp fesm a esm compiling angularcommonhttp esm a esm compiling angularcommonhttp esm a esm compiling angularcommon fesm a esm compiling angularcommon fesm a esm compiling angularcommon esm a esm compiling angularcommon esm a esm real m user m sys m time nodemodulesbinivyngcc t angularcommon the target entrypoint ha already been processed real m user m sys m pr close ,perf
6539,ivy ngcc improve and use the mocklogger previously the console logger wa being used in integration test leading to lot of output during test run pr close ,test
6540,ivy remove unused code related to listener clanup pr close ,refactor
6541,bazel update the build to use the new architect api with this change the builder ha been updated to use the latest architect api and make it compatable with the latest cli fix pr close ,feat
6542,core add test for template variable object property assignment the templatevarassignment schematic currently complains if someone assigns a value to a template variable this will no longer work with ivy but it should be totally fine to update a property of the template variable if it refers to an object this commit add a test that ensures that we dont incorrectly report any failure for such property writes in bound event pr close ,test
6543,core polish failure message for templatevarassignment schematic improves the failure message for the templatevarassignment schematic after manual testing of the schematic it not quite clear for developer what the failure message mean without any context the schematic now also reference a short markdown file mentioning what need to be changed but eventually this document need to be expanded with more information and context of the reasoning behind this change within ivy pr close ,refactor
6544,docsinfra rename property blacklisted ignored pr close ,refactor
6545,docsinfra do not include announcementsjson in sitemap the announcementsjson file should not be included in the sitemap and including it cause an error in google search console because the generated url doe not exist this is a followup to fbefae pr close ,build
6546,compilercli ensure logicalprojectpaths always start with a slash previously if a matching rootdir ended with a slash then the path returned from logicalpathoffile would not start with a slash which is inconsistent pr close ,fix
6547,ivy ensure parentsubclass component evaluate styling correctly the new styling algorithm in angular is designed to evaluate host binding stylinh priority in order of directive evaluation order this however doe not work with respect to parentsubclass directive because subclass host binding are run after the parent host binding but still have priority this patch ensures that the host styling binding for parent and subclass componentsdirectives are executed with respect to the styling algorithm prioritization jira issue fw pr close ,fix
6548,ivy verify ngondestroy is called for treeshakeable provider this test verifies that ivy module injector doe not suffer from to prevent regressing on this behavior going forward pr close ,test
6549,core call ngondestroy for treeshakeable provider prior to this change any provider that wa independently resolved using it injectabledef would not be considered when destroying the module it wa requested from this commit provides a fix for this issue by storing the resolved provider in the module list of provider definition fix pr close ,fix
6550,core deprecate testbedgetany add an overload to testbedget making parameter strongly typed and deprecated previous signature that accepted type any the function still return any to prevent build breakage but eventually stronger type check will be added so a future angular version will break build due to additional type check see previous breaking change issue pr close ,fix
6551,bazel tslibjs still required in tsdevserver tswebtestsuite for schematic pr close ,build
6552,bazel remove unnecessary script from tsdevserver tswebtestsuite in bazel schematic pr close ,build
6553,bazel remove unnecessary script from tsdevserver tswebtestsuite in integrationbazel pr close ,build
6554,bazel add configurationenvvars compile to generated npmangularbazelbinngcwrapped nodejsbinary pr close ,fix
6555,bazel update to nodejs rule pr close ,build
6556,bazel remove karmajasmine from tswebtestsuite it not needed pr close ,fix
6557,docsinfra fix eslint warning warning an it that us an async method should handle failure use donefail jasminenopromisewithoutdonefail pr close ,test
6558,docsinfra support doc alias via alias dgeni tag now one can add an alias tag to api doc which tell dgeni that this api element usually a const is really just an alias for some api element defined elsewhere dgeni will then look up this api element and copy over the property from the alias to the current doc for example we would like to privately export an enum from angularcore but then publicly export this from angularcommon packagescoreprivateexportsts t description of this document export enum ɵsomeenum packagescommonpublicapits t import ɵsomeenum from angularcore alias coreɵsomeenum export const someenum ɵsomeenum in the generated doc there will be a page for commonsomeenum which will be rendered a an enum rather than a const showing the description extracted from the coreɵsomeenum the implementation of this feature required some refactoring of the other processing previously ɵ prefixed export were not even considered due to some processor needed to have guard added to ignore such private export addmetadataaliases and checkcontentrules the processing of package page had to be reworked and split so that it picked up the aliased export doc after their alias proeprties had been copied see fw fw pr close ,build
6559,docsinfra fix typo pr close ,style
6560,core add missing migration to npm package while running ng update angularcore next the following error would be displayed can not find module nodemodulesangularcoreschematicsmigrationstemplatevarassignmentindex this happened because the schematic migration wa referenced but not included this commit fix that bug by including the migration in the bazel npm package dependency pr close ,fix
6561,ivy add in create op code debug info simply add a debug property to the array of create opcodes while inside readcreateopcodes in in this debug property ha a property called operation that is a humanreadable list of operation that will be performed a derived from the op code themselves and the view it acting upon pr close ,refactor
6562,docsinfra upgrade cli command doc source to bebd updating angularmaster from clibuildsmaster relevant change in commit range modified helpbuildjson helpgeneratejson pr close ,build
6563,bazel support running ngadd on minimal application minimal application dont have test and ee target but we are not currently checking if they exists fix pr close ,fix
6564,ivy ngcc show logging via cli by default the new logger implementation caused a regression where by default the ngcc cli did not output any logging message pr close ,fix
6565,ivy update ngcc integration test dependency pr close ,test
6566,core add abstracttypet interface this new interface will match class whether they are abstract or concrete casting a abstracttypemyconcrete will return a type that isnt newable this type will be used to match abstract class in the get function of injector and testbed type isnt used yet so this isnt a breaking change issue pr close ,feat
6567,ivy do not emit empty providersimports for defineinjector the defineinjector function specifies it provider and import array to be optional so if no providersimports are present these key may be omitted this commit update the compiler to only generate the key when necessary pr close ,feat
6568,ivy exclude declaration from injector import prior to this change a module import and export would be used verbatim a an injector import this is detrimental for treeshaking a a module export could reference declaration that would then prevent such declaration from being eligible for treeshaking since an injector actually only need ngmodule reference a it import we may safely filter out any declaration from the list of module export this make them eligible for treeshaking once again pr close ,feat
6569,ivy emit module scope metadata using pure function call prior to this change all module metadata would be included in the definengmodule call that is set a the ngmoduledef field of module type part of the metadata is scope information like declaration import and export that is used for computing the transitive module scope in jit environment preventing those reference from being treeshaken for production build this change move the metadata for scope computation to a pure function call that patch the scope reference onto the module type because the function is marked pure it may be treeshaken out during production build such that reference to declaration and export are dropped which in turn allows for treeshaken any declaration that is not otherwise referenced fix fw pr close ,feat
6570,compilercli ngcc cope with processing entrypoints multiple time with the new api where you can choose to only process the first matching format it is possible to process an entrypoint multiple time if you pas in a different format each time previously ngcc would always try to process the typing file for the entrypoint along with processing the first format of the current execution of ngcc but this meant that it would be trying to process the typing a second time now we only process the typing if they have not already been processed a part of processing another format in another even if it wa in a different execution of ngcc pr close ,fix
6571,bazel use tsconfigjson a the default for ngmodule this match the behavior of tslibrary pr close ,fix
6572,core templatevarassignment update schematic introduces a new update schematic called templatevarassignment that is responsible for analyzing template file in order to warn developer if template variable are assigned to value the schematic also come with a driver for tslint so that the check can be used wtihin google pr close ,feat
6573,core stronger type for resolved angular decorator pr close ,refactor
6574,core move schematic typescript logic to utility package pr close ,refactor
6575,ivy move instruction move all publicly exported instruction to their own file refactors namespace instruction to set state in statets no longer export from instructionsts instructionsts renamed to sharedts old sharedts content folded in to instructionsts update allts to reexport from public instruction file pr close ,refactor
6576,ivy ngcc properly handle alias class expression in e class could have been emitted a a variable declaration initialized with a class expression in certain situation an intermediary variable suffixed with is present such that the variable declaration initializer becomes a binary expression with it rh being the class expression and it lh being the identifier of the intermediate variable this structure wa not recognized resulting in such class not being considered a a class in esmreflectionhost a a consequence the analysis of functionsmethods that return a modulewithproviders object did not take the method of such class into account another edgecase with such intermediate variable wa that static property would not be considered a class member a testcase wa added to prevent regression fix pr close ,fix
6577,upgrade use bazel package to avoid symlinks in the source previously we had to share code between upgradedynamic and upgradestatic by symlinking the src folder which allowed both package to access the upgradecommon file these symlinks are always problematic on window where we had to run a script to relink them and restore them this change us bazel package to share the upgradecommon code which avoids the need for symlinking the src folder also the window specific script that fixup the symlinks have also been removed a there is no more need for them pr close ,refactor
6578,platformbrowser rename singletagwhitelist pr close ,refactor
6579,compiler rename interpolationblacklistregexps pr close ,refactor
6580,compiler update doc pr close ,refactor
6581,core update doc pr close ,refactor
6582,bazel update to nodejs rule pr close ,build
6583,docsinfra fix scroll position restoration error in scrollservice based on google analytics error report the following error happens occasionally or total error for can not read property of null typeerror at tscrolltopositionmainjs this wa a result of calling viewportscrollerscrolltoposition with null which in turn happens when calling scrollservicescrolltoposition while thisscrollposition is null this can be a result of a popstate event without an associated history state this commit fix the error by checking whether thisscrollposition is null before using it with scrolltoposition it also refactors away the unneeded internal popstatefired property pr close ,fix
6584,docsinfra avoid unnecessary json parsing in scrollservice pr close ,perf
6585,docsinfra minor cleanup of scrollservice pr close ,refactor
6586,docsinfra avoid clickrelated ci flake in ee test one of the test introduced in is susceptible to a kind of webdriver flake related to trying to click element hidden behind fixed positioned element this commit work around the issue by clicking the element directly using javascript instead of webelementclick pr close ,test
6587,ivy support finding the import of namespaceimported identifier currently there is no support in ngtsc for import of the form import a core from angularcore export function forroot coremodulewithproviders this commit modifies the reflectionhostgetimportofidentifierid method so that it support this kind of return type pr close ,fix
6588,ivy basic incremental compilation for ngtsc this commit introduces a mechanism for incremental compilation to the ngtsc compiler previously incremental information wa used in the construction of the tsprogram for subsequent compilation but wa not used in ngtsc itself this commit add an incrementalstate class which track state between ngtsc compilation currently this support skipping the typescript emit step when the compiler can prove the content of emit have not changed this is implemented for injectables a well a for file which dont contain any angular decorated type these are the only file which can be proven to be safe today see ngtscincrementalreadmemd for more detail pr close ,perf
6589,ivy support multiple compilation in the ngtsc test env this commit add support for compiling the same program repeatedly in a way thats similar to how incremental build work in a tool such a the cli support is added to the compiler entrypoint for reuse of the program object between compilation this is the basis of the compiler incremental compilation model support is added to wrap the compilerhost the compiler creates and cache tssourcefiles in between compilation support is added to track when file are emitted for assertion purpose an exclude section is added to the base tsconfig to prevent dts output from the first compilation from becoming input to any subsequent compilation pr close ,test
6590,ivy performance trace mechanism for ngtsc this commit add a traceperformance option for tsconfigjson when specified it cause a json file with timing information from the ngtsc compiler to be emitted at the specified path this tracing system is used to instrument the analysisemit phase of compilation and will be useful in debugging future integration work with angularcli see ngtscperfreadmemd for more detail pr close ,feat
6591,ivy avoid remote scoping if it not actually required currently ngtsc decides to use remote scoping if the compilation of a component may create a cyclic import this happens if there are two component in a scope say a and b and a directly us b during compilation of b ngtsc will then note that if b were to use a a cycle would be generated and so it will opt to use remote scoping for b ngtsc already us the rtargetbinder to correctly track the import that are actually required for future cycle tracking this commit expands that usage to not trigger remote scoping unless b actually doe consume a in it template pr close ,fix
6592,router adjust setting navigationtransition when a new navigation cancel an existing one prior to this change if a navigation wa ongoing and a new one came in the router could get into a state where routercurrentnavigation wa null even though a navigation wa executing this change move where we set the currentnavigation value so it inside a switchmap this solves the problem because the finally on the switchmap had been setting currentnavigation to null but the new currentnavigation value would have already been set essentially this wa a timing problem and is resolved with this change fix pr close ,fix
6593,compilercli ngcc make logging more configurable this allows cli usage to filter excessive log message and integration like webpack plugins to provide their own logger fw pr close ,feat
6594,compilercli ensure ffr type is implemented correctly pr close ,style
6595,compilercli track visited source file in partialevaluator pr close ,refactor
6596,docsinfra add ee test for the contributor page previously if the shape of data in contributorsjson wa incorrect there would be a runtime error when trying to parse the data which would result in a blank page the likelihood for this happening is higher after where the shape of data changed this commit add some basic ee test that verify the page work a expected and there are contributor listed pr close ,test
6597,add information about body content type to flush method for testing pr close ,docs
6598,upgrade work around saucelabs issue with loading angularjs file sometimes especially on mobile browser on saucelabs the script may fail to load due to a temporary issue with the internet connection to avoid flake on ci when this happens we retry the download after some delay related to pr close ,test
6599,core staticquery schematic should detect static query in getters query can also be statically accessed within getters eg t ngoninit thismyquerygetterdosomething in that case we need to check if the myquerygetter definition access a query statically a we need to use the type checker for every property ace within lifecylce hook the schematic might become slower than before but considering that this is a onetime execution it is totally fine using the typechecker extensively pr close ,fix
6600,docsinfra remove unused phantomjs dependency phantomjs is not being developed any more and with modern alternative such a chrome headless there is no reason to keep it a a dependency pr close ,build
6601,docsinfra upgrade cli command doc source to ffcf updating angularmaster from clibuildsmaster relevant change in commit range modified helpbuildjson close pr close ,build
6602,docsinfra add check to ensure all contributor picture exist pr close ,build
6603,docsinfra support contributor belonging to multiple group pr close ,feat
6604,docsinfra change unused class to interface pr close ,refactor
6605,ivy host attribute and componentchild should be supported on the same component pr close ,fix
6606,common escape query selector used when anchor scrolling when an anchor scroll happens we run documentqueryselector this value can be taken directly from the user therefore it possible to throw an error on scrolling which can cause the application to fail this pr escape the selector before using it related to internal discussion pr close ,fix
6607,ivy querying should be possible on any debug element pr close ,fix
6608,ivy debug element should support component with viewcontainerref pr close ,fix
6609,serviceworker add info about no network request for performance strategy pr close ,docs
6610,docsinfra upgrade cli command doc source to dfb updating angularmaster from clibuildsmaster relevant change in commit range modified helpaddjson helpgeneratejson helpnewjson pr close ,build
6611,ivy ngcc write dtsmap file to the correct folder previously we were writing dts and dtsmap to different folder pr close ,fix
6612,ivy ngcc ensure generated source map path are correct previously we were using absolute path but since at rendering time we do not know exactly where the file will be written it is more correct to change to using relative path this is actually better all round since it allows the folder to be portable to different machine etc pr close ,fix
6613,ivy ngcc remove the targetpath property of transformer and renderer we have already removed this concept from the public api this just clean it out altogether the targetpath wa an alternative output path to the original basepath this is not really a very useful concept since the actual target path of each output file is more complex and not consistently relative to the basepath pr close ,refactor
6614,ivy add property instruction add property instruction doe not add compiler change to accommodate property instruction that will be a follow up pr update select instruction to set the selected index in state add dev mode assertion around the selected index state related pr close ,feat
6615,ivy fix proliferation of provider override for module when an ngmodule is imported more than once in the testing module for example it appears in the import of more than one module or if it literally listed multiple time then testbed had a bug where the provider for the module would be overridden many time this alone wa problematic but would not break test however the original value of the provider field of the nginjectordef wa saved each time and restored in the same order thus if the provider array wa x and override were applied twice then the override array would become x x and then x x x x however on the second override the state x x would be stored a original the array would then be restored to x and then x x each test therefore would continue to double the size of the provider array for the module eventually exhausting the browser memory this commit add a set to track when override have been applied to a module and refrain from applying them more than once pr close ,fix
6616,ivy allow testbed to recompile aotcompiled component in case of template override prior to this change recompilation of aotcompiled component in testbed may fail when template override is requested that wa happening due to the styleurls field defined for a component thus switching it state to requires resolution ie having external resource at compile time this change avoids this issue by storing style and resetting styleurls field before recompilation once compilation is done saved style are patched back onto component def pr close ,fix
6617,docsinfra upgrade cli command doc source to ed updating angularmaster from clibuildsmaster relevant change in commit range modified helpaddjson pr close ,build
6618,ivy add property instruction add property instruction doe not add compiler change to accommodate property instruction that will be a follow up pr update select instruction to set the selected index in state add dev mode assertion around the selected index state related pr close ,feat
6619,ivy ngtsc is unable to detect flat module entrypoint on window currently when building an angular project with ngtsc and flatmoduleoutfile enabled the ngtsc build will fail if there are multiple source file a root file name ngtsc and ngc currently determine the entrypoint for multiple root file name by looking for file ending with indexts this functionality is technically deprecated but still supported and currently break on window a the root file name are not guaranteed to be normalized posixlike path in order to make this logic more reliable in the future this commit also switch the shim generator and entrypoint logic to the branded path type this ensures that we dont break this in the future pr close ,fix
6620,ivy fix incorrect error message in ngtsc pathsegment pr close ,refactor
6621,ivy name anonymous wrapper function this simple change help with debugging perf investigation a we can see function name on a call stack pr close ,refactor
6622,ivy remove foreach usage in applicationreftick foreach is slower a compared to a regular loop but more importantly this change remove an anonymous function and thus make stack trace shorter and easier to read important for perf analysis pr close ,refactor
6623,ivy select instruction now generated in front of all relevant instruction pr close ,feat
6624,ivy remove duplicated flatten util this commit remove code duplication where we had version of a flatten utility moreover this change result in query using a nonrecursive version of flatten which should result in a better performance of query refresh operation pr close ,refactor
6625,bazel update schematic to support routing pr close pr close ,fix
6626,router clarify scrollpositionrestoration option refactor example clarify scrollpositionrestoration enabled to fully describe the functionality it provides refactor app module example to compile and remove dependency on unnecessary framework remove component example due to bug on reload pr close ,docs
6627,ivy testbed rewrite to avoid unnecessary recompilations prior to this change ivy version of testbed wa not designed to support the logic to avoid recompilations most of the componentsdirectivespipes were recompiled for each test even if there were no override defined for a given type additional check to avoid recompilation were introduced in one of the previous commits aeddbcedcdbfaf but there were still some corner case that required attention in order to support the necessary logic better ivy testbed wa rewrittenrefactored main result of this rewrite are no recompilation for componentsdirectivespipes without override the logic to restore state between test isolate test wa improved transitive scope calculation no longer performs recompilation it work with compiled defs a a result of these change we see reduction in memory consumption x improvement and pefromance increase x improvement pr close ,fix
6628,bazel update integrationbazel lock file pr close ,build
6629,bazel update to nodejs rule fix prodmode issue in integrationbazel breaking change bazeltypescript is now a peerdependency of angularbazel so user of angularbazel must add bazeltypescript to their packagejson pr close ,build
6630,ivy rename flushhooksupto to select pr close ,refactor
6631,ivy debugnodequery should query node in the logical tree pr close ,fix
6632,ivy generate empty querylist for root component content query in view engine we used to generate empty querylists for content query on root component though we did not actually support populating these list we need to keep this behavior in ivy for backwards compatibility otherwise component that are sometimes used a root will fail if they are relying on content query result to always be defined pr close ,fix
6633,ivy include classname in debugnodeproperties fix the node class binding not being included under debugnodepropertiesclassname like in viewengine this pr resolve fw pr close ,fix
6634,platformbrowser fix shadow dom test not working in firefox with dcaeadabaaebcbcab firefox ha been updated to the latest available version within saucelabs firefox added shadow dom support in firefox and therefore the shadow dom test in platformbrowser now run a well this test currently fails because firefox doe not support computed style property shorthand in order to make this test work on firefox now we just switch from border to background because of the overhead when comparing each top bottom left rightborder property pr close ,test
6635,ivy add test for component factory projectable node corner case in some case ivy expects projectable node to be passed in a different order to viewengine specifically ivy expects the catchall to be at index whereas viewengine expects it to be at it position at which it wa parsed in the template this commit add one test that break under ivy and others that just describe more accurately what happens in corner case pr close ,test
6636,ivy avoid type coercion in bindingrelated instruction asserts ivy bindingupdated instruction is using the assertnotequal check to make sure that nochange value of type object is not passed a a value to be dirtychecked in practice it mean that any value passed a a binding value would be compared to the nochange object it turn out that the assertnotequal is using and given that binding value are of different type and we always compare it to the nochange object we were doing lot of type coercion it resulted in call to expensive type conversion and call to objecttostring a profiler reported of the self time spent in the assertnotequal but it turn out that removing type coercion speed up material chip with input scenario much more m down to m this pr introduces new assert method assertnotsame that us strict equality check the new assertion is used in binding instruction to compare to nochange object reference pr close ,fix
6637,router support ngfactory promise in loadchildren typing the router loadchildren property already support a promise that return a ngmodulefactory but the typing cause the compilation to fail pr close ,fix
6638,core staticquery schematic should detect query in ngdocheck and ngonchanges query can be also used statically within the ngdocheck and ngonchanges lifecylce hook in order to properly detect all query we need to also respect these lifecycle hook resolve fw pr close ,fix
6639,ivy remove passing test from blocklist remove the test that wa fixed by from the blocklist pr close ,test
6640,ivy testbed overriding custom errorhandler fix testbeds default errorhandler overriding the one provided by the consumer via an import this pr resolve fw pr close ,fix
6641,bazel add router to bazel integration test pr close ,test
6642,bazel workaround problem reading summary file from nodemodules pr close ,fix
6643,bazel allow ngmodule user to set createexternalsymbolfactoryreexports pr close ,fix
6644,core close tag in example pr close ,docs
6645,ivy viewcontainerrefdestroy should properly clean the dom pr close ,fix
6646,compiler inherit param type when class ha a constructor which take no declared parameter and delegate up in reflectioncapabilities when checking for own parameter of a type inherit the type properly for class that do have a constructor but the constructor take no declared parameter and just delegate to superarguments this remove the need to declare trivial constructor in such class to make them work properly in jit mode without this di fails and injectables are undefined pr close ,fix
6647,ivy properly check lview array size in binding asserts this fix corrects a bug where we were passing a binding value in place of an expected binding index this reulted in the binding value being compared to an array length and buggy type coercion fixing this bug speed up test scenario by pr close ,fix
6648,core indicate onpush applies to child indicate the onpush change detection strategy applies to all child directive resolve confusion from pr close ,docs
6649,ivy handle class declaration consistently in e code pr close ,fix
6650,ivy use classdeclaration in more reflectionhost method pr close ,refactor
6651,ivy correctly type class declaration in ngtscngcc previously several ngtsc and ngcc apis dealing with class declaration node used inconsistent type for example some method of the decoratorhandler interface expected a tsdeclaration argument but actual decoratorhandler implementation specified a stricter tsclassdeclaration type a a result the stricter method would operate under the incorrect assumption that their argument were of type tsclassdeclaration while the actual argument might be of different type eg ngcc would call them with tsfunctiondeclaration or tsvariabledeclaration argument when compiling e code additionally since we need those class declaration to be referenced in other part of the program ngtscngcc had to either repeatedly check for tsisidentifiernodename or assume there wa a name identifier and use nodename while this assumption happens to be true in the current implementation working around typechecking is errorprone eg the assumption might stop being true in the future this commit fix this by introducing a new type to be used for such class declaration tsdeclaration name tsidentifier and using it consistently throughput the code pr close ,refactor
6652,ivy implement dtsmodulescoperesolver from metadatadtsmodulescoperesolver pr close ,refactor
6653,ivy remove unused code from typecheckcontext pr close ,refactor
6654,docsinfra upgrade cli command doc source to dcdc updating angularmaster from clibuildsmaster relevant change in commit range added helpanalyticsjson modified helpaddjson helpbuildjson helpgeneratejson helpnewjson helpservejson pr close ,build
6655,bazel also back out of jasmine bootstrap simplification pr close ,build
6656,bazel back out of bazeljasmine with shard count pr close ,build
6657,compilercli enable full typescript strictness this commit enables strict true in typescript build of packagescompilercli pr close ,build
6658,serviceworker use adapterparseurl for all url parsing this commit also ensures that the correct implementation is used on environment that do not support url eg nodejs pr close ,refactor
6659,serviceworker test support for multiple apps on different subpaths of a domain pr close ,test
6660,serviceworker make it easy to use a different sw scope in test pr close ,test
6661,serviceworker support multiple apps on different subpaths of a domain previously it wa not possible to have multiple apps using angularserviceworker on different subpaths of the same domain because each sw would overwrite the cache of the others even though their scope wa different this commit fix it by ensuring that the cache name created by the sw are different for each scope fix pr close ,feat
6662,serviceworker do not create testing artifact on environment that do not support sw the test will not be run anyway so the artifact are never used and there might be error if creating the testing artifact relies on apis that are not available in that environment eg url pr close ,test
6663,serviceworker ensure swtestharnessparseurl behaves the same on browser and nodejs pr close ,test
6664,serviceworker make second parameter to adapterparseurl optional pr close ,refactor
6665,bazel add comment about advancing the version of yarn used under bazel in the future pr close ,build
6666,bazel revert back to yarn under bazel to fix window fileinuse issue pr close ,build
6667,ivy emit generic type argument in pipe metadata previously only directive and service with generic type parameter would emit any a generic type when emitting ivy metadata into dts file pipe can also have generic type parameter but did not emit any for all type parameter resulting in the omission of those parameter which cause compilation error this commit add support for pipe with generic type argument and emits any a generic type in the ivy metadata fix pr close ,fix
6668,ivy changedetectorref should be injectable on ngcontainer pr close ,fix
6669,ivy class selector directive execute properly on container element pr close ,fix
6670,ivy ngcc support creating a new copy of the entrypoint format this commit add a newentrypointfilewriter that will be used in webpack integration instead of overwriting file inplace this filewriter will make a copy of the t program file and write the transformed file there it also update the packagejson with new property that can be used to access the new entrypoint format fw pr close ,feat
6671,ivy ngcc extract file writing out into a class this is in preparation of having different file writing strategy pr close ,refactor
6672,ivy ngcc mark target entrypoint a processed even if ngcc wa a noop if targetentrypointpath is provided to mainngcc then we will now mark all the propertiestoconsider for that entrypoint if we determine that it doe not contain code that wa compiled by angular for instance it ha no metadatajson file the commit also renames modifiedbyngcc to processedbyivyngcc since there may be entrypoints that are marked despite ngcc not actually compiling anything pr close ,refactor
6673,ivy ngcc fail buildmarker check if any format were compiled with different ngcc now we check the buildmarker version for all the format rather than just the one we are going to compile this way we dont get into the situation where one format wa built with one version of ngcc and another format wa built with another version pr close ,fix
6674,ivy ngcc clean up the public api and export hasbeenprocessed helper now the public api doe not contain internal type such a absolutefspath and entrypointjsonproperty instead we just accept string and then guard them in mainngcc a appropriate a new public api function hasbeenprocessed ha been exported to allow programmatic checking of the build marker when the packagejson content are already known pr close ,refactor
6675,ivy ngcc use a fixed set of property to compile if none provided previously we always considered all the property in the packagejson if no propertiestoconsidere were provided but this result in computing a new set of property for each entrypoint plus iterating through many of the packagejson property that are not related to bundleformat path pr close ,refactor
6676,ivy ngcc teach esmreflectionhost about aliased variable sometimes in esm code alias to exported variable are used internally to refer to the exported value this prevented some analysis from being able to match up a reference to an export to the actual export itself for example in the following code var httpclientxsrfmodule class function function httpclientxsrfmodule httpclientxsrfmodule httpclientxsrfmodule httpclientxsrfmodulewithoptions function option if option void option return ngmodule httpclientxsrfmodule provider var httpclientxsrfmodule httpclientxsrfmodule httpclientxsrfmodule tslibdecorate ngmodule provider httpclientxsrfmodule return httpclientxsrfmodule we were not able to tell that the ngmodule httpclientxsrfmodule property assignment wa actually meant to refer to the function httpclientxrsfmodule declaration this caused the modulewithproviders processing to fail this commit ensures that we can compile typing file using the esm format so we can now update the example boilerplate tool so that it doe not need to compile the esm format at all pr close ,fix
6677,ivy ngcc empower esmreflectionhost to analyze modulewithproviders function in esm code static method appear a property assignment onto the constructor function for example var myclass function function myclass myclassstaticmethod function return myclass this commit teach ngcc how to process these form when searching for modulewithproviders function that need to be updated in the typing file pr close ,fix
6678,ivy ngcc only test under noivyaot mode we want ngcc to test nonaot build of the angular package so we filter the test in using the noivyaot tag pr close ,build
6679,ivy ngcc support only compiling the first format property to match by default ngcc will compile all the format property specified with this change you can configure ngcc so that it will stop compiling an entrypoint after the first property that match the propertiestoconsider pr close ,feat
6680,ivy ngcc simplify transformertransform api by ensuring that entrypointbundle contains everything that transformertransform need to do it work we can simplify it signature pr close ,refactor
6681,ivy ngcc remove flatformat and use absolutefspath now that we are using packagejson property to indicate which entrypoint format to compile it turn out that we dont really need to distinguish between flat and nonflat format unless we are compiling angularcore pr close ,refactor
6682,ivy ngcc compile only specified packagejson format property you can now specify a list of property in the packagejson that should be considered in order to find the path to the format to compile the build marker system ha been updated to store the marker in the packagejson rather than an additional external file also instead of tracking the underlying bundle format that wa compiled it now track the packagejson property breaking change the proertiestoconsider option replaces the previous format option which specified the final bundle format rather than the property in the packagejson if you were using this option to compile only specific bundle format you must now modify your usage to pas in the property in the packagejson that map to the format that you wish to compile in the cli the format is no longer available instead use the property option fw pr close ,feat
6683,ivy ngcc support targeting a start entrypoint you can now programmatically specify an entrypoint where the ngcc compilation will occur only this entrypoint and it dependency will be compiled fw pr close ,feat
6684,ivy expose ngcc programmatically the mainngcc function ha been refactored to make it easier to call ngcc from javascript rather than via the command line for example the yargs argument parsing and the exception handlinglogging have moved to the mainngccts file so that it is only used for the command line version fw pr close ,refactor
6685,ivy move ngcc into a higher level folder pr close ,refactor
6686,ivy ngcc support dts compilation via e bundle previously we only compiled the typing file in ngcc if there wa an e formatted bundle avaiable this turn out to be an artificial constraint and we can also support typing compilation via e format too this commit change the ngcc compiler to attempt typing compilation via e if necessary the order of the format to consider is now fesm fesm esm esm fw pr close ,feat
6687,ivy ngcc fix typo in comment pr close ,style
6688,bazel upgrade rulesnodejs and rulessass pr close ,feat
6689,ivy update root cause of failure in matbadge pr close ,test
6690,ivy remove passing snack bar test from blocklist remove the test that wa fixed by from the blocklist pr close ,test
6691,bazel fix router test failure pr close ,build
6692,bazel update to nodejs rule pr close ,build
6693,bazel fix jasminenodetest default pr close ,build
6694,bazel update to nodejs rule pr close ,build
6695,bazel update to bazeljasmine pr close ,build
6696,ivy add new material test to blocklist after rebasing material on master we found new test that were added and are still failing this commit add them to the blocklist so we can fix them pr close ,test
6697,core parse incorrect ml open tag a text this pr alligns markup language lexer with the previous behaviour in version x while this behaviour is not perfect we should be giving user an error message here about invalid html instead of assuming text node this is probably best we can do without more substential rewrite of lexing parsing infrastructure this pr just fix and restores ve behaviour a more elaborate fix will be done in a separate pr a it requries nontrivial rewrite pr close ,fix
6698,ivy add description for instruction directory structure pr close ,docs
6699,ivy prevent templateoverrides from causing infinite loop previously the transitive scope calculation could lead into recompiling the same module multiple time this fix ensures we can not get into this loop it should be fixed more completely eg more case once fw is resolved pr close ,fix
6700,ivy introduce hostspecific styling instruction this patch is the first of a few patch which separate the styling logic between template binding eg div style from host binding eg hostbindingstyle this patch in particular introduces a series of hostspecific styling instruction and change the existing set of template styling instruction not to accept directive the underyling code which communicates with the styling algorithm still work a it did before this pr also separate the styling instruction code into a separate file and move over all other instruction into an dedicated instruction directory pr close ,fix
6701,ivy move instruction into separate directory pr close ,refactor
6702,core parse incorrect ml open tag a text this pr alligns markup language lexer with the previous behaviour in version x while this behaviour is not perfect we should be giving user an error message here about invalid html instead of assuming text node this is probably best we can do without more substential rewrite of lexing parsing infrastructure this pr just fix and restores ve behaviour a more elaborate fix will be done in a separate pr a it requries nontrivial rewrite pr close ,fix
6703,core fix typo in ngmodule import example description pr close ,docs
6704,form fix small typo in form documentation pr close ,docs
6705,ivy avoid unnecessary recompilations in testbed prior to this change we always recompile all componentsdirectivespipes even if they were aotcompiled and had no override this is causing problem in case we try to recompile a component with templateurl or styleurls which were already resolved in case of aot and generally this unnecessary work that testbed wa doing is not required this commit add extra logic to check whether a componentdirectivepipe already have compiled ng def like ngcomponentdef and whether there are no override present in this case recompilation is skipped recompilation is also skipped in case a componentdirective ha only provider override in this situation provider resolver function is patched to reflect override provider override are very common in g thus this code path ensures no full recompilation pr close ,feat
6706,ivy dont track identifier of ffrresolved reference this fix is for a bug in the ngtsc partialevaluator which statically evaluates expression sometimes evaluating a reference requires resolving a function which is declared in another module and thus no function body is available to support this case the partialevaluator ha the concept of a foreign function resolver this allows the interpretation of expression like const router routermoduleforroot even though the definition of the forroot function ha no body in ngtsc today this will be resolved to a reference to routermodule itself via the modulewithproviders foreign function resolver however the partialevaluator also associate any identifier in the path of this resolution with the reference this is done so that if the user writes const x importedy x can be generated a a local identifier instead of adding an import for y this wa at the heart of a bug in the above case with router the partialevaluator added the identifier router to the reference generated through ffr to routermodule this is not correct reference that result from ffr expression may not have the same value at runtime a they do at compile time indeed this is not the case for modulewithproviders the reference generated via ffr is synthetic in the sense that it constructed based on a useful interpretation of the code not an accurate representation of the runtime value therefore it may not be legal to refer to the reference via the router identifier this commit add the ability to mark such a reference a synthetic which allows the partialevaluator to not add the router identifier down the line test are included for both the partialevaluator itself a well a the resultant buggy behavior in ngtsc overall pr close ,fix
6707,ivy run annotation handler resolve in ngcc the resolve phase run after all handler have analyzed wa introduced in ddffd but ngcc wa not updated to run the handler resolve method a a result certain operation such a listing directive used in component template would not be performed by ngcc this commit fix it by running the resolve method once analysis ha been completed pr close ,fix
6708,ivy expand ngcc decorationanalyzer test to cover more case pr close ,test
6709,ivy avoid code duplication in ngcc test pr close ,refactor
6710,ivy improve error message in ngtscs findexportednameofnode pr close ,refactor
6711,ivy remove unnecessary escaping in regexp pr close ,refactor
6712,core fix misleading tslint schematic message fix the incorrect failure message or the tslint rule that is used within google the tslint rule is not part of the public schematic code additionally in order to make it easier to understand what action the developer need to take we rather print out the expected static truefalse statement instead of saying that a query need to be static or dynamic dynamic is ambiguous a there is no dynamic true option pr close ,refactor
6713,ivy update queryrelated comment just updating comment in queryrelated thing to make it easier for the next person that ha to grok this for the first time also add a demo from mhevery to one of the query spec related pr close ,refactor
6714,ivy update queryrelated comment just updating comment in queryrelated thing to make it easier for the next person that ha to grok this for the first time also add a demo from mhevery to one of the query spec related pr close ,refactor
6715,compilercli incorrect metadata bundle for multiple unnamed reexports currently if an angular library ha multiple unnamed module reexports ngc will generate incorrect metdata if the project is using the flatmodule bundle option eg publicapits t export from mypkgsecondary export from mypkgsecondary there are clearly two unnamed reexports in the publicapits file ngc right now accidentally overwrites all previous reexports with the last one resulting in the generated metadata only containing a reference to mypkgsecondary this is problematic a it is common for primary library entrypoints to have multiple reexports eg material reexporting all public symbol or flexlayout exporting all public symbol from their secondary entrypoints currently angular material work around this issue by manually creating a metadata file that declares the reexports from all unnamed reexports see this workaround work fine currently but is no longer easily integrated when building the package output with bazel in order to be able to build such library with bazel materialflexlayout we need to make sure that ngc generates the proper flatmodule metadata bundle pr close ,fix
6716,ivy remove tree test from blocklist remove all of the test fixed by from the blocklist pr close ,test
6717,docsinfra upgrade cli command doc source to cafacf updating angularmaster from clibuildsmaster relevant change in commit range modified helpbuildjson pr close ,build
6718,ivy add doc to in interface pr close ,refactor
6719,bazel correct regexp test for selfreferences in metadata add a test that catch the mistake should have had this in the previous change pr close ,fix
6720,ivy listener inherited twice if sub class ha own propmetadata fix host listener being inherited twice if the sub class ha it own propmetadata this is related to which fixed something similar however all of the test case there had a super class with some metadata and a sub class that didnt have any the issue manifested itself in the mattreetoggle which inherits a listener from the cdktreetoggle and add an extra input of it own causing the listener to be added twice pr close ,fix
6721,ivy update tnodetype remove an extra type vieworelement which even had the same numeric value a view update comment to remove part about alleged bitmasking that we could be doing here we arent using this with bitmasks and if we were everything would be a nodetypecontainer because it value wa update the number value to be simple humanreadable integer since were not using these with any kind of bitmanipulation add comment about each type pr close ,refactor
6722,ivy add temporary hack for deprecatedoverrideprovider hack this is not the correct implementation for deprecatedoverrideprovider we do not plan to implement this at all since the api is deprecated and scheduled for removal in v this hack is here temporarily for ivy testing until we transition apps inside google to the overrideprovider api at that point we will be able to remove this method entirely in the meantime we can use overrideprovider here to test apps with ivy that dont care about eager instantiation this fix of case in our blueprint pr close ,fix
6723,bazel support new ee project layout change the project layout for the ee application it is no longer a separate project and the ee directory is now located alongside the existing project this commit update bazel scheamtics to support both old and new project layout pr close ,fix
6724,bazel dont produce selfreferences in metadata fix pr close ,fix
6725,bazel remove angularupgrade from dev dependency angularupgrade is unnecessary but it required by routerupgrade pr close ,fix
6726,aio add jbedard to angular collaborator pr close ,fix
6727,ivy ensure template stylesclasses are applied before directive are instantiated angular ivy interprets inline static styleclass attribute value a instruction that are processed whilst an element get created because these inline style value are referenced by styleclass binding their inline style value are applied at a later stage despite them being eventually applied their value should be applied earlier before any directive are instantiated so that directive code can rely on any inline styleclass change this patch ensures that all static styleclass attribute value are applied rendered on the element before directive are instantiated jira issue fw pr close ,fix
6728,ivy update root cause for stepper remove the stepperrelated test from the blocklist which were fixed by pr close ,test
6729,ivy correctly remove placeholder inside of ngfor with runtime in following my previous change for placeholder removal some special code that wa used to find the last created node wa no longer needed and had wrong interaction with the ngfor directive removing it fixed the issue pr close ,fix
6730,docsinfra update aio dependency within their current range pr close ,build
6731,core better failure message for explicitquery timing tslint rule improves the failure message for the explicitquery timing tslint rule that is used within google currently it not very clear what action developer need to take in order to resolve the lint failure manually pr close ,refactor
6732,core add tslint rule entrypoint for staticquery migration in order to be able to use the staticquery migration logic within google we need to provide a tslint rule entrypoint that wire up the schematic logic and provides reporting and automatic fix pr close ,refactor
6733,bazel update bazel managed yarn to same a ci version pr close ,build
6734,bazel turn off pure call tree shaking for ngpackage pr close ,fix
6735,ivy update blocklist to turn on passing test pr close ,test
6736,docsinfra automatically create preview for member of aioautopreviews pr close ,build
6737,ivy do not inject attribute with namespace when injecting with attribute namespaced attribute should not match in order to have feature parity with view engine this pr resolve fw pr close ,fix
6738,ivy enable passing material test pr close ,test
6739,core dont wrap tr and col element into a required parent breaking change certain element like tr or col require parent element to be of a certain type by the html specification ex tr can only be inside tbody thead before this change angular template parser wa autocorrecting invalid html using the following rule tr would be wrapped in tbody if not inside tbody tfoot or thead col would be wrapped in colgroup if not inside colgroup this meachanism of automatic wrapping autocorrecting wa problematic for several reason it is nonobvious and arbitrary ex there are more html element that ha rule for parent type it is incorrect for case where tr col are at the root of a component content ex html projectingtrinsidetbody trtr projectingtrinsidetbody in the above example the projectingtrinsidetbody component culd be surprised to see additional tbody element inserted by angular html parser pr close ,fix
6740,aio add adam plumer to angular collaborator pr close ,docs
6741,ivy unable to inherit view query into component from directive fix component not being able to inherit their view query from a directive this pr resolve fw pr close ,fix
6742,aio add cédric exbrayat to angular collaborator pr close ,docs
6743,bazel fix tsconfig extends for packagesbazeltestprotractortsspec pr close ,build
6744,bazel fix strict null check compile error in packagesbazelsrcschematicsngaddindexts pr close ,fix
6745,ivy update blocklist to turn on table test pr close ,test
6746,ivy properly compile ngmodules with forward referenced type previously ngtsc would resolve forward reference while evaluating the bootstrap declaration import and export field of ngmodule type however when generating the resulting ngmoduledef the forward nature of these reference wa not taken into consideration and so the generated j code would incorrectly reference type not yet declared this commit fix this issue by introducing function closure in the ngmoduledef type similarly to how ngcomponentdef us them for forward declaration of it directive and pipe array ngtsc will then generate closure when required and the runtime will unwrap them if present pr close ,fix
6747,aio add jialipassion to angular collaborator pr close ,docs
6748,ivy reuse default import in typetovalue reference this fix an issue with commit bfb in this commit default import processed in a typetovalue conversion were recorded a nonlocal import with a name and the importmanager generated a new default import for them when transpiled to e module this resulted in the following correct code import i from module somewhere in the file a value reference of i type i however when the ast with this synthetic import and reference wa transpiled to none module for example to commonjs an issue appeared var module requiremodule type i typescript renames the imported identifier from i to module but doesnt substitute later reference to i this is because the import and reference are both synthetic and never went through the typescript ast step of binding which associate the reference to it import this association is important during emit when the identifier might change synthetic transformeradded import will never be bound properly the only possible solution is to reuse the user original import and the identifier from it which will be properly downleveled the issue with this approach which prompted the fix in bfb is that if the import is only used in a type position typescript will mark it for deletion in the generated j even though additional nontype usage are added in the transformer this again would leave a dangling import to work around this it necessary for the compiler to keep track of identifier that it emits which came from default import and tell t not to remove those import during transpilation a defaultimporttracker class is implemented to perform this tracking it implement a defaultimportrecorder interface which is used to record two significant piece of information when a wrappednodeexpr is generated which refers to a default imported value the tsidentifier is associated to the tsimportdeclaration via the recorder when that wrappednodeexpr is later emitted a part of the statement expression translator the fact that the tsidentifier wa used is also recorded combined this tracking give the defaultimporttracker enough information to implement another t transformer which can recognize default import which were used in the output of the ivy transform and can prevent them from being elided this is done by creating a new tsimportdeclaration for the import with the same tsimportclause a test verifies that this work pr close ,fix
6749,ivy unable to inject class and style attribute fix not being able to inject the class and style attribute via the attribute decorator this pr resolve fw pr close ,fix
6750,ivy use default selector for component if selector is empty prior to this change default selector for component wa not applied in case selector is missing or defined a an empty string this update aligns this behavior between ivy and ve now default selector is used for component when it needed directive with empty selector are not allowed and trigger a compiletime error in both ivy and ve pr close ,fix
6751,ivy enable passing material test pr close ,test
6752,ivy properly match directive on ngtemplate with syntax pr close ,fix
6753,ivy diagnose root cause of failure in cdktable and mattable pr close ,test
6754,core staticquery schematic should not run multiple time with we introduced a schematic for the new staticquery timing currently when someone run the update schematic manually within his cli project the schematic doe not run automatically yet he might have noticed that the migration is executed for the same tsconfig file multiple time this can happen because the getprojecttsconfigpaths function can incorrectly return the same tsconfig multiple time the path are not properly deduped a we dont normalize the determined project tsconfig path pr close ,refactor
6755,core staticquery migration doe not detect external call expression currently the staticquery migration doe not properly handle function which are declared externally this is because we dont resolve the symbol of the callexpression through it type currently we just determine the symbol of the callexpression through the given call expression node which doesnt necessarily refer to the value declaration of the call expression eg the symbol refers to the import declaration which import the external function this mean that we currently cant check the external function a we couldnt find the actual value declaration we can fix this by resolving the type of the call expression and using the type in order to retrieve the symbol containing the value declaration pr close ,refactor
6756,core staticquery schematic incorrectly handle multiple tsconfigs currently when the staticquery run for a project with multiple typescript configuration file eg a usual cli project the migration incorrectly applies the code transformation multiple time this is because the migration is currently based on the source file content in the file system while the actual source file content could have already changed in the devkit schematic tree pr close ,refactor
6757,core static query schematic should handle asynchronous query usage properly with fbeebffff we introduced a schematic for the angular core package that automatically migrates unexplicit query definition to the explicit query timing static dynamic a the initial foundation wa already big enough it wa planned to come up with a followup that handle asynchronous query usage properly eg query could be used in promise settimeout setinterval requestanimationframe and more but the schematic would incorrectly declare these query a static this commit ensures that we properly handle these micromacro task and dont incorrectly consider query a static the declaration usage visitor should only check the synchronous control flow and completely ignore any statement within function like expression which arent explicitly executed in a synchronous way eg iifes still work a the function expression is synchronously invoked pr close ,refactor
6758,ivy update root cause of failure in matsnackbar pr close ,test
6759,docsinfra reenable systemjs jit doc example with fbccfdfaaeaded the bug that required u to temporarily disable these two systemjs jit test ha been fixed therefore we can reenable these test pr close ,ci
6760,ivy platform module bootstrap doe not resolve resource currently with viewengine if someone run the platform bootstrapmodule method in order to boostrap a module in jit mode external component resource are properly resolved automatically currently with ivy the developer would need to manually call resolvecomponentresources in order to asynchronously fetch the determined external component resource in order to make this backwards compatible with viewengine and also since platform can already specify a resourceloader compiler provider we need to automatically resolve all external component resource on module bootstrap since the resourceloader is part of the angularcompiler because viewengine performed the factory creation in the compiler we cant access the resourceloader token from within core in order to workaround this without introducing a breaking change we just proxy the resourceloader token to core through the compiler facade in the future we should be able to move the resourceloader to core when viewengine code no longer exists in the angularcompiler pr close ,fix
6761,ivy only remove missing placeholder with runtime in dynamic node are created at the end of the view stack but we were removing all the placeholder between instart and the last created node index instead of removing everything between instart and inend this caused error when dynamic node where created in multiple in block because we would remove all of the dynamic node created in the previous in block pr close ,fix
6762,bazel add missing binary path for apiextractor apiextractor binary is required for external consumer of ngmodule that want to use the bundledts flag this also set a different apiexttractor binary to use for ngmodule based if it internal or external pr close ,fix
6763,docsinfra run cli doc example concurrently pr close ,ci
6764,docsinfra support running cli doc example concurrently pr close ,build
6765,docsinfra upgrade cli command doc source to ccdb updating angularmaster from clibuildsmaster relevant change in commit range modified helpgeneratejson pr close ,build
6766,ivy add table root cause pr close ,test
6767,ivy handle aliased angular decorator prior to this change the code didnt take into account the fact that decorator can be alias while importing into a script a a result these decorator were not recognized by angular and various failure happened because of that now we take alias into account and resolve decorator name properly pr close ,fix
6768,ivy remove chip list test from blocklist update the blocklist to enable the test that were fixed by this pr resolve fw pr close ,test
6769,ivy diagnose root cause of failure in cdktree and mattree pr close ,test
6770,ivy always convert rootdirs to absolutefspath in getrootdirs getcurrentdirectory directory doesnt return a posix separated normalized path while rootdir and rootdirs should return posix separated path it best to not assume a other path within the compiler option can be returned not posix separated such a basepath see this partially fix however there need to be a change in the cli a well to handle this a at the moment we are leaking devkit path which is not correct fix pr close ,fix
6771,ivy render alias export for private declaration if possible sometimes declaration are not exported publicly but are exported under a private name in this case rather than adding a completely new export to the entry point we should create an export that alias the private name back to the original public name this is important when the typing file have been rolledup using a tool such a the api extractor in this case the internal type of an aliased private export will be removed completely from the typing file so there is no original type to reexport for example if there are the following t file entrypointts t export internal a external from internal internalts t export class internal foo void then the api extractor might roll up the dts file into t export declare class external foo void in this case ngcc should add an export so the file look like t export declare class external foo void export external a internal pr close ,fix
6772,ivy process separate declaration and export for summary ngsummary file were generated with an export for each class declaration however some angular code declares class class foo and export them export foo separately which wa causing incomplete summary file this commit expands the set of symbol name for which summary export will be generated fixing this issue pr close ,fix
6773,ivy escape all required character in reexport alias previously the compiler did not escape or and this wa causing issue in google now these character are escaped pr close ,fix
6774,ivy produce tsdiagnostics for ngmodule scope error previously when the ngmodule scope resolver discovered semantic error within a user ngmodules it would throw assertion error todos in the codebase indicated these should become tsdiagnostics eventually besides producing betterlooking error there is another reason to make this change asap these assertion were shadowing actual error via an interesting mechanism a component would produce a tsdiagnostic during it analyze step a a result it wouldnt register component metadata with the scope resolver the ngmodule for the component reference it in export which wa detected a an invalid export no metadata registering it a a component the resulting assertion error would crash the compiler hiding the real cause of the problem an invalid component this commit should mitigate this problem by converting scoping error to proper tsdiagnostics additionally we should consider registering some marker indicating a class is a directivecomponentpipe without actually requiring full metadata to be produced for it which would allow suppression of error like invalid export for such invalid type pr close ,fix
6775,form adding clear method to formarray documentation pr close ,docs
6776,ivy inherited host listener called twice fix host listener being inherited twice when going through setclassmetadata this pr resolve fw pr close ,fix
6777,ivy generate type reference to a default import this commit refactors and expands ngtscs support for generating import of value from import of type this is used for example when importing a class referenced in a type annotation in a constructor previously this logic handled import foo from and import a foo from style import but failed on import of default value import foo from this commit move the typetovalue logic to a separate file and expands it to cover the default import case doing this also required augmenting the importmanager to track default a well a nondefault import generation the apis were made a little cleaner at the same time pr close ,fix
6778,ivy switch ngtsc to use singlefile emit in the typescript compiler api emit can be performed either on a single tssourcefile or on the entire tsprogram simultaneously ngtsc previously used wholeprogram emit which wa convenient to use while spinning up the project but ha a significant drawback it cause a type checking operation to occur for the whole program including dts file in large bazel environment such a google codebase an ngtsc invocation can have a few t file and thousand of dts input this unwanted type checking is therefore a significant drain on performance this commit switch ngtsc to emit each t file individually avoiding the unwanted type checking pr close ,perf
6779,ivy ngcc handle prototype pseudomember from typing file in esm host when processing a javascript program t may come across a symbol that ha been imported from a typescript typing file in this case the compiler may pas the reflectionhost a prototype symbol a an export of the class this pseudomember symbol ha no declaration which previously caused the code in esmreflectionhostreflectmembers to crash now we just quietly ignore such a symbol and leave esmreflectionhost to deal with it a it happens esmreflectionhost also quietly ignores this symbol pr close ,fix
6780,form clear remove all component from a formarray this method is a more convenient and efficient way of removing all component from a formarray before it we needed to loop the formarray removing each component until empty resolve pr close ,feat
6781,ivy fix failing view ref test pr close ,test
6782,ivy add table root cause pr close ,test
6783,ivy move in instruction after listener one prior to this commit in instruction in instart were generated before listener instruction a a result event listener were attached to the wrong element text node not the parent element this change update the order of instruction and put in one after listener to make sure listener are attached to the right element pr close ,fix
6784,docsinfra add script for verifying all guidesexamplesimages have owner it is useful for manually checking that all guidesexamplesimages have owner in githubcodeowners but is not used for automatic verification eg on ci for now pr close ,test
6785,bazel remove bazelworkspace schematic bazelworkspace schematic is no longer needed now that the bazel file are injected into the project by the bazel builder pr close ,refactor
6786,bazel eject bazel add command line flag to expose bazel file on disk ng build leavebazelfilesondisk pr close ,feat
6787,ivy teach template type checker about template attribute for the template type checking to work correctly it need to know what attribute are bound to expression or directive which may require expression in the template to be evaluated in a different scope in inline template there are attribute that are now marked a template attribute we need to ensure that the template type checking code look at these bound attribute a well a the input attribute pr close ,fix
6788,ivy add test for projection on inlinetemplates pr close ,test
6789,ivy match attribute selector for content projection with inlinetemplates the content projection mechanism is static in that it only look at the static template node before directive are matched and change detection is run when you have a selectorbased content projection the selection is based on node that are available in the template for example ngcontent selectorsomeattrngcontent would match div someattrdiv if you have an inlinetemplate in your projected node for example div ngif someattrdiv this get preparsed and converted to a canonical form for example ngtemplate ngif div someattrdiv ngtemplate note that only structural attribute eg ngif stay with the ngtemplate node the other attribute move to the contained element inside the template when this happens in ivy the ngtemplate content is removed from the component template function and is compiled into it own template function but this mean that the information about the attribute that were on the content are lost and the projection selection mechanism is unable to match the original div ngif someattr this commit add support for this in ivy attribute are separated into three group binding template and other for inlinetemplates the binding and other type are hoisted back from the contained node to the template instruction so that they can be used in content projection matching pr close ,fix
6790,ivy define new attributemarkertemplate marker this commit add a new attributemarker type that will be used in a future commit to mark attribute a coming from an inlinetemplate expansion rather than the element that is being contained in the template pr close ,refactor
6791,compiler ensure template is updated if an output is transformed no idea where the test for this code are but it look like this wa an oversight in the original commit af pr close ,fix
6792,ivy turn on passing material test for cdktree pr close ,test
6793,ivy update native table root cause pr close ,test
6794,ivy viewrefdetachfromappref should clean the dom pr close ,fix
6795,ivy diagnose root cause for matinput pr close ,test
6796,bazel hide bazel file in bazel builder this commit modifies the bazel builder to copy the bazel workspace and buildbazel file to the project root directory before invoking bazel this hide the bazel file from user pr close ,feat
6797,bazel ng build should produce prod bundle ng build should produce a bundle that could be readily deployed to a web server similar to the behavior of current ng build with webpack note that in bazel there is no ng build for dev bundle instead user are expected to run tsdevserver close pr close ,fix
6798,ivy turn on passing material test for matselect pr close ,test
6799,ivy diagnose root cause of failure in matsnackbar pr close ,test
6800,ivy enable passing matchiplist test pr close ,test
6801,ivy content projection should not corrupt tnode data structure pr close ,fix
6802,ivy failing test for fw pr close ,test
6803,ivy properly detect input and output field name that should be wrapped in quote prior to this change the regexp that wa used to check for dash in field name used g global flag that retains lastindex which might result in skipping some field that should be wrapped in quote since lastindex advanced beyond the next location this commit remove this flag and update the test to make sure there are no regression pr close ,fix
6804,platformserver wait on returned beforeappserialized promise this update give external tooling the ability for async provider to finish resolving before the document is serialized this is not a breaking change since render already return a promise all returned promise from beforeappserialized provider will wait to be resolved or rejected any rejected promise will only consolewarn pr close ,feat
6805,ivy avoid innerhtml usage in export test to make it work in ie some test in export spec rely on the exact output of innerhtml in ie the order of attribute might change thus causing test to fail in case an element contains more than one attribute this commit avoids innerhtml usage and performs the necessary check via element property pr close ,fix
6806,ivy fix export test to work in ie some of the export test had assertion that relied on capitalization of attribute in the dom ie treat capitalization somewhat differently so our saucelabs test were failing this commit tweak the test so that the assertion do not rely on attribute to be capitalized or not pr close ,test
6807,serviceworker verify that configschemajson is published to npm pr close ,test
6808,serviceworker add json schema for service worker config fix pr close ,feat
6809,ivy never use imported type reference a value ngtsc occasionally convert a type reference such a the type of a parameter in a constructor to a value reference argument to a directiveinject call typescript ha a bad habit of sometimes removing the import statement associated with this type reference because it a type only import when it initially look at the file a solution to this is to always add an import to refer to a type position value thats imported and not rely on the existing import pr close ,fix
6810,ivy support property value changed in ngonchanges forward rref case pr close ,fix
6811,core update schematic to migrate to explicit query timing introduces an update schematic for the angularcore package that automatically migrates prev viewchild and contentchild query to the new explicit timing syntax this is not required yet but with ivy query will be dynamic by default therefore specifying an explicit query timing ensures that developer can smoothly migrate to ivy once it the default read more about the explicit timing api here pr close ,feat
6812,docsinfra ivy prebuild script should not run ngcc for all format currently when building aio with ivy we run ngcc and transform all found format this potentially slows down the build and therefore the testaiolocalivy job since it not necessary to build all format and we only need fesm and fesm we can explicitly specify the required format note currently this doe not have any big effect because angular material doe not ship es file the change primarily just suppresses the ngcc message for material not providing es entrypoints technically if new nonivy package are added to aio this speed up the build a we dont build the unused format pr close ,build
6813,docsinfra testaiolocalivy job should attach ivy package output currently the testdocsexamplesivy job attache the legacy package output while we can also attach the ivy npm package output we dont need ngcc to downlevel the angular package in order to build aio with ivy pr close ,ci
6814,languageservice clean up import languageservice and misspelling in public api pr close ,refactor
6815,router align example in interface doc use exclusively teamcomponent class for example a currently there are at least different component class being used one of which is actually a a type argument for a resolvet implementation pr close ,docs
6816,router removed obsolete todo comment pr close ,fix
6817,platformserver update minimum domino version to latest released the version used to test and build from the root packagejson is pinned to this change ensures that user will at a minimum be using the same version pr close ,fix
6818,serviceworker detect new version even if file are identical to an old one previously if an app version contained the same file a an older version eg making a change then rolling it back the sw would not detect it a the latest version and update client this commit fix it by adding a timestamp field in ngswjson which make each build unique with sufficiently high probability fix pr close ,fix
6819,ivy restore root cause that were accidentally deleted pr close ,test
6820,ivy copy toplevel comment into generated factory shim when ngtsc generates a ngfactory shim it doe so based on the content of an original file in the program occasionally these original file have comment at the top which are loadbearing eg they contain jsdoc annotation which are significant to downstream bundling tool the generated factory shim should preserve this comment this commit add a step to the ngfactory generator to preserve the toplevel comment from the original source file fw resolve fw resolve pr close ,fix
6821,ivy remove ngcomponentoutlet example with a lazyloaded ngmodule pr close ,test
6822,ivy wrap input and output key if they contain unsafe character prior to this change key in input and output object generated by compiler were not checked against unsafe character a a result in some case the generated code wa throwing j error now we check whether a given key contains any unsafe char and wrap it in quote if needed pr close ,fix
6823,ivy ensure static styling is properly inherited into child component angular support having a component extend off of a parent component when this happens all annotationlevel data is inherited including style and class up until now ivy only paid attention to static styling value on the parent component and not the child component this patch ensures that both the parent component and child component styling data is merged and rendered accordingly jira issue fw pr close ,fix
6824,serviceworker ignore passive mixed content request although passive mixed content request like image only produce a warning without a serviceworker fetching it via a serviceworker result in an error see for more detail this commit make the serviceworker ignore such request and let them be handled by the browser directly to avoid breaking apps that would work without the serviceworker fix pr close ,fix
6825,ivy remove query result from embedded view on view destroy pr close ,fix
6826,docsinfra update where we are presenting pr close ,docs
6827,ivy update root cause for chip list update the remaining unknown root cause for matchiplist this pr resolve fw pr close ,test
6828,ivy update root cause for drag drop update the root cause for the failure in cdkdrag this pr resolve fw pr close ,test
6829,ivy update root cause for tooltip update the root cause for the mattooltip failure these change resolve fw pr close ,test
6830,ivy update sidenav root cause update a couple of the root cause for matsidenav which ended up being a different issue pr close ,test
6831,ivy change forof to foreach for pipe represented with map this commit fix the problem with using forof for pipe represented with map by replacing it with foreach operation pr close ,fix
6832,ivy attached flag not being reset when view is destroyed currently we only reset the attached flag of a view if it is detached through it parent however this mean that if a root view is destroyed it flag will never be reset this manifested itself in one of the material test where we were destroying the root view this pr resolve fw pr close ,fix
6833,ivy correctly evaluate enum reference in template expression the ngtsc partial evaluator previously would not handle an enum reference inside a template string expression correctly enums are resolved to an enumvalue type which ha a resolved property with the actual value when effectively tostringing a resolvedvalue a part of visiting a template expression the partial evaluator need to translate enumvalues to their fully resolved value which this commit doe pr close ,fix
6834,ivy use the imported name of decorator for detection currently ngtsc ha a bug where if you alias the name of a decorator when importing it it wont be detected properly this is because the compiler us the aliased name and not the original declared name of the decorator for detection this commit fix the compiler to compare against the declared name of decorator when available and add a test to prevent regression pr close ,fix
6835,ivy track cyclic import that are added ngtsc ha cyclic import detection to determine when adding an import to a directive or pipe would create a cycle however this detection must also account for already inserted import a it possible for both direction of a circular import to be inserted by ivy a opposed to at least one of those edge existing in the user program this commit fix the circular import detection for component to take into consideration already added edge this is difficult for one critical reason only edge to file which will actually be imported should be considered however that depends on which directive pipe are used in a given template which is currently only known by running the templatedefinitionbuilder during the compile phase this is too late the decision whether to use remote scoping which consults the import graph is made during the resolve phase before any compilation ha taken place thus the only way to correctly consider synthetic edge is for the compiler to know exactly which directive pipe are used in a template during resolve there are two way to achieve this refactor templatedefinitionbuilder to do it work in two phase with directive matching occurring a a separate step which can be performed earlier use the rtargetbinder in the resolve phase to independently bind the template and get information about used directive option is ideal but option is currently used for practical reason the cost of binding the template can be shared with templatetypechecking pr close ,fix
6836,ivy support dynamic host attribute binding in the component decorator the host field is an object which represents host binding the type of this field is complex but is generally of the form key string string several different kind of binding can be specified depending on the structure of the key for example component host prop someexpr will bind an expression someexpr to the property prop this is known to be a property binding because of the square bracket in the binding key if the binding key is a plain string no bracket or parenthesis then it is known a an attribute binding in this case the righthand side is not interpreted a an expression but is instead a constant string there is no actual requirement that at build time these constant string are known to the compiler but this wa previously enforced a a side effect of requiring the binding expression for property and event binding to be statically known a they need to be parsed this commit break that relationship and allows the attribute binding to be dynamic in the case that they are dynamic the reference to the dynamic value are reflected into the ivy instruction for attribute binding pr close ,fix
6837,ivy support tracking the provenance of dynamicvalue dynamicvalues are generated whenever a partially evaluated expression is unable to be resolved statically they contain a reference to the tsnode which wasnt resolvable they can also be nested for example the expression a b is resolvable only if a and b are themselves resolvable if either a or b resolve to a dynamicvalue the whole expression must also resolve to a dynamicvalue previously if a resolved to a dynamicvalue the entire expression might have been resolved to the same dynamicvalue this correctly indicated that the expression wasnt resolvable but didnt return a reference to the shallow node that couldnt be resolved the expression a b only a reference to the deep node that couldnt be resolved a in certain situation it very useful to know the shallow unresolvable node for example to use it verbatim in the output to support this the partial evaluator is updated to always wrap dynamicvalue to point to each unresolvable expression a it processed ensuring the receiver can determine exactly which expression node failed to resolve pr close ,feat
6838,ivy move view that are already attached in insert currently if a user accidentally call viewcontainerrefinsert with a view that ha already been attached we do not clean up the reference properly so we create a view tree with a cycle this cause an infinite loop when the view is destroyed this pr ensures that we fall back to viewcontainerrefmove behavior if we try to insert a view that is already attached this fix the cycle and honor the user intention pr close ,fix
6839,animation fix unitbased delay within the animation dsl close pr close ,test
6840,ivy add link to recursive benchmark pr close ,docs
6841,bazel api extractor dont generate tsdoc metadata tsdoc metadata is not needed for ngmodule and with microsoftapiextractor version there is a new flag to disable it generation see pr close ,fix
6842,bazel ng serve should always watch pr close ,fix
6843,bazel revert back to nonvendored yarn in noderepositories resolve window issue pr close ,build
6844,docsinfra disable failing ivy jit systemjs example a a side effect of bbaedcbccd we fixed that the doc systemjs example currently do not run with ivy in jit mode this now uncovered new failure with the jit resource loading eg zonejs unhandled promise rejection component phonelistcomponent is not resolved templateurl phonelisttemplatehtml did you run and wait for resolvecomponentresources zone root task promisethen value error component phonelistcomponent is not resolved templateurl phonelisttemplatehtml did you run and wait for resolvecomponentresources at functionget directivets at getcomponentdef definitionts at verifydeclarationshavedefinitions modulets at arrayforeach anonymous at verifysemanticsofngmoduledef modulets at functionget modulets at getinjectordef defsts at rinjectorprocessinjectortype rinjectorts at eval rinjectorts at eval rinjectorts error component phonelistcomponent is not resolved we temporarily disable these two failing systemjs example by adding them to the fixmeivyexamples list pr close ,ci
6845,docsinfra example should not run ngcc for all format currently when adding the example boilerplate to all example with ivy enabled we run ngcc and transform all found format this potentially slows down the build and is not necessary a we only need the fesm and fesm bundle pr close ,build
6846,bazel add favicon to web package this would fix the resourcenotfound error pr close ,fix
6847,compiler correct lexer argument description pr close ,docs
6848,ivy correctly tokenize escaped character in template previously the start of a character indicated by an escape sequence wa being incorrectly computed by the lexer which caused token to include the start of the escaped character sequence in the preceding token in particular this affected the name extracted from opening tag if the name wa terminated by an escape sequence for example tn would have the name t rather than t this fix refactors the lexer to use a cursor object to iterate over the character in the template source there are two cursor implementation one expects a simple string the other expects a string that contains javascript escape sequence that need to be unescaped pr close ,fix
6849,compiler remove notnull operator hack from lexer the part of a token are supposed to be an array of notnull string but we were using null for tag that had no prefix this ha been fixed to use the empty string in such case which allows the null hack to be removed pr close ,refactor
6850,ivy avoid missing import for type that can be represented a value prior to this change typescript stripped out some import in case we reference a type that can be represented a a value for ex class this fix ensures that we use correct symbol identifier which make typescript retain the necessary import statement pr close ,fix
6851,ivy simplify logic of projectable node insertion this commit remove code duplication around projectables node insertion it also simplfy the overall logic by using recursive function call instead of handunrolled stack we can always optimise this part if needed pr close ,refactor
6852,ivy resolve forwardref when analyzing ngmodule fix forward ref not being resolved when an ngmodule is being analyzed by ngtsc this pr resolve fw pr close ,fix
6853,ivy update root cause for expansion panel and accordion remove some test that were failing due to static query from the blocklist related material pr pr close ,test
6854,animation ensure position and display style are handled outside of keyframeswebanimations when webanimations andor cs keyframes are used for animation certain cs style value such a display and position may be ignored by a keyframebased animation angular should specialcase these style to ensure that they get applied a inline style throughout the duration of the animation close close jira issue fw jira issue fw pr close ,fix
6855,ivy support inline style and link tag in component angular support using style and link tag inline in component template but previously such tag were not implemented within the ngtsc compiler this commit introduces that support fw resolve pr close ,feat
6856,ivy process property binding in in block similar to nonin binding prior to this change in block binding were converted to expression right away once we first access them when in nonin case we processed them differently the actual conversion happens at instruction generation because of this discrepancy the output for binding in in block wa generated incorrectly with invalid indicies in pipebindn fns and invalid reference to nonexistent local variable now the binding processing is unified and inexp instruction should contain right bind expression pr close ,fix
6857,ivy add support for window concrete type for path this commit introduces support for the window path in the new concrete type mechanism that wa introduced in this pr normalized posix path that start with either a or c are considered to be an absolute path note c is used a a reference a other drive letter are also supported fix pr close ,feat
6858,ivy avoid duplicate in consts to be present in generated output prior to this change the logic that output in consts like const msgxxx googgetmsg didnt have a check whether a given const that represent a certain in message wa already included into the generated output this commit add the logic to mark corresponding in context after translation wa generated to avoid duplicate consts in the output pr close ,fix
6859,core fix legacyunittestssaucelabs job karma is not configured to retrieve the imported script using those absolute deep path using relative path instead see here for an example failing job pr close ,ci
6860,docsinfra upgrade cli command doc source to bfe updating angularmaster from clibuildsmaster relevant change in commit range modified helpgeneratejson helpnewjson pr close ,build
6861,ivy record root cause of cdkvirtualscrollviewport failure pr close ,test
6862,ivy correctly resolve shorthand property declaration the partial evaluator in ngtsc can handle a shorthand property declaration in the middle evaluation but fails if evaluation start at the shorthand property itself this is because evaluation start at the tsidentifier of the property the tsexpression representing it not the tsdeclaration for the property the fix for this is to detect in typescriptreflectionhost when a tssymbol refers to a shorthand property and to use the tstypechecker method getshorthandassignmentvaluesymbol to resolve the value of the assignment instead fw resolve pr close ,fix
6863,bazel allow a user to control a subset of angularcompileroption in their tsconfig file when using ngmodule pr close ,build
6864,ivy update select root cause update the root cause for the matselect failure a few of them were fixed by pr close ,test
6865,bazel add sha for rulessass this will make the debugging output go away debug rule iobazelrulessass modified argument sha caffbbdbbfaaacdcddcaa pr close ,fix
6866,core traverse and sanitize content of unsafe element in the past the sanitizer would remove unsafe element but still traverse and sanitize and potentially preserve their content this wa problematic in the case of stylestyle tag whose content would be converted to html text node in order to fix this the sanitizers behavior wa changed in to ignore the content of all unsafe element while this fixed the problem with stylestyle tag it unnecessarily removed the content for any unsafe element this wa an unneeded breaking change this commit partially restores the old sanitizer behavior namely traversing content of unsafe element but introduces a list of element whose content should not be traversed if the element themselves are considered unsafe currently this list contains style script and template related to and fix pr close ,fix
6867,ivy static host class and style should work on root component pr close ,fix
6868,ivy ngtsc should correctly bind to context in nested template with many binding pr close ,fix
6869,ivy viewrefrootnodes not including projected node currently if an embedded view contains projected node it rootnodes array will include null instead of the root node inside the projection slot this manifested itself in one of the material unit test where we stamp out a template and then move it rootnodes into the overlay container this pr is related to fw pr close ,fix
6870,ivy update sidenav and drawer root cause update the root cause for the matdrawer and matsidenav test all of the matdrawer failure were fixed by pr close ,test
6871,bazel add tsconfig extending support for ngmodule pr close ,feat
6872,ivy simplify differentiation of lview rnode lview lcontainer stylingcontext for efficiency reason we often put several different data type rnode lview lcontainer stylingcontext in same location in lview this is because we dont want to preallocate space for it because the storage is sparse this file contains utility for dealing with such data type how do we know what is stored at a given location in lview arrayisarrayvalue false rnode the normal storage value arrayisarrayvalue true than the value represents the wrapped value typeof valuetype object lview this happens when we have a component at a given location typeof valuetype number stylingcontext this happens when we have styleclass binding at a given location typeof valuetype true lcontainer this happens when we have lcontainer binding at a given location note it is assumed that arrayisarray and typeof operation are very efficient pr close ,refactor
6873,ivy moved wrapped reference to position in array lview lcontainer stylingcontext are all array which wrap either an htmlelement lview lcontainer stylingcontext it is often necessary to retrieve the correct type of element from the location which mean that we often have to wrap the array logically it make more sense if the thing which we are wrapping is at location also it may be more performant since data is more local which may result in more l cache hit in cpu pr close ,refactor
6874,ivy update root cause for material menu update the root cause for the remaining matmenu test note that two test are omitted from this pr because one will be fixed by and the other one depends on static query and will be refactored by pr close ,test
6875,ivy add debug view of internal deta structure this change contains conditionally attached class which provide human readable debug level information for lview lcontainer and other internal data structure these data structure are stored internally a array which make it very difficult during debugging to reason about the current state of the system patching the array with extra property doe change the array hidden class but it doe not change the cost of access therefore this patching should not have significant if any impact in ngdevmode mode see so instead of seeing array object null … lviewdebug view flag attached true node html div id node html span node null pr close ,feat
6876,core export the decorator interface to ensure they are documented if an interface is not exported publicly from it package then the docgen doe not see it and so can not include it in the generated documentation this wa the case for a number of decorator interface such a pipedecorator and inputdecorator this commit add these interface to the public export to fix this problem pr close ,docs
6877,compiler use correct variable in invalid function related to but doe not close it pr close ,fix
6878,router reword relativelinkresolution doc to not mention version number pr close ,docs
6879,ivy split util function into different file google detected circular reference here so splitting up this rather hodgepodge list of function into slightly better organizational unit pr close ,refactor
6880,ivy assertdomnode will now work properly in a worker pr close ,fix
6881,ivy lview is a proper linked list tview no longer store childindex lview now a childhead and childtail tview used to store the head of the list therefor all lviews had to have the same head which is incorrect pr close ,refactor
6882,ivy lcontainer now stored in lviewparent remove containerindex lviewparent now contains lcontainer when necessary remove now unused argument to method after refactor pr close ,refactor
6883,bazel run a number of web test with karmawebtest in saucelabs in circleci pr close ,build
6884,ivy produce and consume e reexports for ngmodule reexports in certain configuration such a the g repository which have lot of small compilation unit a well a strict dependency checking on generated code ngtscs default strategy of directly importing directivespipes into component will not work to handle these case an additional mode is introduced and is enabled when using the filetomodulehost provided by such compilation environment in this mode when ngtsc encounter an ngmodule which reexports another from a different file it will reexport all the directive it contains at the e level the export will have a predictable name based on the filetomodulehost for example if the host say that a directive foo is from the rootexternalfoo module ngtsc will add export foo a ɵngrootexternalfoofoo from rootexternalfoo consumer of the reexported directive will then import it via this path instead of directly from rootexternalfoo preserving strict dependency semantics pr close ,feat
6885,ivy extract selector scope logic to a new ngtsc package this commit split apart selectorscopets in ngtsc and extract the logic into two separate class the localmodulescoperegistry and the dtsmodulescoperesolver the logic is cleaned up significantly and new test are added to verify behavior localmodulescoperegistry implement the ngmodule semantics for compilation scope and handle ngmodules declared in the current compilation unit dtsmodulescoperesolver implement simpler logic for export scope and handle ngmodules declared in dts file this is done in preparation for the addition of reexport logic to solve strictdeps issue pr close ,refactor
6886,bazel use rule from rulesnodejs pr close ,build
6887,languageservice fix completion for inputoutput with alias this pr fix a bug in autocompletion for inputoutput decorator with an alias the current implementation ignores the alias credit for this work is attributed to edgardmessias the original work fixed the bug but wa lacking test pr close pr close ,fix
6888,ivy host listener being inherited twice fix inherited host event listener being registered twice this pr resolve fw pr close ,fix
6889,ivy ngonchanges hook should be inherited from grandsuperclasses pr close ,fix
6890,bazel use cli for bazel schematic cli beta is needed so that the project pull in angular version it will no longer build angular from source pr close ,docs
6891,ivy remove superfluous iscomponentdef function pr close ,refactor
6892,docsinfra upgrade cli command doc source to cae updating angularmaster from clibuildsmaster relevant change in commit range modified helpbuildjson removed helpejectjson close close close close close pr close ,build
6893,ivy diagnose root cause of failure in dialog and matdialog pr close ,test
6894,docsinfra add metanamedescription to angularios indexhtml this change make angulario more user and seo friendly according to webdev see pr close ,feat
6895,docsinfra add lang attribute to indexhtml of angulario it the right thing to do and improves accessiblity see pr close ,fix
6896,docsinfra set the default html title to angular this remove the annoying flicker while the app is loading also it just angular pr close ,fix
6897,docsinfra reformat using vscode html formatter make it easier to keep on editing and reformatting the file pr close ,style
6898,common update doc for httpclient method pr close ,docs
6899,ivy incorrectly remapping certain property that refer input during build time we remap particular property binding because their name dont match their attribute equivalent eg the property for the for attribute is called htmlfor this break down if the particular element ha an input that ha the same name because the property get mapped to something invalid the following change address the issue by mapping the name during runtime because thats when directive are resolved and we know all of the input that are associated with a particular element pr close ,fix
6900,bazel cleanup the jasmine bootstrap code pr close ,build
6901,bazel pin browser for schematic pr close pr close ,fix
6902,ivy turn on passing material test for paginator pr close ,test
6903,ivy component destroy hook called twice when configured a provider fix the ngondestroy hook on a component or directive being called twice if the type is also registered a a provider this pr resolve fw pr close ,fix
6904,ivy update material blocklist with root cause remove passing test pr close ,test
6905,bazel rxjsumdmodules should always be present this commit fix the bug whereby rxjsumdmodules would only be generated when sas file are used pr close pr close ,fix
6906,ivy allow html comment to be present inside ngcontent prior to this change presence of html comment inside ngcontent caused compiler to throw an error that ngcontent is not empty now html comment are not considered a a meaningful content thus no error is thrown this behavior is now aligned in ivyve pr close ,fix
6907,ivy correct absolute path processing for templateurl and styleurls prior to this change absolute file path like abcstylecss were calculated taking current component file location into account a a result absolute file path were calculated using current file a a root this change update this logic to ignore current file path in case of absolute path pr close ,fix
6908,ivy check the presence of cs resource for styleurls prior to this change ivy and ve cs resource resolution wa different in addition to specified styleurl with sc le and styl extension ve also make an attempt to resolve resource with cs extension this change introduces similar logic for ivy to make sure ivy behavior is backwards compatible pr close ,fix
6909,ivy restore fileoverview annotation for closure prior to this change the fileoverview annotation added by user in source file or by tsickle during compilation might have change a location due to the fact that ngtsc may prepend extra import or constant a a result the output file is considered invalid by closure misplaced fileoverview annotation in order to resolve the problem we relocate fileoverview annotation if we detect that it host node shifted pr close ,fix
6910,ivy unable to import shim factory file on caseinsensitive platform this change is kind of similar to but instead of ensuring that these shim can be generated we also need to make sure that developer are able to also use the factory shim like with ngc this issue is now surfacing because we have various old example which are now also built with ngtsc due to the bazel migration on case insensitive platform eg window these example can not be built because ngtsc fails the app import a generated shim file such a the factory shim file this is because the generatedshimshostwrapper typescript host us the getcanonicalfilename method in order to check whether a given filemodule exists in the generator file map eg generator map cuserspaulbazelpaullmsmgvexecrootangularpackagescoreindexngfactoryts cuserspaulbazelpaullmsmgvexecrootangularpackagescoreindexts path passed into fileexists cuserspaulbazelpaullmsmgvexecrootangularpackagescoreindexngfactoryts after getcanonicalfilename notice the lowercase drive name cuserspaulbazelpaullmsmgvexecrootangularpackagescoreindexngfactoryts a seen above the generator map doe not use the canonical file name a well a typescript internally doe not pas around canonical file name we can fix this by removing the manual call to getcanonicalfilename and just following typescript internalsemantics pr close ,fix
6911,ivy fix typo in ngtsc listlazyroutes method fix a minor typo in the listlazyroutes method for ngtsc also in addition fix that a newly introduced test for listlazyroutes broke the test in window it clear that we still dont run test against window but we also made all other test pas without ci verification and it not a big deal fixing this while being at it pr close ,refactor
6912,ivy turn on more passing material test this commit remove more test from the material blocklist so that they will run on ci after static query support wa added they are no longer failing pr close ,test
6913,ivy convert ngstyle and ngclass to use ivy styling binding prior to this fix both the ngstyle and ngclass directive made use of renderer and this dependency raised issue for future version of angular that can not inject it this patch ensures that there are two version of both directive one for the ve and another for ivy jira issue fw pr close ,feat
6914,ivy open up ivyswitchmode to noncore package prior to this fix using the compiler ivyswitch mechanism wa only available to core package this patch allows for this variable switching mechanism to work across all other angular package pr close ,feat
6915,ivy update material blocklist to turn on passing test we added the static flag to some dialog query and new test are passing pr close ,test
6916,bazel upgrade cli dependency for schematic test this commit make the integration test for bazelschematics more robust by removing packagejsonreplace instead of replacing the file the test script now just override angular package with the local one this commit also fix running the test locally by providing default argument for cichromedriverversionarg pr close ,test
6917,docsinfra prevent extra space at the bottom of the page in chrome the supposedly visually hidden maticon creates unnecessary space at the bottom of the page below the footer in recent chrome version this didnt happen before and it still doesnt happen in other browser firefox edge ie this commit fix it by wrapping the icon in a visually hidden div container which doesnt have other style such a maticon doe that could affect the layout of the page fix pr close ,fix
6918,bazel schematic should fetch angular from distro pr close ,refactor
6919,bazel add postinstall step to generate summary this commit add a postinstall step to the packagejson generated by the schematic to generate ng summary file needed for aot summary file are not published in npm package pr close ,fix
6920,ivy update material golden file to turn on passing test we marked some query in mattab a static which made some more material test pas in ci pr close ,test
6921,bazel schematic should upgrade rxjs to since rxjs is no longer built from source in bazel schematic the minimum version ought to be at least this commit add function to bump the version in packagejson pr close ,fix
6922,bazel do not build rxjs from source under bazel pr close ,build
6923,ivy reenable ngif protractor test we previously disabled this test because we did not yet have static query support in ivy and the planned api would be slightly different now that a static query flag is available that work in both view engine and ivy the test ha been updated to use that flag and ha been turned on to run in ci since the test wa always unrelated to query and wa intended to test ngif behavior updating the test in this instance seems reasonable pr close ,test
6924,router add hashbased navigation option to setuplocationsync the setuplocationsync function in angularrouterupgrade didnt previously let you sync hashbased navigation with this change you can now pas an option to setuplocationsync that will make sure location change run in angular in hashbased apps fix pr close ,feat
6925,ivy recreate node link after creatingmovingremoving node with in in can change the order of the node or insert new dynamic node when that happens it can break the existing link tnodenext or even create loop div → div → div → div → div can become div → div → div → div div 🡑 │ └─────────────┘ this pr fix this issue by recreating the broken link between those node pr close ,fix
6926,ivy support static contentchild query this commit add support for the static true flag in contentchild query prior to this commit all contentchild query were resolved after change detection ran this is a problem for backwards compatibility because view engine also supported static query which would resolve before change detection now if user add a static true option the query will be resolved in creation mode before change detection run for example t contentchildtemplateref static true template templateref this feature will come in handy for component that need to create component dynamically pr close ,fix
6927,ivy support static viewchild query this commit add support for the static true flag in viewchild query prior to this commit all viewchild query were resolved after change detection ran this is a problem for backwards compatibility because view engine also supported static query which would resolve before change detection now if user add a static true option the query will be resolved in creation mode before change detection run for example t viewchildtemplateref static true template templateref this feature will come in handy for component that need to create component dynamically pr close ,fix
6928,common fix a typo in a debounce request example header remove the extra parenthesis from a debounce request example there are no associated issue pr close ,docs
6929,core allow user to define timing of viewchildcontentchild query prior to this commit the timing of viewchildcontentchild query resolution depended on the result of each query if any result for a particular query were nested inside embedded view eg ngifs that query would be resolved after change detection ran otherwise the query would be resolved a soon a node were created this inconsistency in resolution timing had the potential to cause confusion because query result would sometimes be available in ngoninit but sometimes wouldnt be available until ngaftercontentinit or ngafterviewinit code depending on a query result could suddenly stop working a soon a an ngif or an ngfor wa added to the template with this commit user can dictate when they want a particular viewchild or contentchild query to be resolved with the static flag for example one can mark a particular query a static false to ensure change detection always run before it result are set t contentchildfoo static false foo elementref this mean that even if there isnt a query result wrapped in an ngif or an ngfor now adding one to the template later wont change the timing of the query resolution and potentially break your component similarly if you know that your query need to be resolved earlier eg you need result in an ngoninit hook you can mark it a static true t viewchildtemplateref static true foo templateref note this mean that your component will not support ngif result if you do not supply a static option when creating your viewchild or contentchild query the default query resolution timing will kick in note this new option only applies to viewchild and contentchild query not viewchildren or contentchildren query a those type already resolve after cd run pr close ,feat
6930,platformbrowser fix a grammatical error in the browsermodule documentation the browser module is not included by default it is included by default default should be singular there is no associated issue pr close ,docs
6931,compilercli upgrade chokidar to latest version fix pr close ,build
6932,compilercli incorrect bundled metadata for static class member call expression currently if developer use call expression in their static class member like we do in angular the metadata that is generated for flat module is invalid this is because the metadata bundler logic currently doe not handle call expression in static class member and the symbol reference are not rewritten to avoid relative path in the bundle static class member using a call expression are not relevant for the viewengine aot compilation but it is problematic that the bundled metadata reference module using their original relative path this mean that the bundled metadata is no longer encapsulated and depends on other emitted file to be emitted in the proper place these incorrect relative path can now cause issue where ngc look for the referenced symbol in the incorrect path eg src lib indexts reference the call expression using di now the metadata look like that nodemodules angular core coremetadatajson say that the call expr is in di di now if ngc try to use the metadata file and create the summary file ngc resolve the call expression to the nodemodulesdi module since the unexpected module doe not contain the desired symbol ngc will error out we should fix this by ensuring that we dont ship corrupted metadata to npm which contains relative reference that can cause such failure other import can be affected a well it depends on what module the developer ha installed and how we import our call expression fix pr close ,fix
6933,ivy allign debugnodecomponentinstance semantics with view engine pr close ,fix
6934,docsinfra improve caching configuration for firebase hosting this will hopefully improvefix the error discussed in see there for a more detailed discussion pr close ,build
6935,compilercli make enableivy ngtsctrue equivalent currently setting enableivy to true run a hybrid mode of ngc and ngtsc this is counterintuitive given the name of the flag itself this pr make the true value equivalent to the previous ngtsc and ngtsc becomes an alias for true effectively this remove the hybrid mode a well since there no other way to enable it pr close ,feat
6936,aio add keilla fernandes to gde resource pr close ,docs
6937,ivy fix class inheritance detection for e code in ngtsc previously ngtsc detected class inheritance in a way that only worked in t or e code a a result inheritance would not be detected for code in e format such a when running ngtsc through ngcc to transform oldstyle angular code to ivy format this commit fix it by delegating class inheritance detection to the current reflectionhost which is able to correctly interpret the used code format pr close ,fix
6938,ivy add root cause for failing componentstyles doc ee test pr close ,test
6939,docsinfra all example should get ivy boilerplate pr close ,fix
6940,ivy mark unknown binding test modifiedinivy this commit turn off an unknown binding test that is specific to the view engine implementation in ivy we do property validation at runtime for jit so this test doe not apply pr close ,test
6941,ivy remove duplicated getrootview function pr close ,refactor
6942,bazel specify tsconfigtest dependency pr close ,build
6943,ivy support schema at runtime account for schema in when validating property in ivy this pr resolve fw a couple of note i had to rework the test slightly in order to have it fail when we expect it to the one in master is passing since ivy validation run during the update phase rather than creation i had to deviate from the design in fw and not add an enableschema instruction because the schema is part of the ngmodule scope however the scope is only assigned to a component once all of the module declaration have been resolved and some of them can be async instead i opted to have the schema on the component definition pr close ,fix
6944,ivy rethrow event handler error in test currently error thrown inside event handler in ivy are caught and forwarded to the errorhandler however this mean that if they happen during a unit test the test wont fail these change add a testspecific errorhandler that throw the error rather than logging it out pr close ,fix
6945,ivy debugnode should read style from stylingcontext previously debugnodeclasses and debugnodestyles mistakenly used an object that is only sometimes a stylingcontext also fix a mistake in debugnodespects where a test component wa not declared in the testing module there is still a bug here where debugnode is not exposing static value this will need to be fixed in a follow up pr close ,fix
6946,ivy ensure host binding and host styling work on a root component prior to this fix if a root component wa instantiated it create host binding but never render them once update mode ran unless one or more slotallocated binding were issued since styling in ivy doe not make use of lview slot the host binding function never ran on the root component this fix ensures that the hostbindings function doe run for a root component and also render the schedlued styling instruction when executed jira issue fw pr close ,fix
6947,docsinfra upgrade cli command doc source to fd updating angularmaster from clibuildsmaster relevant change in commit range modified helpbuildjson pr close ,build
6948,bazel fix warning about overridden tsconfig option under bazel some compileroptions in tsconfigjson are controlled by downstream rule the default tsconfigjson cause bazel to print out warning about overriden setting this commit make a backup of the original tsconfigjson and remove tsconfig setting that are controlled by bazel a part of this fix jsonast utils are refactored into separate package and unit test are added pr close pr close ,refactor
6949,bazel rollback to chromium latest version that still work on osx pr close ,build
6950,bazel pin chromium to and chromedriver to on all platform pr close ,build
6951,bazel pin chrome driver to and use newer chrome in linux to fix test in ci pr close ,build
6952,bazel temporarily pin browser version while upstream is fixed a workaround for pr close ,build
6953,ivy remove unused constructor argument pr close ,refactor
6954,form mark form a pristine before emitting value and status change event breaking change previous to this change when a control wa reset value and status change event would be emitted before the control wa reset to pristine a a result if one were to check a control pristine state in a valuechange listener it would appear that the control wa still dirty after reset this change delay emission of value and status change event until after control have been marked pristine this mean the pristine state will be reset a expected if one check in a listener theoretically there could be application depending on checking whether a control used to be dirty so this is marked a breaking in these case apps should cache the state on the app side before calling reset fix pr close ,fix
6955,bazel add dts bundler a action to ngmodule this enabled dts flattening in the final distrubutable package note for the time being this is an optin feature via the ngmodule attribute bundledts however in the near future this will be turned on by default this only support the legacy compiler ngc a ngtsc emits namespaced import import a from local module which is not supported for the time being by api extractor see ref tool pr close ,feat
6956,ivy onchanges should support updating one input among many pr close ,fix
6957,animation fixed some grammar pr close ,docs
6958,ivy use filenametomodulename to emit import when it available the ultimate goal of this commit is to make use of filenametomodulename to get the module specifier to use when generating an import when that api is available in the compilerhost that ngtsc is created with a part of getting there the way in which ngtsc track reference and generates import module specifier is refactored considerably reference are tracked with the reference class and previously ngtsc had several different kind of reference an absolutereference represented a declaration which needed to be imported via an absolute module specifier tracked in the absolutereference and a relativereference represented a declaration from the local program imported via relative path or referred to directly by identifier if possible thus how to refer to a particular declaration wa encoded into the reference type at the time of creation of the reference this commit refactors that logic and reduces reference to a single class with no subclass a reference represents a node being referenced plus context about how the node wa located this context includes a bestguessowningmodule the compiler best guess at which absolute module specifier ha defined this reference for example if the compiler arrives at the declaration of commonmodule via an import to angularcommon then any reference obtained from commonmodule eg ngif will also be considered to be owned by angularcommon a referenceemitter class and accompanying referenceemitstrategy interface are introduced to produce an expression referring to a given referenced node the referenceemitter consults a sequence of referenceemitstrategy implementation several different strategy are defined localidentifierstrategy use local tsidentifiers if available absolutemodulestrategy if the reference ha a bestguessowningmodule import the node via an absolute import from that module specifier logicalprojectstrategy if the reference is in the logical project is under the project rootdirs import the node via a relative import filetomodulestrategy use a filetomodulehost to generate the module specifier by which to import the node depending on the availability of filenametomodulename in the compilerhost then a different collection of these strategy is used for compilation pr close ,feat
6959,ivy introduce concrete type for path in ngtsc this commit introduces a new ngtsc sublibrary path which contains branded string type for the different kind of path that ngtsc manipulates having static type for these path will reduce the number of pathrelated bug especially on window and will eliminate unnecessary defensive normalizing see the readmemd file for more detail pr close ,feat
6960,ivy support injectable on already decorated class previously ngtsc would throw an error if two decorator were matched on the same class simultaneously however injectable is a special case and it appears frequently on component directive and pipe class for pipe in particular it a common pattern to treat the pipe class also a an injectable service ngtsc actually lacked the capability to compile multiple matching decorator on a class so this commit add support for that decorator handler and thus the decorator they match are classified into three category primary shared and weak primary handler compile decorator that can not coexist with other primary decorator the handler for component directive pipe and ngmodule are marked a primary a class may only have one decorator from this group shared handler compile decorator that can coexist with others injectable is the only decorator in this category meaning it valid to put an injectable decorator on a previously decorated class weak handler behave like shared but are dropped if any nonweak handler match a class the handler which compiles ngbasedef is weak since ngbasedef is only needed if a class doesnt otherwise have a decorator test are added to validate that injectable can coexist with the other decorator and that an error is generated when mixing the primary pr close ,feat
6961,ivy compile injectable on class not meant for di in the past injectable had no side effect and existing angular code is therefore littered with injectable usage on class which are not intended to be injected a common example is injectable class foo constructorprivate notinjectable string and somewhere else provider provide foo usefactory here there is no need for foo to be injectable indeed it impossible for the di system to create an instance of it a it ha a noninjectable constructor the provider configures a factory for the di system to be able to create instance of foo adding injectable in ivy signifies that the class own constructor and not a provider determines how the class will be created this commit add logic to compile class which are marked with injectable but are otherwise not injectable and create an nginjectabledef field with a factory function that throw an error this way existing code in the wild continues to compile but if someone attempt to use the injectable it will fail with a useful error message in the case where strictinjectionparameters is set to true a compiletime error is thrown instead of the runtime error a ngtsc ha enough information to determine when injection couldnt possibly be valid pr close ,feat
6962,ivy translate writekeyexpr expression properly translation of writekeyexpr expression wa not implemented in the ngtsc expression translator this resulted in binding expression like targetkey event not compiling this commit fix the bug by implementing writekeyexpr translation pr close ,fix
6963,ivy resolve enum value in host binding some application use enum value in their host binding component host prop enumtypekey this commit change the resolution of host property to follow the enum declaration and extract the correct value for the binding pr close ,fix
6964,compiler fix two existing expression transformer issue testing of ivy revealed two bug in the astmemoryefficienttransformer class a part of existing view engine compiler infrastructure thats reused in ivy these bug cause ast expression not to be transformed under certain circumstance the fix is simple and test are added to ensure the specific expression form that trigger the issue compile properly under ivy pr close ,fix
6965,bazel update to rulesnodejs pr close ,build
6966,ivy enable passing material test pr close ,test
6967,ivy should mark onpush ancestor of dynamically created view a dirty while marking a given view tree a dirty we should go all the way to the root of the view tree and cross boundary of dynamically inserted view in other word the markforcheck functionality should consider parent of dynamically inserted view pr close ,fix
6968,ivy ivy change detection doesnt descend into cddetached view tree pr close ,test
6969,core improve global variable detection close pr close ,fix
6970,ivy set proper implementation for module injector prior to this change we used current injector implementation for module injector which wa causing problem and produce circular dependency in case the same token is referenced with skipself flag in the deps array the origin of the problem wa that once directiveinject implementation becomes active it wa used for module injector a well thus searching deps in componentdirective di scope this fix set injectinjectoronly implementation for module injector to resolve the problem pr close ,fix
6971,docsinfra fix filtering in runexampleeejs pr close ,fix
6972,router change slideindownanimation into slideinanimation in the routing navigation there is a typo slideindownanimation but it should be slideinanimation pr close pr close ,docs
6973,ivy combine contentqueries and contentqueriesrefresh function prior to this update we had separate contentqueries and contentqueriesrefresh function to handle creation and update phase this approach wa inconsistent with view query host binding and template function that we generate for componentdirective defs now the mentioned function are combine into one contentqueries creation and update logic is separated with renderflags similar to what we have in other generated function pr close ,refactor
6974,ivy enable more doc example ee test pr close ,test
6975,bazel turn on strict action env this commit fix a bug whereby recompilation occurs every time yarn ng build or yarn bazel build is invoked this is a temporary solution until is fixed pr close ,fix
6976,bazel install angular repo before yarninstall pr close pr close ,fix
6977,bazel use multisassbinary rule multisassbinary rule is reinstated in rulessass v and it is a better solution than list comprehension currently used because it handle import correctly pr close ,refactor
6978,ivy allow directive inheritance in strict mode for typescript compilation unit that have the strictfunctiontypes option enabled an error would be produced for ivy definition field in declaration file in the case of inheritance across directive or pipe this change loosens the definition type to allow for subtypes of the defined type where necessary a test package that ha the strict option enabled verifies that we wont regress in environment where strict type checking is enabled fix pr close ,fix
6979,compilercli no longer reexport external symbol by default with we refactored the angularcompiler slightly to allow opting out from external symbol reexports which are enabled by default since symbol reexports only benefit project which have a very strict dependency enforcement external symbol should not be reexported by default a this could grow the size of factory file and cause unexpected behavior with angulars aot symbol resolving eg see note that the common strict dependency enforcement for source file doe still work with external symbol reexports disabled but there are also strict dependency check that enforce strict module dependency also for generated file such a the ngfactory file this is how google manages it dependency and therefore external symbol reexports need to be enabled within google also ngtsc also doe not provide any way of using external symbol reexports so this mean that with this change ngc can partially match the behavior of ngtsc then unless explicitly optedout a mentioned before internally at google symbol reexports need to be still enabled so the ngmodule bazel rule will enable the symbol reexports by default when running within blaze fix pr close ,feat
6980,ivy remove unused parameter in postprocessbasedirective removed the use of def in postprocessbasedirective making the parameter now useless pr close ,refactor
6981,ivy support injecting changedetectorref on template previously using a pipe in an input binding on an ngtemplate would evaluate the pipe in the context of node that wa processed before the template this caused the retrieval of eg changedetectorref to be incorrect resulting in one of the following bug depending on the template structure if the template wa at the root of a view the previously processed node would be the component host node outside of the current view accessing that node in the context of the current view result in a crash for template not at the root the changedetectorref injected into the pipe would correspond with the previously processed node if that node host a component the changedetectorref would not correspond with the view that the ngtemplate is part of the solution to the above problem is twofold template compilation is adjusted such that the template instruction is emitted before any instruction produced by input binding such a pipe this ensures that pipe are evaluated in the context of the template container node a changedetectorref can be requested for container node fix pr close ,fix
6982,ivy remove unused notimplement function it ha not been used since implemented the last missing method in debugnode pr close ,refactor
6983,ivy add template source mapping test pr close ,test
6984,ivy add source mapping to compiled angular template during analysis the componentdecoratorhandler pass the component template to the parsetemplate function previously there wa little or no information about the original source file where the template is found passed when calling this function now we correctly compute the url of the source of the template both for external templateurl and inline template case further in the inline template case we compute the character range of the template in it containing source file but only in the case that the template is a simple string literal if the template is actually a dynamic value like an interpolated string or a function call then we do not try to add the originating source file information the translator that convert ivy ast node to typescript now add these template specific source mapping which account for the file where the template wa found to the template to support stepping through the template creation and update code when debugging an angular application note that some version of typescript have a bug which mean they can not support external template sourcemaps we check for this via the cansourcemapexternaltemplates helper function and avoid trying to add template mapping to external template if not supported pr close ,feat
6985,compiler ensure that event handler have the correct source span when template binding are being parsed the event handler were receiving a source span that included the whole attribute now they get a span that is focussed on the handler itself pr close ,fix
6986,compiler capture sourcespan when converting action binding to output ast the convertactionbinding now accepts an optional basesourcespan which is the start point of the action expression being converted in the original source code this is used to compute the original position of the output ast node pr close ,refactor
6987,compiler markup lexer should not capture quote in attribute value when tokenizing markup eg html element attribute can have quoted or unquoted value eg ab or ab the attrvalue token were capturing the quote which wa inconsistent and also affected sourcemapping now the tokenizer capture additional attrquote token which the html related parser understand and factor into their token parsing pr close ,fix
6988,core update jit source mapping test for ivy there are some difference in how ivy map template source compared to view engine in this commit we recreate the view engine test for ivy pr close ,test
6989,core use the correct generated url for jit compiled component previously the generated code wa being mapped to the templateurl value pr close ,fix
6990,core use the correct template url in render jit compilation previously jit compiled component did not use the correct url if the template wa resolved from a templateurl pr close ,fix
6991,compiler support sourcemappingurl comment that have trailing line previously the call to extractsourcemap would only work if the sourcemappingurl wa the last line of the file this doesnt work if the code is jit evaluated a the comment is actually the last line in the body of a function wrapped by curlybraces pr close ,fix
6992,compiler wrap the jit evaluation in an injectable class when testing jit code it is useful to be able to access the generated jit source previously this is done by spying on the global function object to capture the code when it is being evaluated this is problematic because you can only capture the body of the function and not the argument which mess up line and column position for source mapping for instance now the code that generates and then evaluates jit code is wrapped in a jitevaluator class making it possible to provide a mock implementation that can capture the generated source of the function passed to executefunctionfn function args any pr close ,refactor
6993,core do not remove templateurl when resolving when we resolve a component templateurl we copy the content of the resolved template file into the template property previously we would then remove the templateurl to indicate that the component ha been resolved but this meant that we no longer had access to the url of the original template file this is essential for diagnostics message about the template compilation now the existence of the template property override the existence of templateurl which allows u to keep the templateurl property pr close ,refactor
6994,core tidy up the description of resolvecomponentresources there were a number of typo and some of the sentence did not read well pr close ,docs
6995,compiler support tokenizing escaped string in order to support source mapping of template we need to be able to tokenize the template in it original context when the template is defined inline a a javascript string in a tsjs source file the tokenizer must be able to handle string escape sequence such a n and a they appear in the original source file this commit teach the lexer how to unescape these sequence but only when the escapedstring option is set to true otherwise there is no change to the tokenizing behaviour pr close ,feat
6996,compiler support tokenizing a subsection of an input string the lexer that doe the tokenizing can now process only a part the source string by passing a range property in the option argument the location of the node that are tokenized will now take into account the position of the span in the context of the original source string this range option is in turn exposed from the template parser a well being able to process part of file help to enable sourcemap support when compiling inline component template pr close ,feat
6997,compiler remove unnecessary operator from lexer when we added the strict null check the lexer had some operator added to prevent the compilation from failing this commit resolve this problem correctly and remove the hack also the comment note this is always lowercase ha been removed a it is no longer true see pr close ,refactor
6998,compiler use option argument for parser this commit consolidates the option that can modify the parsing of text eg html angular template cs in into an ast for further processing into a single option hash this make the code cleaner and more readable but also enables u to support further option to parsing without triggering wide ranging change to code that should not be affected by these new option specifically it will let u pas information about the placement of a template that is being parsed in it containing file which is essential for accurate sourcemap processing pr close ,refactor
6999,ivy mark query test a modified in ivy due to the fact that host node no longer match in contentchild query in ivy we disable test that wa enabled previously in other commit pr close ,fix
7000,ivy update root cause for autocomplete test update the root cause note for the material autocomplete test this pr resolve fw pr close ,test
7001,ivy test listing lazy route to different root directory pr close ,test
7002,ivy support listing lazy route for projectrootrelative entry point in ngtsc i dont know of any use of this api with a projectrootrelative path ie the cli will always call it with an absolute path but keeping the api backwards compatible just in case pr close ,fix
7003,ivy fix ngtoolsapi test under ivy pr close ,test
7004,ivy implement listing lazy route for specific entry point in ngtsc related angularangularcli jira issue fw pr close ,feat
7005,ivy create lazy route key that are similar to ngtools lazy route this will make it easier to retrieve route for specific entry point in listlazyroutes which is necessary for cli integration but not yet implemented pr close ,refactor
7006,ivy remove unnecessary method from ngtscs routerentrypoint pr close ,refactor
7007,ivy ngonchanges should be inherited from super class pr close ,fix
7008,ivy provide support for mapbased host binding for style and class up until now style and class binding the mapbased one have only worked a template binding and have not been supported at all inside of host binding this patch ensures that multiple host binding source component and directive all properly assign style value and merge them correctly in term of priority jira fw pr close ,feat
7009,ivy support checknochanges on embedded view before this fix our viewref implementation assumed that checknochanges can be only called on component view in reality checknochanges can be also called on embedded view ex when an embedded view is attached to applicationref pr close ,fix
7010,ivy compile pipe in context of ternary operator previously it wasnt possible to compile template that contains pipe in context of ternary operator mypipe due to the error error illegal state pipe should have been converted into function pipe async this pr fix a typo in expression parser so that pipe are correctly converted into function pr close ,fix
7011,docsinfra upgrade cli command doc source to bad updating angularmaster from clibuildsmaster relevant change in commit range modified helpeejson pr close ,build
7012,ivy allow nonunique localrefs to be defined in a template prior to this change in ivy we had strict check that disabled nonunique localrefs usage within a given template while this limitation wa technically present in view engine in many case view engine neglected this restriction and a a result some apps relied on a fact that multiple nonunique localrefs can be defined and utilized to query element via viewchildren and contentchildren in order to provide better compatibility with view engine this commit remove existing restriction a a part of this commit are few test were added to verify ve and ivy compatibility in most common usecases where multiple nonunique localrefs were used pr close ,feat
7013,docsinfra add progression file to exclude list for doc example also disables http guide under ivy test with documented error pr close ,fix
7014,docsinfra test doc example with ivy pr close ,ci
7015,compiler allow disabling external symbol factory reexports currently external static symbol which are referenced by aot compiler generated code will be reexported in the corresponding ngfactory file this way of handling the symbol resolution ha been introduced in favor of avoding dynamically generated module dependency this behavior therefore avoids any strict dependency failure read more about a particular scenario here now with ngtsc this behavior ha changed since ngtsc just introduces these module dependency in order to properly reference the external symbol from it original location also eliminating the need for factory similarly we should provide a way to use the same behavior with ngc because the downside of using the reexported symbol resolution is that usercode transformation eg the nginjectabledef metadata which is added to the user source code can resolve external symbol to previous factory symbol reexports this is a critical issue because it mean that the actual jit code reference factory file in order to access external symbol this mean that the generated output can not shipped to npm without shipping the referenced factory file a specific example ha been reported here pr close ,refactor
7016,docsinfra run doc example test in production mode pr close ,ci
7017,ivy enable passing material test pr close ,test
7018,router change routerlinkactive impl to account for upcoming ivy breaking change pr close ,refactor
7019,ivy properly query root node of embedded viewsshallow query pr close ,fix
7020,ivy support web worker node in unknown property check we need to support rendering in context like web worker where node are emulated and property may not be set directly this commit gate property validation check to environment that have real node object fw resolve pr close ,fix
7021,ivy add root cause for failing form ee test pr close ,test
7022,core fixed code snippet pr close ,docs
7023,upgrade change flaky test to not be affected by other test it seems that in some case especially on ci global state is not cleaned up properly causing a specific test to fail see and for more context this pr restores the global state for the affected test this partly defeat the purpose of the test but is better than having flake on ci fix pr close ,test
7024,ivy run viewinjectorintegration test on node there is nothing browser specific in those test and fakeasync is supported on node testing debugging on node is often faster than on karma pr close ,test
7025,core fixed typo pr close ,docs
7026,aio add happy angular podcast to resource pr close ,docs
7027,ivy remove unneeded detach property pr close ,refactor
7028,ivy remove nested placeholder with in pr close ,fix
7029,ivy turn on passing test in platformbrowser the behavior tested here wa fixed by but i missed updating the test in the original pr this commit turn on the test to run in ivy mode using onlyinivy because the timing of the error message is slightly different and requires cd to run pr close ,test
7030,common remove deprecated filetype filetype object are deprecated they are not required for specifying valid file type for rule attribute a list of string can be used instead pr close ,refactor
7031,ivy throw on binding to unknown property this commit add a devmodeonly check which will throw if a user attempt to bind a property that doe not match a directive input or a known html property example div unknownpropsomevaluediv the above will throw because unknownprop is not a known property of htmldivelement this check is similar to the check executed in view engine during template parsing but occurs at runtime instead of compiletime note this change uncovered an existing bug with host binding inheritance so some material test had to be turned off they will be fixed in an upcoming pr pr close ,fix
7032,ivy extended next pointer lookup while traversing tnode tree prior to this change we only checked whether current lview ha a next pointer while traversing tnode tree however in some case this pointer can be undefined and we need to look up parent chain to find suitable next pointer this commit add the logic of searching for the next pointer taking parent chain into account pr close ,fix
7033,compilercli dont throw when listing lazy route for an entry route in the listlazyroutes wa fixed to work with ivy since the entryroute argument is not supported it wa made to also error but by erroring it break existing usage with angular cli where the entry route is sent in a an argument this commit change listlazyroutes to not error out but instead ignore the argument pr close ,fix
7034,router redirect to root url when returned a urltree from guard when a urltree of root url wa returned by a guard a a redirection the navigation wa not processed the issue came from the error handler which incorrectly marked the router a already navigated fix pr close ,fix
7035,docsinfra use pinned dependency when possible in ngpackagesinstaller previously ngpackagesinstaller would replace the version range for all dependency that were peer dependency of an angular package with the version range used in the angular package this effectively meant that the pinned version from yarnlock for that dependency wa ignored even if the pinned version satisfied the new version range this commit reduces nondeterminism in ci job using the locally built angular package by always using pinned version of dependency for angular package peer dependency if possible for example assuming the following version for the rxjs dependency aiopackagejson rxjs aioyarnlock rxjs angularcorepeerdependencies rxjs the following version would be used with ngpackagesinstaller before this commit aiopackagejson rxjs nodemodulesrxjs latest version satisfying after this commit aiopackagejson rxjs nodemodulesrxjs because it satisfies pr close ,build
7036,docsinfra keep other dependency pinned when installing local angular package ngpackagesinstaller can be used to replace angular package with locally built one from distpackagesdist along with their peer dependency previously in order to achieve this yarn install wa called with the nolockfile option which resulted in installing the latest version of all dependency including transitive one permitted by the corresponding version range in packagejson file a a result newly released version would be picked resulting in unexpected nondeterministic breakage in ci this commit call yarn install with the purelockfile option instead a a result only the angular package for which the locally built one are used and their peer dependency are unpinned the pinned version from yarnlock are used for all other direct and transitive dependency while this doe not eliminate nondeterminism across build it significantly reduces it pr close ,build
7037,docsinfra avoid unnecessary io operation in ngpackagesinstaller pr close ,perf
7038,docsinfra format packagejson for readability in ngpackagesinstaller pr close ,refactor
7039,docsinfra remove unnecessary workaround for rxjs in ngpackagesinstaller since bfbcd rxjs doe not need to be patched any more in the toplevel nodemodules so we dont need to specialcase rxjs in ngpackageinstaller and use nodemodulesrxjs pr close ,build
7040,serviceworker note about isstablesetinterval the doc dont mention that the app will never be stable if a setinterval is running somewhere and that it will prevent the servcie worker to be registered too pr close ,docs
7041,core document isstable trap pr close ,docs
7042,ivy update ee test to use renderer instead of renderer pr close ,test
7043,ivy workerappmodule should be an approot pr close ,fix
7044,docsinfra ensure aiomonitoring failure notification do not depend on earlier step previously in order for the aiomonitoring failure notification to work the step up to defineenvvars should have succeeded this meant that any failure in earlier step would not send notification this commit fix it by making the notification step independent of the defineenvvars step pr close ,ci
7045,docsinfra fix downloadyarn in aiomonitoring the downloadyarn step depends on the ciyarnversion environment variable and thus ha to be run after the defineenvvars step accidentally broken in pr close ,ci
7046,aio show developer survey pr close ,feat
7047,ivy root cause analysis for matselectionlist update the root cause for the matselectionlist test failure this pr resolve fw pr close ,test
7048,ivy pas host into createlview explicitly lview host wa set in most case right after creating lview this make the api cleaner by explicitly passing it ont createlview pr close ,refactor
7049,ivy remove query result from destroyed embedded view pr close ,fix
7050,docsinfra avoid a racecondition with navigating forwardback and immediately reloading this can result in an inconsistent state pr close ,fix
7051,docsinfra remove the try catch in the test of the browser capacity pr close ,fix
7052,docsinfra add debouncing in storing scroll position there is no debouncing when we store the scroll position currently we have a message in the console after a while throttling history state change to prevent the browser from hanging see for more information pr close ,feat
7053,ivy add root cause for failing hello world ee test pr close ,test
7054,ivy root cause analysis for ee test in common add root cause to the ee test failure in common this pr resolve fw pr close ,test
7055,ivy move some local ref test to use testbed infrastructure when we first started writing test for ivy we did not yet have a compatible compiler for this reason we set up the ivy runtime test to run with generated code that we wrote by hand instead of real code generated by the compiler now that we have a working ivy compiler and testbed infrastructure that is compatible with ivy we should start writing integration test that leverage them no more handwritten generated code this will prevent bug where the compiler code and runtime code become out of sync which is easy if they are tested separately and eventually we should migrate all the existing runtime test in coretestrender to testbed and ngtsc to kick off this effort this commit migrates some existing test from coretestrenderexportsspects and save them in a new file with the same name in the coretestacceptance folder pr close ,test
7056,ivy dont increment expandostartindex after directive are matched in instruction create text node dynamically and save them between binding and the expando block in lview eg they try to create the following order in lview element binding dynamic in text expando dirs injector each time a new text node is created it is pushed to the end of the array and the expandostartindex marker is incremented so the section begin slightly later this happens in allocexpando this is fine if no directive have been created yet the end of the array will be in the dynamic text node section element binding dynamic in text however this approach doesnt work if dynamic text node are created after directive are matched for example when the directive us host binding in that case there are already directive and injector saved in the expando section so pushing to the end of lview actually push after the expando section what we get is this element binding dynamic in text expando dynamic in text in this case the expandostartindex shouldnt be incremented because we are not inserting anything before the expando section it now after the expando section but because it is incremented in the code right now it now pointing to an index in the middle of the expando section this pr fix that so that we only increment the expandostartindex if nothing wa pushed into the expando section fw resolve pr close ,fix
7057,ivy sanitize external in id before generating const name prior to this change there wa no in id sanitization before we output googgetmsg call due to the fact that message id are used a a part of const name some character were bcausing issue while executing generated code this commit add sanitization to in id used to generate inrelated consts pr close ,fix
7058,ivy move around logic of getting render parent pr close ,refactor
7059,ivy remove dom node from their real parent v saved parent currently dom node removal called removechild on the saved parent node when destroying a component however this will fail if the component ha been manually moved in the dom this change make the removal always use the node real parentnode and ignore the provided parent pr close ,fix
7060,ivy proper component resolution in case of inheritance ivy allows component to extend directive but not the other way around and a a result we may have component and directive annotation present at the same time the logic that resolve annotation to pick the necessary one didnt take this into account and a a result component were recognized a directive and vice versa in case of inheritance this change update the resolution logic by picking known annotation that is the nearest one in inheritance tree and compare it with expected type that should help avoid misclassification of componentsdirectives during resolution pr close ,fix
7061,router set href when routerlink is used on an area element close pr close ,fix
7062,bazel create ngadd schematic for bazel the logic to create additional file needed for bazel are currently hosted in ng new such file include the maints file needed for aot and a different angularjson to use bazel builder among others this commit refactors the logic into ng add so that it can be used to perform the same modification in an existing project user could do so by running ng add angularbazel with this change ng new effectively becomes an orchestrator that run the original ng new followed by ng add angularbazel pr close ,refactor
7063,compilercli diagnostics should respect newline compiler option pr close ,fix
7064,ivy rename blacklist to blocklist pr close ,refactor
7065,ivy improve stacktrace for rinjector error improve the stacktrace for rinjector error by adding the source component or module that tried to inject the missing provider a well a the name of the injector which triggered the error rinjector eg rinjectorerrorsomemodulecar sportscar nullinjectorerror no provider for sportscar fw resolve fw resolve pr close ,feat
7066,compilercli base synthetic filepaths on input filepath this change is needed to work in google where file path in the tsprogram must always be absolute pr close ,fix
7067,core remove createinjector from public api createinjector is an ivyonly api that should not have been exported a part of the public api this commit remove the export it will be reexported when ivy is released pr close ,fix
7068,ivy error not being logged to errorhandler fix ivy not passing thrown error along to the errorhandler note the failing test had to be reworked a little bit because it ha some assertion that depend on an error context being logged however ivy doesnt keep track of the error context this pr resolve fw pr close ,fix
7069,bazel explain explicit version requirement pr close ,docs
7070,docsinfra remove polyfill webanimations since we use angular and we dont use animationbuilder pr close ,fix
7071,docsinfra update terser version in lockfile see pr close ,build
7072,ivy remove query result from destroyed embedded view pr close ,fix
7073,docsinfra reduce output verbosity to improve log readability pr close ,ci
7074,docsinfra upgrade cli command doc source to ec updating angularmaster from clibuildsmaster relevant change in commit range modified helpaddjson pr close ,build
7075,ivy mark view dirty by default when event fire in ivy we support a new manual mode that allows for stricter control over change detection in onpush component specifically in this mode event do not automatically mark onpush view a dirty only changed input and manual call to markdirty actually mark a view dirty however this mode can not be the default for onpush component if we want to be backwards compatible with view engine this commit readds the legacy logic for onpush component where event always mark view dirty and make it the default behavior note it is still todo to add a public api for manual change detection pr close ,fix
7076,ivy create an ivy version of treeshakable provider test due to the fact that the test in ngmoduleintegrationspects relied on internal ve data structure the def field to verify the state and the structure ha changed in ivy this commit add an ivy version of the same test pr close ,refactor
7077,bazel bazel builder resolve with requireresolve this commit fix a bug in the bazel builder in which the path to bazel executable is constructed using the project path for nondefault project the nodemodules directory is actually one level above the project path this pr fix the bug by resolving nodemodules with requireresolve it requires bazelbazel v because previous version do not have indexjs or main field in packagejson and would cause node module resolution to fail this ha been tested with both bazel and ibazel pr close ,fix
7078,ivy query should match container node itself before matching it view pr close ,fix
7079,ivy adjust type limit usage of global state pr close ,refactor
7080,ivy componentfactoryresolver can resolve any component factory in ivy pr close ,test
7081,ivy update global utils documentation reference to windowng ,docs
7082,ivy prevent error from view being destroyed twice previously attempting to destroy a view with listener more than once throw an error during event listener cleanup this happens because cleanup field on the tview ha already been cleared out by the time the second destruction run the destroyed flag on lview wa previously being set in the destroylview function but this flag wa never checked anywhere in the codebase this commit move setting this flag to the cleanupview function just before destroy hook are called this is necessary because the destroy hook can contain arbitrary user code such a surprise attempting to destroy the view again we also add a check to destroylview to skip alreadydestroyed view this prevents the cleanup code path from running twice pr close ,fix
7083,ivy remove firsttemplatepass a global state pr close ,refactor
7084,bazel fix integration test for bazelschematics with the release of angularbazel v the npm install step right after ng new installs this version however there is a bug in the builder which result in bazel executable not found this bug wa not discovered before because the dependency of the project created by ng new are not pinned the fix is to pin the version of angularbazel to which relies on global installation of bazel pr close ,fix
7085,compilercli expose ngtsc a a tscplugin this let u run ngtsc under the tscwrapped custom compiler used in bazel it also allows others to simply wire ngtsc into an existing typescript compilation binary pr close ,feat
7086,ivy mark query a dirty upon view insertion pr close ,fix
7087,ivy throw if input and contentchild share a property in view engine we supported input and contentchild annotation on the same property this feature wa somewhat brittle because it would only work for static query so it would break if a content child wa passed in wrapped in an ngif due to the inconsistent behavior and low usage both internally and externally we will likely be deprecating it in the next version and it doe not make sense to perpetuate it in ivy this commit ensures that we now throw in ivy if we encounter the two annotation on the same property pr close ,fix
7088,ivy verify bootstrapped type are component prior to this change we didnt verify type passed to bootstrap a a part of ngmodule semantics verification now we check whether all type passed to bootstrap are actually component pr close ,fix
7089,ivy update token used for fakeasync test this commit update the token used in fakeasync test to the one available in both ve and r testbeds the goal of the test is to verify that fakeasync work with inject function so the actual token that is used for a test is irrelevant in that case the logic to retrieve token from compiler injector that the comment in fixmeivy refers to wa implemented in pr pr close ,fix
7090,ivy minor refactoring of host binding function generation prior to this change generation of host binding and host style wa guarded by the if statement which always returned true enforcing more strict check for binding length broke some test since host styling instruction generation were inside the same if block this update decouples binding instruction generation from styling instruction which make it le error prone pr close ,refactor
7091,ivy scan simple child route with no infinite recursion pr close ,fix
7092,ivy verify host binding and host listener before compiling them prior to this change we may encounter some error like pipe being used where they should not be used while compiling host binding and listener with this update we move validation logic to the analyze phase and throw an error if something is wrong this also aligns error message between ivy and ve pr close ,fix
7093,core add relative path information to component metadata add the information that the templateurl and styleurls option support only relative url add more information about relative path and absolute url in project metadata pr close ,docs
7094,compilercli return t node from typetranslatorvisitor the typetranslatorvisitor visitor returned string because before it wasnt possible to transform declaration file directly through the typescript custom transformer api now thats possible though so it should return node instead pr close ,refactor
7095,compilercli use a transformer for dts file the current dtsfiletransformer work by intercepting file writes and editing the source string directly this pr refactors it a a afterdeclaration transform in order to fit better in the typescript api this is part of a greater effort of converting ngtsc to be usable a a t transform plugin pr close ,refactor
7096,compilercli refactor import adding logic into helper this logic will be common to transforms that add import using it a a helper help reduce duplication pr close ,refactor
7097,bazel also pas afterdeclarations transformer to emitwithtsickle tsickle support afterdeclarations transformer but these were not being passed in pr close ,fix
7098,core be more consistent about typeof check when testing whether value is an object use the ideal sequence of strictly not equal to null followed by typeof value object consistently specifically there no point in using double equal with null since undefined is ruled out by the typeof check also avoid the unnecessary toboolean check on valuengondestroy in hasondestroy since the typeof valuengondestroy function will only let closure pas and all closure are truish with the notable exception of documentall but that shouldnt be relevant for the ngondestroy hook pr close ,perf
7099,ivy add root component to the root view tree in rendercomponent previously these component were not added to the view tree for the fake root view in which they were bootstrapped without this root view destruction doe not work a expected since the root view child are not present to be also destroyed pr close ,fix
7100,docsinfra add hamburger button to cli command section currently when we navigate in the cli command section the hamburger button isnt present because the class cs foldercli is missing this pr add this class in order to show this button when we are in this section pr close ,fix
7101,compilercli expose ngtsc a a tscplugin this let u run ngtsc under the tscwrapped custom compiler used in bazel it also allows others to simply wire ngtsc into an existing typescript compilation binary pr close ,feat
7102,ivy update test after content query inheritance fix this commit update test that wa added after content query inheritance fix that renames some instruction wa merged into master the test used previous version of instruction thus causing failure after merging content query inheritance fix pr close ,fix
7103,docsinfra boolean option default value is incorrect when it undefined in the cli when it undefined it can mean false or sometimes it will be overwritten by a runtime value pr close ,fix
7104,docsinfra add ngindia to event list doc add ngindia to event list pr close ,docs
7105,compilercli expose ngtsc a a tscplugin this let u run ngtsc under the tscwrapped custom compiler used in bazel it also allows others to simply wire ngtsc into an existing typescript compilation binary pr close ,feat
7106,bazel integration test for sas support add sas file to the integration test for bazelschematics also addressed alexs comment in about the unit test being too brittle pr close ,test
7107,ivy content query inheritance fix prior to this change contentqueriesrefresh function that represent refresh logic for contentquery list were not composable which caused problem in case one directive inherits another one and both of them contain content query due to the fact that we used index to reference query in refresh function result were placed into wrong query in order to avoid that we no longer use index to reference query and instead maintain current content query index while iterating through them this allows u to compose contentqueriesrefresh function and make inheritance feature work with content query pr close ,fix
7108,ivy dont generate code for blank ngmodule field currently compilengmodule generates an empty array for optional field that are omitted from an ngmodule declaration eg bootstrap export this isnt necessary because definengmodule ha some code to default these field to empty array at runtime if they arent defined the following change will only output code if there are value for the particular field pr close ,fix
7109,ivy getsourcefile of transformed node return undefined in some case calling getsourcefile on a node from within a t transform can return undefined against the signature of the method in these case getting the original node first will work pr close ,fix
7110,docsinfra compile with ivy jira fw pr close ,ci
7111,docsinfra upgrade angularcli to pr close ,build
7112,docsinfra get rid of on component input compiling with ivy doesnt seem to allow input name starting with on pr close ,refactor
7113,ivy return correct declaration for class indentifiers for e in ngcc pr close ,fix
7114,ivy add missing private render export pr close ,fix
7115,core remove duplicate check in defaultstylesanitizer pr close ,refactor
7116,ivy detect cycle and use remote scoping of component if needed by it nature ivy alters the import graph of a t program adding import where template dependency exist for example if componenta us pipeb in it template ivy will insert an import of pipeb into the file in which componenta is declared any insertion of an import into a program ha the potential to introduce a cycle into the import graph if for some reason the file in which pipeb is declared import the file in which componenta is declared maybe it make use of a service or utility function that happens to be in the same file a componenta then this could create an import cycle this turn out to happen quite regularly in larger angular codebases typescript and the ivy runtime have no issue with such cycle however other tool are not so accepting in particular the closure compiler is very anticycle to mitigate this problem it necessary to detect when the insertion of an import would create a cycle ngtsc can then use a different strategy known a remote scoping instead of directly writing a reference from one component to another under remote scoping a function setcomponentscope is called after the declaration of the component module which doe not require the addition of new import fw resolve pr close ,feat
7117,ivy cycle detector for typescript program this commit implement a cycle detector which look at the import graph of typescript program and can determine whether the addition of an edge is sufficient to create a cycle a part of the implementation module name to source file resolution is implemented via a moduleresolver using t apis pr close ,feat
7118,ivy clean up two parameter in ngtscspects inferred a any pr close ,test
7119,bazel builder should invoke local bazeliblaze builder for angularbazel schematic should not expect bazelibazel to be on the path it should instead invoke the local executable installed by yarnnpm pr close ,fix
7120,ivy injectable is required on type provider pr close ,test
7121,bazel bazelworkspace schematic should run in scopedtree user should be able to add bazel workspace to an existing project the current approach assumes that the schematic is working on the same tree a that of ngnew which includes the toplevel directory instead the schematic should work on the tree rooted at approot to enable bazel file to be added to existing project this change us the newly implemented scopedtree to achieve this note the version of angulardevkitschematics that is installed is used to run the angularbazel schematic even if a different version is used in the schematic itself it ha no effect therefore the latest angular cli should be used to generate the file a of this commit the latest version is angularclirc pr close ,fix
7122,ivy testbed should tolerate synchronous use of compilecomponents testbedcompilecomponents ha always been an async api however viewengine tolerated using this api in a synchronous manner if the component declared in the testing module did not have any async resource templateurl styleurls this change make the ivy testbed mirror this tolerance by configuring such component synchronously ref fw pr close ,fix
7123,ivy ngcc handle accessor pair in e ngccs reflection host need to be able to determine all member of a class which it doe by using the tssymbol from typescript typechecker such symbol however may represent multiple class member in the case of accessors an equally named gettersetter accessor pair is combined into a single tssymbol this commit introduces logic to recognize such accessors in order for both the getter and setter to be considered a class member similar to ngtscs behavior when operating on original typescript code one difference wrt the typescript host is that ngcc can not see to which accessor originally had any decorator applied to them a decorator are applied to the property descriptor in general not a specific accessor if an accessor ha both a setter and getter any decorator are only attached to the setter member pr close ,fix
7124,ivy ngcc recognize accessor member in e prior to this change accessor function for getters and setter would not be considered a class member a their declaration is vastly different from e syntax with this change the e reflection host ha learned to recognize the downleveled syntax for accessors allowing for them to be considered a class member once again fix pr close ,fix
7125,bazel ngnew should run yarn install yarn install wa disabled in ngnew for bazel schematic because bazel manages it own nodemodules dependency and therefore there is no need to install dependency twice however the first yarn install is needed for ng command to work most notably ng build this commit restores the original behavior pr close ,fix
7126,docsinfra upgrade codelyzer to pr close ,fix
7127,bazel update to bazel and turn on incompatiblestrictactionenv flag pr close ,build
7128,ivy init hook should be called once and only once pr close ,fix
7129,ivy calling changedetectorrefdetectchanges from onchanges should not go infinite loop pr close ,fix
7130,bazel warn about version compatibility pr close ,docs
7131,ivy unify checknochanges logic with the view engine this commit unifies handling of the check no change mode between ngivy and the view engine more specifically check no change can be invoked before change detection in ivy undefined value are considered equal nochanges for the check no change mode purpose chanes in this commit enables several test that were previously running only in ivy or only in the view engine pr close ,fix
7132,ivy clean up tnode not depending on lview pr close ,refactor
7133,form dont override form group dirty state when disabling control update packagesformssrcmodelts coauthoredby martinsik martinsikoraahojgmailcom pr close ,fix
7134,ivy proper in postprocessing in case of nested template prior to this change the postprocess step relied on the order of placeholder combined in one group eg ���� the order is not guaranteed in case we have nested template since we use bfs to process template and some tag are represented using same placeholder this change performs postprocessing more accurate by keeping track of currently active template and searching for matching placeholder pr close ,fix
7135,ivy move errorhandling test to be handled at a later stage due to the fast moving nature of the ivy codebase the timing isnt right to make change to how error and reported and handled during the runtime once ivy is stable this test should be revisted because that stage there will be a better and more robust understanding of how ivy should recover from runtime error jira issue fw pr close ,test
7136,docsinfra increase timeout for redirection test more occasionally external url take even longer than the previously set s to load which cause ci flake pr close ,test
7137,docsinfra unregister the sw after each test this ensures that the sw is cleaned up even in case where synchronization is disabled and thus the cleanup inside goto happens without waiting for angular pr close ,test
7138,docsinfra unregister the sw after waitforangular this increase the chance that the cleanup will take place after the sw ha been registered pr close ,test
7139,docsinfra properly report error if pageinit failsrejects for asynchronous callback this can be done either by calling donefail or by returning the promise directly without requesting a done callback using the latter because it is shorter pr close ,test
7140,ivy query should register match from top to bottom pr close ,fix
7141,bazel cleanup bazelschematics integration test pr close ,test
7142,ivy support property binding and interpolation in debugelement debugelementproperties should contain a map of element property name to element property value with entry for both normal property binding and host binding this commit add support for property binding in debugelementproperties including interpolation pr close ,feat
7143,ivy support host property in debugelementproperties debugelementproperties should contain a map of element property name to element property value with entry for both normal property binding and host binding many angular core test depend on this map being present this commit add support for host property binding in debugelementproperties which fix the angular core test there is still work to be done for normal property binding pr close ,feat
7144,bazel add npmtslib dep to ee tslibrary target in bazelworkspace schematic pr close ,fix
7145,router initalize browserurltree to empty tree the value here is unimportant on initialization since it not looked at until the second navigation however sometimes in testing the location service is mocked out or the router constructor manually called assuming location exists in the constructor lead to test failure in google therefore we initialize to a value that will not cause error pr close ,refactor
7146,docsinfra change the key used to find out the cli section pr close ,fix
7147,docsinfra show top menu at px screen width show top menu at px screen width the j expression wa checking just for screen width strictly greater than px to show the menu while the cs medium query wa showing the hamburger icon just for screen width strictly smaller than px so there wa a gap of px that the user couldt navigate through the top menu close pr close ,docs
7148,docsinfra save the scroll position before the change of location issue pr close ,feat
7149,docsinfra align property name to the top this look better when the property description span multiple line especially when scrolling to a specific property eg abstractcontrolstatus pr close ,fix
7150,docsinfra remove unused cs style rule the propertiestable selector doe not match any element and the style dont look relevant for the similarly named propertytable class pr close ,refactor
7151,animation fix group and sequence function usage example animate function now contain style function instead of plain object eg animates background black to animates style background black pr close ,docs
7152,ivy save query at the correct index previous to this change we were storing view query at the wrong index this is because we were passing a raw index to the store instruction instead of an adjusted index ie an index that doe not include the headeroffset we had an additional issue where tviewblueprint wa not backfilled when tviewdata wa backfilled so new component instance created from the blueprint would end up having a shorter lview both of these problem together led to the material demo app failing with ivy this commit fix those discrepancy pr close ,fix
7153,ivy correct cyclical dependency pr close ,refactor
7154,ivy link correct ngmodules injector to the bootstrapped component previously bootstrapping a component with render would create a chained injector with the test bed ngmodule instead of the ngmodule that the component belongs to now when a component belongs to an ngmodule we use that for the chained injector ensuring the correct injection of any provider that this ngmodule contains fw resolve pr close ,fix
7155,ivy turn on passing test in platformbrowserdynamic pr close ,test
7156,ivy content projection with shadow dom not working fix component with native content projection using content or slot not working under ivy the issue come from the fact that when creating element inside a component we sometimes dont append the element immediately but we leave it to projection to move it into it final destination this end up breaking the native projection because the slot have to be in place from the beginning the following change switch to appending the element immediately when inside a component with shadow dom encapsulation this pr resolve fw pr close ,fix
7157,ivy ngupgrade should distinguish element and module injector there are case where we should check an element injector but dont go into the associated module injector if a token is not found in both the view engine and ngivy this is acheived by passing the notfoundcheckonlyelementinjector a the notfoundvalue before this fix the view engine and ngivy were using different object to represent notfoundcheckonlyelementinjector this wa causing problem a ngupgrade is using notfoundcheckonlyelementinjector const in it ngadapterinjector to prevent searching of module injector this commit make sure that ngivy is using the same object to represent notfoundcheckonlyelementinjector a the view engine pr close ,fix
7158,ivy error when encountering an empty class attribute fix ivy throwing an error if it encounter an empty class attribute in a template class this pr resolve fw pr close ,fix
7159,ivy view query inheritance fix prior to this change viewquery function that represent viewquery list were not composable which caused problem in case one componentdirective inherits another one and both of them contain view query due to the fact that we used index to reference query resulting query set wa corrupted child component query were overridden by super class one in order to avoid that we no longer use index assigned at compile time and instead maintain current view query index while iterating through them this allows u to compose viewquery function and make inheritance feature work with view query pr close ,fix
7160,ivy handle namespaces in attribute add handling for namespaced attribute when generating the template and in the elementattribute instruction pr close ,fix
7161,router removed additional to pr close ,docs
7162,ivy ngonchangesfeature no longer included in helloworld wrap the ngonchangesfeature in a factory such that no side effect occur in the module root add comment to nginherit property on feature definition interface to help guide others not to make the same mistake update compiler to generate the feature properly after the change to it being a factory update appropriate test pr close ,fix
7163,ivy add newer smaller ngonchangesfeature pr close ,refactor
7164,ivy revert onchanges change back to a feature add fixmeivy annotation to test that should remain updated so we can resolve those issue in the subsequent commits pr close ,refactor
7165,ivy testbedget should be able to retrieve token from compiler injector this change restores parity between ve testbed and rtestbed logic related to retrieving token using testbedget function now rtestbed also try to retrieve token from compiler injector pr close ,fix
7166,ivy dont create tnodes for native projectable node before this commit we were creating a fake tnode for each and every projectable node passed during dynamic component creation this approach had several problem the existing tview structure had to be mutated to accomodate new tnodes and it wa very easy to corrupt tview tnode data structure tnodes are not really needed to fully support projectable node so we were creating object and updating existing data structure for nothing this commit change the approach so we dont create fake tnodes for projectable node but instead we process projectable node directly in the projection instruction a a result weve got le code le object allocation and a a bonus we fix few bug where tview tnode data structure were corrupted when using projectable node pr close ,fix
7167,ivy generating incorrect tag name with namespace fix the template generation function generating an incorrect tag name when the element ha a namespace eg svgcircle get generated rather than circle pr close ,fix
7168,router skiplocationchange with named outlet with a bug wa fixed where multiple redirects using eager url update could cause navigation to fail however that fix introduced a problem where with skiplocationchange enabled the url tree rendered wa not properly stored for reference this specifically caused an issue with named router outlet and subsequent navigation not being recognized this pr store the correct urltree for reference with later navigation it fix the regression introdued with fix pr close ,fix
7169,ivy not applying camelcased style property fix ivy not applying property that are set in camelcase because it go through the cssstyledeclaration api via setproperty and removeproperty which requires for the value to be in dashcase note i opted to let the browser normalize the value rather than convert it to dashcase during compile time because there are some special case like browserprefixed property where we might not normalize it inline with the browser this pr fix fw pr close ,fix
7170,core deprecate viewencapsulationnative pr close ,docs
7171,ivy implement listlazyroutes for ngtsc this commit us the ngmodulerouteanalyzer introduced previously to implement listlazyroutes for ngtscprogram currently this implementation is limited to listing route globally and can not list route for a given lazy module testing seems to indicate that the cli us the global form but this should be verified jira issue fw pr close ,feat
7172,ivy introduce route testing mode for ngtsc test this commit introduces a new mode for the ngtsctestenvironment which build the ngtscprogram and then asks for the list of lazy route instead of running the t emit phase pr close ,test
7173,ivy implement ngtscs route analysis this commit introduces the ngmodulerouteanalyzer friend which given metadata about the ngmodules in a program can extract the list of lazy route in the same format that the ngtools api us pr close ,feat
7174,ivy reuse the foreignfunctionresolver interface when appropriate this make the type and intention more explicit and clear pr close ,refactor
7175,ivy create a moduleresolver to map module path to file pr close ,feat
7176,ivy dynamicvalue now indicates why the value is dynamic this commit change the partial evaluation mechanism to propagate dynamicvalue error internally during evaluation and not to poison entire data structure when a single value is dynamic for example previously if any entry in an array wa dynamic evaluating the entire array would return dynamicvalue now the array is returned with only the specific dynamic entry a dynamicvalue instance of dynamicvalue also report the node that wa determined to be dynamic a well a a potential reason for the dynamicness these can be nested so an expression a b may have a dynamicvalue that indicates the a term wa dynamicvalue which will itself contain a reason for the dynamicness this work wa undertaken for the implementation of listlazyroutes which need to partially evaluate provider array part of which are dynamic and part of which contain useful information pr close ,feat
7177,ivy ngtsc fails building flat module out on window ngtsc currently fails building a flat module out file on window because it generates an invalid flat module typescript source file eg t export from cuserspauldesktoptestsrcexport this is because pathposixrelative doe not properly with nonposix path and only expects posix path in order to work pr close ,fix
7178,ivy add missging getdirectives export fixivy expose missing getdirectives from dicoveryutils pr close ,fix
7179,docsinfra removal of the use of the childnoderemove method that it isnt supported by ie fix pr close ,fix
7180,ivy fix styling context resolution for host binding on container previous to this change the isstylingcontext function wa improperly returning true for lcontainers because it used the presence of an array at index to determine whether it wa a styling context unfortunately lcontainers also contain array at index so this would return a false positive this led to other error down the line because we would treat node with container a if they already had styling context even if they did not so the proper initialization logic for styling context wa not run this commit fix the isstylingcontext function to use lcontainerlength a a marker rather than the presence of an array which in turn fix host binding to style on node with container pr close ,fix
7181,docsinfra active tslint rule semicolon pr close ,style
7182,docsinfra upgrade cli command doc source to fded updating angularmaster from clibuildsmaster relevant change in commit range modified helpgeneratejson helpnewjson close pr close ,build
7183,ivy expose resolving url in the resourceloader resource can be loaded in the context of another file which mean that the path to the resource file must be resolved before it can be loaded previously the api of this interface did not allow the client code to get access to the resolved url which is used to load the resource now this api ha been refactored so that you must do the resource url resolving first and the loading expects a resolved url pr close ,refactor
7184,form add markallastouched to abstractcontrol add functionality to mark a control and it descendant control a touched close pr close ,feat
7185,ivy destroy injector when module is destroyed destroys the module injector when an ngmodule is destroyed which in turn call the ngondestroy method on the instantiated provider this pr resolve fw pr close ,fix
7186,ivy ensure proper namespace is used to create element in jit pr close ,fix
7187,compilercli resolve generated sassless file to cs input user might have run the cs preprocessor tool before the angular compiler for example we do it that way under bazel this mean that the designtime reference is different from the compiletime one the input to the angular compiler is a plain cs file we assume that the preprocessor doe a trivial mapping using the same basename with a different extension pr close ,feat
7188,ivy ensure animation component host listener are rendered in the sub component due to the fact that animation in angular are defined in the component metadata all animation trigger definition are localized to the component and are inaccessible outside of it animation host listener in ivy are rendered in the context of the parent component but the ve render them differently this patch ensures that animation host listener are always registered in the sub component renderer jira issue fw jira issue fw pr close ,fix
7189,bazel use local rollup buildoptimizer for ngrollupbundle the current build workflow depends on cross workspace dependency by installing angularcli a a bazel repository this is not ideal because it introduces separate nodemodule directory other than the one installed by angular through the yarninstall rule ngdeps this commit remove angularcli from the bazel workspace and installs rollup and angulardevkitbuildoptimizer locally pr close ,build
7190,bazel increase node memory limit for ngmodule rule to prevent oom for big module this came up a a request from an internal google team context pr close ,fix
7191,docsinfra do not automatically post preview comment on pr for team right now we post such comment whenever a file ha been touched that could potentially have affected the doc since the api doc are built from comment in the source code almost all nondocs change are generating such preview comment even though most of the time they are irrelevant to the author and create unnecessary noise on the pr especially for actively workedon pr this commit remove the team github team from the list of team whose member will automatically get preview comment adding the aio preview label would still work on any pr jira fw pr close ,ci
7192,languageservice improve integration test the current integration test for language service involves piping the result of one process to another using unix pipe this make the test hard to debug and hard to configure this commit refactors the integration test to use regular jasmine scaffolding more importantly it test the way the language service will actually be installed by end user user would not have to add angularlanguageservice to the plugins section in tsconfigjson instead all they need to do is install the extension from the v code marketplace and angular language service will be loaded a a global plugin pr close ,test
7193,ivy ensure element removal trigger host removal animation prior to this fix ivy would not execute any animation trigger that exist a host binding on an element if it is removed by the parent template pr close ,fix
7194,ivy ensure animation trigger ordering is correctly delivered to the renderer in ivy when element are created a series of static attribute name are provided over to the construction instruction of that element static attribute name include nonbinding attribues like div selected a well a animation binding that do not have a rh value like div foo because of this distinction valueless animation trigger are rendered first before valuefull animation binding are and this improper ordering ha caused various existing test to fail this patch ensures that animation binding are evaluated in the order that they exist within the html template code or host binding code pr close ,fix
7195,ivy ensure interpolated styleclasses do not cause tracking issue for binding with the refactoring or how stylesclasses are implmented in ivy interpolation ha caused the binding code to mess up since interpolation itself take up it own slot in ivy memory management code this patch make sure that interpolation work a expected with class and style binding jira issue fw pr close ,fix
7196,ivy ensure renderer beginend method are only called during change detection in ve the rendererbegin and rendererend method are only called when cd is called on an element this patch ensures that ivy doe the same thing jira issue fw pr close ,fix
7197,ivy testbed should use annotation for the last match rather than the first when we look for matching annotation in testbed we should always take the last matching annotation otherwise we will return superclass data for subclass which would have unintended consequence like directive matching the wrong selector pr close ,fix
7198,docsinfra improve ay issue pr close ,fix
7199,bazel use angularcli from root packagejson a few integration test now depend on angularcli this commit change the affected test to use the dependency on angularcli defined at root packagejson pr close ,build
7200,ivy add root cause analysis for the remaining projection test initial thinking wa that the bug is in the content projection logic but it turned out to be a wrong assumption hence adding a test to illustrate that basic content projection of view container work correctly what fails in the marked test is the logic quering debug node content peojection is fine but we never create the b text node since we call show method on the wrong directive instance pr close ,test
7201,ivy properly project individual node pr close ,fix
7202,bazel add support for sas this commit add the appropriate rule to the workspace for a project that requires sas support pr close ,feat
7203,bazel fix integration test after v bump the integration test for bazelschematics installs angular in two different location bazel workspace packagejson fetched from npm pull request change the test to always install from source this break when there a major version bump since the version locally and the version in packagejson no longer match this change update packagejson to fetch angular package locally a well pr close ,fix
7204,ivy componentfactories not populated in modulewithcomponentfactories fix the modulewithcomponentfactoriescomponentfactories not being populated when calling compilemoduleandallcomponentssync in ivy these change resolve fw pr close ,fix
7205,ivy add compilergetmoduleid support in rtestbed this update brings getmoduleid function support to rtestbedspecific compiler instance pr close ,test
7206,ivy update ininstart and inattributes instruction order prior to this change element in attribute like intitle were processed after in one that placed in and inattributes instruction in wrong order thus inattributes failed to target it host element at runtime this change update processing order and put inattributes instruction in front of in one to resolve the problem pr close ,fix
7207,ivy support for multiple icu expression in the same in block there were two issue with multiple icu expression in the same in block the regexp that wa used to parse the text wasnt able to handle multiple icu expression ive replaced it with parsing the text and searching for bracket which is what we ended up doing in the end anyway we allocate node index for node generated by the icu expression which increase the expando value but we would create the node for those case during the update phase in the mean time we would create some node during the creation phase comment node for icu expression text node with an auto increment index this mean that any node created after an icu expression would get the following index value but the icu case node expected to use the same index a well there wa a mismatch between the auto generated index and the expected index which wa causing problem when we needed to select those node for update later on to fix it ive added the expected node index to the list of mutate code that we generate and we do not use an auto increment value anymore fw resolve pr close ,fix
7208,docsinfra upgrade cli command doc source to aeba updating angularmaster from clibuildsmaster relevant change in commit range modified helpbuildjson helpgeneratejson pr close ,build
7209,upgrade clean up global state after test in ngupgradelite when a downgraded component request it downgraded module the angularjs injector is temporarily stored with the intention of grabbing it once the module ha been bootstrapped which also clean up the temporary injector reference in some test bootstrapping a component might throw an error which cause the test to fail immediatelly and move on to the next test in slow browser eg on cisaucelabs the successful bootstrapping of another downgraded module might not have been completed in time and thus the temporary injector reference not cleaned up in such a case if the following test in our randomized test suite happens to rely on the temporary injector reference being initially unset such a this test it will fail this might appear a a flake on ci because it depends on a race condition and specific order of test so it usually go away after a rerun this commit fix it by ensuring the temporary injector reference is manually cleaned up when necessary jira issue fw pr close ,test
7210,ivy enable passing animation test pr close ,test
7211,ivy minor code duplication cleanup pr close ,refactor
7212,ivy implement compilecomponents method for testbedrender the implementation of the compilecomponents method for testbedrender wa missing we now pas each component through resolvecomponentresources when testbedcompilecomponents is called so that templateurl and styleurls can be resolved asynchronously and used once testbedcreatecomponent is called the component metadata are overriden in testbed instead of mutating the original metadata like this is the case outside of testbed the reason for that is that we need to ensure that we didnt mutate anything so that the following test can run with the same original metadata otherwise we it could trigger or hide some error fw resolve pr close ,feat
7213,languageservice cleanup tsplugin this commit remove the unnecessary typescriptonly helper from tsplugin and all unused method related to that pr close ,refactor
7214,platformserver use shared domelementschemaregistry instance right now the serverrendererfactory creates a new instance of the domelementschemaregistry for each and every request which is quite costly for the tour of hero ssr this take around of the overall execution time since the schema is never modified but only used in a readonly fashion it should be possible to reuse a single instance instead naive performance testing with concurrent connection and request in total show an approximate improvement in reqsec on the tour of hero ssr example pr close pr close ,perf
7215,ivy normalize summary and factory shim file path at the moment path stored in map are not normalized and in window is causing file not to be found when enabling factory shimming for example the map content will be map cgitclireposngfactoryshimsindexngfactoryts cgitclireposngfactoryshimsindexts however t compiler normalized the path and is causing error t file cgitclireposngfactoryshimsindexngfactoryts not found error t file cgitclireposngfactoryshimsindexngsummaryts not found the change normalized the path that are stored within the factory and summary map pr close ,fix
7216,ivy deps are actually supported this code wa throwing if the deps array of a provider ha several element but at the next line it resolve them with this check ngtsc couldn ’ t compile ngbootstrap for example pr close ,fix
7217,router add clarification for router config pr close ,docs
7218,core fix typo pr close ,docs
7219,serviceworker navigation url backwards compatibility pr close ,fix
7220,ivy throw meaningful error for uninitialized output throw a similar error to viewengine when encountering an output that hasnt been initialized to an observable these change resolve fw pr close ,fix
7221,ivy remove defattributes in favor of the elementhostattrs instruction up until this point all static attribute value thing like title and id defined within the host are of a componentdirective definition were generated into a defattributes array and then processed at runtime this design decision doe not lend itself well to treeshaking and is inconsistent with other static value such a style and class this fix ensures that all static attribute value attribute class and style that exist within a host definition for component and directive are all assigned via the elementhostattrs instruction before definedirective attribute title my title now definedirective hostbindings function if create elementhostattrs title mytitle pr close ,refactor
7222,ivy ensure componentdirective class selector are properly understood angular allows for ngcontent element to include a selector which filter which contentprojected entry are inserted into the container depending on whether or not the selector is matched with ivy this feature ha not fully worked due to the massive change that took place inside of ivy styling algorithm code which is responsible for assigning class and style to an element this fix ensures that contentprojection can correctly identify which slot an element should be placed into when classbased selector are used pr close ,fix
7223,bazel bazel schematic should add router package this commit fix a bug whereby a bazel project created by the schematic would not compiled if project contains routing module it is missing a dependency on the router package pr close ,fix
7224,ivy debug node reference not returning template ref fix the debugnodereferences returning a reference to the underlying comment node rather than the templateref that the reference is pointing to the issue come from the fact that discoverlocalrefs fall back directly to returning the native node if the ref isnt pointing to a directive rather than looking through the local these change resolve fw pr close ,fix
7225,ivy nodeinjector should know how to get itself injector pr close ,test
7226,ivy clone query correctly for multiple component instance when requesting a query instance for a node it wa previously decided whether it need to be cloned if the node wa not already marked a hosting a query this check is in place to have only a single query instance per node the issue with this approach is that no clone is created for subsequent instantiation of a component a the tnode is already marked a hosting a query during first template pas whereas the cloning of query should be independent of first template pas to overcome this issue the query are assigned an owner tnode such that it can reliably be determined if a clone need to be created pr close ,fix
7227,ivy remove duplicated word in architecture doc pr close ,docs
7228,core proper internal and nocollapse combined usage fix this update fix the way the internal and nocollapse annotation are used together which produced error while running it with closure compiler now two annotation are a part of the same comment block pr close ,fix
7229,bazel incorrectly always us ngcwrapped from npm workspace this is a followup to which fix that ngcwrapped from the npm workspace is always used if angular is fetched a an external dependency pr close ,fix
7230,ivy validate prop and attrs with on prefix at runtime prior to this change we performed prop and attr name validation at compile time which failed in case a given propattr is an input to a directive thus should not be a subject to this check since directive matching in ivy happens at runtime the corresponding check are now moved to runtime a well pr close ,fix
7231,docsinfra upgrade cli command doc source to eecdb updating angularmaster from clibuildsmaster relevant change in commit range modified helpgeneratejson helpnewjson pr close ,build
7232,docsinfra add crossed through styling pr close ,fix
7233,docsinfra change style of deprecated marker pr close ,fix
7234,docsinfra render deprecated marker for cli command option fix fix pr close ,fix
7235,bazel replay compilation us wrong compiler for building esm with the update to typescript x a big issue seems to have appeared for downstream bazel user if the downstream user still us a lower typescript version normal bazel target using the ngmodule rule are still compiled with the correctold typescript version assuming they set the nodemodules attribute properly but if they build the previous bazel target by specifying them within a ngpackage rule the typescript version from the angular workspace is being used for the replayed esm compilation this is because we resolve the replay compiler to ngcwrapped or tscwrapped bazel executables which are defined a part of the angular workspace this mean that the compiler are different if the downstream user us ngcwrapped from the npm repository because the replayed compilation would use the compiler with ngdepstypescript in order to fix this we should just use the compiler that is defined in the angularbuildbazel file this target by default to the npm workspace which is working for downstream user this is similar to how it is handled for tscwrapped tscwrapped work a expected for downstream user note this is not the ideal solution because ideally we would completely respect the compiler option from the base ngmodule but this is not possible in a hermetic way unless we somehow accept the compiler a an attribute that build all transitive deps this is something we should explore in the future for now we just fix this in a reasonable way that is also used for tscwrapped from the typescript rule pr close ,fix
7236,bazel use webpackage rule for indexhtml indexhtml need to have the zonejs and the project bundle injected using script tag this used to be done explicitly by specifying a new indexhtml but with webpackage rule introduced in rulesnodejs it is now possible to perform the injection dynamically pr close ,refactor
7237,bazel getting started with bazel cli pr close ,docs
7238,docsinfra increase timeout for all redirection test occasionally url take longer to load which cause ci flake in the timeout for external url wa increased but internal url turned out to be affected a well pr close ,test
7239,ivy reenable passing test and misc cleanup pr close ,test
7240,ivy refactor more file in di to prepare it for bazel package pr close ,refactor
7241,ivy create injector interface remove dependency on ivy this change is a prerequasity for a later change which will turn the di into it own bazel package in order to do that we have to have injector type be importable by ivy this mean that we need to create injector a a pure type in interface folder which is already a bazel package which ivy can depend on remove the dependency of class injector on ivy so that it can be compiled in isolation we do that by using a special value for ngelementid which tell the ivy nodeinjector than injector is being requested pr close ,refactor
7242,ivy update root cause for animation test pr close ,test
7243,bazel use localrepository to load angular the current integration test for bazel schematic downloads a published version of angular a required by the rule in the cli created workspace however this make the test le useful because it doe not actually test any change to the angular repo at source this pr replaces the method in the worspace with localrepository so that any local change to the angular repo are tested accordingly with typescript the file eesrcapppots generated by cli no longer compiles under bazel due to missing type annotation a temporary file is placed in the integrationbazelschematics directory while the change is pending in cli repo pr close ,test
7244,bazel add ibazel to deps of bazel project incremental rebuilds is a fundamental part of the development workflow bazelibazel should be added to the dev dependency of a bazel project pr close ,fix
7245,ivy ignore empty binding this update aligns ivy behavior with viewengine related to empty binding for example div somepropdiv empty binding are ignored pr close ,fix
7246,form fix up see tag for abstractcontol pr close ,docs
7247,docsinfra render see information in member previously see tag were only rendered for top level classlike doc now these tag are rendered for method and property too pr close ,build
7248,ivy reenable passing upgrade test pr close ,test
7249,ivy update parameter for executeinithooks to be more accurate coauthoredby benlesh benbenleshcom pr close ,refactor
7250,bazel tswebtestsuite now properly includes initbrowserspecjs there wa an issue where initbrowserspecjs wa being run out of order this change add it a a runtime dependency so it is executed when it need to be preventing test from bombing when they try to read from isnode from global scope before it is defined pr close ,fix
7251,ivy ngonchanges only run for binding update pr close ,fix
7252,ivy properly handle inheriting lifecycle hook from plain class pr close ,feat
7253,ivy add missing nocollapse annotation to ngelementid field ngelementid static field are a part of how the ivy node injector work in order to survive closure minification correctly they need to be annotated with nocollapse pr close ,fix
7254,ivy ensure nocollapse is added to static field ngtsc ha a hack to add nocollapse jsdoc annotation to generated static field this hack is currently broken likely due to a typescript change in the way writefile work this commit fix the hack and introduces an ngtscspec test to ensure it doe not regress again pr close ,fix
7255,ivy testbed should not clobber compilation of globalscope module when an ngmodule decorator executes the module is added to a queue in renderjitmodulets reading an ngcomponentdef property cause this queue to be flushed ensuring that the component get the correct module scope applied in beforeeachts a global beforeeach is added to all angular test which call testbedresettestingmodule prior to running each test this in turn clear the module compilation queue which is correct behavior a module declared within the test should not leak outside of it via the queue so far this is okay but before the first test run the module compilation queue is full of module declared in global scope no definition have been read so no flush of the queue have been triggered the global beforeeach trigger a reset of the queue aborting all of the inprogress global compilation breaking those class when theyre later used in test this commit add logic to testbedrender to respect the state of the module queue before the testbed is first initialized or reset the queue is flushed prior to such an operation to ensure global compilation is allowed to finish properly with this fix a platformserver test now pass previously the mychild element wa not detected a a component because the encompassing module never finished compilation fw resolve pr close ,fix
7256,ivy implement a compiler for use in testbedrender previously when testing code injected the compiler it received the toplevel compiler implementation defined in linkercompilerts and governed by the prer switch code running under the testbed however should always use a testbedaware compiler implementation this commit add such an implementation to the testbedrender which pass compiled module through the compilengmodule function with this change formerly disabled router integration test now pas fw resolve pr close ,feat
7257,ivy fix invalid provider error message under testbed an ngmodule with invalid provider declaration produce error under normal circumstance however within the testbed two small issue with provider override interfered with the correct production of these error a null provider object caused a premature crash when the testbed attempted to check for a provide property on it with hasownproperty the array of provider would have an empty override array appended to it for each input provider which would pollute the error message produced down the line this commit fix both of these issue by checking for null and filtering out the empty override array testing strategy future commits change the way the testbed compiles module causing test to become sensitive to this bug if not fixed pr close ,fix
7258,ivy make module registration by id idempotent an ngmodule with an id property ha it type registered in a global map of module by id this happens during compilation of the module in ivy module are first compiled when the ngmodule decorator executes in test they might be passed again through the testbeds compiler resulting in a second compilation and registration before this fix this second registration would cause an error a the id wa previously registered this commit make the registration idempotent so if the same module type is being registered for the same id then no error is thrown testing strategy future commits change the way the testbed compiles module causing test to become sensitive to this bug if not fixed pr close ,fix
7259,serviceworker fix example of manually checking for update poll for update in a way that doe not prevent the sw from being registered discussed in pr close ,docs
7260,serviceworker fix code formatting in serviceworkergettingstarted example pr close ,style
7261,serviceworker fix the serviceworkergettingstarted doc example change change the project type to serviceworker so that it get appropriate packagejson with angularserviceworker dependency and angularjson with serviceworker true in production config move ngswconfigjson to the correct directory specify custom test command for aios yarn exampleee to also verify that the serviceworker bit are set up correctly pr close ,docs
7262,docsinfra add support for custom test command in clibased doc example previously clibased doc example were tested using yarn ee in some case it might make sense to run different or additional check for a doc example when running yarn exampleee in aio currently the only option is to define a custom project type and overwrite the ee yarn script in packagejson doing so in addition to being cumbersome and verbose would also end up in the zip archive that user can download to run the example locally this would be confusing if these custom test are specific to our ci need this commit add support for defining a custom list of command per example these command if specified would be run instead of the default yarn ee when testing the doc example on ci via yarn exampleee this feature will be used to verify that the serviceworkergettingstarted example is set up correctly in a subsequent commit but can be useful in other case a well pr close ,feat
7263,docsinfra add serviceworker project type file overwrites angularjson add serviceworker true to production config packagejson add angularserviceworker to dependency this will make any serviceworker example work outofthebox when downloading and running locally from the zip archive pr close ,feat
7264,router remove obsolete section in readmemd pr close ,docs
7265,ivy ngcc identify all esm decorated class in esm decorated class can be indicated by call to decorate previously the reflectionhostfinddecoratedclasses call would identify helper call of the form someclass tslibdecorate but it wa missing call of the form someclass someclass tslibdecorate this form is common in ngmodule decoration where the class being decorated is referenced inside the decorator or another member this commit now ensures that a chain of assignment of any length is now identified a a class decoration if it result in a call to decorate fix pr close ,fix
7266,ivy mark test where checknochanges result are different in the view engine and ivy pr close ,test
7267,ivy resolve root cause for core animation test pr close ,test
7268,router fixed a typo in canload title text interface that a class can implement to be a guard deciding if a child can be loaded if a child changed to if child interface that a class can implement to be a guard deciding if child can be loaded pr close ,docs
7269,router fix misnamed path this change match the route found in the following code example for authguardts a well a the logincomponentts in the add the logincomponent section pr close ,docs
7270,core improve type for eventemitter pr close ,refactor
7271,ivy support multiple exportas allows for multiple commaseparated exportas name similarly to viewengine these change fix fw pr close ,fix
7272,bazel bump bazeltypescript bazelkarma to pr close ,build
7273,bazel add bazelout to gitignore pr close ,fix
7274,ivy markforcheck should not schedule change detection previously we had the logic to schedule a change detection tick inside markviewdirty this is fine when used in markdirty the userfacing api because it should always schedule change detection however this doesnt work when used in markforcheck because historically markforcheck doe not trigger change detection to be backwards compatible this commit move the scheduling logic out of markviewdirty and into markdirty so markforcheck no longer trigger a tick pr close ,fix
7275,ivy pas ngcontentselectors through to definecomponent call library that create component dynamically using component factory such a angularupgrade need to pas block of projected content through to the componentfactorycreate method these block are extracted from the content by matching cs selector defined in ngcontent select tag found in the component template the angular compiler collect these cs selector when compiling a component template and expose them via the componentfactoryngcontentselectors property this change ensures that this property is filled correctly when the component factory is created by compiling a component with the ivy engine pr close ,fix
7276,upgrade log more info to help debug ci flake related jira issue fw pr close ,test
7277,ivy init hook being rerun if an exception is throw fix ivy running the init hook if an exception is thrown in one of them these change fix fw pr close ,fix
7278,ivy update root cause for angularcore fw is a delibrate breaking change so changing the status of the corresponding test from fixmeivy to modifiedinivy pr close ,test
7279,ivy pipe returning wrappedvalue should invalidate correct binding when a pipe return an instance of wrappedvalue we should invalidate value of a binding where the pipe in question is used before this change weve always wrtten the invalidation value nochange to the binding root this invalidating the first binding in a lview this commit corrects the binding index calculation so the binding with a pipe is invalidated pr close ,fix
7280,ivy turn on passing in test in ci pr close ,test
7281,ivy diagnose root cause of remaining failing router test pr close ,test
7282,bazel protractor rule doe not run spec file with underscore there are various ee test with the spects suffix in the angular project currently the protractor bazel rule doe not pick up these file and just ignores them since underscore is commonly used we should support this needed for the conversion fo the example to bazel pr close ,fix
7283,ivy directive without selector should not be supported pr close ,fix
7284,ivy proper resolution of enums in component decorator prior to this change component decorator wa resolving encapsulation value a bit incorrectly which resulted in encapsulation nan in compiled code now we resolve the value a enum memeber and throw if it not the case a a part of this update the changedetection field handling is also added the resolution logic is the same a the one used for encapsulation field pr close ,fix
7285,ivy accept multiple value for exportas in the compiler exportas in directive metadata support multiple value separated by comma previously it wa treated a a single value string this commit modifies the compiler to understand that exportas is a string it stop short of carrying the multiple value through to the runtime instead it only emits the first one a future commit will modify the runtime to accept all the value pr close ,feat
7286,ivy properly rewrite import in generated factory shim generated factory shim can import from angularcore however we have special logic in place to rewrite selfimports when generating code for angularcore this commit leverage the new standalone importrewriter interface to properly rewrite import in generated factory shim before this fix a generated factory file for core would look like typescript import a i from rsymbols export var applicationmodulengfactory new ɵngmodulefactory this is invalid a ɵngmodulefactory is just ngmodulefactory when imported via rsymbols fw resolve pr close ,fix
7287,ivy extract import rewriting into a separate interface currently the importmanager class handle various rewriting action of import when compiling angularcore this is required a code compiled within angularcore can not import from angularcore to work around this import are rewritten to get core symbol from a particular file rsymbolsts in this refactoring this rewriting logic is moved out of the importmanager and put behind an interface importrewriter there are three implementers of the interface noopimportrewriter used for compiling all noncore package rsymbolsimportrewriter used when ngtsc compiles angularcore ngccflatimportrewriter used when ngcc compiles angularcore special logic is needed because ngcc ha to rewrite import in flat bundle differently than in nonflat bundle this is a precursor to using this rewriting logic in other context besides the importmanager pr close ,refactor
7288,bazel add bazelbazel to dev deps project created by angularcli depends on bazel at build time and we should not assume that bazel is available globally instead the project should specify an explicit dev dependency on bazelbazel pr close ,fix
7289,ivy avoid transitivescopesfor function duplication in testbed testbed used to have it own implementation of the transitivescopesfor function customized for testbed need to compile ngmodules this change unifies the transitivescopesfor function usage by importing it from the jitmodulets script and adding extra argument to configure it behavior how to compile ngmodule so that testbed can leverage it pr close ,refactor
7290,ivy ensure animation binding work for keyvalue and empty binding pr close ,fix
7291,ivy update root cause for animation test pr close ,test
7292,ivy reenable passing upgrade test pr close ,test
7293,ivy mark jitsummariesintegrationspec a obsolete in ivy these test validate the ability of the view engine testbed to consume summary metadata a mechanism which allows the testbed to use aotcompiled component directive in test it achieves this through two operation which are independently obsolete in ivy it injects compilemetadataresolver a view engine specific compiler internal class which extract global analysis metadata from class and us it to construct summary metadata this happens in a beforeeach block which call createsummaries it us testbedinittestenvironment to pas summary metadata to the testbed itself any such metadata is ignored in ivy operation make it impossible to run these test under ivy a the compilemetadataresolver is not available with an ivy compiler ivy itself doe not rely on summary data and the rtestbed can depend directly on aot compiled component without it thus the spirit of thes test is obsolete in an ivy world fw resolve pr close ,test
7294,ivy merge caninsertnativenode and getparentnative previously the caninsertnativenode and getrenderparent function had almost exaclty the same logic what wa worse that getrenderparent wa calling caninsertnativenode thus executing the same nontrivial logic twice this commit merges caninsertnativenode and getrenderparent into one function now getrenderparent will return a native parent or null if a node cant be inserted content projection root of a view that is not inserted etc pr close ,refactor
7295,ivy remove concept of renderparent from lcontainer pr close ,refactor
7296,ivy dont cache render parent on lcontainer to support ngupgrade pr close ,fix
7297,ivy simplify logic around caninsertnativenode previously presence and type of a parent tnode wa split among caninsertnativenode caninsertnativechildofview and caninsertnativechildofelement this commit centralises the logic in caninsertnativenode thus simplifying the overall logic and making caninsertnativechildofelement trivial pr close ,refactor
7298,core add missing closing backtick pr close ,docs
7299,form remove duplicated link pr close ,docs
7300,ivy add root cause for router testbed failure pr close ,test
7301,bazel list explicit dependency in workspace instead of relying on implicit dependency through angular the workspace of the project should explicitly add rulesnodejs and rulestypescript so it can better control the version pr close ,build
7302,ivy ngcc recognize synthesized constructor a constructor function may have been synthesized by typescript during javascript emit in the case no userdefined constructor exists and eg property initializers are used those initializers need to be emitted into a constructor in javascript so the typescript compiler generates a synthetic constructor this commit add identification of such constructor a ngcc need to be able to tell if a class did originally have a constructor in the typescript source when a class ha a superclass a synthesized constructor must not be considered a a userdefined constructor a that prevents a base factory call from being created by ngtsc resulting in a factory function that doe not inject the dependency of the superclass hence we identify a default synthesized super call in the constructor body according to the structure that typescript emits pr close ,fix
7303,bazel flat module miss amd module name on window fix that the flat module out file do not have a proper amd module name on window this is currently blocking serving a ngmodule using the bazel typescript devserver on window pr close ,fix
7304,aio treating some deprecated pr close ,fix
7305,core fix character that corrupt link pr close ,docs
7306,ivy updating root cause for test within angularcore the problem that fixmeivys refer to is resolved but the test are still broken due to other issue not possible to retrieve host property binding for debugelement pr close ,test
7307,ivy update root cause of linker test pr close ,test
7308,docsinfra remove unnecessary script to workaround cli issue the cli issue ha been fixed and we no longer need to work around it this is essentially reverting pr close ,build
7309,upgrade properly clean up after test to avoid error in unrelated test many ngupgrade test need to manually bootstrap module instead of using testbed which automatically clean up and thus need to also manually clean up afterwards eg by calling destroyplatform after each test failing to destroy the platform is usually not a problem unless the next test try to manually destroy it a a precaution a happens here among other place more specifically the problem happens because a part of the cleanup happening on platform destruction upgraded component will try to call a method on angularelement after angular ha been set to undefined assuming the last test wa using the witheachngversion helper because the test order is pseudorandom and thus different on each run these error did not always come up and when they did they would go away after a couple of rerun making them appear a flake on ci for reference the issue wa introduced in cd this commit eliminates the issue by always destroying the platform after each ngupgrade test jira issue fw pr close ,test
7310,ivy sanitization for host binding this commit add sanitization for elementproperty and elementattribute instruction used in hostbindings function similar to what we already have in the template function main difference is the fact that for some attribute like href and src we cant define which securitycontext they belong to url v resourceurl in compiler since information in directive selector may not be enough to calculate it in order to resolve the problem compiler injects slightly different sanitization function which detects proper security context at runtime pr close ,fix
7311,ivy reference external class by their exported name previously ngtsc would assume that a given directivepipe being imported from an external package wa importable using the same name by which it wa declared this isnt always true sometimes a package will export a directive under a different name for example angular frequently prefix directive name with the ɵ character to indicate that theyre part of the package private api and not for public consumption this commit introduces the tsreferenceresolver class which given a declaration to import and a module name to import it from can determine the exported name of the declared class within the module this allows ngtsc to pick the correct name by which to import the class instead of making assumption about how it wa exported this resolver is used to select a correct symbol name when creating an absolutereference fw resolve fw resolve pr close ,feat
7312,ivy produce diagnostics for missing export incorrect entrypoint this commit add tracking of module directive and pipe which are made visible to consumer through ngmodules exported from the package entrypoint ngtsc will now produce a diagnostic if such class are not themselves exported via the entrypoint a this is a requirement for downstream consumer to use them with ivy to accomplish this a graph of reference is created and populated via the referencesregistry symbol exported via the package entrypoint are compared against the graph to determine if any publicly visible symbol are not properly exported diagnostics are produced for each one which also show the path by which they become visible this commit also introduces a diagnostic instead of a hard compiler crash if an entrypoint file can not be correctly determined pr close ,feat
7313,form export numbervalueaccessor rangevalueaccessor directive angularforms declares several directive and a module which are not exported from the package via the entrypoint either intentionally or a a historical accident ivy locality principle necessitates that directive used in user code be importable from the package which defines them this requires these form directive to be exported several directive which define controlvalueaccessors are exported numbervalueaccessor rangevalueaccessor a few more directive and a module are exported privately with a ɵ prefix ngnovalidate ngselectmultipleoption internalformssharedmodule pr close ,feat
7314,ivy prep ngtsc and ngcc for upcoming import resolution work upcoming work to implement import resolution will change the dependency of some higherlevel class in ngtsc ngcc this necessitates change in how these class are created and the lifecycle of the tsprogram in ngtsc ngcc to avoid complicating the implementation work with refactoring a a result of the new dependency the refactoring is performed in this commit a a separate prepatory step in ngtsc the testing harness is modified to allow easier access to some aspect of the tsprogram in ngcc the main change is that the decorationanalyzer is created with the tsprogram a a constructor parameter this is not a lifecycle change a it wa previously created with the tstypechecker which is derived from the tsprogram anyways this change requires some reorganization in ngcc to accommodate especially in testing harness where decorationanalyzer is created manually in a number of spec pr close ,refactor
7315,ivy split apart the metadata package in the ngtsc compiler this refactoring move code around between a few of the ngtsc subpackages with the goal of having a more logical package structure additional interface are also introduced where they make sense the metadata package formerly contained both the partial evaluator the typescriptreflectionhost a well a some other reflection function and the reference interface and various implementation this package wa split into part the partial evaluator now ha it own package partialevaluator and exists behind an interface partialevaluator instead of a toplevel function in the future this will be useful for reducing churn a the partial evaluator becomes more complicated the typescriptreflectionhost and other miscellaneous function have moved into a new reflection package the former host package which contained the reflectionhost interface and associated type wa also merged into this new reflection package finally the reference apis were moved to the import package which will consolidate all importrelated logic in ngtsc pr close ,refactor
7316,ivy move the flat module index generator to it own package this commit move the flatindexgenerator to it own package in preparation to expand it capability and support reexporting of private declaration from ngmodules pr close ,refactor
7317,ivy use ngzoneonstable when bootstraped using platformref pr close ,fix
7318,ivy reenable passing animation test pr close ,test
7319,ivy update root cause analysis for the remaining queryrelated test pr close ,test
7320,ivy simplify signature of appendchild removechild previously the appendchild removechild could take null a an argument for a child to be added removed this is difficult to understand since the mentioned method are noop if a child is null this commit clarifies the appendchild removechild signature to systematically require a child node to be added removed it turn out that null could be passed only for a very specific in case so now we guard a call to removechild with an explicit check on the in side pr close ,refactor
7321,ivy mark changed behaviour for query and ngcontainer pr close ,test
7322,ivy enable in test for nested template the bug that wa causing this test to fail ha been resolved see fw the test now run correctly pr close ,test
7323,ivy enable last test in view injector integration spec pr close ,test
7324,ivy adding event listener for global object window document body this update introduces support for global object window document body listener that can be defined via host listener on component and directive pr close ,fix
7325,ivy root cause update for platformbrowserdynamic and in test pr close ,test
7326,ivy dont throw in inattributes when a component is rerendered inattributes wa throwing an error when it wa called multiple time in the create part of the template function with the same index for example when we create multiple component with the same template it shouldnt throw in this case and just use the cache when available fw resolve pr close ,fix
7327,ivy querylist not instance of exported querylist fix ivy querylist not being an instance of the exported viewenginer querylist also reworks first last and length to be regular property rather than setter reworking length wa required to be able to extend the viewengine querylist but i reworked first and last a well since getters generate a lot more code when transpiled to e these change fix fw pr close ,fix
7328,bazel protractor utils can not start server on window currently the protractor utils assume that the specified bazel server runfile can be resolved by just using the real file system this is not the case on window because the runfiles are not symlinked into the working directory and need to be resolved through the runfile manifest pr close ,fix
7329,ivy add in integration test via testbed pr close ,test
7330,bazel reenable ngpackage golden testing on ci enables the ngpackage golden testing on the ci fix the ngpackage golden testing for window pr close ,test
7331,bazel fix all ngpackage test not working on window pr close ,test
7332,bazel packager not properly removing amd directive on window pr close ,fix
7333,bazel ngpackage creates invalid typing reexport on window currently when building a package on window the typing reexport for secondary entrypoints is not valid typescript similarly the metadata and the packagejson file use nonposix path and cause inconsistency within the npm package for example packagejson esm esmcorejs esm esmcorejs testingdts of the core package export from testingtesting pr close ,fix
7334,ivy restore ng defs after running test in testbed rtestbed allows consumer to configure a testing module declare component override various metadata etc to do this it implement it own jit compilation where componentsdirectivesmodules have ivy definition field generated based on testing metadata it result in test interfering with each other one test might override something in a component that another test try to use normally causing failure in order to resolve this problem we store current componentsdirectivesmodules defs before applying override and recompiling once the test is complete we restore initial defs so the next test interact with clean component pr close ,fix
7335,ivy ngondestroy hook should be called on provider pr close ,fix
7336,ivy remove tviewpipedestroyhooks pr close ,refactor
7337,ivy update root cause for angularcore test pr close ,test
7338,ivy unify native node handling around render parent and element icu container pr close ,refactor
7339,ivy support icu message inside ngcontainer pr close ,fix
7340,ivy remove code duplication in native node manipulation pr close ,refactor
7341,ivy renames and documentation update pr close ,refactor
7342,ivy turn on platformbrowserdynamic test on ci we missed removing the fixmeivyaot bazel tag from the build file of platformbrowserdynamic so we werent running the packagesplatformbrowserdynamictesttestwebchromiumlocal test target on ci this commit turn on the test and add root cause where they are known pr close ,test
7343,ivy disable test which rely on debugelement in webworker pr close ,fix
7344,ivy should not throw when getting vcrefparentinjector on the root view pr close ,fix
7345,ivy element injector on the host of a component should see viewproviders of that component pr close ,fix
7346,ivy ensure animation host bindingslisteners work properly pr close ,fix
7347,ivy pipe should overwrite pipe with later entry in the pipe array pr close ,fix
7348,ivy ngtsc program emit ignoring custom transformer fix the customtransformers that are passed to the ngtscprogramemit not being passed along pr close ,fix
7349,ivy ensure unique template and listener function identifier previously there could be identical templatelistener function name for a component template if it had multiple similarly structured nested subtemplates or listener this resulted in build error identifier someidentifier ha already been declared this commit fix this by ensuring that the template index is included in the contextname passed to the templatedefinitionbuilder responsible for processing nested subtemplates similarly the template or element index is included in the listener name pr close ,fix
7350,ivy minor refactoring code cleanup pr close ,refactor
7351,ivy ngcontent tag in reinserted template should walk declaration tree this pr assures that content projection work if an ngcontent tag is placed inside an ngtemplate in one component and that ngtemplate is inserted into a different component it fix a bug where the projection instruction code would walk up the insertion tree to find selector data instead of the declaration tree pr close ,fix
7352,ivy support binding in icu in nested context prior to this change icu extraction logic wa not taking into account nested binding that look like this �� and only accounted for top level binding like this �� a a result icu were not parsed and remained a text in the output now the extraction logic regular expression take into account the nested binding format a well pr close ,fix
7353,ivy implement testbedoverridetemplateusingtestingmodule function adding testbedoverridetemplateusingtestingmodule function that override component template and us testingmodule a a scope pr close ,fix
7354,ivy correct attribute marker in broken test test incorrectly mark the attribute a a class when it should be selectonly pr close ,test
7355,form match geterror and haserror to get method signature internally geterror and haserror call the abstractcontrolget method which take path arraystring number string a input since there are different way to traverse the abstractcontrol tree this change match the method signitures of all method that use this pr close ,fix
7356,form update desc for haserror and geterror this commit add doc for the change made in close pr close ,docs
7357,ivy don ’ t publish animation binding a attribute some of the animation test have been failing because animation get triggered multiple time the reason for this is that the compiler wa generating static attribute binding in addition to dynamic binding this created multiple writes to the animation render which failed the test pr close ,fix
7358,docsinfra upgrade to latest dgenipackages to fix linking problem this new version of dgenipackages give the main implemented overload of a method the correct id and alias which allow it to be automatically linked see fix close pr close ,fix
7359,ivy update test failure root cause update the root cause for a couple of the test failure pr close ,test
7360,bazel unable to launch protractor test on window due to an incorrect environment variable name it currently not possible to launch protractor on window using the bazel protractor rule pr close ,fix
7361,ivy resolve forwardrefs correctly in testbed jit forward ref in some place like importsexportprovidersviewprovidersqueries were not resolved before passing to compilation phase now we resolve missing ref before invoking compile function pr close ,fix
7362,serviceworker update service worker configuration doc pr close ,docs
7363,docsinfra increase timeout for redirection to external url occasionally external url take longer to load which cause ci flake pr close ,test
7364,ivy enable more angularcore test pr close ,test
7365,ivy add root cause analysis for failing core test view injector integration pr close ,test
7366,element add firefox for support of custom element firefox now support custom element pr close ,docs
7367,ivy root cause analysis for angularplatformserver pr close ,test
7368,ivy merge static style rendering across element directive and component pr close ,fix
7369,ivy adding testbedoverrideprovider support prior to this change provider override defined via testbedoverrideprovider were not applied to componentsdirectives now provider are taken into account while compiling componentsdirectives metadata is updated accordingly before being passed to compilation pr close ,fix
7370,form clarify the pattern validator behavior pr close ,docs
7371,ivy apply all override from testbed not the last one only in some case in our test we can define multiple override for a given class a a result only the last override is actually applied due to the fact that we store override in a typeoverride map this update change the logic to keep all override defined in a given test for a type ie typeoverride map and applies them one by one at resolution phase this behavior is more inline with the previous testbed pr close ,fix
7372,ivy mark test using getdebugcontext a obsolete in ivy pr close ,test
7373,ivy add root cause analysis for failing router test pr close ,test
7374,upgrade add gotchastipsexample for multiple downgraded module pr close ,docs
7375,upgrade test injector tree traversal for downgraded component this commit add test that verify the current behavior wrt injector tree traversal for downgraded component so that it is easier to contrast with changed behavior is future commits should we decide to actually change it pr close ,test
7376,upgrade allow nesting component from different downgraded module pr close ,fix
7377,upgrade correctly handle nested downgraded component with downgrademodule previously nested downgraded component would not be createddestroyed inside the angular zone a they should and they would not be wired up correctly for change detection this commit ensures that ngupgrade correctly detects whether this is an ngupgradelite app ie one using downgrademodule instead of upgrademodule and appropriately handle component even if they are nested inside other downgraded component fix close close pr close ,fix
7378,upgrade simplify special handling of ngupgradelite in downgradecomponent pr close ,refactor
7379,router ensure url is updated after second redirect with urlupdatestrategyeager navigating to a route such a user you may get redirected to login previously if you go then route to user again the url will end up showing user after the second redirect this only happened in urlupdatestrategyeager this is now fixed so after the second redirect the url show the correct page fix pr close ,fix
7380,ivy correct content projection with nested template previously ivy code generation wa emmiting the projectiondef instruction in a template where the ngcontent tag wa found this code generation logic wa incorrect since the ivy runtime expects the projectiondef instruction to be present in the main template only this pr ammends the code generation logic so that the projectiondef instruction is emmitedin the main template only pr close ,fix
7381,ivy change detection strategy not being passed to compiler fix the defined change detection strategy not being passed to the compiler when a component is being compiled pr close ,fix
7382,ivy support ngmodule metadata from call that do not return modulewithproviders type normally function that return modulewithprovider object should parameterize the return type to include the type of ngmodule that is being returned for example forroot modulewithprovidersroutermodule but in some case especially those generated by nccc these function to not explicitly declare modulewithproviders a their return type instead they return a intersection type one of whose member is a type literal that declares the ngmodule type returned for example forroot customtypengmoduleroutermodule this commit change the ngmoduledecoratorhandler so that it can extract the ngmodule type from either kind of declaration pr close ,feat
7383,ivy ngcc add typing to modulewithproviders function exported function or static method that return a modulewithproviders compatible structure need to provide information about the referenced ngmodule type in their return type this allows ngtsc to be able to understand the type of ngmodule that is being returned from call to the function without having to dig into the internals of the compiled library there are two way to provide this information add a type parameter to the modulewithproviders return type eg static forroot modulewithproviderssomengmodule convert the return type to a union that includes a literal type eg static forroot someothertypengmodulesomengmodule this commit update the rendering of typing file to include this type information on all matching functionsmethods pr close ,feat
7384,ivy ngcc map function a well a class from source to typing to support updating modulewithproviders call we need to be able to map exported function between source and typing file a well a class pr close ,feat
7385,ivy update root cause for core test pr close ,test
7386,bazel make sure cli project created with bazel work with original workflow bazel bit added to a cli project should not be destructive the project should still work under the original cli workflow pr close ,test
7387,ivy host should behave a in view engine pr close ,fix
7388,ivy process creation mode deeply before running update mode prior to this commit we had two different mode for change detection execution for ivy depending on whether you called bootstrap or rendercomponent in the former case we would complete creation mode for all component in the tree before beginning update mode for any component in the latter case we would run creation mode and update mode together for each component individually maintaining code to support these two different execution order wa unnecessarily complex so this commit aligns the two bootstrapping mechanism to execute in the same order now creation mode always run for all component before update mode begin this change also simplifies our rendering logic so that we use lview flag a the source of truth for rendering mode instead of rf function argument this fixed some related bug eg calling viewrefdetectchanges synchronously after the view creation would create view node twice view query would execute twice etc pr close ,fix
7389,router add predicate function mode for runguardsandresolvers this option mean guard and resolvers will ignore change when a provided predicate function return false this support use case where an application need to ignore some param update but not others for example changing a sort param in the url might need to be ignored whereas changing the a project param might require rerun of guard and resolvers related to pr close ,feat
7390,ivy add missing attributemarker export pr close ,fix
7391,docsinfra turn on disabletypescriptversioncheck in angularcompileroptions we need to do this because we dont yet have a released version of angular with typescript support and on ci we test both against the snapshot and whatever is in aioyarnlock once we have the next rc or a stable relase we should be able to remove this flag p i also removed the preservewhitespacefalse because thats the default now pr close ,build
7392,docsinfra disable cliwarningstypescriptmismatch warning cli is not yet officially compatible with typescript so we need to disable the version check via ng config cliwarningstypescriptmismatch false pr close ,build
7393,docsinfra update dgeni and dgenipackages to latest pr close ,build
7394,docsinfra workaround for broken import a it unclear why import a result in the alias to be undefined plain tsc seems to do the right thing and emits the correct code so it might be some kind of interaction in angularcli or webpack that are causing the failure this should be investigated separately from the tsc update in angularangular see angularangularcli pr close ,fix
7395,compilercli create literallikenode for string and number literal typescript introduced bigint type and consequently the implementation for checkexpressionworker in checkersts is refactored for numberliteral and stringliteral type text filed must be present in the node type therefore they must be literallikenode instead of node pr close ,fix
7396,ivy reenable passing upgrade test pr close ,test
7397,ivy fix property name of ngonchanges reslove fw reslove fw pr close ,fix
7398,bazel update vscode config what wa there didnt work at all and resulted in an error error processing attach error both localroot and remoteroot must be specified pr close ,docs
7399,bazel devserver entrymodule should have underscore name this commit fix a bug whereby the path of the entrymodule is not consistent with the workspace name which doe not permit dash in the name pr close ,fix
7400,core rename spec file to match case of src file ,refactor
7401,ivy restore fixmeivy import for routerrelated test it look like fixmeivy import were accidentally removed from router integration test thus causing build error the necessary import are now restored and the project should build normally pr close ,fix
7402,ivy call hostbindings function with proper element index we invoked hostbindings function in create and update mode with different element index due to the fact that we did not subtract headeroffset from the index before passing it to hostbindings function in create mode now we subtract headeroffset value before invoking hostbindings which make ceate and update call consistent pr close ,fix
7403,ivy support context discovery for container icu expression context discovery wa only available on element this pr add support for container and icu expression fw resolve fw comment linker integration test pr close ,feat
7404,ivy replace resolved issue in compilercli test with new root cause pr close ,test
7405,ivy enable more angularcore test pr close ,test
7406,form update api reference for validator directive pr close ,docs
7407,bazel set modulename and enable ng test relative import in typescript file only work when modulename is defined in tslibrary when run in nodejs see issue with that fixed ng test now work ng build requires nodemodules to be available in the project directory so it not usable yet running yarn in project directory doe not work because of postinstall version check pr close ,fix
7408,upgrade upgrade directive facade should not return different instance from constructor in ngupgrade dynamic we create a dynamic angular directive that wrap angularjs component that are being upgraded the constructor of this directive class return a different instance than this it is this instance that actually contains the lifecycle hook handler this would break in ivy since the method on the prototype of the original class are wired up rather than the instance method this result in hook like ngoninit not being called this commit refactors the code to extend the inner class that wa being returned so that the prototype chain is correct for both viewengine and ivy this change resolve a number of failing ivy test but also expose other failure that were masked by this issue the test have been updated accordingly fw pr close ,fix
7409,upgrade update test failure cause description the change here clarify that we now have a better description of the root cause of the failure pr close ,test
7410,ivy check semantics of ngmodule for consistency ngmodule requires that componentsdirectivespipes are listed in declaration and that each componentsdirectivespipe is declared in exactly one ngmodule this change add runtime check to ensure that these sementics are true at runtime there will need to be seperate set of check for the aot path of the codebase to verify that same set of semantics hold due to current design there doe not seem to be an easy way to share the two check because jit deal with reference where a aot deal with ast node pr close ,fix
7411,ivy add more test for content projection with ngif ngfor pr close ,test
7412,ivy enable running clihelloworldivy integration test suite pr close ,test
7413,ivy synchronize clihelloworldivy with clihelloworld integration suite the ciproduction ee test is diabled because angular fails to be found pr close ,test
7414,ivy let ngcc first check marker file before assembling bundle with the bundle info being assembled into a single object before the transform is started we now greedily create a typescript program upfront if a marker file exists that indicates that the bundle could be skipped the program creation ha already taken place which take a significant amount of time this commit move the marker check to occur before the bundle is assembled pr close ,perf
7415,ivy ngcc generates setclassmetadata call for e bundle ngcc would feed ngtsc with the function declaration inside of an iife a that is considered the class symbol declaration node according to typescript tssymbolvaluedeclaration ngtsc however only considered variable decls and actual class decls a potential class declaration so given the function declaration node it would fail to generate the setclassmetadata call ngtsc no longer make it own assumption about what class look like but always asks the reflection host to yield this kind of information pr close ,fix
7416,ivy make exported pipe available in module scope this is tested in the ivy cli integration test pr close ,fix
7417,ivy prevent dce of postr symbol while creating fesm file rollup usually drop all unused symbol all postr are unused unless ngcc rewires stuff to prevent this dce we reexport them a private symbol if ngcc is not used these symbol will be dropped when we optimize an application bundle pr close ,fix
7418,ivy provide an ability to match ngtemplate tag prior to this change we were unable to match directive using ngtemplate tag for example the following selector would not work even though there might be some ngtemplates in a template ngtemplatedirectivea a a result that broke some component that relies on such selector to work in order to resolve the problem we now pas tag name to the template instruction where we passed null before and this tag name is used for matching at runtime this update should also help support projecting container because the tag name is required to properly match such element pr close ,fix
7419,ivy enable all test for angularcommon pr close ,test
7420,animation rename animatechild to animate renamed animatechild to animate in the commentsusage the doc state to use animatechild but us animate in the example pr close ,docs
7421,common fix documentation for getlocalecurrencyname pr close ,docs
7422,ivy prevent ngcc from inadvertently dropping ivy definition a surprising interaction with the magicstring library caused inserted ivy definition to be dropped during the removal of decorator iff all decorator on the class could be removed in that case the removal location corresponds with the exact location where ivy definition were inserted into this commit move the removal of decorator to occur before ivy definition are inserted this effectively avoids the problem a later inserted text fragment will be retained by magicstring pr close ,fix
7423,ivy dont runviewengine test for ivy all the test in packagescoretestview are specific to the viewengine and shouldnt run for ivy this pr introduces a new buildbazel file to run those test separately pr close ,test
7424,ivy properly destroy view created by componentfactory pr close ,fix
7425,animation do not truncate decimal for delay do not truncate decimal for animation delay if specified in second pr close ,fix
7426,animation mark actual descendant node a disabled pr close ,fix
7427,ivy ngcc should not emit typescript syntax if a template contains specific typescript syntax such a a nonnull assertion the code that is emitted from ngcc into a javascript bundle should not retain such syntax a it is invalid in j a fullblown typescript emit of a complete tssourcefile would be required to be able to emit j and possibly downlevel into a lower language target which is not an option for ngcc a it currently operates on partial asts not full source file instead ngtsc no longer produce typescript specific syntax in the first place such that typescript print logic will only generate j code pr close ,fix
7428,common keyvaluepipe should return empty array for empty object this let keyvaluepipe return an empty array rather than undefined when the input is empty pr close ,fix
7429,router typo in state documentation pr close ,docs
7430,bazel emit full node stack trace when angular compilation crash the default item are often not enough to debug deeply nested compilation operation this pr is based on martinprobsts pr close ,fix
7431,common update currencypipe default digitsinfo value change the doc to reflect the actual default value fix pr close ,docs
7432,ivy prevent invalid forward reference in setclassmetadata call in ivy a pure call to setclassmetadata is inserted to retain the information that would otherwise be lost while eliding the angular decorator in the past the angular constructor decorator were wrapped inside of an anonymous function which wa only evaluated once reflectioncapabilities wa requested for such metadata this approach prevents forward reference from inside the constructor parameter decorator from being evaluated before they are available in the setclassmetadata call the constructor parameter were not wrapped within an anonymous function such that forward reference were evaluated too early causing runtime error this commit change the setclassmetadata call to pas the constructor parameter decorator inside of an anonymous function again such that forward reference are not resolved until requested by reflectioncapabilities therefore avoiding the early read of forward ref pr close ,fix
7433,ivy support complex type node in modulewithproviders with ngccs ability to fixup preivy modulewithproviders such that they include a reference to the ngmodule type the type may become a qualified name import modulewithproviders from angularcore import a ngcc from module export declare provide modulewithprovidersngccmodule ngtsc now take this situation into account when reflecting a modulewithproviders type argument pr close ,fix
7434,common fix typo in keyvaluepipe doc pr close ,docs
7435,ivy attempting to remove detached view on destroy currently the viewrefdestroy method assumes that it index inside the view container will always be valid however if it ha been removed already itll be which will throw an error the error manifested itself in one of the unit test where a view had been detached during the test and then testbed attempted to destroy it componentref which ended threw an error during cleanup of component pr close ,fix
7436,ivy update fixmes in packagescoretestlinkerjitsummariesintegrationspects the issue referenced were stale and unrelated pr close ,test
7437,ivy improve fixme message in packagesplatformwebworkertest the old one wa not detailed enough pr close ,test
7438,ivy remove stale fixmes from packagesplatformservertest these issue have already been resolved but we forgot to reenable the test pr close ,test
7439,bazel integration test for ng new with bazel integration test for bazel build and bazel test pr close ,test
7440,docsinfra upgrade cli command doc source to dec updating angularmaster from clibuildsmaster relevant change in commit range modified helpbuildjson helpgeneratejson helpservejson close close close pr close ,build
7441,router ensure url is updated after second redirect with urlupdatestrategyeager navigating to a route such a user you may get redirected to login previously if you go then route to user again the url will end up showing user after the second redirect this only happened in urlupdatestrategyeager this is now fixed so after the second redirect the url show the correct page fix pr close ,fix
7442,ivy do not use msg prefix for inpostprocess invocation fw closure compiler doesnt allow nongoogetmsg const name to start with msg so we should use different prefix for const that reference a result of the inpostprocess fn invocation with this update we also append filebased prefix to in constant via postfix to ensure the name are unique across codebase of a project otherwise it might lead to error while compiling a project with closure compiler pr close ,fix
7443,bazel ngpackage writes unrelevant definition to bazel out in order to keep the bazel bin directory a clean a possible we should not write definition file that are not relevant to a ngpackage to an undesired location in the bazel bin directory this currently just happens because we only filter out external definition file while we also should filter out definition that arent just in the current package the packagerts file currently try to write these file to the package but fails because those are not inside of the current package so the logic to create a relative path for the file fails and the definition will be copied to a location like j notice the double bazelout here cuserspaulbazelpaulkntsvyhexecrootangularmaterialbazeloutxwindowsfastbuildbinsrcbazeloutxwindowsfastbuildbinsrccdk see logic that cause this nothing wrong with that logic because it assumes that only path from within the package are passed to it pr close ,fix
7444,ivy remove state fixme from packagescompilerclitestngtoolsapi it seems that we forgot to remove it in the recent refactoring pr close ,test
7445,ivy update root cause for angularcore testbed failure pr close ,test
7446,ivy update test status for case modified in ivy pr close ,test
7447,ivy enable flat module index production in bazel ngtsc now produce flat module index file when that option is enabled in tsconfig but bazel still need the output declared in order for them to be passed through this fix some test which verify this behavior on bazel fw resolve pr close ,fix
7448,bazel load and rulesnodejs dependency bazel requires loading explicitly rulesnodejs dependency must now be installed explicity a well pr close ,fix
7449,docsinfra fix top menu item clickable area the clickable region of the top menu item is expanded beyond the focused area so the clickable area is span the entire height of the navigation fix pr close ,fix
7450,bazel fix majorminor semver check between angularbazel npm packager version and angular bazel repo version pr close ,fix
7451,ivy add support for optional nullable injection token fw resolve pr close ,fix
7452,ivy avoid destroy renderer method invocation for child view since renderer is shared across root and child view we need to avoid destroy method invocation for child view and only invoke is for root view when needed prior to this change the destroy function wa called whenever child view wa destroyed thus causing error at runtime pr close ,fix
7453,ivy update root cause for angularcore testbed failure pr close ,test
7454,docsinfra fix top menu item clickable area the clickable region of the top menu item is reduced to the focused area so no cursor pointer is shown outside the clickable area fix pr close ,fix
7455,bazel fix postinstallpatchesjs script run during yarn postinstall when running yarninstall pr close ,build
7456,ivy update new host binding test with instruction change the pure function in host binding change wa merged after the change in host binding instruction so it had a new test that wasnt yet updated with the new generated code this commit update the new test pr close ,fix
7457,ivy update root cause for angularcore testbed failure pr close ,test
7458,ivy host binding should work if input ha same name previously in ivy host binding did not work if they shared a public name with an input because they used the elementproperty instruction a is this instruction wa originally built for inside component template so it would either set a directive input or a native property this is the correct behavior for inside a template but for host binding we always want the native property to be set regardless of the presence of an input this change add an extra argument to elementproperty so we can tell it to ignore directive input and only set native property if it is in the context of a host binding pr close ,fix
7459,ivy proper slot allocation for pure function in hostbindings function prior to this update we always returned the number of host var defined in component definition a a value for allocatepurefunctionsslot callback in valueconverter a a result pure function argument were not accounted for thus leasing to incorrect slot offset in purefunction call now we update and return total of host var so the offset are defined correctly pr close ,fix
7460,bazel fix t error in the schematicsbazelworkspace file upgrading to the new tslibrary rule uncovered t error in these file this commit fix the code to pas t checking pr close ,fix
7461,bazel read latest version from latestversionsts use semver check when angularbazel is installed a postinstall script is run to make sure that the npm version is exactly the same a the angular repository install by bazel this check is overly stringent instead it should enforce that the version satisfies the range check instead this is consistent with the range defined in angularclipackagesschematicsangularutilitylatestversionsts this commit also fix the bazel workspace to use the same rxjs version if it already installed pr close ,fix
7462,ivy make viewrefdetectchanges work with embedded view fw in viewrefdetectchanges we are passing viewrefcontext into detectchanges to trigger change detection this only make sense for component viewrefs ie injected changedetectorrefs because with embedded view context is not a component instance where the view ha been monkeypatched it a just a normal object so the view will be undefined in order to resolve this problem we now invoke detectchangesinternal and also pas lview to make sure we always have a view available pr close ,fix
7463,ivy enable more of angularcore test on node and in a browser pr close ,test
7464,ivy dedup render nodeinjector we had two nodeinjector class one in viewcompatibility and one in di we replaced the one in di with the one from viewcompatibility and reconciled their difference pr close ,refactor
7465,ivy define correct svg namespace fw the trailing slash in svg namespace prevented it correct resolution thus triggering issue at runtime pr close ,fix
7466,bazel tsickle dependency not working with typescript x angularbazel currently requires typescript x a a peer dependency but come with tsickle a dependency the current version of tsickle that is specified by angularbazel doe not support typescript x which is a peer dependency and therefore we need to make sure that tsickle work with the required typescript version this change update tsickle to the latest version that come with in order to work with typescript x pr close ,fix
7467,form typed argument for formbuilder group pr close ,fix
7468,upgrade add diagnosis to failing ivy test pr close ,test
7469,ivy generate proper event listener name for animation event fw prior to this change animation event name were treated a a regular event name stripping symbol and event phase a a result event listener were not invoked during animation now animation event name is formatted a needed and the necessary callback are invoked pr close ,fix
7470,docsinfra upgrade cli command doc source to eefc relevant change in commit range modified helpbuildjson pr close ,build
7471,ivy run browserspecific angularcore test on ci pr close ,test
7472,ivy generate flat module index file previously ngtsc did not respect the angularcompileroptions setting for generating flat module index this commit add a flatindexgenerator which is used to implement those option fw resolve pr close ,feat
7473,ivy allow for shim generator not based on existing file previously the ngtsc shimgenerator interface expected that all shim would be generated using the content of existing tssourcefiles this assumption wa true for ngfactory and ngsummary file but break down for flat module index file which are standalone this commit prepares for flat module index generation by enabling shim generator which dont require an existing file pr close ,refactor
7474,router correct a wrong test fw pr close ,test
7475,ivy finish root cause analysis for angularcore testbed failing test pr close ,test
7476,ivy enable router test with pending timer fw pr close ,test
7477,ivy select attribute on ngcontent should not be casesensitive fw while generating attribute for projection instruction we checked whether attribute name is equal to select in lower case however in other case we treat select attribute name a caseinsensitive this pr make select attribute consistently caseinsensitive pr close ,fix
7478,ivy setting up animation property correctly fw prior to this change animation property were defined a element attribute which caused error at runtime now all animationrelated attribute are defined a element property also a a part of this update we start to account for binding used in animation which wa previously missing pr close ,fix
7479,bazel respect existing angular installation if user ha already installed angular bazel should fetch the same version otherwise user will see an error in the postinstall step that performs version check pr close ,fix
7480,ivy added missing gethostelement to export pr close ,fix
7481,ivy align ngmoduleref implementation between ivy and viewengine solves fw and fw pr close ,fix
7482,ivy ngtsc should include generic type on injectable definition analogously to directive the nginjectabledef field in dts file is annotated with the type of service that it represents if the service contains required generic type argument these must be included in the dts file pr close ,fix
7483,ivy fix query compliance spec pr close ,test
7484,compilercli ngtsc shim file not being generated on caseinsensitive platform common insensitive platform are winwin see here currently when running bazel build packagescore definecompileaot the compilercli will throw because it can not find the indexngfactoryts file in the compiler host this is because the shim host wrapper is not properly generating the requested ngfactory file this happens because we call getcanonicalfilename that return a path that is different to the actual program filename that are used to construct a map of generated file since the generator always use the path which are not canonical and pas them internally like that we can just stop manually calling getcanonicalfilename pr close ,fix
7485,benchpress make most of the test run under bazel pr close ,test
7486,serviceworker run the remaining serviceworker test under bazel pr close ,test
7487,common run angularcommon test under bazel pr close ,test
7488,ivy fix fixmeivy invocation in platformbrowser test some platformbrowser test were updated before fixmeivy function contract wa changed to fixmeivyit thus triggering failed test to run on ci this commit update these case to invoke fixmeivy correctly pr close ,fix
7489,ivy enable packagesroutertestaotngsummarytest in ivy mode this commit enables the above test to run under definecompileaot to accomplish this one import is rewritten from a strange form to the correct absolute form fw resolve pr close ,test
7490,ivy expect factory and summary in ivy mode previously bazelblaze were only expecting ngfactoryjs and ngsummaryjs file to be generated in legacy mode ngtsc wa attempting to write those file but they ended up being ignored at the bazel level this commit cause bazel to expect these file and rearranges the logic a little bit a the name includengfiles is now incorrect fw fw resolve pr close ,build
7491,ivy move the generation of ɵnonemptymodule to shim construction ngfactory file have a ɵnonemptymodule constant included if there are no other exported factory symbol previously this extra export wa added dynamically in a t transformer however synthetically constructed export dont get properly downleveled during j emit and this generated constant caused issue with downstream test instead this commit configures the shim to always have this export to begin with and to filter it out if it not required testing strategy covered by existing ngtscspec test which verify the presence of the ɵnonemptymodule symbol pr close ,fix
7492,ivy generate correct modulenames for factory and summary in ngtsc file loaded into the tsprogram have a module name set via tssourcefilemodulename which end up being written into an amd module name tripleslash directive in the generated j file for generated shim file ngfactories ngsummaries that are constructed synthetically there wa previously no modulename set which caused some issue with downstream test this commit add logic to compute and set modulenames for both generated ngfactory and ngsummary shim pr close ,fix
7493,ivy deduplicate directive in component scope a previous fix to ngtsc opened the door for duplicate directive in the directive array of a component this would happen if the directive wa declared in a module which wa imported more than once within the component module this commit add deduplication when the component scope is materialized so declaration which arrive via more than one module import are coalesced pr close ,fix
7494,ivy enable ivy test for platformbrowseranimations pr close ,test
7495,docsinfra upgrade cli command doc source to cbc relevant change in commit range modified helpbuildjson helpservejson helptestjson helpupdatejson close close close pr close ,build
7496,docsinfra remove unused custom element pr close ,refactor
7497,docsinfra do not use an angular element in hardcoded fetcherror document the fetcherror document is used when we are unable to retrieve a document except for error which includes when there is no internet connection using the currentlocation element in the document template to show the path of the page we failed to retrieve assumes that the element bundle is available eg cached by the sw or can be fetched from the server when none of these condition is met the docviewer is unable to prepare the document and fails never showing the fetcherror page to the user furthermore the path we are looking to retrieve via currentlocation is essentially the document id which we already have thus loading and instantiating a whole component just for that is overkill this commit address both issue by getting rid of the currentlocation component and directly embedding the document id into the fetcherror content pr close ,fix
7498,docsinfra fix sidenav positioning when notification is shown before sidenavscrollbarbefore after sidenavscrollbarafter pr close ,fix
7499,docsinfra remove dependency on fontawesome we were only using two fontawesome icon link and twitter the twitter icon is already available a an svg used in the topbar and a similar link icon is available via material icon which we are already brining in this commit remove the dependency on fontawesome and us the available icon instead before contributorinfobefore after contributorinfoafter pr close ,build
7500,docsinfra correctly cache footer image by the sw when using relative path for cs resource such a background image angularcli will move them to the root dist directory and update the path in cs accordingly this result in the sw being unable to cache the resource because it is not where it expects it to be this commit fix this issue for the footer background image by using an absolute path for the url it also remove an unused style that would have been affected by the same issue pr close ,fix
7501,docsinfra ensure material icon are cached for offline access in order for material icon to work offline their woff file need to have been cached by the sw this file is not requested by the browser until an element need to use the icon font in order to speed up the initial page load and avoid fouc we use inlined svgs for all icon in the app shell a a result the woff file may not be requested when a user visit angulario if they go offline before visiting a page that doe actually use material icon then such icon will not work correctly eg the erroroutline icon used in the error page for failed request due to network unanvailability this commit fix this by adding a nonvisible element that need the material icon font on the main component thids ensures that the woff file will always be loaded even if the page doe not use any material icon note the element is inserted lazily to avoid affecting the initial rendering pr close ,fix
7502,docsinfra remove hardcoded color from inlined svg icon this allows the icon to inherit the color of their htmlelement parent pr close ,fix
7503,docsinfra inline svg icon used in page load sensitive ui these icon are part of the app shell and used on every load on both desktop and mobile inlining them ensures they are rendered asap pr close ,fix
7504,docsinfra always fetch roboto font previously we did not load the roboto font instead relying on the user to have it available on their system and falling back to different font otherwise this resulted in the page being styled slightly differently for those people that didnt have the font installed locally pr close ,fix
7505,docsinfra do not create an anchor for the filenotfound header pr close ,fix
7506,docsinfra move minified lunr script to the generated directory pr close ,refactor
7507,ivy update root cause for angularcore testbed failure pr close ,test
7508,bazel replace yarninstallname npm with npm localreporsitory to speed up build pr close ,build
7509,ivy enable packagesbazeltestngcwrapped test for ivy this commit allows packagesbazeltestngcwrapped test to run under ivy mode to get them to pas it address a problem with the way the test are configured both test target have sloppy dts dependency configured leading to many type error being generated in typescript for the dts file due to the way ngc directs typescript emit it avoids typechecking dts file and thus this issue doe not surface ngtsc doe a whole program emit which result in full dts typechecking by default catching this configuration issue to fix this skiplibcheck is added to the tsconfigjsons for these test which tell typescript to skip typechecking of the dts file avoiding this problem in a similar way to ngc pr close ,test
7510,ivy add missing directoryexists method to shim compilerhost the method tscompilerhostdirectoryexists is optional and wa not previously handled by our tscompilerhost wrapper for factory and summary shim generatedshimshostwrapper typescript check for the existence of this method and silently ignores thing like typeroots if it not found this commit add proper handling of directoryexists to the shim a test is also added which verifies typeroots behavior work when shim are enabled pr close ,fix
7511,ivy generate empty ngfactory file if needed previously the ngfactory shim generator in ngtsc would always write two import in the factory file shim an import to angularcore an import to the base file if the base file ha no export import would be empty this turn out to cause issue downstream this commit change the generated shim so if there are no export in the base file the generated shim is empty too pr close ,fix
7512,router add pathparamsorqueryparamschange mode for runguardsandresolvers this option mean guard and resolvers will ignore change to matrix parameter guard and resolvers will be rerun when the path change when path parameter change or when query parameter change the primary use case for such a mode is when updating the ui and getting the url to be in sync with local change for example if displaying a sortable table changing the sort direction is often handled by the table itself but you would want to update the url to be in sync with whats being displayed to the user a long a the table sort direction is stored a a matrix parameter you can use this option to update the url without causing the overhead of rerunning guard and resolvers related to pr close ,feat
7513,ivy forward ref now supported add deferred execution of scope setting for module such that forward ref can be supported in ivy design doc can be found at pr close ,feat
7514,ivy support input output with alias in component decorator pr close ,feat
7515,ivy add ngreflect debug text for container pr close ,feat
7516,router process empty path segment when preceding a named outlet pr close pr close ,fix
7517,router change processing url tree child condition stop adding next path of pathless activated route to the url pr close pr close ,fix
7518,ivy add ability to find already passing test pr close ,test
7519,core more precise return type for injectabledecorator close pr close ,fix
7520,ivy remove symbol test which are too big and not useful pr close ,test
7521,ivy compiler compliance test actualized pr introduced additional test case to make sure we generate elementstyling instruction with proper set of argument first argument wa missing in some case it look like that pr wa created before we updated host var count calculation and the allochostvars becomes unnecessary in the test case introduced in pr this commit actualizes this test to get rid of unnecessary allochostvars instruction pr close ,fix
7522,ivy add root cause on tree shakable provider test add the root cause on one of the failing ngmodule test pr close ,test
7523,ivy root cause analysis for platformbrowser pr close ,test
7524,ivy enable ivy test for platformbrowser pr close ,test
7525,ivy update root cause for angularcore testbed failure pr close ,test
7526,ivy provided injector should be instantiated by it factory fw when an injector is provided rinjector instantiates it by calling it constructor instead of it factory not resolving dependency with this fix the nginjectordef is checked and the factory is correctly used if it is found pr close ,fix
7527,upgrade do not lock up browser when unit test fails previously if the two injector are not the same jasmine tried to display an error message but it got stuck in an infinite loop trying to render the injector that were different pr close ,test
7528,upgrade reenable test fixed in ivy pr close ,test
7529,ivy more precise testbed failure cause for viewcontent query fw pr close ,test
7530,ivy remove old unused test case pr close ,refactor
7531,router add test verifying guard rerun when parent path segment change related to pr close ,test
7532,ivy return new viewref when detaching view when detaching a view by it index via viewcontainerrefdetachindex in viewengine we used to return a new viewref for reference however in ivy we return the same viewref which mean that it internal viewcontainerref is never reset and well throw an error if the consumer tried to attach it to the applicationref these change return a new viewref in order to match the original behavior these change also add the same error a viewengine when attempting to attach a view that is attached already this wa the original goal of this pr however it ended up uncovering the issue with the viewref pr close ,fix
7533,docsinfra log the successful creation of preview this can help with debugging issue eg with the communication between the preview server and ci a it give a better idea of exactly when wa the preview made available and how long it took pr close ,fix
7534,ivy add bundling test todoin pr close ,test
7535,ivy support wrappedvalue in pipe fw pr close ,feat
7536,ivy missing first argument in elementstyling instruction inside hostbindings section the logic that generates first argument for the elementstyling instruction wa missing the check that directive expression is specified a a result in some case first argument wa not added thus making function invocation incorrect now the presence of directive expression is taken into account and the null expression is generated a needed pr close ,fix
7537,bazel do not throw if t compile action doe not create esm output in some application developer define a tslibrary that just consists of dts file eg to type moduleid see and expect the esmbzl file to not throw an error like targettypescriptreplayparamsoutputs struct object ha no attribute output the replayparameters property will exist in that case but is set to none because there is no action that should be replayed in favor of producing e output see notice that this right now break similarly because an empty struct is returned that doe not have a property called output fix that by being explicit that there is no action at all pr close ,fix
7538,ivy implement remaining method for debugnode pr close ,fix
7539,ivy adding projectdef instruction to all template where ngcontent is present fw prior to this change projectdef instruction were placed to root template only thus the necessary information selector in nested template wa missing this update add the logic to insert projectdef instruction to all template where ngcontent is present pr close ,fix
7540,ivy taking interpolation config option into account fw pr close ,fix
7541,ivy resolve resource using t module resolution semantics previously ngtsc assumed resource file templateurl styleurls would be physically present in the file system relative to the t file which referenced them however ngc previously resolved such reference in the context of tscompileroptionsrootdirs material depends on this functionality in it build this commit introduces resolution of resource by leveraging the typescript module resolver tsresolvemodulename this resolver is used in a way which will never succeed but on failure will return a list of location checked this list is then filtered to obtain the correct potential location of the resource pr close ,fix
7542,ivy support styleurls in ngtsc this commit add support for resolution of styleurls to ngtsc previously this field wa never read and so component with styleurls would appear unstyled after compilation pr close ,feat
7543,ivy prevent ngtsc from synchronous compilation for inflight resouces when a single resource is preloaded twice in ngtsc the second request would be recognized a inflight in which case undefined would be returned which signal to the compilation that is can resume synchronously the compilation would then proceed immediately and call load only to find out that the request is still inflight which is not allowed this commit cache the promise of the inflight fetch request such that subsequent preload request can return the corresponding promise instance pr close ,fix
7544,element run test with ivy pr close ,test
7545,ivy add test for componentfactorycreate fix in pr close ,test
7546,ivy fix component definition description of input pr close ,docs
7547,compilercli flatmoduleindex file not generated on window with multiple input file currently when building a ngmodule with bazel and having the flat module id option set the flat module file are not being generated because angularcompilercli doe not properly determine the entrypoint file note that this logic is not necessarily specific to bazel and the same problem can happen without bazel if multiple typescript input file are specified while the flatmoduleindex option ha been enabled pr close ,fix
7548,bazel ngpackage can not be run multiple time without clean currently when building the ngpackage multiple time the old ngpackage output will be copied over to the new ngpackage content resulting in package like srccdknpmpackagenpmpackagenpmpackageandmore this happens because currently all typescript definition file are resolved from within the bindir this is just wrong because it could then take up the dts file from the previous ngpackage output all typescript definition that belong to the target package should be resolved through bazel and copied based on that computation also fix that esm file arent written to the ngpackage on window this is because we try to flatten path using the pathdelimiter while the path is always using posix delimiters causing the path to be incorrect pr close ,fix
7549,bazel do not throw error when writing tsickle extern currently when building the e and e output ngcwrapped will fail because it try to write the fsopensync the tsickle output file at the same time this cause a runtime exception in window and can be fixed by just writing the extern for e mode to the proper e output root pr close ,fix
7550,bazel ngpackage not generating umd bundle on window fix that ngpackage doe not work generate umd bundle on window because the esm file are not written to the output directory this is because rootdirs and rootdir are posix path and cause invalid relative path when mixed with window backslash path pr close ,fix
7551,docsinfra manually trigger the preview server webhook with this change we no longer depend on circleci to trigger the webhook which it sometimes doe with considerable delay or not at all this ha the added benefit that other job will not unnecessarily trigger webhooks and spam the preview server log it is only the aiopreview job webhook that we care about related to pr close ,ci
7552,ivy run routerupgrade test with ivy on ci pr close ,test
7553,ivy account for usevalue undefined provider in module injector pr close ,fix
7554,ivy ngtsc support for static resolution of arrayslice for ngccs processing of e bundle the spread syntax ha been downleveled from array to become arrayslice this commit add basic support for static resolution of such call pr close ,feat
7555,bazel ngnew schematic with bazel this commit creates a schematic for ng new command that build the project with bazel pr close ,feat
7556,ivy run initialializers in testbed on init fix the initializers not being run by testbed when creating a fixture pr close ,fix
7557,ivy avoid counting styleclass binding in componentdirective hostbindings pr close ,fix
7558,ivy temporary hack to set host style and static class pr close ,fix
7559,ivy ensure componentfactory us both injector to retrieve rendererfactory pr close ,fix
7560,ivy proper accounting of host var in case of inherited directive prior to this change the number of host var stored for directive with hostbindings in expando block wa incorrect for inherited directive in case both parent and child directive have hostbindings defined now if we identify that we already added a hostbinding into expando block we just increase the corresponding number of host binding var pr close ,fix
7561,ivy fix style prop instruction to account for zerobased value pr close ,fix
7562,common add percentpipe round and trim test add test to cover the percent decimal to be rounded and trimmed pr close ,test
7563,common update percentpipe default maxfractiondigits value change the doc to reflect the actual default value fix pr close ,docs
7564,ivy update root cause for angularcore testbed failure pr close ,test
7565,ivy add root cause for router testbed failure pr close ,test
7566,ivy run more router test in ci pr close ,test
7567,ivy proper accounting of bound var in inexp fns fw the problem wa caused by missing allocatebindingslots that led to incorrect of var defined for component and a a result causing error at runtime now all bind operation are accounted for and the number of var is correct pr close ,fix
7568,ivy avoid creating selfclosing in instruction in case we have styling instruction the problem wa caused by the selfclosing in instruction that wa generated in case we have styling instruction defined for a component a a result that caused problem at runtime this update add extra check to avoid creating selfclosing in instruction create instart and inend instruction instead when styling instruction are present pr close ,fix
7569,ivy introduce allochostvars instruction a a replacement for hostvars field fw pr close ,feat
7570,ivy ngcc update integration test dependency lock file pr close ,test
7571,ivy ngcc render private declaration export ngcc will now render additional export for class that are referenced in ngmodule decorated class but which were not publicly exported from an entrypoint of the package this is important because when ngtsc compiles library processed by ngcc it need to be able to publcly access decorated class that are referenced by ngmodule decorated class in order to build template that use these class doing this reexporting is not without it risk there are chance that the class is not exported correctly there may already be similarly named export from the entrypoint or the class may be being aliased but there is not much more we can do from the point of view of ngcc to workaround such scenario generally package should have been built so that this approach work pr close ,feat
7572,ivy ngcc add privatedeclarationsanalyzer this analyzer search the source for declared class that are not exported publicly from the entrypoint pr close ,feat
7573,ivy ngcc encapsulate variable into bundle there are a number of variable that need to be passed around the program in particular to the renderers which benefit from being stored in well defined object the new entrypointbundle structure is a specific format of an entrypoint and contains the compiled bundleprogram object for the source and typing if appropriate this change help with future refactoring where we may need to add new property to this object it allows u to maintain more stable apis between the constituent part of ngcc rather than passing lot of primitive value around throughout the program pr close ,refactor
7574,ivy ngcc subclass do not need to declare protected variable these variable are already declared a protected in the super class and so it is redundant to do it again in the subclass pr close ,refactor
7575,ivy ngcc remove unused code pr close ,refactor
7576,ivy ngcc fix typo pr close ,style
7577,ivy register reference from ngmodule annotation the ngmoduledecoratorhandler can now register all the reference that it find in the ngmodule metadata such a declaration import export etc this information can then be used by ngcc to work out if any of these reference are internal only and need to be manually exported from a library entrypoint pr close ,feat
7578,ivy ngcc fix misspelled method pr close ,style
7579,ivy ngcc make entrypoint an interface rather than a type by inverting the relationship between entrypointpaths and entrypointformat we can have interface rather than type thanks to gkalpak for this idea pr close ,refactor
7580,ivy ngcc support typing dts class that are not publicly exported if a decorated class is not publicly exported via an entrypoint then the previous approach to finding the associated typing file failed now we ensure that we extract all the class declaration from the dtstypings program even if they are not exported from the entrypoint this is achieved by also parsing statement of each source file rather than just parsing class that are exported from the entrypoint because we now look at all the file it is possible for there to be multiple class declaration with the same local name in this case only the first declaration with a given name is added to the map subsequent class are ignored we are most interested in class that are publicly exported from the entrypoint so these are added to the map first to ensure that they are not ignored pr close ,fix
7581,ivy support string token in dependency injection in angular it used to be an accepted practice to use string a dependency injection token eg provide test usevalue provided however the ivy node injection system did not support this the ivy di system attempt to patch a bloom bit index onto each type registered with it and this patch operation doe not work for a string token this commit add string token support to the bloom filter system by reserving bit for string token this eliminates the need for each string token to store it own bloom bit at the expense of slightly more expensive lookup of string token pr close ,fix
7582,ivy turn ivy test selector into real function having real function allows me to bypass individual check ex export function fixmeivyreason string boolean return true this is useful for situation where i want to see if previously disabled test were fixed ex some pr merged in this case i dont want to run test that i know are not passing obsolete modified pr close ,test
7583,ivy update root cause for angularcore testbed failure pr close ,test
7584,bazel ngpackage should correctly map to source map in secondary entrypoints this fix the issue with broken source map for angularcommon fix pr close ,fix
7585,bazel update handling of rulesnodejs transitive deps breaking change bazel user rulesangulardependencies will no longer install transitive dependency of buildbazelrulesnodejs and buildbazelrulestypescript user workspace file will now need to install rulesnodejs and rulestypescript transitive deps directly loadbuildbazelrulestypescriptpackagebzl rulestypescriptdependencies rulestypescriptdependencies loadbuildbazelrulesnodejspackagebzl rulesnodejsdependencies rulesnodejsdependencies pr close ,build
7586,router add a navigation type available during navigation provides target url navigation and navigationextras data fw pr close ,feat
7587,router allow passing state to routerlink directive this value will get written to the historystate entry fw related related to pr close ,feat
7588,router allow passing state to navigationextras this value will get written to the historystate entry fw related pr close ,feat
7589,router restore whole object when navigating back to a page managed by angular router pr close ,feat
7590,platformserver add angularhttp to the list of peerdependencies fix pr close ,fix
7591,ivy updated translation const name that include message id pr close ,feat
7592,ivy support multiple directive with the same selector previously the concept of multiple directive with the same selector wa not supported by ngtsc this is due to the treatment of directive for a component a a map from selector to the directive which is an erroneous representation now the directive for a component are stored a an array which support multiple directive with the same selector testing strategy a new ngtscspec test asserts that multiple directive with the same selector are matched on an element pr close ,fix
7593,form update api reference for common apis and templatedriven directive pr close ,docs
7594,platformserver import ivyenabled from angularprivatetesting pr close ,test
7595,ivy addremove fixmes with root cause for packagesbazeltestngpackagecorepackage pr close ,test
7596,ivy add obsoleteinivy modifiedinivy and ivyenabled test selector see inline doc for description of these function pr close ,test
7597,ivy addremove fixmes in packagesbazeltestngcwrapped pr close ,test
7598,ivy enable angularserviceworker target to run on ci pr close ,test
7599,ivy update packagescompiler test for ivy most of the spec in these test are not relevant to ivy packagescompilertesttest packagescompilertesttestwebchromiumlocal however a few test piece of the compiler infrastructure that are used in ivy and new buildbazel file are created to separate them from the above disabled target packagescompilertestcssparsercssparser packagescompilertestcssparsercssparserweb packagescompilertestexpressionparserexpressionparser packagescompilertestexpressionparserexpressionparserweb packagescompilertestmlparsermlparser packagescompilertestmlparsermlparserweb packagescompilertestselectorselector packagescompilertestselectorselectorweb pr close ,test
7600,ivy update packagescompilercli test for ivy these test are not relevant to ivy packagescompilerclitestdiagnosticschecktypes packagescompilerclitestdiagnosticsexpressiondiagnostics packagescompilerclitesttransformerstest packagescompilerclitestextractin the packagescompilerclitestngtoolsapi test ha spec one of which pass and the other of which depends on ngtsc supporting lazy route it now disabled with fixmeivy pr close ,test
7601,upgrade reenable test that have been fixed the fix in unblocks these test pr close ,test
7602,ivy add fixmeivy block to ivy failing test pr close ,refactor
7603,ivy update import so test will run in bazel with ivy aot pr close ,refactor
7604,ivy treate lview a the primary global state rename lviewdata to lview to be consistent with tview remove getrenderer getrendererfactory gettview getcurrentqueries pr close ,refactor
7605,ivy update root cause for angularcore testbed failure pr close ,test
7606,form take word suggestion coauthoredby jlhwung jlhwungusersnoreplygithubcom pr close ,docs
7607,form add test on applying unicode flag pr close ,test
7608,platformbrowser add supportsregexunicodeflag method pr close ,test
7609,form apply unicode flag to pattern attribute when supported both firefox and chrome have applied unicode flag to the pattern content attribute of input element see pr close ,fix
7610,router update url after redirects when urlhandlingstrategyeager fix pr close ,fix
7611,bazel change packagejson back to a a workaround for checkversionjs failure note this commit should be reverted once the failure from packagesbazelcheckversionjs are resolved example ,build
7612,ivy take preservewhitespaces config option into account fw pr close ,fix
7613,ivy add polyfill for googgetmsg to unblock test fw pr close ,fix
7614,ivy update root cause for angularcommon testbed failure pr close ,test
7615,ivy update root cause for angularcore testbed failure pr close ,test
7616,ivy testbedgetcompiler throw error runtime compiler is not loaded breaking change the public api for debugnode wa accidentally too broad this change remove public constructor since debugnode is a way for angular to communicate information on to the developer there is no reason why the developer should ever need to instantiate the debugnode we are also removing removechild addchild insertbefore and insertchildafter all of these method are used by angular to constructor the correct debugnode tree there is no reason why the developer should ever be constructing a debugnode tree and these method should have never been made public all property have been change to readonly since debugnode is used by angular to communicate to developer and there is no reason why these apis should be writable while technically breaking change we don ’ t expect anyone to be effected by this change pr close ,fix
7617,core export a value for injectflags a recent commit probably cc ha changed the import graph of the di type in core and somehow result in the ngc compiler deciding to reexport core di type from application factory which tangentially use inject this is not really surprising ngcs import graph can be very unstable however this result in a reexport of injectflags surviving j compilation injectflags wa a const enum akin to an interface in t with no runtime repesentation this cause a warning to be emitted by webpack when it see the reexport of injectflags this commit avoids the issue by removing const from the declaration of injectflags causing it to have a runtime value this is a temporary fix the real fix will be for ngc to no longer write export of const enums testing strategy manually verified due to the problem only manifesting when recompiling after a change and then running webpack there is no existing framework via which this could be easily tested with an integration test additionally the potential for this issue is gone in ivy so this solution is only temporarily needed fix pr close ,fix
7618,ivy rootcase packagescompilercliintegrationtestbazelinjectordefivybuildapptesttest pr close ,test
7619,ivy ngmodule should not require an metadata object there is no test in this diff because im making an already failing test pas pr close ,fix
7620,ivy inject should not overwrite an existing nginjectabledef there is no test in this diff because ive made a failing test pas pr close ,fix
7621,ivy add fixme to a failing testbed test pr close ,test
7622,ivy remove obsolete ngmodule code for global and jit mode these path are no longer needed used i had to disable one jit mode spec because it fails now that we actually run it i root caused the jit test failure a missing forwardref support see fw pr close ,fix
7623,ivy remove the remains of ivyjit mode this stuff is obsolete and shouldnt be here because we removed the jit mode on ci pr close ,build
7624,ivy packagesplatformbrowserdynamictesttest now work in jit pr close ,ci
7625,ivy packagescoretestrender now pass with ivy aot pr close ,ci
7626,ivy detach viewref from applicationref on destroy currently we store the appref when a viewref is attached however we dont use it for anything these change use it to detach the view from the applicationref when it is destroyed these change also fix that the componentref doesnt remove it viewref on destroy pr close ,fix
7627,ivy throw a descriptive error when trying to insert move destroyed view pr close ,fix
7628,ivy blueprint should be synced whenever they are off pr close ,fix
7629,ivy fix directive instantiation at slot above pr close ,fix
7630,platformserver add root cause for testbed test failure pr close ,test
7631,platformserver dont set document to undefined for ivy test pr close ,test
7632,ivy enable ngreflect debug attribute pr close ,feat
7633,ivy register modulewithproviders when deduplicating imported module pr close ,fix
7634,ivy should support component without selector pr close ,fix
7635,ivy consider provider for viewcontent query in viewengine it is possible to query for a token that is provided by a directive that is in scope see stackblitz for example material us this pattern with it matformfieldcontrol setup see for documentation pr close ,fix
7636,common expose request url in network error close pr close ,fix
7637,docsinfra upgrade npmrunall to latest version for security earlier version may transitively depend on a malicious version of flatmapstream see dominictarreventstream the aiobuildssetup had an older version of eventstream which did not depend on flatmapstream but upgraded it anyway pr close ,build
7638,docsinfra dont call setsearch when not clicking in the searchbox and no searchresults fix to call locationservicesetsearch le often to avoid unnecessary downloading of favicons fix pr close ,fix
7639,upgrade remove fixmeivyaot tag pr close ,ci
7640,upgrade disable failing ngupgrade test when in ivy mode pr close ,test
7641,upgrade dont rely upon the runtime to resolve forward ref the way that upgradeadapter need to be setup you often find that you must pas a forwardref for an ngmoduleimport preivy this get resolved at runtime but until this is implemented in ivy we can workaround it by resolving it in the upgradeadapter upfront this should be backwardcompatible since by the time we actually create the dynamic ngmodule that ha the import the imported class should be defined pr close ,fix
7642,upgrade add dependency on fixmeivy method pr close ,test
7643,core add more root cause for testbed test failure pr close ,test
7644,ivy inject null for missing attribute pr close ,fix
7645,ivy render flag support in host binding function fw pr close ,feat
7646,ivy let ngcc transform angularcore typing with relative import pr close ,fix
7647,ivy prevent ngcc from referencing missing ɵsetclassmetadata when ngtsc compiles angularcore it rewrite core import to the rsymbolsts file that expose all internal symbol under their external name when creating the fesm bundle the rsymbolsts file cause the external symbol name to be rewritten to their internal name under ngcc compilation of fesm bundle the indirection of rsymbolsts is no longer in place such that the external name are retained in the bundle previously the external name ɵdefinengmodule wa explicitly declared internally to resolve this issue but the recently added setclassmetadata wa not declared a such causing runtime error instead of relying on the rsymbolsts file to perform the rewrite of the external module to their internal variant the translation is moved into the importmanager during the compilation itself this avoids the need for providing the external name manually pr close ,fix
7648,ivy run router test with ivy on ci pr close ,test
7649,core add jira reference for rootcasuse ivy testbed failure pr close ,test
7650,bazel add bazel builder pr close ,build
7651,ivy dont update parent pointer in the ivy switch transform now that the ivy switch transform us tsgetmutableclone to copy statement there no need to set parent pointer on the resulting updated node doing this wa causing assertion failure deep in typescript in some case pr close ,fix
7652,ivy align discovery method for consistency pr close ,fix
7653,ivy hack implementation of host style pr close ,fix
7654,form language correction word missing from doc pr close ,docs
7655,form close markdown backticks pr close ,docs
7656,ivy set ngversion attribute on root component pr close ,fix
7657,ivy set encapsulation to none when there is no style pr close ,fix
7658,ivy add jira reference for rootcasuse testbed failrues pr close ,test
7659,ivy deduplicate imported module in rinjector pr close ,fix
7660,ivy enable platformserver test for ivy pr close ,test
7661,docsinfra upgrade cli command doc source to ada relevant change in commit range modified helpaddjson helpbuildjson helpconfigjson helpeejson helpgeneratejson helplintjson helpnewjson helprunjson helpservejson helptestjson helpupdatejson helpxinjson close close close close pr close ,build
7662,ivy ensure directive host binding use the styling algorithm pr close ,refactor
7663,ivy ensure directive host binding use the styling algorithm pr close ,refactor
7664,ivy icu support for ivy pr close ,feat
7665,ivy set encapsulation metadata pr close ,fix
7666,ivy export elementcontainerstartend instruction pr close ,fix
7667,bazel bazel workspace schematic this commit creates a schematic for bazel workspace pr close ,feat
7668,docsinfra remove reflectmetadata polyfill from aio test v cli includes the polyfill automatically whenever jit compiler is used so we dont need to do it explicitly pr close ,test
7669,ivy di should work when no element injector on starting node pr close ,fix
7670,ivy skip usejit test with ivy currently the usejit option from testbedconfigurecompiler isnt supported these change rework the existing test suite not to pas in usejit when running with ivy pr close ,test
7671,ivy component ref injector should support change detector ref pr close ,fix
7672,ivy fix path for http test to work with ivy pr close ,test
7673,ivy support for in icu expression pr close ,feat
7674,ivy implement rootnodes getter on viewref pr close ,fix
7675,ivy use the root view injector when resolving dependency pr close ,fix
7676,ivy run more common test with ivy on ci with merged we can activate more ivy test on ci pr close ,test
7677,router add pathparamschange mode for runguardsandresolvers this option mean guard and resolvers will ignore change to optional parameter such a query and matrix params when the path or any path params change guard and resolvers will be run related to discussion in fw resolve pr close ,feat
7678,bazel turn on nolegacyexternalrunfiles pr close ,build
7679,router add relativelinkresolution to recognize operator close pr close ,fix
7680,ivy should export lifecycle hook feature pr close ,fix
7681,ivy support for in icu expression pr close ,feat
7682,ivy clone tssourcefile in ivyswitch when triggered make a copy of the tssourcefile before modifying it in the ivyswitch transform it suspected that the bazel tscwrapped host sourcefile cache ha issue when the tssourcefiles are mutated pr close ,fix
7683,compilercli add missing tslib dependency pr close ,fix
7684,ivy jit compilation should support content query with type predicate pr close ,fix
7685,ivy support forward ref in inject annotation pr close ,fix
7686,ivy split out provider test pr close ,test
7687,ivy run common test with ivy on ci pr close ,test
7688,compilercli only pas canonical genfile path to compiler host in a more specific scenario considering people use a custom typescript compiler host with ngc they could expect only posix path in method like writefile this at first glance sound like a trivial issue that should be just fixed by the actual compiler host but usually typescript internal apis just pas around posix normalized path and therefore it would be good to follow the same standard when passing json genfiles to the compilerhost for normal typescript file and t genfiles this is already consistent because those will be handled by the actual typescript program see emitcallback pr close ,fix
7689,ivy ngcc should not fail on invalid packagejson some packagejson file may have invalid json for example packagejson blueprint from schematicsangular see this make ngcc more resilient by simpling logging a warning if an error is encountered instead of failing a it doe right now pr close ,fix
7690,ivy add support for provider in testbedconfigurecompiler add support for the provider that are passed in through testbedconfigurecompiler and scope the error only if the consumer ha passed in usejit pr close ,fix
7691,ivy abstract all stylingrelated compiler logic into a shared class pr close ,refactor
7692,ivy host binding should support content child and content hook pr close ,fix
7693,ivy compiler should generate restoreview for local ref in listener pr close ,fix
7694,ivy let ngcc not consider deep import a missing dependency this fix an issue where package would be skipped if they contained eg rxjs style import such a import observeon from rxjsoperatorsobserveon given that no packagejson file can be found at the imported path the dependency would be reported missing causing the package to be skipped pr close ,fix
7695,form update api reference for value accessors pr close ,docs
7696,ivy provide ngzone to componentref fix the r testbed not providing an ngzone to the componentfixture pr close ,fix
7697,ivy testbed should use an ngzone pr close ,fix
7698,ivy merged host binding function should take superclass hostvars into account pr close ,fix
7699,ivy provider should not be inherited pr close ,fix
7700,core cleanup todo note in contentchild documentation example pr close ,docs
7701,router add rxjs filter pipe operator to example this example for angular requires piping the rxjs filter operator in order to traverse the multitude of router event pr close ,docs
7702,ivy add global utils to the publicapiguard test this api is part of our public api surface and need to be monitored by the publicapiguard i also had to go back and mark all of the exported function with publicapi jsdoc tag pr close ,test
7703,ivy introduce getplayers to global utils pr close ,feat
7704,bazel upgrade benchmark to protractorwebtestsuite for ci without local chrome pr close ,build
7705,ivy restore missing match operation in view and content query pr close ,fix
7706,ivy compiler should generate binding to host attrs properly pr close ,fix
7707,form update description for formbuildergroup pr close ,docs
7708,ivy enable aot test to run on ci disable failing test pr close ,fix
7709,ivy add nocollapse to nginjectabledef for closure compatibility pr close ,fix
7710,ivy use windowng instead of windowngdev for debug tooling pr close ,fix
7711,ivy run form test with ivy on ci pr close ,test
7712,ivy support env where requestanimationframe is not available pr close ,fix
7713,ivy jit should handle undefined type in constructor deps pr close ,fix
7714,upgrade improve downgradingrelated error message make the error message thrown when instantiating downgraded component injectables and module more descriptive and actionable also taking into account incorrect use of the downgradedmodule field pr close ,fix
7715,upgrade support downgrading multiple module currently calling downgrademodule more than once is not supported if one want to downgrade multiple angular module they can create a supermodule that import all the rest and downgrade that this commit add support for downgrading multiple angular module if multiple module are downgraded then one must explicitly specify the downgraded module that each downgraded component or injectable belongs to when calling downgradecomponent and downgradeinjectable respectively no modification is needed ie there is no need to specify a module for downgraded component and injectables if an app is not using downgrademodule or if there is only one downgraded angular module fix pr close ,feat
7716,upgrade use a constant for exceptionhandler pr close ,refactor
7717,form update reactive form directive api reference pr close ,docs
7718,compiler typo pr close ,refactor
7719,ivy correct ngtsc path handling in window a it turn out the usage of pathposix doe not unify path handling across operating system instead canonicalpath is used to ensure path handling is consistent avoiding incorrect path in window see pr close ,fix
7720,compiler typo fix pr close ,style
7721,ivy enable packagescoretestrender test for aot pr close ,fix
7722,upgrade make typing compatible with older angularjs typing make angular typing compatible with older version of angularjs typing from typesangular close pr close ,fix
7723,ivy ngcc should not break lifecycle hook previously the ivy definition call we going directly after the class constructor function but this meant that the lifecycle hook attached to the prototype were ignored by the ngtsc compiler now the definition are written to the end of the iife block just before the return statement close pr close ,fix
7724,docsinfra upgrade cli command doc source to bb changed file helpaddjson helpbuildjson helpconfigjson helpdocjson helpeejson helpejectjson helpgeneratejson helpgetjson helphelpjson helplintjson helpmakethisawesomejson helpnewjson helprunjson helpservejson helpsetjson helptestjson helpupdatejson helpversionjson helpxinjson pr close ,build
7725,docsinfra add getting started widget pr close ,feat
7726,router remove type bludgeoning of context and outlet when running candeactivate fix pr close ,fix
7727,form add updateon option to formbuilder pr close ,feat
7728,bazel unknown replay compiler error in window in window the compiler path end with exe thus it will never match and throw unknown replay compiler pr close ,fix
7729,serviceworker format comment and add additional test format jsdoc for notificationclicks add comment on why handleclick doe not use hasownproperty add additional test that us handleclick without action pr close ,refactor
7730,serviceworker fix public api guard typing pr close ,fix
7731,serviceworker add typing to public api guard and fix lint error pr close ,fix
7732,serviceworker rework notification click handler add missing image and timestamp property remove focus from click handler pr close ,refactor
7733,serviceworker add typing for messagesclicked in swpush service properly type messagesclicked observable stream add new notificationobject interface pr close ,feat
7734,serviceworker code optimization add missing new line in test add proper noop method in mocknotificationevent pr close ,refactor
7735,serviceworker close notification and focus window on click serialize notification object before using postmessage close notification on click focus browser if it is not already focused on click pr close ,feat
7736,serviceworker update test based of review feedback rename invalid click event name make test expects more explicit remove notificationclickevent in favor of notificationevent pr close ,refactor
7737,serviceworker add missing api typing add missing messagesclicked typing for swpush service pr close ,fix
7738,serviceworker handle notificationclick event the previous version did not support the notificationclick event add event handler for the event and provide an observable of clicked notification in the swpush service close pr close ,feat
7739,ivy init hook should be called before host binding pr close ,fix
7740,ivy host binding after dirs without host binding should work pr close ,fix
7741,docsinfra update overload rendering based on the review here pr close ,fix
7742,docsinfra display long overload parameter type a object in some overload the parameter type can be a large anonymous object type this change display such type a object it is then up to the documentation author to put more information about the type in the method usage note pr close ,build
7743,docsinfra fix individual api overload template make individual overload collapsible show only the first overload expanded rest collapsed text change to collapse all once show all is clicked fix chevroncarrot rotation animation when overload overload item is expanded or collapsed pr close ,build
7744,docsinfra add method overload index pr close ,build
7745,docsinfra improve api overload template pr close ,build
7746,ivy ngcc test compiling a cli generated project this integration test wa created from a vanilla cli generated project with the following modification remove percentpipe usage from appcomponenthtml these are not yet supported by ivy changed ng test in packagejson to only to ng build right now we can only confirm that the app will build hardcode ngdevmode in indexhtml the cli doe not yet set this correctly pr close ,test
7747,core ensure that ɵdefinengmodule is available in flatfile format when compiling the flatfile version of the angularcore we need to be aware that we can not rely upon imported name to access the ivy definition function the compiler is already clever enough to use local function call rather than trying to add a namespaced import but there is a problem if the local name of the function is different to the exported name this is the case for function that are not part of the public api and so are exported under a barredo private alias in angularcore the only decoration in use are ngmodule and injectable there are no directive component pipe etc since defineinjectable is part of the public api of angularcore the compiler is able to generate code that reference the original nonbarredo version of the function but the definengmodule is not part of the public api and so the compiler must generate code that refers to it by the private barredo version of the function this commit import and then reexports this barredo version of definemodule to ensure that the symbol is available in the local scope of the flatfile version of the angularcore library pr close ,fix
7748,ivy ngcc only render dts analysis when necessary for each package entrypoint there is only one format that is used to compile the typing file dts this will be either esm or fesm preferred so we would not run any dts processing in the renderer if we are not compiling the appropriate format pr close ,perf
7749,ivy ngcc test compiling the angular material library rename test helper script add material to the ngcc integration test add matbutton to ngcc integration test check remove platformserver from ngcc integration test this package doe not yet compile a it contains a packageprivate internal decorated class which the ngcc compiler doe not yet handle pr close ,test
7750,ivy ngcc fix to support compiling material library the decorationanalyzer now analyzes all source file rather than just the entrypoint file which fix the decoratoranalyzer now run all the handleranalyze call across the whole entrypoint before running handlercompile this ensures that dependency between the decorated class within an entrypoint are known to the handler when running the compile process the renderer now doe the transformation of the typing dts file which allows u to support package that only have flat format entrypoints better and is faster since we wont parse dts file twice pr close ,fix
7751,ivy ngcc move typing rendering to renderer the rendering of typing is not specific to the package format so it doesnt make sense to put it in a specific renderer a a result there is no real difference between esm and esm renderers so there is no point in having separate class pr close ,refactor
7752,ivy ngcc use flat file for dependency sorting if available previously we always used the nonflat format because we thought that this wa the one that would always be available it turn out that this is not the case and that only one of the flat and nonflat format may be available therefore we should use whichever is available defaulting to the flat format if that exists since that will be faster to parse pr close ,perf
7753,ivy ngcc recombine flat and nonflat esmreflectionhost going forward we need to be able to do the same work on both flat and nonflat module format such a computing arity and transforming dts file pr close ,refactor
7754,ivy ngcc skip missing format rather than erroring it is perfectly normal for some of the format to be missing from a package we should not fail compilation for this pr close ,fix
7755,ivy ngcc support angular material packagejson format the material project us slightly different property to the core angular project for specifying the different format entrypoint this commit ensures that we map these property correctly for both type of project pr close ,fix
7756,ivy fix module not found error message the message wa dumping a serialized object instead of a human readable name into the exception being thrown pr close ,fix
7757,ivy support separate j and dts tree when generating import the ngmodule handler generates rreferences for it declaration import export and bootstrap component based on the relative import path between the module and the class it referring to this work fine for compilation of a t program inside ngtsc but in ngcc the import needed in the dts file may be very different to the import needed between j file for example if the j file are flattened and the dts is not this commit introduces a new api in the reflectionhost for extracting the dts version of a declaration and make use of it in the ngmoduledecorationhandler to write a correct expression for the ngmodule definition type pr close ,feat
7758,ivy dynamically created component should run init hook pr close ,fix
7759,ivy binding should be checked in component created dynamically by root component pr close ,fix
7760,ivy sync exported r symbol with compiler generated symbol pr close ,fix
7761,router remove trailing whitespace pr close ,style
7762,ivy emit metadata along with all angular type this commit cause a call to setclassmetadata to be emitted for every type being compiled by ngtsc every angular type with this metadata the testbed should be able to recompile these class when overriding decorator information testing strategy test in the previous commit for generatesetclassmetadatacall verify that the metadata a generated is correct this commit enables the generation for each decoratorhandler and a test is added to ngtscspec to verify all decorated type have metadata generated for them pr close ,feat
7763,ivy generator of setclassmetadata statement for angular type this commit introduces generatesetclassmetadatacall an api in ngtsc for generating call to setclassmetadata for a given declaration the reflection api is used to enumerate angular decorator on the declaration which are converted to a format that reflectioncapabilities can understand the reflection metadata is then patched onto the declared type via a call to setclassmetadata this is simply a utility a future commit invokes this utility for each decoratorhandler testing strategy test are included which exercise generatesetclassmetadata in isolation pr close ,feat
7764,ivy setclassmetadata for assigning decorator metadata this commit introduces the setclassmetadata private function which add metadata to a type in a way that can be accessed via angulars reflectioncapabilities currently it writes to static field a if the metadata being added wa downleveled from decorator by tsickle the plan is for ngtsc to emit code which call this function passing metadata on to the runtime for testing purpose call to this function would then be treeshaken away for production bundle testing strategy proper operation of this function will be an integral part of testbed metadata overriding angular core test will fail if this is broken pr close ,feat
7765,ivy use wrapped metadata in all decoratorhandlers previously the directive injectable and pipe decoratorhandlers were directly returning angularcompiler metadata from their analyze step this precludes returning any additional information along with that metadata this commit introduces a wrapper interface for these handler opening the door for additional information to be returned from analyze testing strategy this is a refactor commit existing test coverage is sufficient pr close ,refactor
7766,ivy capture the identifier of a decorator during reflection previously the reflectionhost api only returned the name of decorator and not a reference to their typescript identifier this commit add the identifier itself so that a consumer can write reference to the decorator testing strategy this commit is trivial and the functionality will be exercised by downstream test pr close ,feat
7767,compiler ability to mark an invokefunctionexpr a pure uglify and other treeshakers attempt to determine if the invocation of a function is sideeffectful and remove it if so and the result is unused a pure annotation on the call site can be used to hint to the optimizer that the invocation ha no side effect and is safe to treeshake away this commit add a pure flag to the output ast function call node which can be used to signal to downstream emitter that a pure annotation should be added it also modifies ngtscs emitter to emit an uglify pure annotation when this flag is set testing strategy this will be tested via it consumer by asserting that pure function are translated with the correct comment pr close ,feat
7768,router guard returning urltree cancel current navigation and redirects fix fw resolve pr close ,feat
7769,router allow guard to return urltree a well a boolean removed andobservable helper function in favor of inline implementation flow boolean urltree through guard check add test to verify behavior of checkguards function flowing urltree properly pr close ,feat
7770,router allow redirect from guard by returning urltree improve type checking within the checkguards function change public api to allow returning of urltree instead of boolean pr close ,feat
7771,router remove type casting from wrapintoobservable private function pr close ,refactor
7772,router add type definition for guard function pr close ,refactor
7773,router add type guard for router guard pr close ,refactor
7774,core remove static dependency from angularcore to angularcompiler pr close ,fix
7775,ivy ensure falsy styling is not applied during creation mode pr close ,fix
7776,bazel generalize fix for amd name for flat module out file pr close ,build
7777,core support computed base class in metadata inheritance pr close ,fix
7778,ivy allow root component to inject viewcontainerref pr close ,fix
7779,ivy compile query in jit mode pr close ,fix
7780,ivy optional dependency should not throw with module injector pr close ,fix
7781,ivy host injection flag should not throw for embedded view pr close ,fix
7782,ivy move hostlisteners generation to factory function pr close ,fix
7783,docsinfra move cli api desciption higher up close pr close ,build
7784,docsinfra notify caretaker about aiomonitoring failure pr close ,ci
7785,docsinfra make redirection test more robust pr close ,test
7786,docsinfra make smoke test more robust pr close ,test
7787,docsinfra fix smoke test pr close ,test
7788,docsinfra run basic smoke test against pr preview this make the test run agaisnt the deployed production version a part of the aiomonitoring job more reliable pr close ,test
7789,ivy ensure pipe index are referenced in styling binding pr close ,fix
7790,ivy injecting optional templateref on element should not throw pr close ,fix
7791,docsinfra ensure that cli code block are not autolinked some of the text in cli api doc were being autolinked to api page this wa not correct and in fact these block should not have any auto link to angular api at all close pr close ,build
7792,docsinfra mark code block to disable autolinking you can now mark code block with a noautolink cs class to tell the code autolinker to ignore this code block pr close ,build
7793,compiler generate relative path only in summary file error previously error in the summary file would include absolute file name this is undesirable a the output of a build should not depend on the current working directory doing so cause nondeterminism issue in build pr close ,fix
7794,compiler generate input with alias properly pr close ,fix
7795,ivy ensure pipe declaration are populated lazily when a forward ref is detected pr close ,fix
7796,ivy resolve forward ref in provider pr close ,fix
7797,ivy host binding should work on node with provider pr close ,fix
7798,ivy fix or disable failing ivy test these test were previously not running on ci so they have always been broken or got broken just recently testivy mark failing test target with fixmeivyjit and fixmeivylocal tag pr close ,test
7799,docsinfra include inherited member in search index close pr close ,build
7800,docsinfra refactor generatekeywords processor pr close ,build
7801,core update security guide sanitize example the sanitizer now remove the content of script tag a well a the tag itself pr close ,docs
7802,core fix security example ee test the change in dcbcefeaec caused this test to fail pr close ,test
7803,docsinfra split testanddeployaio to two separate job by splitting the job if something go wrong with deploying eg a network issue we can rerun just that part instead of having to wait for all the test to complete again in term of total duration the difference should be minimal because the two operation testing and deploying do not depend on shared task for example we need to build again for the specific target environment eg stable next etc before deploying anyway pr close ,ci
7804,docsinfra reduce verbosity of yarn build on ci pr close ,ci
7805,docsinfra fix deployment to firebase previously firebasetoolsx wa used and the deployment from circleci failed with unexpected error http code this commit ensures that we use a recent version of firebasetools for deploying to firebase it also ensures that we use the locally installed firebasetools not sure where it came from before grin pr close ,ci
7806,docsinfra upgrade cli command doc source to faae pr close ,build
7807,ivy support injecting the injector pr close ,feat
7808,core ignore comment node under unsafe element comment node that are child node of unsafe element are identified a text node this result in the comment node being returned a an encoded string add a check to ignore such comment node pr close ,fix
7809,ivy support provider and viewproviders pr close ,feat
7810,ivy expose a series of debug console tool pr close ,feat
7811,ivy ensure ngclass work with class binding pr close ,fix
7812,upgrade make ee test for upgrade doc example le flaky pr close ,test
7813,element make ee test for element doc example even le flaky pr close ,test
7814,docsinfra fix parameter type rendering close pr close ,build
7815,ivy ensure styling pipe are allocated before used in binding pr close ,fix
7816,docsinfra fix deployment script pr close ,ci
7817,bazel support nolegacyexternalrunfiles in protractor rule pr close ,fix
7818,ivy fix typo in build file ,build
7819,ivy properly tag the jsexpectedsymboltest rule previously the rule were tagged ivyonly but missing the ivyaot tag which would cause them to run under ci ,build
7820,ivy rename broken reflectmetadata switch file this file wa missed during the rename of the definecompile flag value from local to aot it referenced a reflectmetadatacompile ,fix
7821,docsinfra remove job from travis config pr close ,ci
7822,docsinfra move deployment to circleci pr close ,ci
7823,docsinfra add job to circleci config pr close ,ci
7824,element make ee test for element doc example le flaky pr close ,test
7825,animation make ee test for animation doc example le flaky pr close ,test
7826,docsinfra improve logging output in testpwascorelocalhost pr close ,test
7827,serviceworker specify format of datagroupscacheconfigtimeout fix pr close ,docs
7828,ivy mark failing test target with fixmeivyjit and fixmeivylocal tag we are close enough to blacklist a few test target rather than whitelist target to run because bazel rule can be composed of other rule that dont inherit tag automatically i had to explicitly mark all of our tslibrary and ngmodule targes with ivylocal and ivyjit tag so that we can create a query that excludes all fixme tagged target even if those target are composed of other target that dont inherit this tag this is the updated overview of ivy related bazel tag ivyonly target that build or run only under ivy fixmeivyjit target that doesnt yet build or run under ivy with compilejit fixmeivylocal target that doesnt yet build or run under ivy with compilelocal noivyjit target that is not intended to build or run under ivy with compilejit noivylocal target that is not intended to build or run under ivy with compilelocal pr close ,test
7829,ivy update tree benchmark to use ngif pr close ,fix
7830,ivy support viewcontainerref ngcontainer child issue found while running ngplural test with ivy pr close ,fix
7831,core fix spelling in componentfactory pr close ,docs
7832,ivy update largetable benchmark to use ngfor pr close ,fix
7833,ivy fix benchmark pr close ,build
7834,bazel fix toolstestingnode target deps pr close ,build
7835,bazel allow google override for external deps pr close ,refactor
7836,bazel update to rulestypescript pr close ,build
7837,bazel use finegrained npm deps pr close ,build
7838,docsinfra rename tagdef experimental to publicapi pr close ,feat
7839,docsinfra remove stable experimental from status selector pr close ,feat
7840,ivy generate ngsummaryjs shim this commit add generation of ngsummaryjs shim alongside ngfactoryjs shim when generated file are enabled generated ngsummary shim contain a single null export for every exported class with decorator that exists in the original source file ivy code doe not depend on summary so these exist only a a placeholder to allow them to be imported and their value passed to old apis this preserve backwards compatibility testing strategy this commit add a compiler test to verify the correct shape and content of the generated ngsummaryjs file pr close ,feat
7841,ivy make shim generation generic in ngtsc this commit refactors the shim host to be agnostic to the shim being generated and provides an api for generating additional shim besides the ngfactoryjs this will be used in a following commit to generate ngsummaryjs shim testing strategy this refactor introduces no new behavior so it sufficient that the existing test for factory shim generation continue to pas pr close ,refactor
7842,ivy rename ngtscfactories to ngtscshims this simple refactor of the build rule renames the ngfactoryjs shim generator to shim instead of factory in preparation for adding ngsummaryjs shim generation testing strategy this commit doe not introduce any new behavior and merely move file and symbol around it sufficient that the existing ngtsc test pas pr close ,refactor
7843,docsinfra correct the version of angulardevkitbuildangular this dependency ha not been correctly updated and i had to update it manually i think the issue is related to which wa fixed between cli rcs and final pr close ,fix
7844,docsinfra update to angular v pr close ,feat
7845,bazel remove workaround for t bug pr close ,refactor
7846,docsinfra display github link in cli api doc this commit includes the following change cli version information is read from the cli package from which we read the help file cli api page now contain gh link line number are not shown in gh link if the doc doe not have a truthy startingline value this allows u to remove hard coded check for guide page content page and cli api doc no longer have a startingline the hardcoded package path segment ha been removed from the template instead we now only use the realprojectrelativepath the realprojectrelativepath ha been updated accordingly for api and cli api doc pr close ,build
7847,docsinfra show github edit link on cli overview pr close ,build
7848,serviceworker updated browser support for service worker pr close ,docs
7849,docsinfra break long cli option onto two line pr close ,build
7850,docsinfra update cli option rendering pr close ,build
7851,docsinfra render cli argument consistently in the command syntax argument are rendered a var enclosed in angle bracket so this is now repeated in the argument table too pr close ,build
7852,ivy update status for in pr close ,docs
7853,ivy obviate the bazel component of the ivyswitch originally the ivyswitch mechanism used bazel genrules to conditionally compile one t file or another depending on whether ngc or ngtsc wa the selected compiler this wa done because we wanted to avoid importing certain module and thus pulling them into the build if ivy wa on or off this mechanism had a major drawback ivyswitch became a bottleneck in the import graph a it both import from many place in the codebase and is imported by many module in the codebase this frequently resulted in cyclic import which caused issue both with t and closure compilation it turn out ngcc need both code path in the bundle to perform the switch during it operation anyway so import switching wa later abandoned this mean that there no real reason why the ivyswitch mechanism needed to operate at the bazel level and for the ivyswitch file to be a bottleneck this commit remove the bazellevel ivyswitch mechanism and introduces an additional typescript transform in ngtsc and the passthrough tsc compiler used for testing jit to perform the same operation that ngcc doe and flip the switch during ngtsc compilation this allows the ivyswitch file to be removed and the individual switch to be located directly next to their consumer in the codebase greatly mitigating the circular import issue and making the mechanism much easier to use a part of this commit the tag for marking switched variable wa changed from prengcc to prer since it no longer just ngcc which flip these tag most variable were renamed from r to switch a well since theyre referenced mostly in render code test strategy existing test coverage is more than sufficient if this didnt work correctly it would break the hello world and todo apps pr close ,refactor
7854,docsinfra add v to the aio version picker ,feat
7855,docsinfra allow a empty region in example tag pr close ,build
7856,docsinfra only render code example content in one place pr close ,build
7857,docsinfra throw error if using title on code snippet since the title property is ignored and header should be used instead for specifying a code snippet header this commit ensures that we dont accidentally set title have it be silently ignored pr close ,build
7858,docsinfra update git ref for cli command doc this is to get the latest change done in pr close ,build
7859,aio add relative to app level route section added word relative to the route at the app level section description this wa not specified before the route in the lazyloadingngmodulessrcappapproutingmodulets also had loadchildren value starting with app the code for approutingmodulets is already fixed in this commit pr close ,fix
7860,ivy stub testbedcompilecomponents implementation pr close ,fix
7861,docsinfra update git ref for cli command doc update for version release pr close ,build
7862,docsinfra rename title by header to avoid unwanted tooltips close pr close ,fix
7863,docsinfra dont hide contributor link on device that can not hover fix pr close ,fix
7864,ivy in compiler support for instart and inend instruction pr close ,feat
7865,ivy in compiler support for element attribute pr close ,feat
7866,docsinfra fix top menu logo position fix pr close ,fix
7867,docsinfra do not add extra space after link in table close pr close ,build
7868,form change heading update heading level so it will appear in the toc pr close ,docs
7869,form change heading remove form subheading move intro to templatedriven form heading pr close ,docs
7870,form change heading change the heading of the templatedriven form guide page this make the first heading consistent with other guide page and the menu label reducing confusion to user browsing the guide pr close ,docs
7871,ivy enhance style and class binding to be animation aware pr close ,feat
7872,ivy move styling file around pr close ,refactor
7873,ivy make definecomponent tree shakable by closure compiler pr close ,fix
7874,ivy enable unit test for angularanimations pr close ,test
7875,router add prioritizedguardvalue operator optimization and allowing urltree return from guard if all guard return true operator return true false and urltree are now both valid return from a guard both these value wait for higher priority guard to resolve highest priority false or urltree value will be returned pr close ,feat
7876,ivy handle animation metadata normalization in the compiler pr close ,refactor
7877,serviceworker clean up cache from old sw version since the sw immediately take over all client it is safe to delete cache used by older eg beta angularserviceworker version to avoid running into browser storage quota limitation pr close ,fix
7878,ivy in design pr close ,docs
7879,router fix regression where navigatebyurl promise didnt resolve on canload failure fix pr close ,fix
7880,docsinfra improve logging output in testpwascorelocalhost pr close ,test
7881,docsinfra upgrade lighthouse to pr close ,build
7882,docsinfra reduce flakyness pr close ,ci
7883,ivy remove lnode pr close ,refactor
7884,ivy revert lnodedata into lviewdatahost pr close ,refactor
7885,ivy fix reference to pipebind instruction with args pr close ,fix
7886,docsinfra prevent unnecessary sidenav scrollbar fix pr close ,fix
7887,core allow null value for renderer setelement… using renderer ’ s setelementattribute or setelementstyle with a null or undefined value remove the corresponding attribute or style the argument type should allow this when using strictnullchecks close pr close ,fix
7888,docsinfra only show name in inherited from section close pr close ,build
7889,docsinfra highlight current cli command in navigation menu previously cli wa being treated like the api page where the top level item had to be highlighted for any command page but now the cli command all have their own navigation item which can be selected so there is no need to special case cli path any more close pr close ,fix
7890,ivy update statusmd pr close ,docs
7891,docsinfra upgrade angularmaterial to rc pr close ,build
7892,docsinfra upgrade angular to rc pr close ,build
7893,docsinfra upgrade angularcli to rc pr close ,build
7894,upgrade properly destroy upgraded component element and descendant fix pr close ,fix
7895,ivy replace lnodedynamiclcontainernode with flat lcontainers pr close ,refactor
7896,ivy remove tnodedynamiccontainernode pr close ,refactor
7897,platformbrowser remove type assertion on consoleprofileend since typescript v type definition for consoleprofileend is fixed and type assertion any is not needed any more pr close ,refactor
7898,ivy renderer should not use a special injection fn pr close ,fix
7899,ivy fix generated code for style binding with unit pr close ,fix
7900,ivy ensure that ɵngmoduledefwithmeta is exported this is needed to build an app with ngtsc once ngcc ha compiled angularcore pr close ,fix
7901,ivy ngcc transformer delegate to analyzer and renderer pr close ,refactor
7902,ivy ngcc renderer now manages dts transformation pr close ,refactor
7903,ivy ngcc decorationanalyzer act on whole program pr close ,refactor
7904,ivy implement ngcc switchmarkeranalyzer pr close ,refactor
7905,ivy move and rename analyzer to decorationanalyzer this is in preparation for adding in other kind of analyzer pr close ,refactor
7906,ivy move ngcc rootdirs computation into a function pr close ,refactor
7907,ivy remove ngcc parser and use ngccreflectionhost instead pr close ,refactor
7908,ivy implement ngccreflectionhostfinddecoratedfiles pr close ,refactor
7909,ivy rename and move ngcc parsed to decorated pr close ,refactor
7910,docsinfra allow aiolocal build to fail on travis this job is flaky up to so let allow it to fail while we investigate the reason pr close ,ci
7911,ivy use context discovery in testbed implementation pr close ,refactor
7912,ivy in compiler support for element attribute pr close ,feat
7913,ivy remove unused directive field from tview it wa removed in pr close ,refactor
7914,docsinfra pin git ref for cli command doc the json file from which cli command doc for angulario are generated is broken on master eg angularclibuildseec which cause foc generation and ci to fail pinning the git ref where we pull cli source from to a version that is known to be working until we figure out what the best approach is pr close ,build
7915,docsinfra make the git ref for cli command doc configurable pr close ,build
7916,upgrade properly destroy upgraded component element and descendant fix pr close ,fix
7917,core resolving merge conflict in queryts pr close ,fix
7918,ivy local ref in view and content query should be pulled out into consts in generated code pr close ,fix
7919,ivy removing unnecessary assert in getorcreatenodeinjector function pr close ,fix
7920,ivy removing no longer needed queryreadtype pr close pr close ,fix
7921,ivy merge directive into lviewdata pr close ,refactor
7922,ivy add testing utility to replace loaddirective pr close ,test
7923,ivy reflect animation field directly into the output definition the animation field of component metadata should be copied directly into the ngcomponentdef for that component and should not pas through static resolution previously the animation array wa statically resolved and then the value were translated back when generating ngcomponentdef pr close ,fix
7924,ivy ensure ngcc compiles angularcore with correct internal import pr close ,fix
7925,ivy ngcc expose the package name from entrypoint pr close ,refactor
7926,ivy update ngcc integration test pr close ,test
7927,ivy ngcc only consider decorator from angularcore pr close ,fix
7928,ivy ngcc remove redundant decorate call previously we only removed assignment to classdecorators if the array wa not empty now we also remove call to decorate similarly pr close ,fix
7929,ivy include variabledeclared decorated class in ngcc compilation previously class that were declared via variable declaration rather than class declaration were being excluded from the parsed class pr close ,fix
7930,ivy support tsutilsdecorate decorator declaration in ngcc the most recent angular distribution have begun to use decorate instead of classdecorators this prevents ngcc from recognizing the class and then fails to perform the transform to ivy format example var applicationmodule class function inject applicationref to make it eager function applicationmoduleappref applicationmodule decorate ngmodule provider applicationmoduleproviders metadatadesignparamtypes applicationref applicationmodule return applicationmodule now ngcc recognizes decorate declaration and performs it transform see fw pr close ,fix
7931,ivy support lateinitialized variable in ngccngtsc in some format variable are declared a var or let and only assigned a value later in the code the ngtsc resolver still need to be able to resolve this value so the host now provides a hostgetvariablevaluedeclaration method that can do this resolution based on the format the host make some assumption about the layout of the code so they may only work in the constrained scenario that ngcc expects pr close ,fix
7932,docsinfra upgrade angular to rc and typescript to pr close ,build
7933,docsinfra upgrade webpackcli to this is necessary to avoid webpackwebpack when installing dependency without taking the lockfile into account eg with yarn aiouselocal locally or on ci pr close ,build
7934,docsinfra run test against local angular package too pr close ,ci
7935,docsinfra fix test pr close ,test
7936,docsinfra remove unnecessary command this wa accidentally merged with dacba and fbccf the build script is called in scriptscibuildsh if necessary pr close ,ci
7937,upgrade properly destroy upgraded component element and descendant fix pr close ,fix
7938,docsinfra reuse env variable pr close ,ci
7939,platformbrowser fix destroy hammer manager when off pr close ,fix
7940,docsinfra fix positioning of message for disabled javascript pr close ,fix
7941,docsinfra show custom page on preview server for consistency pr close ,ci
7942,serviceworker improve api doc for swpushswupdate pr close ,docs
7943,serviceworker simplifyimprove ngswcommchannel typing pr close ,refactor
7944,serviceworker add updateactivatedavailableevent to the public api pr close ,docs
7945,ivy reexport compilengmodulefactorypostngcc to prevent dce in fesm while creating fesm file rollup usually drop all unused symbol all postngcc are unused unless ngcc rewires stuff to prevent this dce we reexport them a private symbol if ngcc is not used these symbol will be dropped when we optimize an application bundle pr close ,fix
7946,docsinfra update fsevents to to support node pr close ,build
7947,ivy update context discovery to prep for dir merge pr close ,refactor
7948,ivy sync view with blueprint when necessary pr close ,fix
7949,ivy expose node injector a part of debug context pr close ,feat
7950,ivy implement test for template typechecking this commit build on the ngtsctestenvironment helper work before and introduces templatetypecheckspects which contains compiler test for template typechecking pr close ,test
7951,ivy refactor ngtsc test to use an ngtsctestenvironment helper this commit get ready for the introduction of ngtsc template typechecking test by refactoring test environment setup into a custom helper this helper will simplify the authoring of future ngtsc test ngtsc test previously returned a numeric error code a la ngtscs cli interface if any typescript error occurred the helper ha the ability to run ngtsc and return the actual array of tsdiagnostics which greatly increase the ability to write clean test pr close ,test
7952,ivy turn on template typechecking via fulltemplatetypecheck this commit enables generation and checking of a type checking tsprogram whenever the fulltemplatetypecheck flag is enabled in tsconfigjson it put together all the piece built previously and cause diagnostics to be emitted whenever type error are discovered in a template todos map error back to template html expand set of type error covered in generated typecheck block pr close ,feat
7953,ivy support template type check narrowing for ngfor and ngif this commit add an ngtemplateguardngif static method to the ngif directive and an ngtemplatecontextguard static method to ngfor the function of these two static method is to enable type narrowing within generated type checking code for consumer of the directive pr close ,feat
7954,ivy augment selector scope to extract additional metadata before type checking can be turned on in ngtsc appropriate metadata for each component and directive must be determined this commit add tracking of the extra metadata in defwithmeta type to the selector scope handling allowing for later extraction for typechecking purpose pr close ,feat
7955,ivy introduce typechecking context api this commit introduces the template typechecking context api which manages inlining of type constructor and typecheck block into tssourcefiles this api will be used by ngtsc to generate a typechecking tsprogram an typecheckprogramhost is provided which can wrap a normal tscompilerhost and intercept getsourcefile call this can be used to provide source file with type check block to a tsprogram for typechecking pr close ,feat
7956,ivy introduce the type check block compiler this commit introduces the main functionality of the typecheck compiler generation of type check block type check block are block of typescript code which can be inlined into source file and when processed by the typechecker will give information about any typing error in template expression pr close ,feat
7957,ivy move the exprstmt translator to a separate target template typechecking will make use of expression and statement translation a well a the importmanager so this code need to live in a separate build target which can be depended on by both the main ngtsc transform a well a the template typechecking mechanism this refactor introduces a separate build target for that code pr close ,refactor
7958,ivy remove metadata from def and introduce defwithmeta type previously in ivy metadata for directivescomponentsmodulesetc wa carried in dts file inside type information encoded on the directivedef componentdef ngmoduledef etc type of ivy definition field this work well but ha the side effect of complicating ivy runtime code a these extra generic type parameter had to be specified a any throughout the codebase definternal type were introduced previously to mitigate this issue but thats the wrong way to solve the problem this commit return def type to their original form with no metadata attached instead new defwithmeta type are introduced that alias the plain definition type and add extra generic parameter this way the only code that need to deal with the extra metadata parameter is the compiler code that read and writes them the existence of this metadata is transparent to the runtime a it should be pr close ,fix
7959,ivy introduce typecheck package and a type constructor generator this commit introduces packagescompilerclisrcngtsctypecheck a a container for template typechecking code and implement an initial api type constructor generation type constructor are static method on componentdirective type with no runtime implementation the method are used during compilation to enable inference of a component or directive generic type parameter from the type of expression bound to any of their input a type constructor look like class directivet someinput t static ngtypectortinit partialpickdirectivet someinput directivet it can be used to infer a type for t based on the input const dir directivengtypectorsomeinput string directivet pr close ,feat
7960,ivy introduce a new compiler api for operating on template this commit introduces the t api which process parsed template asts and performs a number of function such a binding the process of semantically interpreting crossreferences within the template and directive matching the api is modeled on typescript typechecker api with oracle method that give access to collected metadata this work is a prerequisite for the upcoming template typechecking functionality and will also become the basis for a refactored templatedefinitionbuilder pr close ,feat
7961,ivy add generic to the selectormatcher api this commit add a generic type parameter to the selectormatcher class and it associated response type this make the api for matching selector and obtaining information about the matched directive significantly more ergonomic and typesafe pr close ,feat
7962,ivy extract directive matching code into a utility function upcoming implementation work for template typechecking will need to reuse the code which match directive inside a template so this refactor commit move the code to a shared location in preparation this commit pull the code needed to match directive against a template node out of the templatedefinitionbuilder into a utility function in preparation for template typechecking and other templatedefinitionbuilder refactoring pr close ,refactor
7963,router get guard only one time and simplify guard operator signature pr close ,refactor
7964,router move pre activation helper into utils pr close ,refactor
7965,router convert preactivations resolve data to pure function remove preactivation class pr close ,refactor
7966,router convert preactivations check guard to pure function pr close ,refactor
7967,ivy sanitize tag name while generating listener function name pr close ,fix
7968,ivy flatten linjector into lviewdata pr close ,refactor
7969,ivy compiler support to generate queryreadfromnode call pr close ,feat
7970,docsinfra remove unnecessary margin on short description this wa added in dfaafddcddcfeeac but it is not clear the reasoning it look better to remove it now pr close ,fix
7971,docsinfra fix formatting of entry point export table now that listtable cell are pre formatterd we must be careful of what whitespace appears in text node pr close ,build
7972,docsinfra simplify property syntax rendering pr close ,build
7973,docsinfra remove unused property table heading pr close ,build
7974,docsinfra add short description see more link if there is additional nonshort description then add in a link to the short description to take the reader there pr close ,build
7975,docsinfra pluralize ngmodules heading a appropriate pr close ,build
7976,docsinfra improve directive selector rendering not block are now rendered a italic while the rest of the selector is bold pr close ,build
7977,docsinfra move directive macro into memberhelpershtml pr close ,build
7978,docsinfra include directive etc in class descendant list pr close ,build
7979,docsinfra display inherited member on directive pr close ,build
7980,docsinfra directive input and output pr close ,build
7981,docsinfra rename example template variable in directive page pr close ,build
7982,docsinfra remove class overview from directive page pr close ,build
7983,docsinfra improve directive selector rendering if the documentation contains a selector tag then the content of that is used to describe the selector of a directive otherwise the selector string is split and each selector is listed a a list item in an unordered list pr close ,build
7984,docsinfra improve directive api doc template close close pr close ,build
7985,docsinfra upgrade angularcli to pr close ,build
7986,docsinfra upgrade angular to beta pr close ,build
7987,docsinfra update payload size limit to reflect current status pr close ,build
7988,ivy always use styling helper method when comparing value pr close ,refactor
7989,ivy reorganize styling and player file pr close ,refactor
7990,ivy ensure styleclass binding identity check the previous value pr close ,fix
7991,ivy rename stylingprop styleprop pr close ,refactor
7992,ivy replace lnodenodeinjector with tnodeinjectorindex pr close ,refactor
7993,ivy ensure style and class binding are placed in the same instruction pr close ,fix
7994,router cleanup to navigation stream for readability and documentation pull out activateroutes into new operator add asynctap operator use asynctap operator for router hook and remove corresponding abstracted operator clean up formatting minor performance improvement pr close ,refactor
7995,router update test based on router quickcancelling ongoing navigation pr close ,refactor
7996,router make sure redirect within navigationstart event work pr close ,refactor
7997,router move routing into a single observable stream this is a major refactor of how the router previously worked there are a couple major advantage of this refactor and future work will be built on top of it first we will no longer have multiple navigation running at the same time previously a new navigation wouldnt cause the old navigation to be cancelled and cleaned up instead multiple navigation could be going at once and we imperatively checked that we were operating on the most current routernavigationid a we progressed through the observable stream this had some major fault the biggest of which wa async race where an ongoing async action could result in a redirect once the async action completed but there wa no way to guarantee there werent also other redirects that would be queued up by other async action after this refactor there a single observable stream that will get cleaned up each time a new navigation is requested additionally the individual piece of routing have been pulled out into their own operator while this wa needed in order to create one continuous stream it also will allow future improvement to the testing apis a thing such a guard or resolvers should now be able to be tested in much more isolation add the new routertransitions observable of the new navigationtransition type to contain the transition information update routernavigations to pipe off of routertransitions rewrite navigation observable flow to a single configured stream refactor switchmap instead of the previous mergemap to ensure new navigation cause a cancellation and cleanup of already running navigation wire in existing error and cancellation logic so cancellation match previous behavior pr close ,refactor
7998,router create pipeable afterpreactivation function pr close ,refactor
7999,router create pipeable resolvedata function pr close ,refactor
8000,router create pipeable checkguards function pr close ,refactor
8001,router create pipeable setuppreactivation function pr close ,refactor
8002,router create pipeable beforepreactivation function pr close ,refactor
8003,router create pipeable applyredirects function pr close ,refactor
8004,router create pipeable recognize function pr close ,refactor
8005,ivy make sure that test bed symbol are imported from ivyswitch pr close ,refactor
8006,ivy add ability to inspect local ref through context discovery pr close ,feat
8007,ivy fixed typo in test case description ,feat
8008,ivy adding support for ngnonbindable attribute ,feat
8009,docsinfra run the script in the correct folder ,ci
8010,docsinfra use correct parameter for paginated request to github a it turn out in github api paginated request page numbering is based starting at page which return the first page result in making the same request twice and logging incorrect number since the first item are listed twice pr close ,fix
8011,docsinfra fix preview server periodic cleanup includes the following fix fix cron entry format for cleanup script crontabs in etc should not have a user field no idea why it used to work before but it started giving error recently binsh root not found set required env variable in cleanup script broken in ccfad this wa producing the following error error missing required environment variable aiocirclecitoken use the correct path for downloads to be removed broken in ccfad pr close ,fix
8012,docsinfra remove unnecessary test helper supertestrequest extends promise and can be used directly without promisifying pr close ,test
8013,docsinfra update preview server doc to account for recent change mostly but not exclusively a followup to pr close ,docs
8014,docsinfra test pr preview on ci the deployment of pr preview is triggered by the notification webhook of the aiopreview circleci job which creates and store the build artifact this commit add a new job testaiopreview which wait for the preview to be deployed for pr that do have a preview and then run some test against it currently only pwa test fix pr close ,ci
8015,docsinfra add api endpoint for checking if pr can have preview there several reason why pr can not have public preview the pr did not affect any relevant file eg nonspec file in aio or package the pr can not be automatically verified a trusted based on it author or label note the endpoint doe not check whether there currently is a public preview for the specified pr only whether there can be one pr close ,feat
8016,docsinfra correctly check pr file on preview server according to the doc the response of githubs pr file api includes a maximum of file this mean that if a pr contains more file it is possible that not all file are retrieved which could for example give a false negative for the significant file touched check not likely but possible this commit fix it by using paginated request to retrieve all changed file pr close ,fix
8017,docsinfra fix test for preview server githubpullrequests pr close ,test
8018,docsinfra fix test for preview server buildcleaner completing prematurely pr close ,test
8019,docsinfra fix preview server unit test on window some test where comparing actual with expected path without taking into account that path will be different on window this commit us pathresolve to convert expected path to their osspecific form pr close ,test
8020,docsinfra add support for sourcemaps in preview server test pr close ,test
8021,docsinfra use mockable logger related discussion pr close ,refactor
8022,docsinfra fix method name getprfrombranch getprfrombranch pr close ,refactor
8023,docsinfra upgrade preview server dependency pr close ,build
8024,docsinfra replace concurrently with npmrunall for preview server dev npmrunall work just a well but is better at handling termination on window pr close ,build
8025,docsinfra do not exit preview server dev script when build fails pr close ,build
8026,docsinfra avoid race condition in aiobuildssetup npm script previously due to multiple script rebuilding during yarn dev initialization there could be race condition that led to error this commit fix it by ensuring yarn build is run once before the main yarn dev script pr close ,build
8027,docsinfra generate angular cli command reference pr close ,feat
8028,docsinfra add option to run only the docgen this can save time when iterating by not regenerating the zip and embedded example pr close ,build
8029,ivy wrapper fns arent necessary anymore pr close ,fix
8030,form add package overview for form pr close ,docs
8031,ivy object like elementref should not use a special injection fn pr close ,fix
8032,ivy expose a series of helpful application inspection tool pr close ,feat
8033,ivy remove unreferenced utils file pr close ,refactor
8034,serviceworker do not blow up when cache are unwritable in some case example when the user clear the cache in devtools but the sw remains active on another tab and keep reference to the deleted cache trying to write to the cache throw error eg entry wa not found when this happens the sw can no longer work correctly and should enter a degraded mode allowing request to be served from the network possibly related this commits remedy this situation by ensuring the sw can enter the degraded existingclientsonly mode and forward request to the network pr close ,fix
8035,docsinfra fail docgen if a content rule fails pr close ,build
8036,docsinfra allow usage note on decorator option property pr close ,build
8037,core remove usage note from reflexiveinjectorparent property property are not allowed usage note and in this case the example is so simple it didnt warrant moving it to the overall class documentation pr close ,docs
8038,core move heading to usagenotes pr close ,docs
8039,common move keyvaluepipe example to usagenotes pr close ,docs
8040,form move extended text to usagenotes heading are not allowed in the basic description block pr close ,docs
8041,move example to usagenotes pr close ,docs
8042,platformbrowser move example to usagenotes pr close ,docs
8043,router move example to usagenotes pr close ,docs
8044,upgrade move example etc into usagenotes pr close ,docs
8045,common move keyvaluepipe example to usagenotes pr close ,docs
8046,docsinfra remove legacy jsdoc tag processing pr close ,build
8047,common remove legacy whatitdoes tag pr close ,docs
8048,docsinfra add nocollapse tagdef to prevent warning see pr close ,build
8049,docsinfra sort ngmodule export by id pr close ,build
8050,docsinfra sort package export by id close pr close ,build
8051,ivy provide groundwork for animation in core pr close ,feat
8052,docsinfra ensure that only search is removed from url on click when we have navigated to the site via a url that contains a search query param the site show the search result we want to remove that query param from the url when the search result are closed but the current implementation is also removing other query params unnecessarily now only the search param is removed when the search result are closed see for more context pr close ,fix
8053,docsinfra expose deprecated status on item more clearly pr close ,build
8054,docsinfra render security risk label pr close ,fix
8055,docsinfra improve search quality pr close ,build
8056,docsinfra do not include license comment in first api doc the default dgeni config is to concatenate leading comment in front of api item in the case that you have an api item that start a file with no import statement the license comment at the top of the file wa being added to the front of the api item comment since the license comment includes the license tag and the api item comment did not start with description the content of the api item comment wa being put inside the license tag and no description wa being extracted from the api item comment this commit update to a version of dgenipackages that ha a switch to turn off this concatenation and then also configures this switch close pr close ,build
8057,ivy special injection token should not be cached pr close ,refactor
8058,router cleanup to navigation stream for readability and documentation pull out activateroutes into new operator add asynctap operator use asynctap operator for router hook and remove corresponding abstracted operator clean up formatting minor performance improvement pr close ,refactor
8059,router update test based on router quickcancelling ongoing navigation pr close ,refactor
8060,router make sure redirect within navigationstart event work pr close ,refactor
8061,router move routing into a single observable stream this is a major refactor of how the router previously worked there are a couple major advantage of this refactor and future work will be built on top of it first we will no longer have multiple navigation running at the same time previously a new navigation wouldnt cause the old navigation to be cancelled and cleaned up instead multiple navigation could be going at once and we imperatively checked that we were operating on the most current routernavigationid a we progressed through the observable stream this had some major fault the biggest of which wa async race where an ongoing async action could result in a redirect once the async action completed but there wa no way to guarantee there werent also other redirects that would be queued up by other async action after this refactor there a single observable stream that will get cleaned up each time a new navigation is requested additionally the individual piece of routing have been pulled out into their own operator while this wa needed in order to create one continuous stream it also will allow future improvement to the testing apis a thing such a guard or resolvers should now be able to be tested in much more isolation add the new routertransitions observable of the new navigationtransition type to contain the transition information update routernavigations to pipe off of routertransitions rewrite navigation observable flow to a single configured stream refactor switchmap instead of the previous mergemap to ensure new navigation cause a cancellation and cleanup of already running navigation wire in existing error and cancellation logic so cancellation match previous behavior pr close ,refactor
8062,router create pipeable afterpreactivation function pr close ,refactor
8063,router create pipeable resolvedata function pr close ,refactor
8064,router create pipeable checkguards function pr close ,refactor
8065,router create pipeable setuppreactivation function pr close ,refactor
8066,router create pipeable beforepreactivation function pr close ,refactor
8067,router create pipeable applyredirects function pr close ,refactor
8068,router create pipeable recognize function pr close ,refactor
8069,core add missing peerdependency to angularcompiler in a dependency to the compiler wa added however the peerdependency wa not added pr close ,fix
8070,docsinfra process and render ngmodule export all directive and pipe must now be tagged with one ore more public ngmodule from which they are exported if an item is exported transitively via a reexported internal ngmodule then it may be that the item appears to be exported from more than one public ngmodule for example there are shared directive that are exported in this way from formsmodule and reactiveformsmodule the docgen will error and fail if a directive or pipe is not tagged correctly ngmodule page now list all the directive and pipe that are exported from it directive and pipe page now list any ngmodule from which they are exported package also now list any ngmodules that are contained previously they were missed pr close ,build
8071,docsinfra separate ngmodules from class in api doc pr close ,build
8072,docsinfra remove unused infobar api template pr close ,build
8073,compilercli add support to extend angularcompileroptions typescript only support merging and extending of compileroptions this is an implementation to support extending and inheriting of angularcompileroptions from multiple file close pr close ,feat
8074,form update form apis based on review feedback pr close ,docs
8075,form update api reference for form interface and abstract class pr close ,docs
8076,docsinfra configure firebase to strip off the html extension firebase used to do it automatically with cleanurls true but it stopped doing it unless the resulting url corresponds to an existing file which is not always the case in angulario eg the resulting url might be matched by a new redirect rule this change in firebase hosting behavior resulted in some url not being correctly redirected eg url to the archived v site or html suffixed url from rdparty site this commit fix it by configuring firebase hosting to strip off the html extension and redirect if no other redirect rule matched pr close ,fix
8077,platformserver update domino to v pr close ,feat
8078,docsinfra add opensearch description enables chrome user to search angulario and it subdomains from the browser navigation bar not sure if compatible with firefox yet the queried term in the url is removed after closing the searchresults pr close ,feat
8079,animation updated animation doc pr close ,docs
8080,bazel run angular test on rbe pr close ,test
8081,ivy prefactor set explicit type parameter for modulewithproviders ivy depends on having the generic type token later when reading the modulewithproviders from a dts file pr close ,refactor
8082,form change documentation of the formgroup patchvalue method improve the grammar of the description to make it more readable pr close ,docs
8083,ivy ngcc should compile entrypoints in the correct order the compiler should process all an entrypoints dependency before processing that entrypoint pr close ,fix
8084,ivy remove unused import pr close ,style
8085,ivy use canonicalpath in ngcc it turn out that pathposix doe not always reliably return forward slash path on window pr close ,refactor
8086,bazel update to rulestypescript rulesnodejs pr close ,build
8087,ivy remove lnodeview pr close ,refactor
8088,ivy event should not mark view dirty by default pr close ,fix
8089,bazel update bazelversion to bazel version doesnt seem to be available anymore upgrade to instead pr close ,build
8090,ivy remove lnodetnode pr close ,refactor
8091,ivy lcontainers should store view not node pr close ,refactor
8092,ivy ensure hello world doesnt pull in context discovery creation code pr close ,refactor
8093,router mount correct component if router outlet wa not instantiated and if using a route reuse strategy this unsets attachref on outlet context if no route is to be reused in route activation close pr close ,fix
8094,router change description of parameter usage for navigation function pr close ,docs
8095,compiler fix look up of entrycomponents in aot summary previously when you attempted to bootstrap a component that had a routeroutlet using ngsummaries it would complain that the component wa not provided by any module even if it wa this commit fix a mistake afaict which caused the lookup of the component in the aot summary to fail i believe this change is safe ive run the affected test within google and there were no breakage caused by this change pr close ,fix
8096,ivy use proper sanitizer name fix pr close ,fix
8097,bazel remove outdated cfg data reference pr close pr close ,build
8098,bazel add info on option for nodejstest rule pr close ,docs
8099,ivy add explanation of lviewdata pr close ,docs
8100,ivy dont accidently read the inherited definition create getter method getxxxdef for each definition which us hasownproperty to verify that we dont accidently read form the parent class fix fix pr close ,fix
8101,ivy ensure ivy ref class derive from view engine equivalent various user code us instanceof to check whether a particular instance is a templateref elementref etc ivy need to work with these check pr close ,fix
8102,ivy resolve reference to var in dts file previously if ngtsc encountered a variabledeclaration without an initializer it would assume that the variable wa undefined and return that result however for symbol exported from external module that resolve to dts file variable declaration are of the form export declare let varname type this form also lack an initializer but indicates the presence of an importable symbol which can be referenced this commit change the static resolver to understand variable declaration with the declare keyword and to generate reference when it encounter them pr close ,feat
8103,ivy support bootstrap in ngmoduledef the bootstrap property of ngmodule wa not previously compiled by the compiler in aot or jit mode in ivy this commit add support for bootstrap pr close ,feat
8104,ivy add nocollapse when writing closureannotated code closure requires nocollapse on ivy definition static field in order to not convert them to standalone constant however tsickle the tool which would ordinarily be responsible for adding nocollapse doesnt properly annotate field which are added synthetically via transforms so this commit add nocollapse by applying regular expression against code during the final write to disk pr close ,fix
8105,ivy remove superfluous array check related pr close ,refactor
8106,common register locale data for all equivalent closure locale this fix is for the issue below when compiling in angular apps using closure for certain locale closure convert the input locale id to a different equivalent locale string for example if the input locale is idfor indonesia googlocale is set to in and the closure locale data is registered only for in the angular compiler us the original input locale string id to set the localeid token and there is a mismatch of locale used to register and locale used when requesting the locale data the fix is for the closurelocalets code to register the locale data for all equivalent locale name so that it doesnt matter what googlocale is actually set to pr close ,fix
8107,ivy support animation trigger in template pr close ,feat
8108,aio add ngsqui to resource pr close ,docs
8109,ivy traverse tnode tree directly pr close ,refactor
8110,ivy migrate previousorparentnode to use tnodes pr close ,refactor
8111,bazel add additional parameter to tsapiguardiantest def added stripexportpattern and allowmoduleidentifiers so that these can be passed from downstream pr close ,feat
8112,bazel specify the package and lock file using the workspace pr close ,fix
8113,ivy allow combined context discovery for component directive and element pr close ,feat
8114,ivy patch animation into metadata pr close ,feat
8115,serviceworker update command pr close ,docs
8116,docsinfra ensure any stale generated content is deleted since aiosrcgenerated is gitignored it is easy for stale content eg removed image example zip etc to remain there on local clone and then get copied into the dist directory this commit ensures aiosrcgenerated is cleaned up before generating the new content pr close ,build
8117,docsinfra reenable sw offline mode this basically reverts since firebase ha fixed the issue with indexhtml redirection on their side pr close ,fix
8118,ivy mock the filesystem in ngcc main integration test bazel doe not like the filesystem being modified this commit a temporary mock filesystem that can be modified a needed pr close ,test
8119,ivy implement ngcc build marker ngcc add marker file to each folder that ha been compiled containing the version of the ngcc used when compiling it will ignore folder that contain these marker file a long a the version match pr close ,feat
8120,upgrade trigger destroy event on upgraded component element fix pr close ,fix
8121,upgrade share code for destroying upgraded component between dynamic and static pr close ,refactor
8122,bazel remove unused angulartsconfigjson integrationbazel test pr close ,build
8123,docsinfra fix doubleslash in url of aiomonitoring test a part of the test run in the circleci aiomonitoring job we need to retrieve sitemapxml from the site under test previously the url used to retrieve that contained a doubleslash at some point firebase which is used for hosting the site stopped normalizing doubleslashes to a single slash causing the test to fail this commit fix the problem by ensuring that the constructed url do not contain doubleslashes pr close ,test
8124,router warn if navigation triggered outside angular zone close close close pr close ,feat
8125,docsinfra disable status selector in api list when displaying only package close pr close ,feat
8126,docsinfra do not render internals in package api page close pr close ,build
8127,ivy detect frozen flyweight object in definition and unfreeze definecomponent and friend can return a flyweight empty object for specific field when they contain no data inheritdefinitionfeature wa attempting to write into these flyweight object which have been protected with objectfreeze this commit add detection to inheritdefinitionfeature to identify the frozen object pr close ,fix
8128,changelog fix version typo pr close ,docs
8129,docsinfra bump polyfills payload limit pr close ,refactor
8130,docsinfra simplify customelement polyfill setup pr close ,refactor
8131,docsinfra ensure root nodemodules exists now that the docgen par the import of t source file we need to ensure that the root nodemodules exists otherwise running yarn doc produce an obscure error error no sourcefile found with path nodemodulestypesjasmineindexdts close pr close ,build
8132,ivy remove unused ivy code pr close ,style
8133,ivy reexport postngcc symbol a private to prevent dce in fesm while creating fesm file rollup usually drop all unused symbol all postngcc are unused unless ngcc rewires stuff to prevent this dce we reexport them a private symbol if ngcc is not used these symbol will be dropped when we optimize an application bundle we dont have an infrastructure to test this fix so i just manually inspected the bundle before and after to verify that the fix work pr close ,fix
8134,ivy use globally unique name for in constant closure compiler requires that the in message constant of the form const msgxyz googgetmessage have name that are unique across an entire compilation even if the variable themselves are local to a given module this mean that in practice these name must be unique in a codebase the best way to guarantee this requirement is met is to encode the relative file name of the file into which the constant is being written into the constant name itself this commit implement that solution pr close ,fix
8135,form update api reference for reactive and templatedriven form module pr close ,docs
8136,ivy support directive output on ngtemplate compiler part of fix pr close ,fix
8137,ivy support host binding on dynamically created component pr close ,fix
8138,ivy remove obsolete type in the past factory could return an array with content query but we no longer manage query in factory function pr close ,refactor
8139,bazel make resolvetypereferencedirectives override work with both t t pr close ,build
8140,bazel fix bazel type reference directive resolve pr close ,build
8141,ivy speed up ngcc ivy switch processing only parse the ast for ngcc ivy switch constant if the marker is not found in the module text pr close ,perf
8142,ivy test esmrenderergetswitchabledeclarations also incorporates a refactoring of the test to make them le fragile pr close ,test
8143,ivy implement renderergetswitchabledeclarations this support the ngcc ivy switch specified in pr close ,feat
8144,ivy refactor esmrenderer test to make them le fragile pr close ,test
8145,ivy refactor esmrenderer test to make them le fragile pr close ,test
8146,ivy implement ngccreflectionhostgetswitchabledeclarations this method will be used to find all the place where the ivy switch will occur see pr close ,feat
8147,ivy produce contextual diagnostics in ngtsc mode typescript ha a more modern diagnostic emit function which produce contextually annotated error information using color in the console to indicate where in the code the error occurs this commit swiches ngtsc to use this format for diagnostics when emitting them after a failed compilation pr close ,feat
8148,ivy output diagnostics for many error in ngtsc this commit take the first step towards ngtsc producing real typescript diagnostics instead of simply throwing error when encountering incorrect code a new class is introduced fataldiagnosticerror which can be thrown by handler whenever a condition in the code is encountered which by necessity prevents the class from being compiled this error type is convertable to a tsdiagnostic which represents the type and source of the error error code are introduced for angular error and are prefixed with so error code becomes to distinguish them from other t error a function is provided which will read t diagnostic output and convert the t error to ng error if they match this negative error code format pr close ,feat
8149,compiler add hostvars and support pure function in host binding pr close ,fix
8150,ivy support injecting renderer pr close ,feat
8151,docsinfra test that the suggest edit button are visible where expected pr close ,test
8152,docsinfra refactor template pr close ,refactor
8153,docsinfra show suggest edits only for guide and tutorial dirs pr close ,fix
8154,docsinfra add suggest edits feature to all doc pr close ,feat
8155,benchpress use performancemark instead of consoletime previously benchpress would use consoletime and consoletimeend to measure the start and end of a test in the performance log this used to work over navigation if you called consoletimeid then navigated to a different page calling consoletimeendid would still insert an event in the performance log a of chrome this is no longer the case consoletimeendid will simply not insert an event in the performance log unless consoletimeid wa called on the same page likewise using performancemeasure doe not work if the starting mark wa on a different page this simple workaround us performancemark to insert event in the performance log at the start and end of the test benchpress look for bpstart and bpend in the name of the performance mark and normalizes that to the start and end event expected by perflogmetric pr close ,fix
8156,element add compiler dependency pr close ,fix
8157,element add compiler to integration pr close ,fix
8158,element strict null check pr close ,fix
8159,element enable shadow dom v and slot when using viewencapsulationshadowdom angular will not remove the child node of the dom node a root component is bootstrapped into this enables developer building angular element to use the slot element to do native content projection pr close ,feat
8160,element add basic integration test for angular element pr close ,test
8161,core update web platform feature detection pr close ,test
8162,core do not clear element content when using shadow dom pr close ,fix
8163,core size regression with closure compiler by pulling in compiler into core the compiler wa not treeshakable and about kb of code wa retained when treeshaken with closure pr close ,fix
8164,ivy register to directive output on ngtemplate ngcontainer runtime part of pr close ,fix
8165,bazel protractor rule should include eespecjs pr close ,fix
8166,ivy remove duplicate global pr close ,refactor
8167,bazel cache filenametomodulename lookup this save expensive reparsing of the file when not run a a bazel worker pr close ,fix
8168,bazel only lookup amd modulename tag in dts file pr close ,fix
8169,compilercli remove tsickle from dependency user can still install tsickle if they want closurecompatible output pr close ,refactor
8170,compilercli remove a test that we no longer care about alex r say that we no longer care about the behavior this is testing pr close ,refactor
8171,ivy inject attribute for directive on ngtemplate ngcontainer pr close ,fix
8172,docsinfra temporary sw fix for online mode due to unknown reason firebase seems to return a response for indexhtml but without a location header according to the spec the browser will not follow the redirect considering the response a failed instead this commit temporarily remove indexhtml from hashed resource and change index to in ngswconfigjson until we figure out an appropriate longterm solution pr close ,fix
8173,ivy add support for resolving view data from a dom node pr close ,feat
8174,compilercli improve testing harness for incremental compilation in tsc the check that enables program structure reuse in tryreusestructurefromoldprogram ha changed and now us identity comparison on array within compileroptions since we recreate the option on each incremental compilation we now fail this check after this change the default set of option is reused in between incremental compilation but we still allow option to be overriden if needed pr close ,test
8175,compilercli fix the incremental ngc test so that they run under bazel pr close ,test
8176,bazel esmoutputsaspect to work with target such a tsprotolibrary with no replayparams attribute pr close ,build
8177,docsinfra render all overload if they are abstract in an overloaded method the overload with the function body is the actual method doc and this doc is not included in the list of additional overload moreover the logic all in dgenipackages is that if none of the item ha a body then we use the first overload a the actual method doc in the case of abstract method none of the method have a body so we have a situation where the overload collection doe not contain the first abstract method even though it is not the implementation of the method therefore we need to still render it close pr close ,build
8178,docsinfra remove annotation section from api page pr close ,build
8179,bazel move bazel managed runtime deps for downstream usage pr close ,fix
8180,ivy match directive on binding and element output close pr close ,fix
8181,common fix double instantiation in ngswitch test one of the test wa creating testcomponent instance and using global state making this test not predictable fixing the test by making sure that testcomponent is instantiated only once pr close ,test
8182,docsinfra ignore serverside redirected url in the sw this allows url to be passed through to the server where they are properly redirected instead of serving indexhtml from the sw known issue doc will be passed through to the server doc without the trailing slash will be correctly treated a a navigation url and handled by the sw we dont link to doc from within the app but if there are external link to doc they will require a roundtrip to the server and will not work in offline mode pr close ,fix
8183,docsinfra downgrade angulardevkitbuildangular to the is a bug in version that break when trying to use jasmine mock clock related to angularangularcli pr close ,build
8184,docsinfra update size limit pr close ,build
8185,docsinfra upgrade angular to rc and rxjs to pr close ,build
8186,docsinfra upgrade angularcli to rc and angulardevkitbuildangular to rc pr close ,build
8187,docsinfra update size limit pr close ,build
8188,docsinfra upgrade angularmaterial to pr close ,build
8189,docsinfra upgrade angular to and rxjs to pr close ,build
8190,docsinfra upgrade angularcli to pr close ,build
8191,docsinfra remove unused dependency pr close ,build
8192,docsinfra remove the dependency on rxjscompat pr close ,build
8193,docsinfra enable serviceworker in cli config pr close ,build
8194,docsinfra correctly show icon for fetch error when offline pr close ,fix
8195,docsinfra move concept icon to more appropriate location pr close ,refactor
8196,docsinfra remove unused image pr close ,refactor
8197,docsinfra convert aio to use the new service worker aio is currently using a beta version of angularserviceworker since that wa implemented the sw ha been rewritten and released a part of angular this commit update aio to use the latest implementation with an appropriate configuration file that cache the various aio asset in useful way pr close ,feat
8198,docsinfra correctly extract sitemap url deploymenthost ha been assumed to be the host prefix for sitemap url since bfaf but afaict this wa never the case pr close ,test
8199,bazel use value of amdmodule name “ ” directive to convert filenametomodulename in ngcwrapped pr close ,build
8200,ivy allow query for ngcontainer without read option pr close ,fix
8201,ivy inject viewcontainerref for directive on ngcontainer pr close ,fix
8202,element fix typo tranformation transformation pr close ,docs
8203,ivy bridge component style into the component renderer pr close ,feat
8204,bazel fix bazel integration test after rulestypescript update pr close ,build
8205,bazel update to rulestypescript pr close ,build
8206,aio show aiothemed page for unknown resource fix pr close ,fix
8207,docsinfra fix closure warning issue for improper internal flag pr close ,fix
8208,ivy ngtsc directive compilation should use shared constantpool this fix a bug in ngtsc where each directive wa compiled using a separate constantpool this resulted in two issue directive constant were not shared across the file extra statement from directive compilation were dropped instead of added to the file this commit fix both issue and add a test to verify directive is working properly pr close ,fix
8209,bazel remove workaround no longer needed for module name for ngfactory ngsummary file workaround wa added in it wa necessary for ngfactory ngsummary file to have proper amd module name starting with angular when building angular downstream from source using bazel the underlying issue ha been resolved in the compiler and these file now get proper amd module name without the need for this workaround the workaround had an unexpected consequence which is fixed by it removal pr close ,build
8210,compiler update compiler to generate new slot allocation pr close ,fix
8211,ivy support enum value in static resolution this commit add support for enumeration value an enumeration value is now a firstclass return value of the resolver which provides both a reference to the enum type itself and the name of the value from that enum resolving an enum itself return a mapstring enumvalue pr close ,feat
8212,ivy ensure factory statement are emitted correctly pr close ,fix
8213,ivy find all package to be compiled by ngcc pr close ,feat
8214,ivy compile all package format in ngcc pr close ,feat
8215,ivy ngcc is resilient to bad sourcemap comment pr close ,fix
8216,ivy implement esmreflectionhostgetgenericarityofclass pr close ,feat
8217,ivy rename esmreflectionhost to fesmreflectionhost pr close ,refactor
8218,ivy add an integration test for ngcc this commit add an integration test for ngcc which run ngcc against most angular package it doe not yet make any assertion on the result pr close ,test
8219,ivy emit generic type when needed in defs in dts file ivy definition in dts file often reference the type of a class sometimes those class have generic type parameter when this is the case ngtsc need to emit generic type parameter in the dts file usually by passing any pr close ,fix
8220,ivy add support for typing in ngcc pr close ,feat
8221,ivy minor reorganization of ngcc packagetransformertransform in preparation of adding support for transforming dts file pr close ,refactor
8222,ivy support getting the corresponding dts file in ngcc pr close ,feat
8223,ivy clean up ngcc spec pr close ,test
8224,ivy rename spec file to match corresponding source file pr close ,refactor
8225,ivy export ngcc import prefix into constant pr close ,refactor
8226,ivy support custom prefix for import in dtsfiletransformer pr close ,feat
8227,ivy make reflectionhost a parameter of renderer pr close ,refactor
8228,ivy minor refactorings pr close ,refactor
8229,ivy enable processing of esm format in ngcc pr close ,feat
8230,ivy correctly detect class in ngcc esmreflectionhost pr close ,fix
8231,ivy add support for esm and esm in ngcc packageparser since nonflat module format esm esm have different structure than their flat counterpart and since we are operating on j file inside nodemodules we need to configure t to include deeply nested j file by specifying a sufficiently high maxnodemodulejsdepth remains to be determined if this ha any noticeable performance implication pr close ,feat
8232,ivy remove unused arg from ngcc analyzer pr close ,refactor
8233,ivy allow functionexpression to indicate a method declaration in some code format eg e method can actually be function expression for example j function myclass this static method is declared a a function expression myclassstaticmethod function pr close ,fix
8234,ivy implement getdefinitionoffunction on e and e reflection host pr close ,feat
8235,ivy use the reflectionhost to resolve parameter and initializers ngtscs static resolver can evaluate function call where parameter have default value in typescript code these default value live on the function definition but in e code the default value are represented by statement in the function body a new reflectionhost method getdefinitionoffunction abstract over this difference and allows the static reflector to more accurately evaluate e code pr close ,feat
8236,ivy create lviewdata from blueprint pr close ,fix
8237,changelog add v release to main changelogmd fix pr close ,docs
8238,compilercli fix failing test after bad merge pr close ,test
8239,ivy host binding should support arrayobject literal pr close ,fix
8240,router default scroll position restoration to disabled fix fw resolve pr close ,fix
8241,ivy add query inheritance add inheritance handling for the following viewquery contentqueries contentqueriesrefresh pr close ,feat
8242,bazel run buildpackagesdist on rbe pr close ,build
8243,bazel allow and ignore extra args for tsexpectedouts this is needed to let tscompileactions take explicit list of srcs and deps to generate tsc action from another rule this is noop for ngc for now pr close ,refactor
8244,ivy add support to template local ref in the compiler fix pr close ,feat
8245,ivy generate var in component defs pr close ,refactor
8246,ivy use generated consts value to set binding index pr close ,refactor
8247,ivy remove reserveslots instruction pr close ,refactor
8248,bazel remove nosandbox for protractor test since we no longer need this flag to run web test inside a docker container this reverts pr close ,test
8249,ivy add support for local ref on ngtemplate pr close ,feat
8250,router add urlsegment to canload interface canload now defines urlsegment a a second parameter of the function user can store the initial url segment and refer to them later eg to go back to the original url after authentication via routernavigateurlsegments existing code still work a before because the second function parameter doe not have to be defined close pr close ,feat
8251,ivy add ngcc ivy switch provides a runtime and compile time switch for ivy including applicationrefbootstrapmodule this is done by naming the symbol such that ngcc angular compatibility compiler can rename symbol in such a way that running ngcc command will switch the angularcore module from legacy to ivy mode this is done a follows const sometokenprengcc ‘ legacy mode ’ const sometokenpostngcc ‘ ivy mode ’ export somesymbol sometokenprengcc the ngcc will search for any token which end with prengcc and replace it with postngcc this allows the angularcore package to be rewritten to ivy mode post ngcc execution pr close ,feat
8252,ivy separate container into instruction pr close ,refactor
8253,aio update dgenipackages to to fix reference type issue pr close ,build
8254,ivy remove short instruction name a they provide no value pr close ,refactor
8255,docsinfra the buildsh script wa renamed to createimagesh ,docs
8256,docsinfra rename uploadserver to previewserver the server no longer ha file uploaded to it instead it is more accurate to refer to it a dealing with preview of pr ,ci
8257,docsinfra add explicit return type to method ,ci
8258,docsinfra improve previewserver logging ,ci
8259,docsinfra change aio preview server stuff to pull build from circleci previously travis pushed the build artitfacts to the preview server this required u to use jwt to secure the post request from travis to ensure we couldnt receive malicious build jwt ha been deprecated and we are moving our build to circleci this commit rewrite the typescript part of the preview server that handle converting build artifact into hosted preview of the doc ,ci
8260,docsinfra factor out the aiobuildssetup environment variable ,ci
8261,docsinfra move the payloadsize check to the test job ,ci
8262,docsinfra add helper script for running tdd in docker ,ci
8263,docsinfra update the preview server documentation ,docs
8264,docsinfra move aio preview deployment to circleci now instead of pushing the aio build artifact to the preview server from inside a travis job the artifact are built and hosted on the circleci infrastructure the preview server will then pull these down after being triggered by a circleci build webhook ,ci
8265,docsinfra update uploadserver to run on nodejs v ,ci
8266,ivy cleanup the public api for coretesting pr close ,refactor
8267,serviceworker cachecontrol nocache on asset break service worker at the moment cacheage can we undefined when having cachecontrol set to nocache due the mapping method in needtorevalidate close pr close ,fix
8268,core correct spelling error in directive doc link to lifecycle hook wa spelt a lifecycle hoooks pr close ,docs
8269,bazel update to rulestypescript update to tagged ruleswebtesting pr close ,build
8270,ivy add aot handling for bare class with input and output decorator pr close ,feat
8271,ivy consider exported module from other compilation scope pr close ,fix
8272,ivy ensure factory statement are emitted correctly a small bug caused base factory variable statement for component to not be emitted properly at the same time a this is fixed those statement are now emitted a const pr close ,fix
8273,ivy handle the case where no base factory is found when an angular decorated class is inherited it might be the case that the entire inheritance chain actually ha no constructor defined in that event a factory which simply instantiates the type without any argument should be used pr close ,fix
8274,docsinfra remove stability label from api doc pr close ,build
8275,docsinfra clean up api package template pr close ,build
8276,docsinfra include package in api template breadcrumb pr close ,build
8277,docsinfra change breadcrumb delimiter to pr close ,build
8278,ivy activate local reference canonical spec pr close ,test
8279,ivy harmonize container and element elementcontainer signature pr close ,refactor
8280,ivy implement testbed pr close ,feat
8281,ivy misc cleanup pr close ,refactor
8282,ivy add better documentation around debugging ivy test pr close ,docs
8283,ivy add typeof guard around ngdevmode for instance where we can not set it in node pr close ,fix
8284,bazel correct type concatenated to devmodejs pr close ,fix
8285,ivy reordering how root is acquired pr close ,fix
8286,ivy compiler compliance test should support pr close ,test
8287,ivy remove ivy dependency on viewengines resolverenderertype pr close ,fix
8288,aio add async validation chapter close pr close ,docs
8289,ivy query should be restored when view change pr close ,fix
8290,ivy query should not rely on lnode pr close ,refactor
8291,ivy add support for ngcontainer in the compiler pr close ,feat
8292,ivy enable ngfactoryjs generation in g only this turn on generation of ngfactoryjs file when compiling in ivy mode in g theyre not turned on for bazel user a there appears to be a strange interaction with the way our test run in bazel mode pr close ,feat
8293,ivy export ngmodulefactory via rsymbols for core factory when angularcore is compiled by ngtsc a factory file is generated for applicationmodule that is currently invalid because rsymbols doe not export ngmodulefactory this change fix that issue and ensures the generated ngfactory file for angularcore is valid pr close ,fix
8294,ivy ngtsc should pay attention to declaration order when generating the directive property of ngcomponentdef ngtsc need to be conscious of declaration order if a directive being written into the array is declarated after the component currently being compiled then the entire directive array need to be wrapped in a closure this commit fix ngtsc to pay attention to such ordering issue within directive array pr close ,fix
8295,ivy add missing exportas field to ngdirectivedef this commit includes the missing exportas field from directive and propagates it into the ngdirectivedef pr close ,fix
8296,ivy enable inheritance of factory function in definition this commit creates an api for factory function which allows them to be inherited from one another to do so it differentiates between the factory function a a wrapper for a constructor and the factory function in nginjectabledefs which is determined by a default provider the new form is factory t new t sometypeinjectdep injectdep the t parameter allows for constructor inheritance a subclass with no declared constructor inherits it constructor from the superclass with the t parameter a subclass can call the superclass factory function and use it to create an instance of the subclass for injectables with configured provider the factory function is of the form factory t t constructorinjectt provider where constructorinjectt creates an instance of t using the naturally declared constructor of the type and where provider creates an instance of the base type using the special declared provider on injectable pr close ,feat
8297,ivy use a single constant pool per source file previously ngtsc used a new constantpool for each decorator compilation this could result in collision between constant in the toplevel scope now ngtsc us a single constantpool for each source file being compiled and merges the constant statement into the file after the import section pr close ,fix
8298,ivy add test for ngcontainer and shallow query pr close ,test
8299,ivy prevent ngdevmode from getting removed too early pr close ,fix
8300,bazel add skydoc generation pr close ,docs
8301,core add dobootstrap interface close pr close ,feat
8302,aio angular course in portuguese ,docs
8303,ivy project ngcontainer node pr close ,fix
8304,compilercli use the oldprogram option in watch mode the performcompilation is always called with an undefined oldprogram option even in watch mode this wa regression introduced in partial fix discovered in pr close ,fix
8305,ivy support ngcontainer inside another ngcontainer pr close ,fix
8306,ivy fix bug with bananainabox expression in nested template inside of a nested template an attempt to generate code for a banana inabox expression would cause a crash in the asttoirvisitor a it wa not handling the case where a write would be generated to a local variable this change support such a mode of operation pr close ,fix
8307,upgrade reduce flakyness by increasing timeout pr close ,test
8308,upgrade improve internal angularjs typing pr close ,refactor
8309,upgrade use correct source in buildbazel pr close ,build
8310,core in testabilitywhenstable update callback pas more complete data about task when building a list of pending task for caller of whenstable testability will copy data about the task into a new object in order to avoid leaking reference to task this change copy more property from task into the list of pending task a well a a reference to taskdata to give caller more information about the task that are pending specifically this also copy runcount and task id which are needed in order for caller to know when a given task is repeating pr close ,fix
8311,ivy support ngcontainer at the root of a view with delayed insertion pr close ,fix
8312,core clarify supported viewchild selector pr close ,docs
8313,core fix treeshakable spelling pr close ,docs
8314,fixed example unit test for error catching the example unit test should test the service when the backend application is not available by providing a mock error response although the test will fail a the mock response from the server is valid it doe not simulate a error response but valid response with an error status this merge request fix this issue by replacing mockresponse with mockerror this pr resolve issue pr close ,docs
8315,router take base uri into account in setuplocationsync normalize the full url including the base uri before passing it to routernavigatebyurl fix pr close ,fix
8316,aio add made with angular pr close ,docs
8317,ivy improve error message for the compiler compliance test before expected to find feature import a i from angularcore import directive input from angularcore after failed to find template after componentfactory return new mycomponent in import a i from angularcore import directive input from angularcore pr close ,test
8318,ivy misc cleanup pr close ,refactor
8319,ivy make all directive public by default to match the view engine behavior we should make this configurable so that the node injector is tree shaken when directive do not need to be published pr close ,refactor
8320,bazel dont rely on language target to downlevel for loop pr close ,refactor
8321,docsinfra log doc example ee spec path to aid debugging it seems that occasionally the sharding of doc example ee test get messed up resulting in some test not being run this can cause ci to be green on a pr when they shouldnt because the failing test didnt run at all it is unclear under what circumstance this happens so printing the path of found ee spec will help debug the issue when it come up again pr close ,test
8322,ivy do not mention lviewdata in public documentation pr close ,refactor
8323,ivy remove unnecessary common import pr close ,test
8324,common fix short param name pr close ,style
8325,common fix content error pr close ,docs
8326,ivy run compiler compliance test without rebuilding corecommon previously the compiler compliance test ran and built test code with real dependency on angularcore and angularcommon this meant that any change to the compiler would result in long rebuild process for test to rerun this change remove those dependency and cause test code to be built against the fakecore stub of angularcore that the ngtsc test use this change also remove the dependency on angularcommon entirely a locality mean it possible to reference ngif without needing to link to an implementation pr close ,test
8327,ivy execute the optional begin and end method of the rendererfactory this is required to ie flush animation when using a renderer rfbegin and rfend around the change detection pr close ,fix
8328,ivy generate ngfactory stub if requested existing bootstrap code in the wild depends on the existence of ngfactory file which ivy doe not need this commit add the capability in ngtsc to generate ngfactory file which bridge existing bootstrap code with ivy this is an initial step remaining work includes complying with the compiler option to specify a generated file directory a well a presumably testing in g pr close ,feat
8329,ivy add bound proerties name to template before this change bound property would not be used when matching directive at runtime that is ngtemplate ngifcondngtemplate would not trigger the ngif directive pr close ,fix
8330,ivy fix inline template binding parsing pr close ,fix
8331,ivy add test for attribute and bound attribute to the tpl transform pr close ,test
8332,ivy use devmodeequal in no change mode to avoid the unfamous error expression ha changed after it wa checked pr close ,fix
8333,ivy content query result should be available in content hook pr close ,fix
8334,ivy support ngcontainer a a child of an already inserted view pr close ,feat
8335,ivy add basic support for ngcontainer this commit add basic support for ngcontainer most of the functionality should work a long a ngcontainer is a child of a regular element pr close ,feat
8336,core fix test for uninitialized output error pr close ,fix
8337,core throw error message when output not initialized close pr close ,fix
8338,form ngform element selector ha been deprecated in favor of ngform this ha been deprecated to keep selector consistent with other core angular selector a element selector are in kebabcase now deprecated ngform myformngform after ngform myformngform you can also choose to supress this warning by providing a config for formsmodule during import t import formsmodulewithconfigwarnondeprecatedngformselector never close pr close ,refactor
8339,common tokenextractor should extend httpxsrftokenextractor in xsrf spec pr close ,test
8340,common remove unused import in xsrf spec pr close ,test
8341,docsinfra add note according to symlink problem doc add note according to symlink problem close docsdocsinfra add section developing on window merge remotetracking branch originaioreadme into aioreadme docsdocsinfra add information about admin right docsdocsinfra add hint docsdocsinfra change to link pr close ,docs
8342,element add section about custom element typing in element guide pr close ,docs
8343,element add link to full example in element guide pr close ,docs
8344,element remove unnecessary whitespace in element guide pr close ,docs
8345,docsinfra support sending google analytics event pr close ,feat
8346,ivy api doc tweak pr close ,docs
8347,upgrade run test against angularjs vx a well pr close ,test
8348,bazel entry point file couldnt be resolved tsapiguardian when using tsapiguardian on window the input file cant be found due to wrong normalized path delimiters pr close ,build
8349,aio update kendo ui description in resourcejson pr close ,docs
8350,core remove experimental tag pr close ,docs
8351,core remove experimental tag remove experimental note on appinitializer pr close ,docs
8352,aio add kevin yang to gde resource add file via upload pr close ,docs
8353,compilercli correct realpath to realpath the optional property on tscompilerhost is called realpath lower case not realpath lower camel case it is not clear to me what the impact of this is but the author intent wa clearly to override realpath pr close ,fix
8354,router clarify scroll position wording pr close ,docs
8355,core replace reflectiveinjector example with static injector example pr close ,docs
8356,animation do not use short parameter name pr close ,refactor
8357,changelog remove reverted feature entry pr close ,docs
8358,changelog remove duplicate entry pr close ,docs
8359,bazel fix typo in protractor test target definition pr close ,build
8360,ivy walk declaration view in listener pr close ,fix
8361,ivy support inheriting inputoutput from bare base class pr close ,feat
8362,core remove withbody from public testing api pr close ,refactor
8363,ivy default to ngdevmode true before the ngdevmode had to be set explicitly or it would throw an exception at runtime this change it so that if ngdevmodu is undefined than we default to ngdevmode true in other word unless the developer ha explicitly asked to make a prodution build by setting ngdevmode false a compilation constant the default is ngdevmode true this also fix a minor bug where the setup code would read globalngdevmode but all other code would read globalngdevmode this would cause issue with closure compiler since the reading of the ngdevmode must be consistent pr close ,fix
8364,aio add short description for entrycomponents pr close ,docs
8365,form fix incorrect variable naming in the comment pr close ,docs
8366,bazel update to rulesnodejs and latest rulestypescript pr close ,build
8367,docsinfra fix topnav layout for smaller screen pr close ,docs
8368,ivy support change detection on the root view pr close ,feat
8369,ivy misc pr close ,refactor
8370,ivy implement the getters of viewcontainerref breaking change viewcontainerrefparentinjector is deprecated without replacement pr close ,feat
8371,compiler add original placeholder value on extracted xmb update xmb placeholdersph to include the original value on top of an example placeholder can by definition have one exampleex tag and a text node the text node is used by tc a the original value from the placeholder while the example should represent a dummy value for example ph namepetexgopherex petname ph this change make sure that we have the original text but it doe not make sure that the example is correct the example ha the same wrong behavior of showing the interpolation text rather than a useful example no breaking change but tool that depend on the previous behavior and dont consider the full xmb definition may fail to parse the xmb fix b pr close ,feat
8372,aio add strongbrew to the trainer list pr close ,docs
8373,ivy convert context code into a treeshakable instruction pr close ,fix
8374,compiler update compiler to flatten nested template fns pr close ,fix
8375,ivy flatten template fns for nested view pr close ,fix
8376,ivy element and elementstart retuns void use loadelement to load an element when needed in spec pr close ,refactor
8377,ivy update spec to make use of the element instruction pr close ,refactor
8378,bazel fix typo in comment pr close ,build
8379,ivy do not deep import from ngtsc into ngcc pr close ,refactor
8380,ivy implement initial ngcc package transformer pr close ,feat
8381,ivy implement esm and esm ngcc file renderers pr close ,feat
8382,ivy implement ngcc analyzer pr close ,feat
8383,ivy implement esm and esm file parser pr close ,feat
8384,ivy implement esm and esm reflection host pr close ,feat
8385,ivy implement ngcc specific version of makeprogram pr close ,test
8386,ivy ngcc project skeleton pr close ,feat
8387,ivy allow makeprogram to be more configurable this support use case needed by ngcc where the compilation need to be configured for javascript differently to normal typescript pr close ,test
8388,ivy allow functionexpression to indicate a method declaration in some code format eg e method can actually be function expression for example j function myclass this static method is declared a a function expression myclassstaticmethod function pr close ,fix
8389,ivy allow importmanager to have configurable prefix the ngcc compiler will want to specify it own prefix when rendering definition pr close ,refactor
8390,ivy make ngtsc classmember node and declaration optional not all code format have associated node and declaration for class member pr close ,fix
8391,ivy typescriptreflectionhostisclass can not be a type discriminator the reflectionhost interface that is being implemented only expects a return value of boolean moreover if you want to extend this class to support nonts code format eg e the result of this call returning true doe not mean that the node is a classdeclaration it could be a variabledeclaration pr close ,refactor
8392,ivy remove underscore from typescriptreflectionhostgetdeclarationofsymbol the linter complains that nonprivate member must be marked with internal if they start with an underscore pr close ,style
8393,ivy fix ci failure pr close ,build
8394,ivy use element where applicable in dispec for future ref search elementstartsnselementend replace element pr close ,refactor
8395,ivy use bit operation in node injector pr close ,refactor
8396,ivy simplify node injector import pr close ,refactor
8397,ivy walk the node injector tree and then the module injector tree directiveinjector is used to inject anything in the directive component pipe factory so adding injectiontokent a a supported token type getorcreateinjectable should search first in the node injector tree and then in the module injector tree wa either or before the pr pr close ,fix
8398,ivy clarify injector api doc pr close ,docs
8399,compilercli update tsickle dependency to support typescript the original range doe not match which enables support for typescript close pr close ,build
8400,docsinfra allow notification bar to show arbitrary content this change generalises the notification bar rendering to allow more complex content to be displayed now you must provide the full html of the notification message when using aionotification also you can control whether clicking the content trigger the notification to close or not this will support the new notification specified in other item of pr close ,feat
8401,docsinfra remove unnecessary call to consolelog pr close ,style
8402,bazel add comment about angular bazel rule api reexport from indexbzl pr close ,build
8403,bazel add comment for patchtypes workaround pr close ,build
8404,bazel show bazel progress in circleci to prevent m timeout with no output pr close ,build
8405,bazel use bazel managed nodemodules for downstream angular from source build support pr close ,build
8406,router removed unneeded trailing text pr close ,docs
8407,ivy dont crash in listlazyroutes this commit replaces the not implemented error when calling listlazyroutes with an empty result which will allow testing in the cli before listlazyroutes is implemented pr close ,fix
8408,ivy wait for preanalyze promise in loadngstructureasync loadngstructureasync for ngtsc ha a bug where it return a promisepromise instead of awaiting the entire array of promise this commit us promiseall to await the whole set pr close ,fix
8409,bazel allow compilestrategy to be privately imported compilestrategy is used to decide whether to build angular code using ngc legacy or ngtsc local in order for g build rule to switch properly and allow testing of ivy in g they need to import this function this commit remove the prefix which allows the function to be imported pr close ,fix
8410,ivy dont use a custom tscompilerhost for ngtsc ngtsc used to have a custom tscompilerhost which delegated to the plain tscompilerhost there no need for this wrapper class and it cause issue with cli integration so delete it pr close ,fix
8411,ivy allow relative import of dts file ngtsc used to assume that all dts dependency that is third party package were imported via an absolute module path it turn out this assumption isnt valid some build tool allow relative import of other compilation unit in the absolute case ngtsc assumes and still doe that all referenced type are available through the entrypoint from which an ngmodule wa imported this commit add support for relative import in which case ngtsc will use relative path resolution to determine the import pr close ,fix
8412,ivy correctly write crossfile reference there is a bug in the existing handling for crossfile reference suppose there are two file modulets and componentts componentts declares two component one of which us the other in the ivy model this mean the component will get a directive reference to the other in it definecomponent call that reference is generated by looking at the declared component of the module in modulets however the way ngtsc track this reference it end up comparing the identifier of the component in modulets with the componentts file detecting theyre not in the same file and generating a relative import this commit change ngtsc to track all identifier of a reference including the one by which it is declared this allows toexpression to correctly decide that a local reference is okay in componentts pr close ,fix
8413,ivy force new import for dts file when ngtsc encounter a reference to a type for example a component type listed in an ngmodule declaration array it trace the import of that type and attempt to determine the best way to refer to it in the event the type is defined in the same file where a reference is being generated the identifier of the type is used if the type wa imported ngtsc ha a choice it can use the identifier from the original import or it can write a new import to the module where the type came from ngtsc ha a bug currently when it elect to rely on the user import when writing a dts file the user import may have been elided a the type wa not referred to from the type side of the program thus in dts file ngtsc must always assume the import may not exist and generate a new one in j output the import is guaranteed to still exist so it preferable for ngtsc to continue using the existing import if one is available this commit change how angularcompiler writes type definition and allows it to use a different expression to write a type definition than is used to write the value this allows ngtsc to specify that type in type definition should always be imported a corresponding change to the staticallyresolve reference system allows the choice of which type of import to use when generating an expression from a reference pr close ,fix
8414,ivy resolve forwardref for query contentchildren and viewchildren can contain a forwardref to a type this commit allows ngtsc to unwrap the forward reference and deal with the node inside it includes two mode of support for forward reference resolution a foreign function resolver which understands deeply nested forward reference in expression that are being statically evaluated and an unwrapforwardref function which deal only with toplevel node both will be useful in the future but for now only unwrapforwardref is used pr close ,feat
8415,router fix lastpathindex in deeply nested empty path pr close ,fix
8416,ivy update compiler with latest runtime for view query pr close ,fix
8417,animation typo fix in the comment pr close ,docs
8418,ivy support reorder embedded template pr close ,fix
8419,ivy split ininterpolation into function pr close ,refactor
8420,ivy cleanup runtime in code fix pr close ,refactor
8421,bazel allow no sandbox for protractor test it specifies nosandbox flag when running the protractor test a root this is needed for running the test inside a docker container pr close ,test
8422,bazel fix broken travis ci pr close ,build
8423,bazel modulesbenchmarkssrclargetablerenderperf bazel protractor test pr close ,build
8424,ivy support viewcontainerrefcreatecomponent pr close ,feat
8425,aio cleanup aalert callout subsection use and author style pr close ,docs
8426,ivy bridge compile instruction to include sanitization helper pr close ,feat
8427,ivy update content query compilation to latest runtime pr close ,fix
8428,docsinfra ensure all api heading are sentence cased close pr close ,build
8429,core stop reusing provider definition across ngmoduleref instance fix instantiating a ngmoduleref from ngmodulefactory reuses the ngmoduledefinition if it is already present however the ngmoduledefinition ha a provider array which modified when tree shakable provider are instantiated this corrupts the provider definition the next time the same factory is used to create a new ngmoduleref two provider definition can end up with the same index anf the injector could potentially return a completely wrong object for a provider token this scenario is more likely on the server where the same ngmodulefactory is reused across request the fix clone the cached ngmoduledefinition so that any tree shakable provider added later do not affect the cached copy pr close ,fix
8430,serviceworker dont include sourcemappingurl in ngswworker fix pr close ,fix
8431,ivy type in dts file should account for generic ivy definition type have a generic type which specifies the return type of the factory function for example static ngdirectivedefngforof ngforngforof however in this case ngforof itself ha a type parameter t thus writing the above is incorrect this commit modifies ngtsc to understand the genericness of ngforof and to write the following static ngdirectivedefngforofany ngforngforof pr close ,fix
8432,ivy export injectelementref pr close ,fix
8433,ivy use typeof and never for type metadata previously ngtsc would use a tuple of class type for listing metadata in dts file for example an ngmodules declaration might be represented with the type ngif ngforof ngclass if the module had no declaration an empty tuple would be produced this ha two problem if the class type ha generic type parameter typescript will complain that theyre not provided the empty tuple type is not actually legal this commit address both problem class type are now represented using the typeof operator so the above declaration would be represented a typeof ngif typeof ngforof typeof ngclass since typeof operates on a value it doesnt require generic type argument instead of an empty tuple never is used to indicate no metadata pr close ,fix
8434,ivy correctly export all def symbol a private previously some of the def symbol were not exported or were exported a public api this commit ensures every definition type is in the private export namespace pr close ,fix
8435,ivy run the compiler compliance test against ngtsc this commit move the compiler compliance test into compilercli and us ngtsc to run them instead of the custom compilation pipeline used before testing against ngtsc allows for validation of the real compiler output this commit also fix a few small issue that prevented the test from passing pr close ,refactor
8436,ivy wrap nonstatement assignment expression in parenthesis previously when translating an assignment expression eg x the translator would always print the statement a x y however if the expression is included in a larger expression x y z the translator would print x y z without regard for the outer expression context now the translator understands when it printing an expression statement x y v an expression in a larger context x y z and encapsulates the latter in parenthesis pr close ,fix
8437,ivy reference track the identifier they were discovered under previously reference had the concept of an identifier but would not properly detect whether the identifier should be used or not when generating an expression this change fix that logic additionally now whenever an identifier resolve to a reference even one imported from another module a part of resolving an expression the reference is updated to use that identifier this ensures that for a class foo declared in foot but referenced in an expression in bart the reference returned includes the identifier from bart meaning that writing an expression in bart for the reference will not generate an import pr close ,fix
8438,ivy detect ngonchanges a a nonstatic method previously ngtsc had a bug where it would only detect the presence of ngonchanges a a static method this commit flip the condition and only recognizes ngonchanges a a nonstatic method pr close ,fix
8439,ivy port the static resolver to use the reflectionhost previously the static resolver did it own interpretation of statement in the typescript ast which only functioned on typescript code e code in particular would not work with the resolver a it had hardcoded assumption about ast structure this commit change the resolver to use a reflectionhost instead which abstract away understanding of the structural side of the ast it add new method to the reflectionhost in support of this functionality getdeclarationofidentifier getexportsofmodule isclass pr close ,feat
8440,ivy support host binding in ngtsc this change add support for host binding to ngtsc and par them both from decorator and from the metadata in the toplevel annotation pr close ,feat
8441,ivy compile query in ngtsc this commit add support for contentchildren and viewchildren in ngtsc previously query were ignored pr close ,feat
8442,ivy fix a couple issue with inputoutput compilation pr close ,fix
8443,ivy ignore import without nginjectordef in rinjector nginjectordefimports is generated from ngmoduleimports plus ngmoduleexports a problem arises a a result because ngmodule export contain not only other module which will have nginjectordef field but component directive and pipe a well because of locality it difficult for the compiler to filter these out at build time it not impossible but for now filtering them out at runtime will allow testing of the compiler against complex application pr close ,fix
8444,ivy export ngmodulefactory adapter pr close ,fix
8445,ivy nginjectordef should copy full importsexports node ngmodules get compiled to two field ngmoduledef and nginjectordef both field contain import a both selector scope and injector have the concept of composed unit of configuration previously these field were generated by static resolution of import and export in metadata support for modulewithproviders requires they be generated differently ngmoduledefs importsexports are generated a resolved list of type whereas nginjectordefs import should reflect the raw expression that the developer wrote in the metadata this change modifies the ngmodule handler and properly copy raw node for the import and export into the nginjectordef pr close ,fix
8446,ivy properly inject all special token type previously ngtsc had a few bug handling special token type injector wa not properly translated to injector changedetectorref wa not injected via injectchangedetectorref this commit fix these two bug and also add a test to ensure they continue to work correctly pr close ,fix
8447,ivy export inheritdefinitionfeature pr close ,fix
8448,ivy statically resolve template expression this commit add support for template substitution expression for ngtsc static resolution pr close ,feat
8449,ivy fix an unnecessarily deep import pr close ,refactor
8450,ivy selector side of modulewithproviders via type metadata within an ngmodule it common to include in the import a call to a modulewithproviders function for example routermoduleforroot the old ngc compiler wa able to handle this pattern because it had global knowledge of metadata of not only the input compilation unit but also all dependency the ngtsc compiler for ivy doesnt have this knowledge so the pattern of modulewithproviders function is more difficult ngtsc must be able to determine which module is imported via the function in order to expand the selector scope and properly treeshake directive and pipe this commit implement a solution to this problem by adding a type parameter to modulewithproviders through which the actual module type can be passed between compilation unit the provider side isnt a problem because the import are always copied directly to the nginjectordef pr close ,feat
8451,ivy unwrap parenthesized or cast expression for metadata metadata in ivy must be literal for example ngmodule is legal whereas const meta ngmodulemeta is not however some code contains additional superfluous parenthesis ngmodule it is desirable that ngtsc accept this form of literal object pr close ,fix
8452,ivy allow building router with ngtsc this commit add the ivylocal tag to packagesrouter since the router depends on packagesupgrade it make that package compatible with ngtsc a well pr close ,fix
8453,ivy handle readkeyexpr code generation this implement a missing expression type in ngtsc code generation that of bracket access to an object property pr close ,fix
8454,docsinfra fix table header layout in api page pr close ,fix
8455,platformwebworker avoid flake due to existing platformref pr close ,test
8456,ivy invoke lifecycle hook of directive placed on ngtemplate pr close ,fix
8457,bazel turn on preservesymlinks this change turn on preservesymlinks in nodejs to verify hermeticity of the angular build breaking change use of angularbazel rule now requires calling ngsetupworkspace in your workspace file for example localrepository name angular path nodemodulesangularbazel loadangularindexbzl ngsetupworkspace ngsetupworkspace pr close ,build
8458,docsinfra add support for example of type element example using angularelements need to transpile to e for custom element to work on browser that natively support them alternatively a polyfill would need to be loaded for now changing the transpilation target to e is the simplest solution pr close ,build
8459,animation internal must use jsdoc tag this change fix up several comment that accidentally used the jsdoc tag internal in regular block comment instead of this prevents a problem with closure compiler that balk at tag occuring in regular block comment because it assumes they were intended to be tag for the compiler when occuring in jsdoc tsickle escape the tag so they do not cause problem pr close ,fix
8460,ivy properly apply class class classfoo and attrclass binding pr close ,feat
8461,compiler inextractor now output the correct source file name for noninline template noninline template used to ouput the path to the component t file instead of the path to the original html file inline template keep the same behavior fix pr close ,fix
8462,docsinfra enable filtering by package on api list page pr close ,feat
8463,docsinfra implement the package api template pr close ,build
8464,ivy run render test with testsh pr close ,test
8465,aio add angular training to list of training company pr close ,docs
8466,form update form builder api reference pr close ,docs
8467,ivy support zeroargument ngmodule invocation it possible to declare an argumentless ngmodule ngmodule export class foo update the ngmodule compiler to support this usage pr close ,fix
8468,ivy animation should not be a hard error yet previously the ivy template compiler would throw on encountering an animation binding eg anim this is unneccessary and precludes testing existing code this commit change the error to a warning pr close ,fix
8469,ivy strip newlines from selector in dts file when writing selector a string literal type in dts file strip newlines to avoid generating invalid code newlines carry no meaning in selector anyway pr close ,fix
8470,ivy enable ngtsc aot build for a few package turn on aot build using ngtsc for animation common compiler compilercli form platformbrowser pr close ,build
8471,ivy remove spurious comma in ngtscbuilt dts file on accident a comma wa emitted between import when generating dts file this commit remove it pr close ,fix
8472,ivy def type are private ɵ symbol on accident a few of the definition type were emitted a public api symbol much of the ivy api surface is still prefixed with ɵ indicating it a private api the definition type should be private for now pr close ,fix
8473,ivy give ngtsc a basic understanding of modulewithproviders this commit change the ngmodule provider to understand that sometimes an import will resolve to an object instead of a type and that object could be of the modulewithproviders type in that case the ngmodule property is read and it value used instead this still will not handle modulewithproviders reference across compilation unit that work is coming in a future pr pr close ,feat
8474,ivy generate a type parameter for injectordef injectordef is parameterized on the type of the injector configuration class eg the ngmodule decorated type previously this parameter wa not included when generating dts file that contained injectordefs pr close ,fix
8475,common run commonhttp test with bazel angularcommonhttp had test which were not executed in bazel this commit add a buildbazel file and ensures the test pas pr close ,test
8476,bazel try removing gazelle pr close ,build
8477,bazel protractorwebtestsuite for release pr close ,feat
8478,bazel initial commit of protractorwebtestsuite coauthoredby andrew z allen meandrewzallencom pr close ,feat
8479,ivy remove content query creation from directive factory pr close ,refactor
8480,router add urlupdatestrategy allow updating the browser url at the beginning of navigation fix pr close ,feat
8481,bazel undo temporary dependency on unleased t bazel rule point to a proper new release version pr close ,build
8482,common format fractional second fix a bug introduced in pr close ,fix
8483,form update api reference for form validators pr close ,docs
8484,form added missing backtick fixed trivial markdown problem with a missing backtick pr close ,docs
8485,aio unified string chaining pr close ,docs
8486,router add ability to recover from malformed url fix pr close ,fix
8487,common do not round factional second fix pr close ,fix
8488,platformbrowser workaround wrong import path generated by ngc for document ,fix
8489,ivy replace pnextorparent with tnode prop pr close ,refactor
8490,ivy support projecting into dynamic view pr close ,fix
8491,compilercli use typescript to resolve module for metadata the current module resolution simply attache t to the importexport path which doe not work if the path is using node commonjs behavior to resolve to an indexts file this patch us typescript module resolution logic and will attempt to load the original typescript file if this resolution return a j or dts file pr close ,fix
8492,aio unified consolelog single string style pr close ,docs
8493,platformbrowser mark meta and title service a tree shakable provider this let service that use meta and title service to be tree shakable and provided in root pr close ,fix
8494,core mark ngmodule a not the root if approot is set to false tree shakable provider use the approot token to determine where to attach themselves approot get set on ngmodule with browsermodule irrespective of whether it is actually the rootex in case of ssr app where the shell app is first bootstrapped without browsermodule being the root module this change allows a ngmodule with browsermodule to explicitly mark itself a not the root by setting approot token to false this allows tree shakable provider to be attached to the right rott module pr close ,fix
8495,ivy correctly resolve array property access pr close ,fix
8496,common use correct currency format for locale deat fix pr close ,fix
8497,languageservice do not overwrite native reflect fix pr close ,fix
8498,ivy properly apply style style stylefoo and attrstyle binding pr close ,feat
8499,serviceworker avoid network request when looking up hashed resource in cache pr close ,fix
8500,serviceworker avoid unnecessary operation and remove unused code pr close ,refactor
8501,serviceworker add support for in sw config globbing the globbing is used in the following section assetgroups resource filesversionedfiles assetgroups resource url datagroups url navigationurls query params are ignored for filesversionedfiles and navigationurls but they are still taken into account for assetgroupsdatagroups url to avoid a breaking change is matched literally for these pattern pr close ,feat
8502,bazel update to rulenodejs pr close ,build
8503,ivy pipe are pure by default pr close ,fix
8504,changelog correct inaccuracy pr close ,docs
8505,common fix in the documentation of put pr close ,docs
8506,aio added a link to angular zero online course traditional chinese pr close ,docs
8507,router add paramsinheritancestrategy documentation pr close ,docs
8508,ivy aot support for compilation of pipe this commit add support to ngtsc for compilation of the pipe annotation including support for pipe in ngmodule scope pr close ,feat
8509,ivy jit support for compilation of pipe add support for compiling pipe in jit mode along with test to verify that certain aspect of compilation are correct pr close ,feat
8510,ivy support pipe compilation from local metadata this update the rpipecompiler to not depend on global analysis and to produce ngpipedef instruction in the same way that the other compiler do it a precursor to jit and aot implementation of pipe compilation pr close ,feat
8511,ivy export the true componentdefdirectivedef type not internal this wa a bug introduced in a previous commit pr close ,fix
8512,ivy support templateurl for ngtsc this commit add support for templateurl in component template within ngtsc the compilation pipeline is split into sync and async version where asynchronous compilation invokes a special preanalyze phase of analysis the preanalyze phase can optionally return a promise which will delay compilation until it resolve a resourceloader interface is used to resolve templateurls to template string and can return result either synchronously or asynchronously during sync compilation it is an error if the resourceloader return a promise two resourceloader implementation are provided one us f to read resource directly from disk and is chosen if the compilerhost doesnt provide a readresource method the other wrap the readresource method from compilerhost if it provided pr close ,feat
8513,core use addcustomequalitytester instead of overriding toequal this propagates other custom equality tester added by user additionally if an angular project is using jasmine it will allow jasmine custom object differ to print out pretty test error message fix pr close ,fix
8514,bazel update to latest rulestypescript pr close ,build
8515,aio update contributor entry pr close ,docs
8516,ivy correct position for reprojected container pr close ,fix
8517,core add support for shadowdom v add a new viewencapsulationshadowdom option that us the v shadow dom api to provide style encapsulation pr close ,feat
8518,ivy remove pchild from lnode pr close ,refactor
8519,common properly update collection reference in ngforof close pr close ,fix
8520,core rephrase doc for injectorget pr close ,docs
8521,ivy add inheritancedefinitionfeature to support directive inheritance add inheritancedefinitionfeature to ivy ensures that lifecycle hook are inherited from super class whether they are defined a directive or not directive can not inherit from component component can inherit from directive or component ensures that input output and host binding are inherited ensures that super class feature are run pr close ,feat
8522,platformbrowser add missing deps for hammergesturesplugin pr close ,fix
8523,docsinfra render short description of parameter in api doc pr close ,build
8524,ivy support projecting container into container pr close ,fix
8525,docsinfra use clean packagejson template when generating zip close pr close ,fix
8526,ivy support resource resolution in jit mode used to resolve resource url on component when used with jit compilation component selector mycomp templateurl mycomphtml this requires asynchronous resolution class mycomponnent calling rendercomponent will fail because mycomponents compenenttemplateurl need to be resolved because rendercomponent is synchronous process rendercomponentmycomponent calling resolvecomponentresources will resolve compenenttemplateurl into compenenttemplate which would allow rendercomponent to proceed in synchronous manner use browser fetch function a the default resource resolution strategy resolvecomponentresourcesfetchthen after resolution all url have been converted into string rendercomponentmycomponent pr close ,feat
8527,core add support for using asyncawait with jasmine example it awaitasync dosomething await asyncfn dosomethingafter pr close ,feat
8528,ivy todo app only includes reflectmetadata in jit mode previously the todo app imported reflectmetadata since it is a dependency of jit and the todo app test run in both jit and aot mode however the code doesnt get treeshaken away in aot mode this change add a target packagescoretestbundlingutilreflectmetadata which depending on whether the compile flag is in jit or aot mode either includes reflectmetadata or is a noop not including reflectmetadata get the compressed todo bundle down to kb pr close ,test
8529,ivy move helloworld and todo fully to ngtsc ngtsc is sufficiently capable now that it can compile helloworld and todo and achieve equivalent result to ngc in ivy global mode bundle size helloworld kb todo kb pr close ,test
8530,compiler fix a few nontreeshakeable code pattern this change make angularcompiler more treeshakeable by changing an enum to a const enum and by getting rid of a toplevel map that the treeshaker wa seeing a a reference which caused ridentifiers to be retained this drop a few hundred byte of j from treeshaken ngtsc compiled apps pr close ,fix
8531,ivy symbol extractor should handle different compile option the jsexpectedsymboltest implementation extract symbol name from a rollup iife bundle previously it only handled the case with a simple var bundle statement sometimes rollup produce a more complex bundle where the bundle variable is not the only toplevel variable declared in the same declaration statement this commit patch the symbol exctractor to support this more complex case additionally when the symbol test fails it print a command to accept the symbol diff this command need to include the definecompile flag to ensure the diff is applied in the same compile mode a the test wa run pr close ,test
8532,ivy dummy handler for pipe to cause decorator removal currently ngtsc doe not compile pipe this ha a side effect of not removing the pipe decorator this add a dummy decoratorhandler that compiles pipe into an empty ngpipedef eventually this will be replaced with a full implementation but for now this solution allows compield code to be treeshaken properly pr close ,feat
8533,ivy run latest buildoptimizer on ngtsc compiled code previously the repo wa depending on an old version of build optimizer this change update to the latest an rc release in the cli package additionally this change the behavior of ngrollupbundle to apply the optimizer to ngtsc compiled code and configures it to treat the angularcompiler package a sideeffectfree this result in a substantial size reduction of ngtsc compiled code pr close ,build
8534,ivy strip all angular decorator in compiled class previously ngtsc removed the classlevel decorator component etc but left all the ancillary decorator input optional etc this change the transform to descend into the member of decorated class and remove any angular decorator not just the classlevel one pr close ,feat
8535,ivy able to compile angularcore with ngtsc angularcore is unique in that it defines the angular decorator component directive etc ordinarily ngtsc look for import from angularcore in order to identify these decorator clearly within core itself this strategy doesnt work instead a special constant itsjustangular is declared within a known file in angularcore if ngtsc see this constant it know core is being compiled and can ignore the import when evaluating decorator additionally when compiling decorator ngtsc will often write an import to angularcore for needed symbol however angularcore can not import itself this change creates a module within core to export all the symbol needed to compile it and add intelligence within ngtsc to write relative import to that module instead of absolute import to angularcore pr close ,feat
8536,common use correct icu plural for locale mk pr close ,fix
8537,upgrade fix example for strictpropertyinitialization and remove internal comment pr close pr close ,refactor
8538,aio tech edits to upgradelazy pr close pr close ,docs
8539,upgrade use a class for upgraded service this make the resulting use in angular more ideomatic since we can just use the class type a the injection indicator pr close pr close ,docs
8540,upgrade fix suborderedlist syntax we must always use etc to indicate ordered list even for sublists we can change the sublist to display a a b etc via cs pr close pr close ,docs
8541,upgrade add guide about downgrademodule pr close pr close ,docs
8542,upgrade add api doc for downgrademodule pr close pr close ,docs
8543,upgrade add api doc for propagatedigest pr close pr close ,docs
8544,upgrade update api doc for upgradestatic pr close pr close ,docs
8545,changelog remove repeating block pr close ,docs
8546,ivy report result to appropriate content query pr close ,fix
8547,ivy remove dynamicparent from lnode pr close ,refactor
8548,aio fix adding to template driven form pr close ,docs
8549,aio fix issue suggested by brandon pr close ,docs
8550,aio fix issue suggested by kara pr close ,docs
8551,aio address pr review issue pr close ,docs
8552,aio add cross field validation example pr close ,docs
8553,docsinfra support hiding constructor of injectable class class that are injectable often have constructor that should not be called by the application developer it is the responsibility of the injector to instantiate the class and the constructor often contains private implementation detail that may need to change this commit remove constructor from the doc for api item that are both a marked with an injectable decorator eg injectable directive component pipe and b have no constructor description this second rule allows the developer to override the removal if there is something useful to say about the constructor note that normal class such a angimationshttpheaders do not have their constructor removed despite at this time having no description pr close ,build
8554,ivy use closuresafe field name for jit of nginjectabledef pr close ,fix
8555,ivy generate nginjectordef for ngmodule in jit mode this commit take advantage of the angularcompiler work for nginjectordef in aot mode in order to generate the same definition in jit mode pr close ,feat
8556,ivy generate nginjectordef for ngmodule in aot mode this change generates nginjectordef a well a ngmoduledef for ngmodule annotated type reflecting the dual nature of ngmodules a both compilation scope and a di configuration container this required implementing nginjectordef compilation in angularcompiler a well a allowing for multiple generated definition for a single decorator in the core of ngtsc pr close ,feat
8557,aio fix upgradephonecat example ee test close pr close ,test
8558,ivy insert embedded view immediately pr close ,refactor
8559,animation set animation style properly on platformserver animation style werent getting properly set on platformserver because of erroneous check and absence of reflection of style property to attribute on the server the fix corrects the check for platform and explicitly reflects the style property to the attribute pr close ,fix
8560,ivy rename limit usage of global var pr close ,refactor
8561,bazel turning on strictpropertyinitialization for angular all error for existing field have been detected and suppressed with a assertion issue is tracking proper clean up of those instance oneline change required in ivycompilationts because it appears that the new syntax cause tsickle emitted node to no longer track their original sourcefiles pr close ,build
8562,core typo in static injector test pr close ,docs
8563,docsinfra move overload short description above syntax pr close ,build
8564,element mention comp element a a valid label pr close ,docs
8565,element test typing against t and pr close ,test
8566,ivy support inputsoutputs in decorator metadata in jit pr close ,fix
8567,ivy inject no longer us default value parameter inject wa changed in dadb to not take a default value parameter so injectablecompiler should not request the use of one when using inject pr close ,fix
8568,ivy first pas at extracting reflectionhost for abstract reflection ngtsc need to reflect over code to property compile it it performs operation such a enumerating decorator on a type reading metadata from constructor parameter etc depending on the format e e etc of the underlying code the ast structure over which this reflection take place can be very different for example in t code class declaration are tsclassdeclaration node but in e code theyve been downleveled to tsvariabledeclaration node that are initialized to iifes that build up the class being defined the reflectionhost abstraction allows ngtsc to perform these operation without directly querying the ast different implementation of reflectionhost allow support for different code format pr close ,refactor
8569,ivy runtime in pr close ,feat
8570,docsinfra redirect removed webpack guide to vangulario the outdated webpack guide ha been removed in but people might still try to access it via direct link or searchengine result instead of returning we will now redirect guidewebpack to the archived version of the guide at vangularioguidewebpack pr close ,build
8571,ivy support query for view inserted in lifecycle hook close pr close ,fix
8572,ivy ngtemplateoutlet runtime integration test pr close ,test
8573,aio add elana olson to contributorjson file add new contributor elana olson to the contributor list pr close ,docs
8574,ivy nested ngfor should be supported pr close ,fix
8575,docsinfra add github and twitter external icon link to topnav toolbar pr close ,feat
8576,animation properly reference body node for ssr environment pr close ,test
8577,docsinfra update with review change pr close ,docs
8578,form update api reference for formcontrol pr close ,docs
8579,docsinfra ensure all heading are sentence cased pr close ,build
8580,common rename keyvalue ee test pr close ,test
8581,core injector correctly honor the self flag injector wa incorrectly returning instance from parent injector even when self wa specified pr close ,fix
8582,ivy ngtsc compiles component directive ngmodule this change support compilation of component directive and module within ngtsc support is not complete but is enough to compile and test packagescoretestbundlingtodo in full aot mode code size benefit are not yet achieved a packagescore itself doe not get compiled and some decorator eg input are not stripped leading to unwanted code being retained by the treeshaker this will be improved in future commits pr close ,feat
8583,ivy defeat clang format issue clangformat on mac ha taken a disliking to this particular line and rewrite one of the ɵ character to an invalid unicode sequence pr close ,style
8584,ivy keep jit symbol table and ridentifiers in sync at runtime in jit mode when the compiler writes a reference to a symbol that symbol is resolved through a symbol table named angularcoreenv in renderjitenvironment previously this symbol table wa not kept uptodate with the ivy instruction set and the name of symbol the compiler could reference this change brings the symbol table in sync and also add a test that verifies every symbol the compiler can reference is available at runtime in the symbol table pr close ,fix
8585,ivy implement host binding in jit mode pr close ,feat
8586,ivy allow view and content query to match the same element when creating content query from a directive on an element we need to take into account existing view query the same element can be reported to both content and view query so freshly created content query must be combined with preexisting view query pr close ,fix
8587,bazel fix flakey bazel integration ee test pr close ,test
8588,compiler support in import statement fix pr close ,fix
8589,aio add github link to api doc member this change add github edit and view link to method and decorator option it is possible to add these to property also but the ui is rather tight a these are displayed in a table pr close ,build
8590,aio compute breadcrums for all api doc type pr close ,build
8591,aio fix decorator doc inherited from heading we should not include the package path in the inherited from heading for decorator api doc pr close ,build
8592,aio tidy up api doc style code anchor should inherit the font size from their container table heading should align with content pr close ,fix
8593,aio fix broken docgen unit test pr close ,build
8594,aio remove invalid h usage note heading this heading is too high for the section because the method name is a h but it can not be a h because usage note may contain h heading pr close ,build
8595,aio rearrange processor to ensure we catch all content error pr close ,build
8596,aio map h heading into h heading for certain template the section such a method and decorator option are already headed by a h heading so we need to map the h heading in the api doc source down to h heading this commit includes general heading mapping functionality accessible via the marked nunjucks filter pr close ,build
8597,aio rearrange decorator api doc template the overview of the decorator option is now a table the detailed description of each option is now a full section pr close ,build
8598,aio remove unused linkdocs alias for link jsdoc tag pr close ,build
8599,aio improve automatic linking of code item this commit add new link disambiguator that mean that more code link can be generated automatically in a sensible way the best example is the use of property within class interface and enum documentation pr close ,build
8600,aio remove unused guide doc this wa erroneously committed into master when it wa really only supposed to demo what the page might look like pr close ,docs
8601,aio refactor the decorator doc processing pr close ,build
8602,aio do not allow usagenotes on property pr close ,build
8603,aio update to latest dgenipackages this update allows u to autolink to method and property which mean that we can change thing like link transition transition to just transition pr close ,build
8604,aio add content rule to prevent usagenotes in nonexport api doc this commit also factor out apicontaineddoctypes to be used by both filtercontaineddocs and addallowedpropertiesrules pr close ,build
8605,aio dont constrain checkcontentrules to run before another processor we dont really care when this processor run a long a it happens after the tag have been extracted by not constraining it runbefore property we can ensure that other processor can be run before it pr close ,build
8606,aio do not try to autolink to internal api item this would cause dangling link since the target being internal would not exist in the doc pr close ,build
8607,aio dont render annotation tag because we were ignoring these tag they were being rendered a part of the previous tag what we really want to do is know about them so that we dont break the docgen but then ignore them when rendering pr close ,build
8608,core keyvaluedifferdiff allows null value pr close ,feat
8609,common introduce keyvaluepipe pr close ,feat
8610,core export defaultkeyvaluediffers to private api pr close ,feat
8611,aio remove link to outdated live example from the api documenation close pr close ,docs
8612,ivy namespaced attribute added to output instruction note this doe not add parsing of namespaced attribute add attributemarker for namespaced attribute add test for namespaced attribute update attributemarker enum to use camelcase and not uppercase name pr close ,feat
8613,ivy use comment node to mark view container pr close ,refactor
8614,aio reorganize style guide section on prefixing componentsdirectives close pr close ,docs
8615,router fix lazy loading of aux route fix pr close ,fix
8616,ivy remove debugger statement pr close ,fix
8617,bazel allow ngmodule to depend on target w no deps pr close ,fix
8618,serviceworker fix swpushunsubscribe fix pr close ,fix
8619,serviceworker allow swpush test to run on nodejs pr close ,test
8620,serviceworker add test for swpush pr close ,test
8621,serviceworker minor mock refactoring pr close ,refactor
8622,ivy add element instruction reducing output size add an element instruction reduces size of compiled output slightly pr close ,refactor
8623,ivy correctly handle query with embedded view this pr take care of all the remaining case where embedded view definition and insertion point are different pr close ,fix
8624,docsinfra ensure dist directory is cleaned before running tsc watch pr close ,build
8625,docsinfra upgrade preview server to latest typesshelljs pr close ,build
8626,ivy combine lview with data pr close ,refactor
8627,animation always render endstate style for orphaned dom node this patch ensures that any destination animation styling state value are always applied even if the dom node is not apart of the dom pr close ,fix
8628,router implement scrolling restoration service for documentation see routermodulescrollpositionrestoration fix pr close ,feat
8629,ivy special case style and class binding for future use pr close ,fix
8630,ivy now support svg and mathml element add support for ivy creating svg and mathml element properly using createelementns pr close ,feat
8631,ivy add ngcontainer to the remaining work item pr close ,docs
8632,ivy compute transitive scope from ngmoduledef only previously the transitive scope of an ngmoduledef were computed during execution of the ngmodule decorator this meant that jit compiled module could only import other jitcompiled module a the import mechanism relied on the calculation of transitive scope to already have happened for the imported module this change move computation of transitive scope to a function transitivescopesfor and make it lazy this open the door for aot jit or jit aot import a transitive scope for aot module can be calculated when needed by jit and aot module can also write expression that call transitivescopesfor when importing a jitcompiled module pr close ,fix
8633,ivy configure ci environment for ivy jit and aot two new circleci environment are created testivyjit and testivyaot both run a subset of the test that have been marked with bazel tag a being appropriate for that environment once all the test pas build are published to the build repo both for the legacy view engine compiled code a well a for ivyjit and ivyaot pr close ,ci
8634,docsinfra use script nomodule to load ie polyfills skip other polyfills this commit includes two change it change the unreliable dynamic way of loading ie polyfills to use script nomodule instead for ie it equivalent to a regular script tag while modern browser will ignore it it remove other polyfills for browser not supporting objectassign a this api is supported by chrome firefox and safari ie it been supported for some time note that a of june googlebot us chrome to render site to be indexed chrome doesnt support objectassign but it also doesnt support e module so itll load polyfills meant for ie which it should do anyway a it doesnt support most of e fix pr close ,fix
8635,docsinfra ensure stability is computed before the api list previously the api list wa being generated before the stability had been computed this meant that the api list page showed no api doc when filtering by stable stability status close pr close ,build
8636,aio add mix and connect to front page campaign pr close ,docs
8637,ivy update status of impl progress updating runtime implementation progress after merge of pr close ,docs
8638,aio added resource link to amexio canvas web based ide pr close ,docs
8639,bazel fix ngpackage rollup root dir for fesm output pr close ,build
8640,ivy a generic visitor which allows prefixing node for ngtsc this add ngtscutilsrcvisitor a utility for visiting t asts that can add synthetic node immediately prior to certain type of node eg class declaration it useful to lift definition that need to be referenced repeatedly in generated code outside of the class that defines them pr close ,feat
8641,ivy remove need for lcontainertemplate pr close ,refactor
8642,core expose a compiler api for accessing module id from ngmodule type this will allow routertestingmodule to better support lazy loading of module when using summary since it can detect whether a module is already loaded if it can access the id pr close ,feat
8643,ivy add support of applicationrefbootstrapmodulefactory pr close ,feat
8644,docsinfra log warning rather than error if content error are not fatal pr close ,build
8645,aio ensure the correct decorator property are merged previously only the description and usagenotes were being copied over from the callmember of the decorator interface important property such a shortdescription were missed these are now added and the code ha been refactored to make it simpler and clearer to update which property get copied a the requirement change pr close ,build
8646,ivy added new namespace and element instruction to jit environment pr close ,feat
8647,ivy svg now handled by ivy compiler pr close ,feat
8648,ivy update test that is flaky in ie pr close ,test
8649,ivy update svg status pr close ,docs
8650,ivy add testing for namespaced attribute pr close ,test
8651,ivy clean up remove unnecessary debugger statement rename isselfclosingelement to isemptyelement remove unnecessary template anchor in test pr close ,refactor
8652,ivy rename setns sethtmlns and friend to namespace namespacehtml etc renames function add documentation pr close ,refactor
8653,ivy use attributemarker instead of n remove n enum us existing attributemarker add enum value namespaceuri pr close ,refactor
8654,ivy add element instruction add a simplified element instruction that can be used if an element ha no child pr close ,feat
8655,ivy added namespaced attribute pr close ,feat
8656,ivy add namespace instruction for svg and others pr close ,feat
8657,ivy add support of applicationrefbootstrapmodulefactory pr close ,feat
8658,ivy move static part of lviewcleanup to tview pr close ,refactor
8659,animation retain triggerstate for node that are moved around this patch ensures that if a list of node that contain animation trigger are moved around then they will retain their triggervalue state when animated again at a later point pr close ,fix
8660,form properly handle special property in formgroupget close pr close ,fix
8661,aio add null type to form validation example close pr close ,docs
8662,router add navigation execution context info to activation hook this change add to internal api hook undocumented api for beforeafterpreactivation the immediate need for this api is to allow application to build support for marshalling navigation between a web worker and the main application fix pr close ,feat
8663,ivy move lviewtemplate and component template to tview pr close ,refactor
8664,bazel ran format pr close ,build
8665,bazel ran buildifier pr close ,build
8666,bazel fix packagesplatformbrowsertesttestweb pr close ,build
8667,bazel enable manual tswebtestsuite test that require staticfiles pr close ,build
8668,ivy implement viewcontainerrefremove pr close ,feat
8669,ivy misc minor fix in the jit compiler pr close ,refactor
8670,common remove ngonchanges from ngforof ngforof used to implement onchanges and than use ngonchanges callback to detect when ngforof binding changed to update the differ we now do the checking manually which put le pressure on the runtime to do the bookkeeping and should result in minor perf improvement pr close ,refactor
8671,aio remove unnecessary scrollbar in codetabs pr close ,fix
8672,aio add rightmargin to home link pr close ,fix
8673,aio clean up frequent ngmodules close pr close ,docs
8674,aio remove an extraneous apostrophe pr close ,docs
8675,common improve deprecation notice to be parsed by tslint close close ,docs
8676,ivy move id to tview pr close ,refactor
8677,ivy combine lifecyclestage with lviewflags pr close ,refactor
8678,ivy move bindingstartindex to tview pr close ,refactor
8679,ivy convert tnodeindex to number general cleanup pr close ,refactor
8680,ivy query node from different templaterefs inserted into one viewcontainerref pr close ,fix
8681,bazel update bazel integration test to test secondary angular import such a angularcommonhttp pr close ,build
8682,bazel fix bazel built e ngfactory with secondary entrypoint angular import pr close ,build
8683,platformserver add a test for hidden property add a test to verify that the hidden property is reflected properly to the hidden attribute pr close ,test
8684,compilercli update tsickle to x pr close ,feat
8685,platformserver avoid dependency cycle when using http interceptor fix when a http interceptor injects httpclient it cause a di cycle this fix is to use injector to lazily inject httpinterceptors while setting up the httphandler on the server so a to break the cycle pr close ,fix
8686,bazel reenable packagesupgradetesttestweb test with staticfiles in tswebtestsuite pr close ,build
8687,ivy do not eagerly jit compile module pr close ,fix
8688,ivy remove reference to ivy pr close ,refactor
8689,ivy account for multiple change between change detection run pr close ,fix
8690,ivy determine value of simplechangefirstchange per property pr close ,fix
8691,ivy replace lviewchild with tviewchildindex lookup pr close ,refactor
8692,platformserver dont reflect innerhtml property to attibute fix innerhtml is conservatively marked a an attribute for security purpose so that it sanitized when set however this same mapping is used by the server renderer to decide whether the innerhtml property need to be reflected to the innerhtml attribute the fix is to just skip the property to attribute reflection for innerhtml pr close ,fix
8693,aio add gde kim maida to contributor ,docs
8694,compilercli fix typo error pr close ,style
8695,form fix api doc close pr close ,docs
8696,animation fix typo close pr close ,refactor
8697,ivy fix typo in statusmd ,docs
8698,animation fix browser detection logic element type is being polyfilled on the server now and can not be used to detect browser environment pr close ,fix
8699,ivy simplify bind instruction to reuse bindingupdated logic added runtime and compiler testcases for interpolated binding which verify that nochange is properly handled in bind pr close ,refactor
8700,platformserver update the symbol list pr close ,test
8701,platformserver avoid clash between server and client style encapsulation attribute previously the style encapsulation attributesnghost and ngcontent created on the server could overlap with the attribute and style created by the client side app when it botstraps in case the client is bootstrapping a lazy route the client side style are added before the serverside style are removed if the component on the client are bootstrapped in a different order than on the server the style generated by the client will cause the element on the server to have the wrong style the fix put the style and attribute generated on the server in a completely differemt space so that they are not affected by the client generated style the client generated style will only affect element bootstrapped on the client pr close ,fix
8702,ivy update tnode count to reflect change in after there is tnode in those test for the host for the text node the pr status wa green because it branched off master before wa merged in pr close ,test
8703,core clean up duped import in reflector closure compiler in some configuration complains about duplicate import this change replaces the exportwithimport with an export of the imported symbol close pr close ,refactor
8704,ivy fix performance counter for textbinding instruction pr close ,fix
8705,ivy support query with view inserted through viewcontainerref this pr tackle a simple case where viewref definition point ngtemplate is the same a the insertion point viewcontainerref requested on the said ngtemplate for this particular case we can assume that we know a container into which a given view will be inserted when a view is created this is not true fall all the possible case so followup pr will be needed to extend this basic implementation pr close ,feat
8706,ivy jit render the todo app this commit build out enough of the jit compiler to render packagescoretestbundlingtodo and allows the test to run in jit mode to play with the app run bazel run definecompilejit packagescoretestbundlingtodoprodserver pr close ,feat
8707,platformbrowser make hammerloader nonnullable pr close ,refactor
8708,ivy remove dynamicviewcount from lcontainer pr close ,refactor
8709,aio fix typo for ngmoduledecorator to ngmodule decorator close pr close ,docs
8710,compiler fix up grammar in error message close pr close ,style
8711,platformserver provide domino dom type globally fix this fix let code access dom type like node htmlelement in the code these are invariant across request and the corresponding class from domino can be safely provided during platform initialization this is needed for the current sanitizer to work properly on platformserver also allows html type in injection ex injectdocument doc document pr close ,fix
8712,platformserver use eventmanagerplugin on the server previously event handler on the server were setup directly this change make it so that the event registration on the server go through eventmanagerplugin just like on client this allows u to add custom event registration handler on the server which allows u to hook up preboot event handler cleanly pr close ,feat
8713,bazel improve error message for ngpackage with no metadata pr close ,docs
8714,aio add blox material library to resource pr close ,docs
8715,ivy support rendererdestroy and rendererdestroynode hook pr close ,feat
8716,ivy separate attribute for directive matching purpose in ngivy directive matching determining which directive are active based on a cs seletor happens at runtime this mean that runtime need to have enough context to match directive this pr take care of case where a directive selector should match binding ex fooexp and event handler ex outdo in the mentioned case we need to have binding output attribute for directive cs selector matching purpose at the same time those are not regular attribute and a such should not be reflected in the dom close pr close ,feat
8717,ivy rename pipedefn to pipedeffactory the original reason for this property to be short no longer hold true a pipe always need to be defined using definepipe pr close ,refactor
8718,ivy move parent from lnode to tnode pr close ,refactor
8719,compiler fix typo and formatting pr close ,style
8720,core use partialt for metadataoverride allows to write const fixture testbed overridepipedisplaynamepipe set pure false createcomponentmenucomponent when you only want to set the pure metadata instead of currently const fixture testbed overridepipedisplaynamepipe set name displayname pure false createcomponentmenucomponent which force you to redefine the name of the pipe even if it is useless fix pr close ,refactor
8721,animation fix nodejs detection in animation test pr close ,test
8722,ivy support alternate compilation mode to enable ivy testing bazel ha a restriction that a single output eg a compiled version of packagescommon can only be produced by a single rule this precludes the angular repo from having multiple rule that build the same code and the complexity of having a single rule produce multiple output eg an ngccompiled version of packagescommon and an ivyenabled version is too high additionally the angular repo ha lot of existing test which could be executed asis under ivy such testing is very valuable and it would be nice to share not only the code but the dependency graph build config a well thus this change introduces a define flag compile with three potential value when definecompilex is set the entire build system run in a particular mode the behavior of all existing target is controlled by the flag this allows u to reuse our entire build structure for testing in a variety of different manner the flag ha three possible setting legacy the default the traditional view engine ngc build local run the prototype ngtsc compiler which doe not rely on global analysis jit run ngtsc in a mode which executes tsickle but excludes the angular related transforms which approximates the behavior of plain tsc this allows the main package such a common to be tested with the jit compiler additionally the ivyngmodule rule still exists and run ngc in a mode where ivycompiled output is produced from global analysis information a a stopgap while ngtsc is being developed pr close ,build
8723,aio rename method loadcontainingcustomelements loadcontainedcustomelements pr close ,refactor
8724,aio avoid loading the toc component until it is necessary pr close ,fix
8725,aio show embedded toc on narrow screen where there is not enough room on the right to show the floating toc an embedded toc is shown via an aiotoc embedded element in the document since toc wa not a custom element the component wa not instantiated for the embedded element this commit fix it by making aiotoc a custom element and loading it manually for the floating toc if necessary pr close ,fix
8726,aio add component for lazyloading custom element pr close ,feat
8727,aio order custom element by selector pr close ,refactor
8728,aio do not load custom element again while already loading pr close ,fix
8729,aio update payload size limit pr close ,build
8730,correct spelling error correct a spelling error i changed httpparms to httpparams pr close ,docs
8731,aio display codetabs in a material design card this help to connect the content of the tab to it label close pr close ,feat
8732,aio render hover status on codetabs the material design spec state that there should be a change of background when hovering over a tab label see related to pr close ,feat
8733,aio fix link to correct bio image pr close ,docs
8734,aio added mashhood a gde in contributor pr close ,docs
8735,ivy pipebindv take an array of value pr close ,fix
8736,ivy purefunctionv take an array of value pr close ,fix
8737,ivy remove insignificant in the compiler test pr close ,refactor
8738,ivy add support for shortcircuiting shortcircuitable expression using ternary binary operator could not use the regular binding mechanism a it relies on the binding being checked every single time the index is incremented a part of checking the binding then for pure function kind of binding we use a different mechanism with a fixed index a such short circuiting a binding check doe not mess with the expected binding index note that all pure function binding are handled the same wether or not they actually are shortcircuitable this allows to keep the compiler and compiled code simple and there is no runtime perf cost anyway pr close ,feat
8739,aio add material community component pr close ,docs
8740,aio improve logging output in updatepreviewserversh pr close ,refactor
8741,aio add juri strumpflohner to gde resource pr close ,docs
8742,compiler generate corecompliant hostbindings property this make hostbindings code generated by compiler and used in core package identical fix pr close ,fix
8743,aio remove outdated rangle link pr close ,docs
8744,ivy move child from lnode to tnode pr close ,refactor
8745,ivy move type from lnode to tnode pr close ,refactor
8746,ivy add tnodes for view node and host pr close ,refactor
8747,ivy compile interpolated binding without superfluous bind instruction this fix the case where the compiler would generate a bindinterpolation instruction pr close ,fix
8748,aio fix typo pr close ,docs
8749,serviceworker check platformbrowser before accessing navigatorserviceworker pr close ,fix
8750,platformbrowser add hammerjs lazyloader symbol to public api pr close ,feat
8751,aio remove outdated readmemd from cliquickstart zip close pr close ,docs
8752,ivy first step towards jit compilation this commit add a mechanism by which the angularcore annotation for component injectable and ngmodule become decorator which when executed at runtime trigger justintime compilation of their associated type the activation of these decorator is configured by the ivyswitch mechanism ensuring that the ivy jit engine doe not get included in angular bundle unless specifically requested pr close ,feat
8753,ivy add bazel flag to control building viewengine or ivy pr close ,test
8754,aio add missing dependency and file to testing zip file download close pr close ,docs
8755,aio add ant design of angular in resource pr close ,docs
8756,aio avoid unnecessary recalculation in liveexamples with plnkrs we used to choose a different plnkr mode normal v embedded based on the size of the screen this affected the layout of the plnkr page embedded plnkr mode wa usable on small screen while normal mode wasnt this is not to be confused with the liveexample mode we use today to determine whether the liveexample should be a link that open stackblitz on a new page or embedded into the document using an iframe since we no longer need to change the liveexample url based on the screen size there is no need to listen for rezise event on window the necessary property can be computed once and certain variable are obsolete pr close ,fix
8757,aio allow setting liveexample title from content previously it wa possible to set the liveexample title a content in the liveexample element this relied on our custom loader functionality that extracted the content from the dom element before passing it to the angular compiler and stored it on a property for later retrieval since we switched to custom element and got rid of the custom loader the property is no longer populated with the content a a result many live example show the default title live example instead of the one specified a content this commit fix it by projecting the content into an invisible node for later retrieval similar to what we do in other component such a the codeexamplecomponent pr close ,fix
8758,aio clean up attributeutils pr close ,refactor
8759,ivy move next property to tnode pr close ,fix
8760,aio remove background from lazyloading concept icon fix pr close ,style
8761,aio add mhartington to gde pr close ,docs
8762,aio fix typo are are are pr close ,docs
8763,aio changed onvoted output property to voted to be in line with the styleguide pr close ,docs
8764,aio expose server and cli configuration for universal in guide close pr close ,docs
8765,aio add angular conf australia to event angular conf australia will be held at june in melbourne australia pr close ,docs
8766,aio fix path to observables guide pr close ,docs
8767,aio update http error test example update the example to match the description preceding it which refers to the use of the error method and errorevent rather than the flush method with a nonxx status a shown previously pr close ,docs
8768,bazel add a link to the bazel doc the developer doc mention but doesnt link to bazelmd add link and fix capitalization pr close ,docs
8769,aio remove intertech with no course scheduled pr close ,docs
8770,aio add brand and concept icon img style class more flexible pr close ,feat
8771,platformbrowser allow lazyloading hammerjs pr close ,feat
8772,serviceworker deprecate versionedfiles in assetgroup resource since versionedfiles behaves in the exact same way a file there is no reaason to have both user should use file instead this commit deprecates the property and print a warning when coming across an assetgroup that us it it should be completely removed in a future version note it ha also been removed from the default ngswconfigjson template in angulardevkit pr close ,fix
8773,ivy avoid creating bound function in pipebind pr close ,perf
8774,benchpress fix promise chain in chromedriverextension occasionally the promise to clear the chrome buffer resolve after the subsequent call to start the timer this problem cause flakiness in our test that rely on benchpress usually manifesting itself a a tried too often to get the ending mark error thrown by this line pr close ,fix
8775,aio use heroesurl pr close ,docs
8776,aio improve enum api rendering the member detail section is now called member rather than property the property table now display appropriate table heading member value description the value column is not shown if none of the member have a value close pr close ,build
8777,aio ensure usagenotes are copied into decorator api doc pr close ,build
8778,element prevent closure renaming of platform property closure compiler with type based optimization ha a bug where extern for inherited static field are not being honored for angular element this meant that observedattributes static field which is marked a an extern for the base htmlelement class wa getting renamed this commit work around the bug by using quoted access of observedattributes that explicitly prevents the renaming pr close ,fix
8779,compiler generate constant array for in attribute pr close ,fix
8780,aio display type of api const doc correctly previously these doc always displayed any a the type of the const export now the type is computed correctly from the declared type or initializer of the constant pr close ,build
8781,ivy support injectable sanitization service pr close ,feat
8782,animation do not throw error when a destroyed component is animated pr close ,fix
8783,aio make background transparent in x pwa icon fix pr close ,fix
8784,aio add cory rylan to gde resource pr close ,docs
8785,element always check to create strategy pr close ,fix
8786,element add angular element term to glossary pr close ,docs
8787,element emphasize future direction update link pr close ,docs
8788,aio add alain chautard in gde list pr close ,docs
8789,router avoid freezing queryparams inplace the recognizer code used to call objectfreeze on queryparams before using them to construct activatedroutes with the intent being to help avoid common invalid usage unfortunately objectfreeze work inplace so this wa also freezing the queryparams on the actual urltree object making it more difficult to manipulate urltrees in thing like urlhandlingstrategy this change simply shallowcopies the queryparams before freezing them fix pr close ,fix
8790,router correct the segment parsing so it wont break on ampersand pr close ,fix
8791,aio fix error in import after rxjs migration pr close ,fix
8792,serviceworker sort manifest urlhashtable entry this make it easier to quickly check whether a specific file ended up in the manifest for example when debugging pr close ,refactor
8793,serviceworker correctly handle request with empty clientid request from client that are not assigned a client id by the browser will produce fetch event with null or empty clientids previously the serviceworker only handled null value correctly yet empty string are also valid see for example here and there with this commit the sw will interpret all falsy clientid value the same ie no client id assigned and handle them appropriately related chromium issuediscussion fix pr close ,fix
8794,serviceworker support mock request with nullempty client id pr close ,test
8795,serviceworker improve adding client in swtestharness this commits change how client are added in swtestharness so that the behavior in test closer mimic what would happen in an actual serviceworker it also remove autoadding client when calling clientsget which could hide bug related to nonexisting client pr close ,test
8796,ivy add error reporting to the html to ivy transformer pr close ,feat
8797,ivy add html to ivy ast transformer test pr close ,test
8798,bazel update to rulestypescript pr close ,build
8799,aio include navigationjson change in docswatch close pr close ,build
8800,aio add link to v doc fix pr close ,fix
8801,compiler compilecomponentdirective take only local information previously the compilecomponent and compiledirective apis still required the output of global analysis even though they only read local information from that output with this refactor compilecomponent and compiledirective now define their input explicitly with the new interface rcomponentmetadata and rdirectivemetadata compilecomponentglobal and compiledirectiveglobal are introduced and convert from global analysis output into the new metadata format this refactor also split out the view compiler into separate file a rviewcompilerlocalts wa getting unwieldy finally this refactor also split out generation of di factory function into a separate rfactory utility a the logic is utilized between different compiler pr close ,refactor
8802,aio upgrade example dependency to angular v pr close ,docs
8803,aio update in example to angular v pr close ,docs
8804,core call ngondestroy on all service that have it previously ngondestroy wa only called on service which were statically determined to have ngondestroy method in some case such a with service instantiated via factory function it not statically known that the service ha an ngondestroy method this commit change the runtime to look for ngondestroy when instantiating all di token and to call the method if it present fix fix fix pr close ,fix
8805,animation fix short param name pr close ,style
8806,animation fix content error pr close ,docs
8807,aio add v release notification pr close ,feat
8808,aio remove main background color when printing pr close ,fix
8809,aio fix codeexample print style when printing background fix pr close ,fix
8810,aio use the same selector for screen and print style pr close ,refactor
8811,aio include print style last to overwrite other style pr close ,refactor
8812,aio use angular pr close ,build
8813,aio update to angular cli pr close ,build
8814,aio correct project id for deployment of archive site ,fix
8815,animation retain state styling for node that are moved around pr close ,fix
8816,animation properly clean up queried element style in safariedge prior to this patch if an element is queried and animated for second just a style call and nothing else then the style applied would not be properly cleaned up due to their camelcased nature pr close ,fix
8817,aio upgrade serverside rendering example to angular v pr close ,docs
8818,aio correctly route embedded liveexample url from sw partially address pr close ,fix
8819,aio move right margin from home image to home anchor this make the outline of home symmetric pr close ,refactor
8820,aio add space between home and hamburger when the hamburger icon is clicked it background is drawn until the very edge of home image leaving no space pr close ,style
8821,aio align stackblitz file with angular cli v also clean up legacy reference to angularclijson pr close ,build
8822,form fixed a typo in the reactive form from address to secretlairs section pr close ,docs
8823,element add intro connecting angular element to custom element pr close ,docs
8824,ivy only generate tviews once per embedded template pr close ,fix
8825,ivy add performance counter in ngdevmode pr close ,perf
8826,aio update eggheadio url close pr close ,docs
8827,aio update doc error in guidehttp update documentation to include example for both reqflush and reqerror in http testing example pr close ,docs
8828,aio add support for faster unoptimized serve when running yarn start and yarn serveandsync we are usually more interested in faster rebuild time than optimized build this wa also the behavior before upgrading to angularcli fcaffb this commit introduces a new configuration fast which is used by yarn start and yarn serveandsync to restore the faster unoptimized build other command such a ng serve and ng ee remain unchanged using slower optimized build pr close ,build
8829,ivy upddate the status pr close ,docs
8830,core avoid eager provider reinitialization fix a corner case where eager provider were getting constructed twice if the provider wa requested before the initialization of the ngmodule is complete pr close ,fix
8831,ivy support lifecycle hook of viewcontainerref pr close ,feat
8832,compilercli dont rely on incompatible t method g and the angular repo have different version of typescript and tsupdateidentifier ha a different signature in the different version there is no way to write a call to the function that will compile in both version simultaneously instead use tsgetmutableclone a that ha the same effect of cloning the identifier pr close ,fix
8833,core treeshake applicationmodule provider pr close ,refactor
8834,ivy support injection flag at runtime pr close ,feat
8835,ivy first step towards ngtsc mode this commit add a new compiler pipeline that isnt dependent on global analysis referred to a ngtsc this new compiler is accessed by running ngc with enableivy set to ngtsc it reuses the same initialization logic but creates a new implementation of program which doe not perform the globallevel analysis that angularcompilerprogram doe it will be the foundation for the production ivy compiler pr close ,feat
8836,benchpress fix typo in readme pr close ,docs
8837,compiler avoid a crash in ngcwrapped ngperformcompilation can return an undefined program which is not handled by ngcwrapped avoid crashing by checking for the error return and returning the diagnostics pr close ,fix
8838,aio fix deploytofirebase script temporary workaround for angularangularcli the behavior of yarn build remains the same but building for a specific deployment env eg archive next requires yarn buildfor deployenv pr close ,ci
8839,ivy properly destroy view tree where root is an embedded view without child the bug fixed here steam from the fact that we are traversing too far up in the view tree hierarchy in the destroyviewtree function the logic in destroyviewtree is off if we start removal at an embedded view without any child view for such a case we should just clean up cleanupview this one view without paying attention to next parent view pr close ,fix
8840,common mark locale file a sideeffectfull fix pr close ,build
8841,aio add upgradingangularjs to education resource pr close ,docs
8842,router cache route handle if found when asking the route reuse strategy to retrieve a detached route handle store the return value in a local variable for further processing instead of asking again later resolve pr close ,fix
8843,compiler fix lint issue pr close ,style
8844,compiler remove a dependency from the ivy ast to the template ast pr close ,refactor
8845,ivy move core code to corets pr close ,refactor
8846,compiler refactor template binding parsing a long time ago angular used to support both those attribute notation attrbinding templateattr binding because the last notation ha been dropped we can refactor the binding parsing source map will benefit from that a no attr prefix is added artificialy any more pr close ,refactor
8847,compiler handle undefined annotation metadata in certain case seen in production simplify can returned undefined when simplifying decorator metadata this ha proven tricky to reproduce in an isolated test but the fix is simple and lowrisk dont attempt to spread an undefined set of annotation in the first place pr close ,fix
8848,compiler replace chuckjaz with alxhub a compiler owner pr close ,ci
8849,ivy add an ivy local the compiler which avoids analyzemodule close based on a spike by chukjaz pr close ,feat
8850,ivy remove the backpatch compiler pr close ,refactor
8851,compiler misc minor pr close ,refactor
8852,ivy misc cleanup pr close ,refactor
8853,compiler support and todo in mock compiler expectation pr close ,feat
8854,core add a symbol test for renderer code pr close ,test
8855,aio add front page campaign for the ngconf live stream pr close ,docs
8856,aio cleanup example with edits from igorgeorge pr close ,docs
8857,aio turn on webpacks statsjson generation for debugging purpose pr close ,build
8858,aio add angularlanguageservice pr close ,build
8859,aio bump shared yarnlock file for example pr close ,docs
8860,aio bump shared dependency to rc pr close ,docs
8861,aio fix failing upgrademodule test pr close ,docs
8862,aio fix failing boilerplate test pr close ,docs
8863,aio upgrade example to angular pr close ,docs
8864,aio fix failing test pr close ,test
8865,aio update yarn test command in readmemd pr close ,docs
8866,aio update to angularmaterialrc pr close ,build
8867,aio move reflectmetadata polyfills to testts this resolve and nicely clean up the code pr close ,test
8868,aio update to angularcorerc pr close ,build
8869,aio lint fix for example pr close ,style
8870,aio fix test and update testing infra pr close ,test
8871,aio update tslint and codelyzer pr close ,build
8872,aio fix deployment script pr close ,build
8873,aio upgrade angularcli to rc pr close ,build
8874,aio upgrade angular to rc pr close ,build
8875,aio remove redundant flag from cli command pr close ,build
8876,aio switch to webpackcli for ie polyfills pr close ,build
8877,aio upgrade rxjs to turborc pr close ,build
8878,aio reorder entry in packagejson pr close ,build
8879,aio update to angularmaterialrc pr close ,build
8880,aio update to angularmaterial pr close ,build
8881,aio update to angularclirc project layout update project layout wa updated using yarn ng update angularcli migrateonly from pr close ,build
8882,aio upgrade to angularrc pr close ,build
8883,aio upgrade to angularrc pr close ,build
8884,animation use a const enum to avoid compilation side effect this patch is in response to where a nonconst enum wa being compiled a an empty object when used in an animation player when ng build prod wa being processed this patch is a immediate fix for the issue and track it close pr close ,refactor
8885,ivy speed up bound text node pr close ,refactor
8886,aio fix aiomonitoring test previously we were running the ee test from master against deployed from the stable branch often the ee test from master do not apply to the stable branch since the app ha deviated slightly this commit fix this by stop running the full ee test against the deployed version but a smaller set of smoke test which check basic functionality that is le likely to change between version pr close ,ci
8887,aio rename directory testsdeploymentconfig testsdeployment pr close ,refactor
8888,aio rename spec file pr close ,refactor
8889,aio rename yarn script deploymentconfigtest redirectstest pr close ,refactor
8890,ivy generate bind call for property binding pr close ,fix
8891,aio fixed typo in comparing observables observabled compared to array section pr close ,docs
8892,aio change heroservice to messagescomponent someone probably forgot to change this when coping the sentence from a previous section pr close ,docs
8893,aio change herodetailscomponent to herodetailcomponent for the sake of consistency change herodetailscomponent to herodetailcomponent pr close ,docs
8894,aio add missing word in the component metadata section pr close ,docs
8895,serviceworker add badge to notificationoptionnames add badge to notificationoptionnames to support custom notification badgeicon fix pr close ,fix
8896,ivy make return value of definecomponentdirectivepipeinjectorinjectable private ivy definition look something like this class myservice static nginjectabledef defineinjectable … here the argument to defineinjectable is well known public contract which need to be honored in backward compatible way between version the type of the return value of defineinjectable on the other hand is private and can change shape drastically between version without effecting backwards compatibility of library publish to npm to our user it is effectively an opaque token for this reson why declare the return value of defineinjectable a never pr close ,refactor
8897,ivy add unparsed selector to the projectiondef instruction pr close ,fix
8898,ivy cleanup of the view compiler pr close ,refactor
8899,ivy workaround for tsickle bug the issue is with tsickle type inference and the bug should be assigned to them the offending code is function cachematchingdirectivesfornode tnode tnode tview tview localrefs string null void const exportsmap localrefs null offending line const match tviewcurrentmatches finddirectivematchestnode if match for let i i matcheslength i const def matchesi a directivedefany const valueindex i resolvedirectivedef valueindex match tview savenametoexportmapmatchesvalueindex a number def exportsmap if exportsmap cachematchinglocalnamestnode localrefs exportsmap because it generates invalid j closure code function cachematchingdirectivesfornodetnode tview localrefs const type null number exportsmap localrefs null offending line const type nullarray match tviewcurrentmatches finddirectivematchestnode if match for let type number i i matcheslength i const type tsickleforwarddeclaredirectivedef def type tsickleforwarddeclaredirectivedef matchesi const type number valueindex i resolvedirectivedef valueindex match tview savenametoexportmap type number matchesvalueindex def exportsmap if exportsmap cachematchinglocalnamestnode localrefs exportsmap the workaround is to declare the type explicitly such a const exportsmap keystringnumbernull localrefs null which than generates valid closure code const type nullobjectstringnumber exportsmap localrefs null pr close ,fix
8900,ivy make return value of definecomponentdirectivepipeinjectorinjectable private ivy definition look something like this class myservice static nginjectabledef defineinjectable … here the argument to defineinjectable is well known public contract which need to be honored in backward compatible way between version the type of the return value of defineinjectable on the other hand is private and can change shape drastically between version without effecting backwards compatibility of library publish to npm to our user it is effectively an opaquetoken by prefixing the type with ɵ we are communicating the the outside world that the value is not public api and is subject to change without backward compatibility pr close ,refactor
8901,ivy update todo app to take advantage of optional injector pr close ,fix
8902,ivy clean up incorrect comment pr close ,docs
8903,ivy support injection even if no injector present remove default injection value from inject directiveinject since it is not possible to set using annotation module injector is stored on lview instead of linjector data structure because it can change only at lview level more efficient add nginjectabledef to iterablediffers so that existing test can pas a well a enable iterablediffers to be injectable without injector pr close ,feat
8904,ivy support generation of flag for directive injection this change change compiler us directiveinject instead of inject for directive unifies the flag in di a well a render change the signature of directiveinject to match inject in prep for compiler now generates flag for injection compiler portion of prep for pr close ,feat
8905,aio update file tree to match angular cli v structure pr close ,docs
8906,ivy local directive and pipe should be applied to templateref pr close ,fix
8907,ivy misc pr close ,refactor
8908,ivy cleanup directive pipe import pr close ,refactor
8909,serviceworker let match character in glob in glob pattern the wildcard is supposed to match or more character for reference this is also how work in other implementation such a gitignore file or firebase hosting config some popular j implementation eg minimatch micromatch work differently matching or more character but not this commit fix the minimal glob support in angularserviceworker to allow to also match character pr close ,fix
8910,serviceworker add support for configuring navigation url the serviceworker will redirect navigation request that dont match any asset or data group to the specified index file the rule for a request to be classified a a navigation request are a follows it mode must be navigation it must accept a texthtml response it url must match certain criterion see below by default a navigation request can have any url except for url containing url to file ie containing a file extension in the last path segment while these rule are fine in many case sometimes it is desirable to configure different rule for the url of navigation request eg ignore specific url and pas them through to the server this commit add support for specifying an optional navigationurls list in ngswconfigjson which contains url or simple glob currently only recognizing and only request whose url match any of the positive urlspatterns and none of the negative one ie urlspatterns starting with will be considered navigation request and handled accordingly by the sw this is an alternative implementation to fix pr close ,feat
8911,serviceworker move common code into method pr close ,refactor
8912,serviceworker minor fixesimprovements pr close ,docs
8913,common mark locale file a sideeffectfull these file are in the umd format for greater portablity and a such cant be marked a sideeffectfree by webpackbuildoptimizeruglify pr close ,build
8914,aio fix docviewercomponent test obsolete assertion left over from pr close ,test
8915,aio remove file that should not be tracked pr close ,refactor
8916,element add ngadd doc to element guide pr close ,docs
8917,element include schematic in npm distro pr close ,fix
8918,aio remove additional googlebot reference according to googlebot is only used a a google specific override of robot there no need for override in this case pr close ,fix
8919,aio add link to japanese localization pr close ,docs
8920,ivy support viewcontainerref on node projected into an embedded view pr close ,fix
8921,compilercli shorten resolved module name in filenametomodulename to npm package name for typing pr close ,fix
8922,compiler use correct global name in compilerumdjs fix pr close ,fix
8923,languageservice fix typo on typets languageservice ,refactor
8924,aio fix typo on aot compiler section ,docs
8925,platformbrowser add token marking which the type of animation module nearest in the injector tree pr close ,feat
8926,aio update text inmemorywebapimodule to httpclientinmemorywebapimodule pr close ,docs
8927,upgrade fix detail regarding bootstrapping order clarify that angular should be bootstrapped before angularjs close angularangular pr close ,docs
8928,core update zonejs peer dep to ,build
8929,platformserver require node v pr close ,fix
8930,aio implement rule to prevent short parameter name pr close ,build
8931,aio create minlength content rule this rule can be used to ensure that property contain a minimum number of character pr close ,build
8932,aio implement rule to prevent heading in content no heading are allowed in description and shortdescription only heading level is allowed in usagenotes pr close ,build
8933,aio create nomarkdownheadings content rule this content rule can check what markdown heading appear in content property pr close ,build
8934,aio add checkcontentrules processor this processor will enable u to write rule about how the content should appear such a no heading in markdown content only one sentence per line no single character parameter name etc pr close ,build
8935,element avoid exception when window is undefined detect server environment by checking typeof window and schedule render immediately instead of waiting for raf this doe not make angular element work on platformserver this is just the first step pr close ,fix
8936,element add schematic pr close ,feat
8937,common update cldr data to v pr close ,refactor
8938,common replace in locale undefined value by a const fix pr close ,fix
8939,ivy update compiler to generate separate creation mode and update mode block pr close ,fix
8940,ivy support separate creation mode and update mode execution in runtime pr close ,fix
8941,aio add new section to issue template additional section can help classify the issue better pr close ,docs
8942,animation migrate deprecated whatitdoes tag this wa not being picked up by the docgen a it doe not appear to be part of the public api pr close ,docs
8943,aio fix scriptstestproductionsh file permission issue it need to be executable for ci test to run ,build
8944,ivy clean projection support pr close ,refactor
8945,compiler pretty print object instead of object object the stringify function print an object a object object which is not very helpful in many case especially in a diagnostics message this commit change the behavior to pretty print an object pr close ,fix
8946,ivy update todo app to pr close ,test
8947,ivy update statusmd with outstanding work pr close ,docs
8948,ivy correctly bind to component context when compiling template the compiler would often bind to closest context rather than the component context the only time one should be binding to the cont component is in explicit case where the inner template declares local variable pr close ,fix
8949,ivy cleanup todo test app pr close ,test
8950,ivy bind to right context in nested template statmentes given div ngfor ” … ” click “ dosomething ” before dosomething would execute on the inner template context which is incorrect the correct behavior is to execute on the top level context of the component pr close ,feat
8951,ivy add output support for definedirective definecomponent pr close ,feat
8952,ivy named listener method for easier debugging pr close ,fix
8953,ivy update outstanding work for todo pr close ,docs
8954,ivy support projection of viewcontainerref pr close ,feat
8955,compilercli strictmetadataemit should not break on noncompliant library rxjs break strictmetadataemit a they now publish a dts file with a structure like declare export class subscription static empty subscription this generates metadata which contains an error and fails the strictmetadataemit validation there is nothing a library author can do in this situation except to set strictmetadataemit to false the spirit of strictmetadataemit is to validate that the author library doesnt do anything that will break downstream user this failure is a corner case which cause more harm than good so this commit disables validation for metadata collected from dts file fix pr close ,fix
8956,core update directive documentation fixrelease wrong input name in bankaccount component directive example ha error pr close ,docs
8957,ivy implement some of the viewcontainerref api pr close ,feat
8958,common workaround umdwebpack limitation fix pr close ,fix
8959,bazel set rollup outputname and amdid these are based on the name of the package a declared in the modulename attribute on ngmodule fix pr close ,fix
8960,bazel dont produce ngfactory file for ngpackages pr close ,fix
8961,compilercli dont lower expression in flat module metadata lowering expression in flat module metadata is desirable but it wont work without some rearchitecting currently the flat module index source is added to the program and therefore must be determined before the rest of the transforms run since the lowering transform change the set of export needed in the index this creates a catch in the index generation this commit cause the flat module index metadata to be generated using only those transforms which are safe dont modify the index pr close ,fix
8962,compiler update ngtscngcc design doc with more detail pr close ,docs
8963,ivy remove outdated render test pr close ,test
8964,element use angular element naming in nav pr close ,docs
8965,ivy update size test pr close ,test
8966,bazel use ngpackage entrypointname for umd bundle this change also requires updating the package gold test to work with multiple test package pr close ,build
8967,ivy instantiate dirs in correct order pr close ,fix
8968,ivy properly find rnode a we no longer create native rnode comment node for container we need to execute logic for finding a next sibiling node with rnode when inserting a view the mentioned logic need to be updated for the case of dynamically created container lcontainernode indeed we need to be able to descend into dynamically inserted view while looking for a rnode to achieve this we need to have a pointer from a host lnode to a dynamically created lcontainernode pr close ,fix
8969,ivy fix issue with refreshing embedded view pr close ,fix
8970,aio remove unused image pr close ,refactor
8971,aio update liveexample doc in author style guide pr close ,docs
8972,aio upload the preview before checking the bundle size this make the preview available even if the bundle size are out of limit pr close ,ci
8973,ivy adjust type pr close ,refactor
8974,aio update trusted github team angularcore team pr close ,fix
8975,upgrade remove unnecessary link tag backtick enclosed inline code block will be automatically linked if appropriate pr close ,docs
8976,upgrade migrate deprecatd whatitdoes tag these tag content are now included in the description tag pr close ,docs
8977,upgrade migrate deprecated howtouse tag these have become example in the description tag pr close ,docs
8978,router remove unnecessary link injector jsdoc tag inline code block are automatically linked if possible to their api page pr close ,docs
8979,router migrate deprecated whatitdoes tag the first line of the description is now used a an overview pr close ,docs
8980,router migrate deprecated howtouse tag these have been converted to usagenotes or included in the description tag pr close ,docs
8981,form remove unnecessary link injector jsdoc tag inline code block are automatically linked if possible to their api page pr close ,docs
8982,form migrate whatitdoes tag to the description we get the overview for the doc by splitting off the first paragraph pr close ,docs
8983,form migrate deprecated howtouse tag in this case they have been converted to description tag pr close ,docs
8984,core remove unnecessary link injector jsdoc tag inline code block are automatically linked if possible to their api page pr close ,docs
8985,core migrate whatitdoes tag to the description we get the overview for the doc by splitting off the first paragraph pr close ,docs
8986,core migrate deprecated howtouse tag these have now become usagenotes but later they might be moved into a section of the description pr close ,docs
8987,aio move optional and default to end of param description pr close ,build
8988,common move pipe param doc to transform function pr close ,docs
8989,common migrate whatitdoes tag to the description we get the overview for the doc by splitting off the first paragraph pr close ,docs
8990,common migrate howtouse tag in pipe the content of these tag is now generated automatically in directive these tag have been converted to usagenotes tag but in the future me might find a way to generate that usage too pr close ,docs
8991,aio remove invalid nav item the customelements guide page wa renamed to element in ffdea that commit also added a new nav item for the renamed file so this item is no longer valid pr close ,docs
8992,aio fail the docgen if the nav is invalid pr close ,build
8993,serviceworker properly build npmpackage with bazel pr close ,build
8994,ivy fix in the todomvc example properly display initial checked state properly remove a todo please note that the archive option still doesnt work correctly a listening to component output doesnt seem to work onarchive is never called pr close ,test
8995,compilercli flat module index metadata should be transformed currently the flat module index metadata is produced directly from the source metadata the compiler however applies transformation on the typescript source during transpilation and also equivalent transformation on the metadata itself this transformed metadata doesnt end up in the flat module index this change the compiler to generate the flat module index metadata from it transformed version instead of directly from source pr close ,fix
8996,common simplify ngclass code add comment pr close ,refactor
8997,common properly take classname change into account fix pr close ,fix
8998,ivy misc refactoring pr close ,refactor
8999,bazel fix test for angularcommon ngpackage pr close ,test
9000,router fix typo in expectation pr close ,test
9001,form improve error message for invalid value accessors signedoffby dirk luijk maildirkluijknl pr close ,fix
9002,compilercli lower loadchildren field to allow dynamic module path computing the value of loadchildren doe not work externally a the cli need to be able to detect the path referenced to properly set up codesplitting however internally different approach to codesplitting require hashed module id and the computation of those hash involves something like path loadchildren hashfnmodule ngc should lower loadchildren into an exported constant in that case this will never break externally because loadchildren is always a string externally and a string wont get lowered pr close ,feat
9003,core inject should always work in an ngmodule injection scope currently the context for inject is only set when the token is seen for the first time this ha two issue it should always be set when injecting from that injector because a constructor may wish to call inject directly if an ngmodulefactory is created twice and an nginjectabledef token is requested from each of them the second time will fail this is because the first injection add the provider definition and call the factory and the provider definition are shared the second injector will see the provider definition and call the factory to create an instance but without setting the correct context for inject fix angularmaterial pr close ,fix
9004,common locale are not being shipped close pr close ,fix
9005,aio update to rxjsrc rwrr iminar primarygroup mar distannouncementbarmodulefbcdadechunkjs rwrr iminar primarygroup mar distapilistmodulebcceaecbechunkjs rwrr iminar primarygroup mar distcodeexamplemoduleabecfaaechunkjs rwrr iminar primarygroup mar distcodetabsmodulececebcaaechunkjs rwrr iminar primarygroup mar distcommonbadadachunkjs rwrr iminar primarygroup mar distcontributorlistmodulefebbbdbchunkjs rwrr iminar primarygroup mar distcurrentlocationmodulebbaafacchunkjs rwrr iminar primarygroup mar distexpandablesectionmoduleeabbchunkjs rwrr iminar primarygroup mar distfilenotfoundsearchmoduleebbceeefchunkjs rwrr iminar primarygroup mar distinlinedabdbundlejs rwrr iminar primarygroup mar distliveexamplemoduledbfaecbecchunkjs rwrr iminar primarygroup mar distmainacfddcdbbundlejs rwrr iminar primarygroup mar distpolyfillsfbddcbebundlejs rwrr iminar primarygroup mar distprettifydachunkjs rwrr iminar primarygroup mar distresourcelistmoduledcafaecedchunkjs rwrr iminar primarygroup mar distworkerbasicminjs pr close ,build
9006,ivy viewcontainerref basic scenario support pr close ,feat
9007,ivy create todo app in ivy pr close ,test
9008,ivy align compiler with runtime remove containerrefreshstart and containerrefreshend instruction from the output generate directive a a list in componentdef rather than inline into instruction this is consistent in making selector resolution runtime so that translation of template can follow locality pr close ,refactor
9009,ivy add eventhandle syntax support to compiler pr close ,feat
9010,ivy cleanup necessary domino file pr close ,refactor
9011,upgrade propagate return value of resumebootstrap fix pr close ,fix
9012,upgrade correctly handle downgraded onpush component fix pr close ,fix
9013,ivy generate pipe name instead of defs pr close ,refactor
9014,aio update to angularrc rwrr iminar primarygroup mar distannouncementbarmodulefbcdadechunkjs rwrr iminar primarygroup mar distapilistmodulebcceaecbechunkjs rwrr iminar primarygroup mar distcodeexamplemoduleabecfaaechunkjs rwrr iminar primarygroup mar distcodetabsmodulececebcaaechunkjs rwrr iminar primarygroup mar distcommonbadadachunkjs rwrr iminar primarygroup mar distcontributorlistmodulefebbbdbchunkjs rwrr iminar primarygroup mar distcurrentlocationmodulebbaafacchunkjs rwrr iminar primarygroup mar distexpandablesectionmoduleeabbchunkjs rwrr iminar primarygroup mar distfilenotfoundsearchmoduleebbceeefchunkjs rwrr iminar primarygroup mar distinlinedabdbundlejs rwrr iminar primarygroup mar distliveexamplemoduledbfaecbecchunkjs rwrr iminar primarygroup mar distmainbbeeaedfbbundlejs rwrr iminar primarygroup mar distpolyfillsfbddcbebundlejs rwrr iminar primarygroup mar distprettifydachunkjs rwrr iminar primarygroup mar distresourcelistmoduledcafaecedchunkjs rwrr iminar primarygroup mar distworkerbasicminjs pr close ,build
9015,aio upgrade to rxjsbeta pr close ,build
9016,aio pin aio to typescript pr close ,build
9017,compiler initial outline of ivy compiler architecture design doc ,docs
9018,compiler generate flat cs selector pr close ,refactor
9019,ivy flatten cs selector pr close ,refactor
9020,aio add monitoring for angulario this commit configures a periodic job to be run on circleci performing several check against the actual apps deployed to production and staging fix pr close ,ci
9021,aio fix sw routing regexp to allow redirecting apianimate url pr close ,fix
9022,aio move deployment config test and helper around this commit prepares the ground for adding different type of test pr close ,refactor
9023,aio wait for the app to stabilize before registering the sw this commit also wait for the app to stabilize before starting to check for serviceworker update this avoids setting up a long timeout which would prevent the app from stabilizing and thus cause issue with protractor pr close ,fix
9024,bazel emit metadatajson under blaze this commit modifies the compilation to emit metadatajson file when compiled under blaze the default behavior of ngc is to emit metadata only when the flatmoduleoutfile flag is specified but this mode is not used in blaze emitting metadata for individual angular component is needed for angular language service to work with project compiled with blaze pr close ,build
9025,bazel change publishnext script to publish bazel artifact pr close ,release
9026,compilercli include new test file in bazel config fix pr close ,build
9027,compilercli use numeric comparison for typescript version fix pr close ,fix
9028,bazel dont try to do flatmoduleindex under blaze pr close ,fix
9029,bazel complete the rollup globals list for all angular entrypoints pr close ,fix
9030,bazel downlevel decorator in fesm file needed so that our bundle appear sideeffectfree to tool like webpack pr close ,fix
9031,bazel pas global option to rollup this fix the umd bundle which otherwise dont contain the right global symbol pr close ,fix
9032,bazel ngpackage should include private export in fesms pr close ,fix
9033,languageservice enable language service test in bazel pr close ,ci
9034,compiler fix support for htmllike text in translatable attribute pr close ,fix
9035,aio fix typo in the scrollbar pr close ,style
9036,bazel dont inline tslib into fesms pr close ,fix
9037,compilercli run compilercli test in bazel pr close ,ci
9038,serviceworker ignore invalid onlyifcached request under some circumstance possibly related to opening chrome devtools request are made with cache onlyifcached and mode nocors these request will eventually fail because onlyifcached is only allowed to be used with mode sameorigin this is likely a bug in chrome devtools this commit avoids error related to such request by not handling them fix pr close ,fix
9039,serviceworker do not enter degraded mode when offline previously when trying to fetch ngswjson eg during checkforupdate while either the client or the server were offline the serviceworker would enter a degrade mode where only existing client would be served this essentially meant that the serviceworker didnt work offline this commit fix it by differentiating offline error and not entering degraded mode the serviceworker will remain in the current mode until connectivity to the server is restored fix pr close ,fix
9040,serviceworker minor test fix and refactorings pr close ,test
9041,ivy remove pipe reference from the template pr close ,refactor
9042,ivy store local variable in data instead of calling loaddirective pr close ,fix
9043,compiler lower ngmodule id if needed this change allows the id of an ngmodule to be dynamically computed if needed pr close ,feat
9044,languageservice remove angularonlyresults this commit is a duplicate of to remove angularspecific result from the language service pr close ,refactor
9045,ivy make sure googgetmsg is defined before being used pr close ,test
9046,ivy fix flaky test pr close ,test
9047,ivy remove directive reference from template pr close ,refactor
9048,bazel ngpackage package attr not forwarded to npmpackage pr close ,fix
9049,bazel add entrypointname attr to ngpackage pr close ,build
9050,bazel prefix privateexport barredlatino symbol this allows a bundle index to be reexported by a higherlevel module without fear of collision under bazel we always set the prefix to be underscorejoined workspace package label pr close ,feat
9051,common add httpparamsoptions to the public api fix pr close ,docs
9052,aio mark the titlecase pipe a pure pr close ,fix
9053,core dont override nginjectabledef in the decorator if present on the type previously injectable would generate an nginjectabledef on the type it wa decorating even if that type already had a compiled nginjectabledef overwriting the compiled version pr close ,fix
9054,compiler assert translation name pattern pr close ,test
9055,ivy update statusmd with compiler work breakdown pr close ,docs
9056,common titlecase pipe pr close ,fix
9057,bazel add data attr to ngpackage pr close ,build
9058,compiler move handling of translation to the constantpool pr close ,refactor
9059,compiler take quoting into account when determining if object literal can be shared pr close ,fix
9060,aio fix t warning error filter expects a boolean function param pr close ,docs
9061,aio remove rxjscompat dependency from example we should not longer need it pr close ,build
9062,aio update example to angularinmemorywebapi pr close ,build
9063,aio switch to pipeable rxjs operator pr close ,refactor
9064,aio upgrade rxjs to beta pr close ,build
9065,aio minor improvement pr close ,test
9066,aio upgrade rxjs to beta pr close ,build
9067,aio upgrade angular to rc pr close ,build
9068,aio update to typescript pr close ,build
9069,aio update to angularcorebeta pr close ,build
9070,aio update to angularcli pr close ,build
9071,compiler allow asserting matching identifier name pr close ,test
9072,compiler refactor code matching helper for compliance spec pr close ,refactor
9073,ivy move directive into separate array pr close ,refactor
9074,compiler run compiler test in bazel pr close ,ci
9075,ivy move dir flag to tnode pr close ,refactor
9076,core hello world in demo pr close ,test
9077,compiler add basic support for in ivyin code generation pr close ,feat
9078,animation treat numeric state name value a string this patch ensures that if a numeric state name value in an animation is detected then it will not throw an error normally this wouldnt occur but some j optimizers may convert a quoted numeric value like to in some case to save space this patch make sure that angular doesnt throw an error when this occurs pr close ,fix
9079,ivy change symbolextractor to use accept rather than —define updategolden using —define cause bazel to bust the cache which mean that doing bazel test target followed by bazel run —define updategolden target will cause cache to be invalidated and house full rebuild pr close ,fix
9080,ivy remove custom tsconfig from render pr close ,fix
9081,ivy update statusmd with compiler work breakdown pr close ,docs
9082,animation avoid animation insertion during router backrefresh close pr close ,fix
9083,compiler dont typecheck all input ngc know to filter out dts input but the logic accidentally depended on whether it had a previous program lying around fixing that logic put ngc on the fast code path but in that code path it must be able to merge tsickle emitresults so we need to plumb the tsicklemergeemitresults function through all the intervening apis the bulk of this change is that plumbing pr close ,fix
9084,serviceworker fix lrulist bug remove method not removing url from statemap accessed method not removing previous reference from existing node when it becomes the head fix fix pr close ,fix
9085,router make locationsyncbootstraplistener public due to change in output after t update in pr close ,fix
9086,ivy fix type error in newer version of t newer version of t is stricter about type and flag countervariant type in some situation this change inlines the directivedefargs into the argument which remove the inheritance which caused the issue and make it more friendly to ides since they will not report comment close close pr close ,fix
9087,router dont use spread operator to workaround an issue in closure compiler closure compiler could not handle the spread operator in this one place working around it by removing the use of spread operator pr close ,fix
9088,aio temporarily pin element to beta the next step will be to update all of aio to rc pr close ,build
9089,core upgrade rxjs to alpha pr close ,feat
9090,aio temporarily use rxjs from root nodemodules when using local package pr close ,build
9091,upgrade twoway binding and listening for event change would not propagate to a value in downgraded component in case you had twoway binding and listening to a valuechange eg valuevalue valuechangefetch close pr close ,fix
9092,compiler do not emit linechar in ngsummary file having ngsummaries emit linechar number cause white space change to retrigger upstream recompilations pr close ,fix
9093,ivy switch helloworld to ivy compiler pr close ,test
9094,bazel correct expected out for external source in ngmodule pr close ,fix
9095,ivy remove unnecessary binding from hello world pr close ,refactor
9096,ivy split up directivecreate for tree shaking pr close ,refactor
9097,ivy allow tick and deps to be treeshaken pr close ,refactor
9098,ivy move hostbindings call out of template pr close ,refactor
9099,ivy update status of ivy pr close ,docs
9100,element fix element test bootstrap pr close ,fix
9101,ivy ngmodule nginjectordef compilation this add compilation of ngmodule provider and import into nginjectordef statement in generated code all ngmodule annotation will be compiled and the ngmodule decorator removed from the resultant j output all injectables will also be compiled in ivy mode and the decorator removed pr close ,feat
9102,element remove attributeinput from config pr close ,feat
9103,element update packagejson with latest pr close ,feat
9104,element fix payload size pr close ,feat
9105,element another polyfill solution pr close ,feat
9106,element rebase pr close ,feat
9107,element fix lint pr close ,feat
9108,element rename api to createcustomelement pr close ,feat
9109,element make bazel happy pr close ,feat
9110,element injector create pr close ,feat
9111,element george comment pr close ,feat
9112,element provide type not factory remove config need pr close ,feat
9113,element add test for component factory strategy pr close ,feat
9114,element fix test pr close ,feat
9115,element add polyfill for element e shim pr close ,feat
9116,aio update payload size pr close ,feat
9117,aio add hack remove me pr close ,feat
9118,aio migrate embedded comp to element pr close ,feat
9119,element add support for creating custom element pr close ,feat
9120,ivy document project status move the status reporting from the issue to a file that can be updated a change are being made this address one of the comment on the issue and allows better tracking of update to this status and change made pr close ,docs
9121,ivy cache local name and support multiple local with same value pr close ,fix
9122,ivy correct export test and add query test pr close ,test
9123,bazel make ngpackage auto generate packagejson for secondary entrypoints pr close ,build
9124,compilercli fix tsconfigjson circularity issue fix pr close ,build
9125,compiler drop support for the deprecated template use ngtemplate instead breaking change the template tag wa deprecated in angular v to avoid collision ie when using web component this commit remove support for template ngtemplate should be used instead before html template templatesome template contenttemplate tsconfigjson angularcompileroptions this option is no more supported and will have no effect enablelegacytemplate truefalse after html template ngtemplatesome template contentngtemplate pr close ,refactor
9126,ivy double size of di bloom filter pr close ,refactor
9127,ivy access component def through tdata pr close ,refactor
9128,compiler support for singleline multiline jsdoc comment pr close ,feat
9129,aio update architecture section pr close ,docs
9130,bazel change ngpackage rule to apf v angular package format v stop bundling file in the esm and esm directory now that webpack can treeshake perfile add some missing file like packagejson to make package closer to what we publish today refactor ngpackage to be a type of npmpackage and reuse the packaging action from that rule pr close ,feat
9131,compilercli emit correct cs string escape sequence work around an issue with typescript and that cause the tranformer emit to emit incorrect escape for cs string literal fix pr close ,fix
9132,aio fix addnotyetdocumentedproperty processor it wa running too late and so wa being confused by the description being split into shortdescription and description property close pr close ,build
9133,aio improve the api pipe page this change add an impure badge for pipe that are marked a pure false a pipe specific overview that show the syntax for using a pipe in a template an input value section describing the type of the value that the pipe expects a pipe params section describing any additional params that a pipe expects pr close ,build
9134,platformserver add style to element correctly partially reverts due to lack of total spec compliance on the server maintains the camelcase style fix pr close ,fix
9135,ivy add canonical compiler spec for classstyle add a stub for elementstyle and elementclass instruction with a canonical spec for the compiler the spec show the the compiler should be using elementstyle and elementclass instruction in place of class and style binding respectively pr close ,test
9136,ivy rename classstyle to make space for new instruction rename elementclass short k elementclassnamed short kn elementstyle short s elementstylenamed short sn currently classname is elementclass ‘ name ’ value we would like to introduce new binding class which need a new instruction ideally elementclass value doing the rename creates space to create such an instruction in subsequent change pr close ,refactor
9137,ivy add componentfixture for cleaner test pr close ,test
9138,core remove core animation import symbol this patch remove the deprecated support for animation symbol import from angularcore breaking change it is no longer possible to import animationrelated function from angularcore all animation symbol must now be imported from angularanimations pr close ,fix
9139,ivy fix view manipulation logic this commit fix a bug that would result in view insert remove even if a view needed only refresh operation the crux of the bug wa that we were looking for a view to update only in the lcontainernextindex position this is incorrect a a view with a given block id could be present later in the view array this happens if we about to remove a view in the middle of the view array the code in this fix search for a view to update in the view array and can remove view in the middle of the view collection previously we would remove view at the end of the collection only pr close ,fix
9140,aio add ngjapan to event ngjapan will be held at june in tokyo japan pr close ,docs
9141,aio constrain error logging to improve reporting the loggererror method now only accepts a single error parameter and pass this through to the error handler this allows the error handler to serialize the error more accurately the various place that use loggererror have been updated see issuecomment pr close ,fix
9142,aio render docgen issue in overview dump related to pr close ,build
9143,core add task tracking to testability allow passing an optional timeout to testabilitys whenstable if specified if angular is not stable before the timeout is hit the done callback will be invoked with a list of pending macrotasks also allows an optional update callback which will be invoked whenever the set of pending macrotasks change if this callback return true the timeout will be cancelled and the done callback will not be invoked if the optional parameter are not passed whenstable will work a it did before whether or not the task tracking zone spec is available this change also migrates the testability unit test off the deprecated asynctestcompleter pr close ,feat
9144,ivy remove directiverefresh instruction pr close ,refactor
9145,compiler fix spelling error pr close ,docs
9146,ivy update rollup rule to prevent inlining symbol in debug the new rollup rule disables inlining symbol in debug mode this make it look a if there would be more symbol but in reality these are the symbol which are no longer being inlined pr close ,fix
9147,aio compute stability and deprecate stable tag close pr close ,build
9148,ivy remove inputspropertyname close pr close ,refactor
9149,bazel ngpackage rxjsoperators rollup config pr close ,build
9150,animation expose element and params within transition matcher pr close ,feat
9151,compilercli annotate ivy field a nocollapse in closure mode closure ha a transformation which turn servicenginjectabledef into servicenginjectabledef this transformation obviously break ivy in a major way the solution is to annotate the field a nocollapse however typescript appears to ignore synthetic comment added to a node during a transformation so the right way to add these comment doesnt work a an interim measure a postprocessing step just before the compiled j is written to disk appends the correct comment with a regular expression pr close ,fix
9152,ivy element property should not be stringified pr close ,fix
9153,aio remove unwanted overview heading pr close ,build
9154,aio move see also block to exportbase template this make it easier for all the api doc to display see also link in a consitent manner pr close ,build
9155,compilercli disabletypescriptversioncheck should be applied even for older tsc version previously the flag would only disable the check in the case we tried to use newer tsc version in g we sometimes take a while to update tsc but a a prerequisite of that angular need to be updated first this change enables u to update angular and use it in g while g is being update to the required tsc of course extra care is required when this check is disabled but since we control everything in g it on u to get this right i dont see any preexisting test for this and im not sure how to write them right now i filed pr close ,fix
9156,compilercli require node a runtime engine this is not expected to be a breaking change for anyone who on node lts currently v and aligns angularcompilarcli with angularclis runtime requirement pr close ,feat
9157,ivy support checknochanges pr close ,feat
9158,router correct overencoding of url fragment relates to pr close ,fix
9159,compilercli enableresourceinlining handle both style and styleurls when both are present the inlined style are appended to the end of the style pr close ,fix
9160,compilercli resolve resource url before loading them under enableresourceinlining also turn on the feature for bazel ngmodule rule pr close ,fix
9161,ivy support markforcheck pr close ,feat
9162,compilercli generate proper export identifier in cjs output when the compiler generates a reference to an exported variable in the same file it insert a synthetic tsidentifier node in commonjs output this synthetic node would not be properly rewritten with an export prefix this change set the t original node property on the synthetic node we generate which ensures t know to rewrite it in commonjs output pr close ,fix
9163,compilercli add resource inlining to ngc when angularcompileroptions enableresourceinlining true we replace all templateurl and styleurls property in component with templatestyles pr close ,feat
9164,ivy support attaching and detaching view from change detection pr close ,feat
9165,ivy produce renderer backpatching and factory produce backpatch a described in the and referenced in this just contains the compiler implementation and the corresponding unit test connecting the dot a described in will be in a follow on change pr close ,feat
9166,core replace ancient live demo pr close ,docs
9167,ivy add injection canonical spec pr close ,test
9168,ivy fix rebase error pr close ,refactor
9169,ivy support host attribute and property binding pr close ,feat
9170,ivy support changedetectorrefdetectchanges pr close ,feat
9171,ivy lifecycle hook should be queued for root component pr close ,fix
9172,ivy implement pipe pr close ,feat
9173,ivy add canonical example of binding on element pr close ,test
9174,form deprecate ngmodel usage on same field a formcontrol support for using the ngmodel input property and ngmodelchange event with reactive form directive ha been deprecated in angular v and will be removed in angular v now deprecated html input formcontrolcontrol ngmodelvalue t thisvalue some value this ha been deprecated for a few reason first developer have found this pattern confusing it seems like the actual ngmodel directive is being used but in fact it an inputoutput property named ngmodel on the reactive form directive that simply approximates some of it behavior specifically it allows gettingsetting the value and intercepting value event however some of ngmodels other feature like delaying update withngmodeloptions or exporting the directive simply dont work which ha understandably caused some confusion in addition this pattern mix templatedriven and reactive form strategy which we generally dont recommend because it doesnt take advantage of the full benefit of either strategy setting the value in the template violates the templateagnostic principle behind reactive form whereas adding a formcontrolformgroup layer in the class remove the convenience of defining form in the template to update your code before v youll want to decide whether to stick with reactive form directive and getset value using reactive form pattern or switch over to templatedriven directive after choice use reactive form html input formcontrolcontrol t thiscontrolsetvaluesome value after choice use templatedriven form html input ngmodelvalue t thisvalue some value you can also choose to silence this warning by providing a config for reactiveformsmodule at import time t import reactiveformsmodulewithconfigwarnonngmodelwithformcontrol never alternatively you can choose to surface a separate warning for each instance of this pattern with a config value of always this may help to track down where in the code the pattern is being used a the code is being updated note warnonngmodelwithformcontrol is set up a deprecated so that it can be removed in v when it is no longer needed this will not display properly in api doc yet because dgeni doesnt yet support deprecating property in object literal but we have an open issue to resolve the discrepancy here pr close ,refactor
9175,ivy provide sanitization method which can be tree shaken by providing a top level sanitization method rather than service the compiler can generate call into the method only when needed this make the method tree shakable pr close ,feat
9176,core move sanitization into core this is in preparation of having ivy have sanitization inline pr close ,refactor
9177,common export locale data a commonjs instead of e pr close ,build
9178,aio update deprecated http reference to httpclientmodule remove http reference because another context is used docsaio change httpclientmodule reference to httpclient docsaio capitalize http to http docsaio fix typo mistake in universal guide docsaio get rid of the parenthesis and the eg in universal guide pr close ,docs
9179,ivy back patch example pr close ,test
9180,aio compute and display short description in method previously only export doc were displaying a short description now method in class and interface also compute and render the short description close pr close ,build
9181,bazel fix for ngpackage on window pr close ,fix
9182,router fix url serialization so special character are only encoded where needed this change brings angular largely in line with how angularjs previously serialized url this is based on rfc and resolve issue such a the above where url could be parsed reserialized then parsed again producing a different result on the second parsing adjustment to be aware of in this commit uri fragment will now serialize the same a query string in the uri path or segment portion prior to query string andor fragment the plus sign and ampersand will appear decoded in the url path or segment parenthesis value and will now appear percent encoded a and respectively in the url path or segment semicolon will be encoded in their percent encoding b note parenthesis and semicolon denoting auxillary route or matrix params will still appear in their decoded form only parenthesis and semicolon used a value in a segment or keyvalue pair for matrix params will be encoded while these change are not considered breaking because application should be decoding url and keyvalue pair it is possible that some unit test will break if comparing hardcoded url in test since that hard coded string will represent the old encoding therefore we are releasing this fix in the upcoming angular v rather than adding it to a patch for v fix pr close ,fix
9183,ivy add support for the ngprojectas attribute pr close ,feat
9184,compiler fix a line about ivy library pr close ,docs
9185,aio tidy up embedded toc styling the spacing didnt work well when the screen wa narrow pr close ,fix
9186,aio reposition and shrink the api badge close pr close ,fix
9187,aio allow template to position embedded toc previously the docviewer would insert an embedded aiotoc element into the dom directly after the h element now it will not do this if there is already a such element in the doc content this allows the contentauthortemplatedeveloper to position the toc for specific case pr close ,feat
9188,ivy preventdefault when listener return false close pr close ,fix
9189,aio indicate whether property are readonly in api page pr close ,build
9190,aio reposition and simplify github link close pr close ,fix
9191,aio render whether api class and member are abstract close pr close ,build
9192,aio fix table header pr close ,docs
9193,aio class api template once again extends exportbase pr close ,build
9194,aio render param description for function export close pr close ,build
9195,aio remove all link from toc title the previous approach just removed the first a tag that wa found but now that the headerlink anchor is not at the start of the heading it could fail close pr close ,fix
9196,ivy add injectattribute spec pr close ,test
9197,ivy break compiler canonical test into smaller file pr close ,refactor
9198,bazel build and test tsapiguardian locally also use it to test the public api for core and common once we have an ngpackage for every package we can remove the npm dependency on tsapiguardian and the gulpbased public api check pr close ,test
9199,ivy support generating view and content query pr close ,feat
9200,ivy support array and object literal in binding expression pr close ,feat
9201,compiler allow treeshakeable injectables to depend on string token previously the injectable compiler assumed all treeshakeable injectables would have dependency that were injectables or injectiontokens however old code still us string token eg ngupgrade and injector using such token would cause the injectable compiler to crash now the injectable compiler can properly generate a dependency on such a string token pr close ,fix
9202,compiler ivy separate compilation design document pr close ,docs
9203,aio improve accuracy of code autolinking the new version of dgenipackagestypescript no longer strip out namespaces from type which wa part of the problem of not autolinking correctly to httpeventtyperesponse another part of the problem wa that we did not include character when matching potential code block for autolinking which precluded property of enums from being linked finally member we not being given a path property which is needed to effectively autolink to them this is now set in the simplifymemberanchors processor close pr close ,build
9204,aio move link disambiguation from getlinkinfo to getdocfromalias the disambiguation need to be done earlier so that the autolinkcode postprocessor can benefit from it pr close ,build
9205,aio initialise examplemap correctly the examplemap need to hold an hash object for each of the collectexamplesexamplefolders path previously these hash object were only created if there wa actually an example file the hash respective example folder this could cause crash during yarn docswatch and so also yarn syncandserve if no example were read in for a particular run of the docgen pr close ,build
9206,ivy support injecting changedetectorref pr close ,feat
9207,bazel ngpackage includes transitive dts and flatmodulemetadata fix pr close ,fix
9208,bazel ngpackage add packagejson prop we now add the main module e and typing property pointing to where the packaging tool lay them out fix pr close ,feat
9209,core export inject from angularcore inject support the nginjectabledefbased configuration of the injector otherwise known a treeshakeable service it wa missing from the exported api of angularcore this pr add it the test added here is correct in theory but may pas accidentally due to the decorator sideeffect replacing the inject call at runtime an upcoming compiler pr will strip reified decorator from the output entirely fix pr close ,fix
9210,aio add usagenotes tag def for api doc pr close ,build
9211,aio add newline between test block pr close ,style
9212,aio split the description property in api doc the first paragraph is now split off into the shortdescription property usage of howtouse and whatitdoes have been updated the overview heading for class is removed a it is selfevident the original horizontal rule styling below the main heading is removed a not part of the new design close pr close ,build
9213,aio remove heading border pr close ,fix
9214,aio add processor to migrate legacy tag whatitdoes and howtouse see pr close ,build
9215,aio deprecate howtouse and whatitdoes tag see pr close ,build
9216,ivy support onpush change detection pr close ,feat
9217,ivy store creationmode in lviewflags pr close ,refactor
9218,upgrade correctly destroy nested downgraded component previously when a downgraded component wa destroyed in a way that did not trigger the destroy event on the element eg when a parent element wa removed from the dom by angular not angularjs the componentref wa not destroyed and unregistered this commit fix it by listening for the destroy event on both the element and the scope fix pr close ,fix
9219,aio render heading anchor on the right this approach simplifies the styling needed considerably previously we had to make room on the left for heading that are in visual container also we had to apply a floatright when on narrow screen a the gutter not available then this float didnt render nicely if the heading text wa longer than could be rendered on a single line close ,build
9220,aio do not show propertiesmethods section if only internal member pr close ,fix
9221,aio add observable and rx doc pr close ,docs
9222,aio fix api doc breadcrumb this also prevents some extra a element inserted by the browser trying to fix the html structure which also fix the headerlink added in toc fix close pr close ,build
9223,aio do not render constructor heading in api doc close pr close ,build
9224,aio updated paddingright for the alert class in headinganchorsscss the h element is overflowing over it surrounding div element modified paddingright to align consistently with the remainder of div content fix pr close ,style
9225,aio added paddingleft to h in subsectionscss the h element is overflowing over it surrounding div element modified paddingleft to align consistently with the remainder of div content fix pr close ,style
9226,aio move forgotten ee test to the correct folder pr close ,test
9227,aio render subclass seealso block in the main flow close pr close ,build
9228,platformserver generate correct stylings for camel case name add correct mapping from camel case to kebab case for cs style name remove internal cs method in favor of native domino apis fix pr close ,fix
9229,platformserver bump domino to v breaking change bump the dependency on domino to to resolve issue with namespacing pr close ,feat
9230,aio fix rendering of callable and constructable interface member close pr close ,build
9231,aio render default value for optional parameter close pr close ,build
9232,aio render whether parameter are optional close pr close ,build
9233,aio group api member by type in overview now the overview group the member in the following order static property static method constructor instance property instance member close pr close ,build
9234,aio fix doc typo referring to the variable name mention should match the actual tutorial code pr close ,docs
9235,upgrade fix empty transclusion content with angularjs the function provided by ngupgrade a parentboundtranscludefn when upgrading a component with transclusion will break in angularjs v if no transclusion content is provided the reason is that angularjs will try to destroy the transclusion scope which would not be needed any more but since the transcluded content come from angular not angularjs there is no transclusion scope to destroy this commit fix it by providing a dummy scope object with a noop destroy method fix pr close ,fix
9236,upgrade correctly handle binding in angularupgrade previously having a binding on an upgraded component would result in setting the corresponding property to an eventemitter function this should only happen for binding this commit rstrores the correct behavior note the issue wa only present in the dynamic version of ngupgrade the static version worked a expected the error did not show up in test because in angularjs vx a function would be serialized to an empty string in interpolation thus making them indistinguishable from uninitialized property in the view the serialization behavior changed in angularjs vx making the error visible pr close ,fix
9237,upgrade run test against multiple angularjs version fix pr close ,test
9238,upgrade use correct path for import packagesupgradestaticsrc is anymlink to packagesupgradesrc still using the correct path eg using angularupgradestaticsrc for angulaupgradestatic spec ensures that the module loader eg systemjs can map the import to the same instance pr close ,refactor
9239,platformbrowser remove stray debugger statement pr close ,test
9240,common export function to format number percent currency date the utility function formatnumber formatpercent formatcurrency and formatdate used by the number percent currency and date pipe are now available for developer who want to use them outside of template fix pr close ,feat
9241,router fix url serialization so special character are only encoded where needed fix this change brings angular largely in line with how angularjs previously serialized url this is based on rfc and resolve issue such a the above where url could be parsed reserialized then parsed again producing a different result on the second parsing adjustment to be aware of in this commit query string will now serialize with decoded slash and question mark uri fragment will now serialize the same a query string but hash sign will also appear decoded in the uri path or segment portion prior to query string andor fragment the plus sign and ampersand will appear decoded in the url path or segment parenthesis value and will now appear percent encoded a and respectively in the url path or segment semicolon will be encoded in their percent encoding b note parenthesis and semicolon denoting auxillary route or matrix params will still appear in their decoded form only parenthesis and semicolon used a value in a segment or keyvalue pair for matrix params will be encoded while these change are not considered breaking because application should be decoding url and keyvalue pair it is possible that some unit test will break if comparing hardcoded url in test since that hard coded string will represent the old encoding therefore we are releasing this fix in the upcoming angular v rather than adding it to a patch for v pr close ,fix
9242,bazel add an ngpackage rule this produce a directory following the angular package layout spec includes integration test coverage by making a minimal ngpackage in integrationbazel unit test verify the content of the angularcore and angularcommon package this doesnt totally match our current output but is good enough to unblock some early adopter it reuses logic from the rollupbundle rule in rulesnodejs it should also eventually have the pack and publish secondary target like npmpackage rule pr close ,feat
9243,aio essential j url updated pr close ,docs
9244,aio essential j ui component pr close ,docs
9245,ivy rename componentrefresh to directiverefresh pr close ,refactor
9246,ivy ngonchanges to receive simplechanges with non minified property name a key pr close ,fix
9247,animation only use the wapolyfill alongside animationbuilder this patch remove the need to include the web animation api polyfill webanimationsjs a a dependency angular will now fallback to using cs keyframes in the event that elementanimate is no longer supported by the browser in the event that an application doe use animationbuilder then the webanimationsjs polyfill is required to enable programmatic positionbased access to an animation close pr close ,fix
9248,router dont mutate route configs fix pr close ,fix
9249,ivy ondestroy hook should not be called twice for a directive on an element pr close ,fix
9250,core support metadata reflection for native class type close pr close ,feat
9251,ivy add missing test on directive lifecycle hook pr close ,test
9252,form allow markaspending to emit event close breaking change abstractcontrolstatuschanges now emits an event of pending when you call abstractcontrolmarkaspending previously it did not emit an event when you called markaspending to migrate you would need to ensure that if you are filtering or checking event from statuschanges that you account for the new event when calling markaspending pr close ,feat
9253,core support metadata reflection for native class type close pr close ,feat
9254,form set state before emitting a value from ngmodelchange close pr close ,fix
9255,core properly handle function without prototype in reflector close pr close ,fix
9256,aio update directive event hook real capability minor documentation update to include event hook that were assumed to only work on component close angularangular pr close ,docs
9257,aio wrong code example form status field wa added later in the guide pr close ,docs
9258,fix a typo in code comment pr close ,docs
9259,aio fix incorrect quote mark usage pr close ,docs
9260,aio fix the cs of the hero component button fix pr close ,docs
9261,aio fix name of component pr close ,docs
9262,aio update installed mobile tool list pr close ,docs
9263,compilercli add missing entry point to package update tsickle pr close ,fix
9264,ivy generate pipe reference and definition pr close ,feat
9265,ivy purefunction should update the right binding pr close ,fix
9266,aio add nx and angular enterprise playbook to resource pr close ,docs
9267,languageservice fix minor typo pr close ,test
9268,common then and else template might be set to null pr close ,fix
9269,ivy update master with renamings pr close ,fix
9270,ivy simplify interpolation instruction pr close ,refactor
9271,ivy move get function next to their underlying variable pr close ,refactor
9272,ivy update the api doc instruction to add detail about removing attribute pr close ,docs
9273,ivy interpolatiom instruction do not support nochange at input pr close ,refactor
9274,ivy split the memory instruction into store and load pr close ,refactor
9275,compilercli check unvalidated combination of ngc and typescript close pr close ,feat
9276,aio add angularbuch to resource add a link to the website of our book second version of the text thanks pr close ,docs
9277,aio add angularbuch to resource add a link to the website of our book many thanks for reviewing this pr close ,docs
9278,ivy fix merge error master is broken pr close ,fix
9279,platformbrowser do not throw error when hammerjs not loaded close pr close ,feat
9280,common better error message when nontemplate element used in ngif close pr close ,feat
9281,ivy support host attribute pr close ,feat
9282,ivy add missing host listener and host attribute binding test pr close ,test
9283,ivy add missing host binding and query test pr close ,test
9284,ivy add smallapp spec for sprint pr close ,test
9285,ivy move compiler canonical spec into a single directory pr close ,test
9286,aio improve announcementbar layout with wide logo pr close ,fix
9287,aio added ngconf announcement pr close ,docs
9288,ivy add purefunction instruction pr close ,feat
9289,ivy rename objectliteral to purefn to prep for pipe pr close ,refactor
9290,animation report correct totaltime value even during noop animation this patch ensures that if the noopanimationsmodule is used then it will correctly report the associated totaltime property within the emitted animationevent instance when an animation event trigger is fired breaking change when animation is trigged within a disabled zone the associated event which an instance of animationevent will no longer report the totaltime a it will emit the actual time of the animation to detect if an animation event is reporting a disabled animation then the eventdisabled property can be used instead pr close ,fix
9291,ivy clean the imported renderer pr close ,test
9292,common correct mapping of observable method fix pr close ,fix
9293,aio increase docstest timeouts to prevent flake on travis pr close ,test
9294,core set preservewhitespaces to false by default fix pr close ,feat
9295,ivy add a note about exporting top level variable pr close ,docs
9296,core require factory to be provided for shakeable injectiontoken injectiontoken can be created with an nginjectabledef and previously this allowed the full expressiveness of injectable however this requires a runtime reflection system in order to generate factory from expressed provider declaration instead this change requires scoped injectiontokens to provide the factory directly likely using inject for the argument bypassing the need for a reflection system fix pr close ,fix
9297,ivy rename bindx function to interpolationx rationale remove the confusion with bind and bind pr close ,refactor
9298,bazel ngmodule produce bundle index it creates the bundle index dts and metadatajson file the name are based on the ngmodule target pr close ,feat
9299,bazel introduce a binary stamping feature this grab version control metadata and make it available in the build eg to put in the version field for released artifact pr close ,feat
9300,bazel convert most tslibrary to ngmodule this is necessary so we can produce ng metadata for our package that are published a library pr close ,refactor
9301,ivy assertion encourage the use of message to explain the assertion pr close ,refactor
9302,aio improve printing style printfix pr close ,fix
9303,aio improve printing style printfix pr close ,fix
9304,ivy assertion encourage the use of message to explain the assertion pr close ,refactor
9305,platformbrowser fix can config hammeroptions pr close ,feat
9306,aio fix extraneous divs pr close ,docs
9307,ivy clean up canonical spec pr close ,test
9308,compiler make unary plus operator consistent to javascript fix pr close ,fix
9309,platformbrowser support falsenull value in transferstate issue pr close ,fix
9310,core add stacktrace in log when error during cleanup component in testbed pr close ,fix
9311,ivy use official build optimizer rollup plugin in int test pr close ,perf
9312,ivy o should work with multiple template instance close ,fix
9313,aio fix typo in preservewhitespaces example fix pr close ,docs
9314,common weaken asyncpipe transform signature the asyncpipe type signature wa changed to allow deferred creation of promise and observalbes that is supported by the implementation by allowing promisetnullundefined and by allowing observabletnullundefined pr close ,fix
9315,bazel allow ngmodules to elide ngsummaryclosurejs file pr close ,build
9316,compiler mark ngmodules in provider list for identification at runtime all of the provider in a module get compiled into a module definition in the factory file some of these provider are for the actual module type a those are available for injection in angular for treeshakeable token the runtime need to be able to distinguish which module are present in an injector this change add a nodeflag which tag those module provider for later identification pr close ,feat
9317,platformbrowser add injectable where it wa missing pr close ,fix
9318,aio add angularplayground to resource pr close ,docs
9319,aio add angularschule to resource add a link to our website many thanks for reviewing this pr close ,docs
9320,aio remove broken span closing tag pr close ,fix
9321,ivy code simplification pr close ,refactor
9322,ivy generatepropertyaliases pr close ,refactor
9323,router move activation to private method pr close ,refactor
9324,aio put structural directive back in the nav pr close ,docs
9325,bazel allow t to read ambient typing same fix a this is because the compileroptions need to have directoryexists undefined in order to get the google behavior so we have to set the property outside the constructor fix pr close ,fix
9326,bazel allow ngmodules to elide ngsummaryclosurejs file pr close ,build
9327,common round currency based on decimal digit in currencypipe by default we now round currency based on the number of decimal digit available for that currency instead of using the rouding defined in the number format more info about that can be found in fix pr close ,fix
9328,common regenerate in locale data file pr close ,fix
9329,common add locale currency value we now use locale currency symbol since they may be different in each locale we were only using english data previously fix pr close ,fix
9330,aio do not rewrite styleguide url in service worker this url need to be redirected via the server so we must exclude it from being rewitten close pr close ,fix
9331,aio enable data driven homepage announcement pr close ,feat
9332,ivy validate that identifier identity in emitted output modifies validation syntax to generate back reference to ensure that identifier are used consistently introduced … to allow validating constant definition and usage pr close ,refactor
9333,aio first pas api doc redesign includes display toc for api doc update dgenipackages to add floating sidebar in api doc add breadcrumb and structured data for google crawler improved rendering of method overload property rendered in a table params rendered with doc removal of outdated infobox from all api doc pr close ,feat
9334,aio several fix for ngmodule guide pr close ,docs
9335,bazel improve error message for missing asset fix pr close ,fix
9336,common add httpparamsoptions to the public api fix pr close ,docs
9337,ivy normalize template name in canonical spec pr close ,test
9338,core use appropriate inert document strategy for firefox safari both firefox and safari are vulnerable to x if we use an inert document created via documentimplementationcreatehtmldocument now we check for those vulnerability and then use a domparser or xhr strategy if needed further the platformserver ha it own library for parsing html so we sniff for that by checking whether domparser exists and fall back to the standard strategy thanks to cure for the head up on this issue pr close ,fix
9339,ivy add internal isproceduralrenderer pr close ,refactor
9340,ivy prefix viewstart viewend with embedded pr close ,refactor
9341,ivy use long instruction format in test pr close ,refactor
9342,ivy simplify dedup api doc for caninsertnativenode pr close ,docs
9343,aio remove ngatl banner from homepage close pr close ,docs
9344,ivy also track the size of the compressed hello world bundle pr close ,test
9345,aio remove lifecycle hook img pr close ,docs
9346,aio update example to cli to pr close ,build
9347,ivy add canonical spec for object literal pr close ,test
9348,ivy make pipe invocation locality neutral pr close ,fix
9349,aio report loggererror call to google analytics we have a number of observables that have catch handler to recover from error without causing the stream to close and breaking the app we also have some try catch block for synchronous code for a similar reason in these case we conventionally then call loggererror in the catch handler we are interested in these error so we are going to capture them by reporting them to google analytics via the new reportingerrorhandler pr close ,feat
9350,aio report application error to google analytics this is a basic implementation of error logging using the limited facility provided by google analytics error within the angular app itself will be handled by a new reportingerrorhandler service which override and extends the builtin errorhandler further error outside the app which arrive at windowonerror will also be reported to google analytics close pr close ,feat
9351,bazel allow explicit specification of factory the ngmodule rule now ha a factory attribute that allows explicit specification of which file are expected to generate factory this allows avoiding generating empty factory file such a ngfactoryjs begin generated which might cause downstream tool issue if they have a limit on the number of file that can be processed in a single bazel action pr close ,feat
9352,languageservice correct instruction to install the language service fix pr close ,fix
9353,core ensure initial value of querylist length set initial value of length to fix regression introduced by where the length property ceased to have initial value close pr close ,fix
9354,common disable deprecated date pipe test on chrome mobile close pr close ,test
9355,form update test name with correct wording use the term primitive value instead of standalone fix pr close ,test
9356,aio ignore headerlink when selecting the heading text implemented maxkorzs suggestion fix pr close ,fix
9357,aio prevent heading misplacement while style load during the initial load of the page probably until the icon style are loaded andor applied the headerlink element is wider pushing the heading text slightly to the right for a brief moment this commit prevents this slight shift by explicitly setting the width for the headerlink element pr close ,fix
9358,aio ensure headerlinks are visible at px pr close ,fix
9359,aio simplify headerlink style pr close ,refactor
9360,aio reduce flicker and reflows for initial rendering for the initial rendering where there is no transition from a previous visual state to a new one animation make little sense the page should load with a few reflows a possible similarly while we typically want to defer updating the sidenav state eg openedclosed until the leaving document is animated out of the page on the initial rendering where there is no leaving document this lead to the sidenav flashing from closed to open these worked a expected before but several part mostly related to document with a sidenav have been accidentally broken in recent commits eg when upgraded to latest material or enabled animation for docviewer transition etc this commit restores the previous behavior by ensuring that on the initial rendering the sidenav state is updated a soon a possible and that there will be no animation when the hamburger button appears the sidenav is opened the main section width is adjusted to make room for the sidenav pr close ,fix
9361,aio preserve httpclient asynchronicity in test previously the mocked httpclient wa synchronous in test despite the actual httpclient being asynchronous although we use observables which generally make the implementation syncasyncagnostic the fact that we have no control over when angular updateschecks view and call lifecycle hook resulted in different behavior and error in test with sync httpclient v actual app with async httpclient this commit ensures that the behavior and error are consistent between the test and the actual app by making the mocked httpclient asynchronous pr close ,refactor
9362,aio remove link from submenu toggle navigating to a document while trying to expand or collapse a submenu is undesirable and confusing all submenu toggle should have no other effect than expandingcollapsing the corresponding submenu pr close ,fix
9363,animation fix typo disbled disabled pr close ,docs
9364,form set state before emitting a value from ngmodelchange close pr close ,fix
9365,form prevent event emission on enabledisable when emitevent is false previously the emitevent flag wa only checked when emitting on the current control thus if the control wa part of a hierarchy event were emitted on the parent and the childrens this fix the issue by properly passing the emitevent flag to both parent and childrens fix pr close ,fix
9366,form make validatorsemail support optional control bring email validator in line with other validators so that empty value are ignored pr close ,fix
9367,form multiple validators for array method change array method signature so that array of validator andor async validatior function can be passed fix pr close ,feat
9368,aio blacklist unwanted url from the generated sitemapxml close pr close ,build
9369,aio fix toh inclusion of heroesservice change doc where the messageservice is referenced fix pr close ,docs
9370,form custom validator example selector name incorrect added bobby ee test for template form fix pr close ,docs
9371,form custom validator example selector name incorrect name of selector in forbiddenname example is not consistent with validator class nor html selector example added the selector name appforbiddenname a an alias name for the input of the validator class and updated the view accordingly fix pr close ,docs
9372,ivy create hello world rollup this is a customization of the rollupbundle rule from rulesnodejs which add the buildoptimizer a a plugin add a functional test with fast roundtrip that asserts the minified app still work publish the minjs artifact on circleci so we can track it size pr close ,build
9373,form publish missing type pr close ,fix
9374,ivy memoize array literal in render pr close ,feat
9375,ivy improve uglify configuration in hello world integration test pr close ,perf
9376,core fix proper propagation of subscription in eventemitter close pr close ,fix
9377,core fix dont need to wrap zone in location change listener pr close ,fix
9378,aio fix swap value ha been swapped in for of pr close ,docs
9379,ivy improve bindv perf and memory usage fix the case when first dynamic value are nochange do not store the static text even index a binding do not diff static text they do not change do not stringify static text remove superfluous value walking pr close ,fix
9380,ivy simplify bind code pr close ,refactor
9381,aio add api static member to search index previously searching for compose did not include validators in the search result because we were not including all the static member of api doc in the index pr close ,build
9382,ivy misc refactoring pr close ,refactor
9383,aio dynamically preemptively add noindex these tag are removed when the doc is ready and valid but this will allow u to block indexing in the case that the angular app fails to bootstrap or load the document for some non reason this should get around the problem with hardcoded tag see close pr close ,feat
9384,core should check zone existance when schedulemicrotask pr close ,fix
9385,aio update doc changelog with link to tstojs guide pr close ,docs
9386,aio update firebase redirects and sw route close pr close ,fix
9387,aio test service worker routing configuration pr close ,build
9388,aio test firebase hosting redirection configuration pr close ,build
9389,aio move test config and ee test into subfolders this is in preparation of putting firebase and service worker deployment test into the project pr close ,build
9390,ivy add canonical example of a pipe pr close ,feat
9391,ivy generate lifecycle pattern implement the lifecycle pattern defined in pr close ,fix
9392,ivy generate correct interpolation ivy compile would generate the an incorrect interpolation if there were more than interpolation in a text block fix pr close ,fix
9393,aio move zip and liveexample generation to yarn predocs task this will prevent the confusing error for first time user who try to generate the doc with yarn doc and are told there are dangling link close pr close ,build
9394,ivy remove unnecessary parameter of ngonchangesfeature pr close ,fix
9395,common dont convert null to a string when flushing a mock request a bug in testrequest caused null response body to be stringified this change cause null to be treated faithfully fix pr close ,fix
9396,aio add missing closing codeexamle tag pr close ,docs
9397,compilercli reflect static method added to class in metadata pr close ,feat
9398,ivy add support for attribute on ngcontent node by adding attribute on the ngcontent element template author can decide how content should be reprojected or in other word which selector should match reprojected content pr close ,feat
9399,ivy temp disable payload limit test pr close ,test
9400,serviceworker describe safetyworkerjs in sw guide pr close ,docs
9401,ivy enable size tracking of a minimal cli render application pr close ,ci
9402,aio upgrade to dgenipackages this ha two benefit it prepares the way for the api doc update which need parameter doc it doesnt incorrectly report dangling link for nonlatin anchor close pr close ,build
9403,ivy compiler should emit new refresh pattern change compiler to reflect change made in pr close ,fix
9404,ivy save check method separately pr close pr close ,refactor
9405,ivy add support for content query pr close ,feat
9406,ivy add canonical view query example pr close ,test
9407,ivy reintroduce querypredicate with more focused role pr close pr close ,refactor
9408,ivy rename querypredicate to lquery pr close ,refactor
9409,ivy rename lquery to lqueries and associated renames pr close ,refactor
9410,ivy observable querylist pr close ,feat
9411,serviceworker add helper script which will uninstall sw service worker can be tricky to work with in production and often it becomes necessary to deactivate an existing sw this is trickier than one might imagine a long a client on the old sw may exist it is important to serve some script at the old sw url this commit add safetyworkerjs to the published npm package which is useful for that purpose on install the sw unregisters itself which safely and gradually allows older client to update pr close ,feat
9412,common generate closurelocale data file with exported plural function fix pr close ,fix
9413,common allow httpinterceptors to inject httpclient previously an interceptor attempting to inject httpclient directly would receive a circular dependency error a httpclient wa constructed via a factory which injected the interceptor instance user want to inject httpclient into interceptor to make supporting request ex to retrieve an authentication token currently this is only possible by injecting the injector and using it to resolve httpclient at request time either httpclient or the user ha to deal specially with the circular dependency this change move that responsibility into httpclient itself by utilizing a new class httpinterceptinghandler which lazily load the set of interceptor at request time it possible to inject httpclient directly into interceptor a construction of httpclient no longer requires the interceptor chain to be constructed fix pr close ,fix
9414,ivy save check method separately pr close ,refactor
9415,form inserting and removing control should work in rebound form array close pr close ,fix
9416,ivy use buildoptimizer in helloworldrenderrollup integration test pr close ,perf
9417,ivy support ngcontent projection in the ivy compiler pr close ,feat
9418,aio missing plural s in preservewhitespaces example pr close ,fix
9419,router add navigationsource and restoredstate to navigationstart event currently navigationstart there is no way to know if an navigation wa triggered imperatively or via the location change these two use case should be handled differently for a variety of use case eg scroll position restoration this pr add a navigation source field and restored navigation id passed to navigation triggered by a url change pr close ,feat
9420,ivy fix issue found producing hello world example pr close ,fix
9421,ivy emit type type field pr close ,fix
9422,ivy correct error in template variable specification pr close ,fix
9423,ivy correct query read logic after merges pr close ,fix
9424,ivy code review change pr close ,refactor
9425,ivy remove generation of comment pr close ,perf
9426,aio dont set noindex metatag in the static indexhtml this seems to be causing crawling issue for google ref pr close ,fix
9427,core fix retrieving the binding name when an expression change fix fix pr close ,fix
9428,ivy call onchanges before oninit pr close ,fix
9429,ivy add canonical lifecycle example pr close ,test
9430,aio prevent window error on serveandsync running yarn start which watch the src directory and yarn docswatch which clean up file in srcgeneratedapi often result in enotempty error this commit solves it by ensuring that yarn doc ha been completed before running yarn start pr close ,build
9431,languageservice ensure correct path are passed to typescript the version of typescript resolvemodulename started to require path passed to be separated by instead of being able to handle ngc and ng already do this transformation fix pr close ,fix
9432,languageservice spell diagnostics correctly pr close ,fix
9433,router remove internal tag on paraminheritancetype this is a more defensive approach to ensure that reference to paraminheritancetype from the published declaration do not cause compilation error when compiling angular from the published package fix pr close ,fix
9434,router add navigationsource and restoredstate to navigationstart event currently navigationstart there is no way to know if an navigation wa triggered imperatively or via the location change these two use case should be handled differently for a variety of use case eg scroll position restoration this pr add a navigation source field and restored navigation id passed to navigation triggered by a url change pr close ,feat
9435,aio close sidenav on nonsidenav doc on wide screen partly address pr close ,fix
9436,aio fix sidenav height on narrow screen since we specify bottom specifying the height is unnecessary and lead to wrong height unless updated on narrow screen where the topbar height is decreased partly address pr close ,fix
9437,ivy implement querylist arrayrelated method pr close ,feat
9438,ivy implement template variable pr close ,feat
9439,common specify explicit locale dir in packagejson pr close ,build
9440,form allow formbuilder to create control with any formstate type align formstate type in formbuildercontrol with formcontrolconstructor fix pr close ,fix
9441,aio fix missing stylesheet in componentstyles example the code in the example wa referring to heroappcomponentcss but this did not exist pr close ,docs
9442,aio fix path to imported cs stylesheets the aot compiler need relative path so that it can find the imported stylesheets pr close ,docs
9443,aio upgrade cli version to cope with new angular beta release before version of angular cli there wa a check that prevented use of angular compiler cli with major version pr close ,build
9444,ivy support deep query through view boundary pr close ,feat
9445,ivy flatten hook and collapse lview hook property pr close ,refactor
9446,ivy move ondestroys out of cleanup pr close ,refactor
9447,ivy remove unnecessary compr function pr close ,refactor
9448,ivy move content and view hook into tview pr close ,refactor
9449,ivy move init hook into tview pr close ,refactor
9450,ivy add type and hook to directive def pr close ,refactor
9451,ivy correct ondestroy order for projected component pr close ,fix
9452,ivy add aftercontentinit and aftercontentchecked to render pr close ,feat
9453,ivy add missing lifecycle test for projected component pr close ,test
9454,compiler dont strip sourceurl currently shimcsstext only keep sourcemappingurl comment and strip sourceurl comment so chrome cant find the source map for component stylethats created in new style tag pr close ,fix
9455,aio add missing leading slash on firebase redirect pr close ,fix
9456,router dont use paramsinheritancestrategy in declaration paramsinheritancestrategy is internal so any reference to it from the published dts file will fail fix pr close ,fix
9457,aio remove remaining plnkr reference pr close ,fix
9458,aio check for obsolete plnkrjson and missing main file also remove plnkrjson for serviceworkergettingstarted guide since it is not used and serviceworker can not work correctly in plnkrstackblitz anyway eg no build step to recompute hash a zipper might be useful and can be added in a subsequent pr but it is currently broken eg no dependency on angularserviceworker pr close ,build
9459,aio upgrade sample packagejson file to jasmine update tooling to support revised testing guide pr require jasmine upgrade for example that use marble testing copy clipackagejson to testing and add jasminemarbles resolve merge conflict created by ngmodules guide pr close ,build
9460,aio migrate plunker to stackblitz pr close ,build
9461,ivy content projection canonical example pr close ,test
9462,compiler fix icu select message to use malefemaleother related to pr close ,fix
9463,form better description and coverage for fix pr close ,test
9464,ivy add name to function expression pr close ,fix
9465,aio add missing forward slash to redirect pr close ,fix
9466,aio add test for firebase redirection pr close ,build
9467,aio update doc changelog with link to tstojs guide pr close ,docs
9468,aio update redirects to fix unwanted s close pr close ,fix
9469,compilercli do not fold error past call in the collector folding error passed call prevented the static reflector from begin able to ignore error in annotation it doesnt know a the call to the unknown annotation wa elided from the metadata fix pr close ,fix
9470,ivy update specification to include template variable pr close ,feat
9471,ivy support for the ngforof directive with test implement ngonchangesfeature viewcontainerref templateref and the renderembeddedtemplate instruction and wire together the piece required for the ngforof directive to work pr close ,feat
9472,ivy avoid circular dep with querydiinstructions to prepare for pending ngforof work the dep from instruction query should be broken this will enable a dep from di instruction while avoiding a di instruction query di cycle analyzing this cycle also uncovered another problem the implementation of query break treeshaking through a hard dependency on di concept of templateref elementref viewcontainerref this is fundamentally due to how query can query for those value without any configuration instead this fix introduces the concept by employing the strategy pattern and redefining queryreadtype to pas a function which will return one of the above value this strategy is then used for read instead of an enum in case where special value should be read from the di system pr close ,refactor
9473,ivy assertlessthan asserts the wrong thing assertlessthan actually doe the opposite of what it advertises it only through luck that existing asserts have not failed before this change assertlessthan to actually assert that the value is le than something pr close ,fix
9474,aio generate sitemap from the generated page close pr close ,build
9475,aio added a link to angularru angularru community on github is a single point for all resource chat podcasts and meetups for angular in russia pr close ,docs
9476,common a null value should remove the style on ie fix pr close ,fix
9477,ivy update compiler to specification pr close ,feat
9478,aio do not limit size of gzip and gzip pr close ,ci
9479,aio update metatags to control search engine crawling the meta namerobots contentnoindex tag is used to indicate to search engine crawler that they should not index the current page this is set dynamically by the the document viewer component to ensure that and other erroring page are not added to the search index this relies upon the idea that the crawling bot will run the j and wait to see if this meta tag ha been added or not since we believe that the googebot will do this we also preemptively add a hardcoded noindex tag specifically for this bot so that if anything else fails in bootstrapping the app the failed page will not be added to the index close pr close ,feat
9480,ivy add a proper creationonly scenario to the tree benchmark pr close ,perf
9481,ivy add render integration test pr close ,test
9482,ivy set ngdevmode to false in render benchmark pr close ,perf
9483,ivy remove unnecessary d instruction pr close ,refactor
9484,ivy update the compiler specification also make a minor fix for directive definition pr close ,fix
9485,aio fix code highlight in api doc template fix pr close ,fix
9486,common extract plural function from in locale data file for t fix pr close ,fix
9487,common dont remove special character when extracting cldr data pr close ,fix
9488,bazel pas around tsconfig a a file not a path this unlocks the ability to replay t compilation with different setting pr close ,refactor
9489,compiler implement enableivy compiler option the enableivy compiler option is the initial implementation of the render or ivy code generation this commit enables generation generating hello world example in the test but not much else it is currenly only useful for internal ivy testing a ivy is in development pr close ,feat
9490,aio fix zip testing command pr close ,build
9491,compilercli do not lower expression in nonmodules fix pr close ,fix
9492,common fallback to last defined value for named date and time format close pr close ,fix
9493,aio add a required comma in firebasejson ,fix
9494,compiler add support for marker tag in xliff serializers the xliff serializer now support the tag segsource and mrk while the xliff serializer now support mrk fix pr close ,fix
9495,core optional generic type for elementref add optional backwards compatible generic type to elementref to support typed nativeelement fix pr close ,feat
9496,ivy add feature principle doc pr close ,docs
9497,bazel remove spurious file pr close ,build
9498,aio change dfquestion to appquestion close pr close ,docs
9499,aio add description and doc link for code sample pr close ,docs
9500,core add binding name to content changed error adding the binding name to the error message recieved by the user give extra context on what exactly changed the test are also updated to reflect the new error message pr close ,feat
9501,core fix chained http call fix an issue where chained http call would prematurely call testability whenstable callback after the first http call fix pr close ,fix
9502,core refactor iterabledifferscreate method remove unneeded else clause to show that new iterablediffersfactories is returned by default pr close ,refactor
9503,ivy add tview and tcontainer pr close ,refactor
9504,core refactor wrappedvalue improve wrappedvalue by adding unwrap symetrical to wrap remove dead code valueunwrapper the property wrapped is an implementation detail and should never be accessed directly use unwrapwrappedvalue will change to protected in angular pr close ,refactor
9505,form handle string with and without line boundary on pattern validator pr close ,feat
9506,aio move file cleaning to later in the doc gen previously the generated file were cleaned out before docgen began via a yarn prescript this can cause a race condition in the cli server which prevents the new generated file from being picked up now we delay the cleaning until the last minute to ensure that they ar still picked up by the webpack server pr close ,build
9507,languageservice clear cache when program change this commit fix a bug whereby the cache are not cleared when the program change this subsequently produce the incorrect error of component is not included in a module pr close pr close ,fix
9508,compiler document the any type cast function close pr close ,docs
9509,aio enforce strict typescript check close pr close ,style
9510,common make date pipe test work in more timezones fix pr close ,test
9511,aio correctly handle redirects fix handling of some redirects by the serviceworker fix redirect for old ngfor to new ngforof url fix pr close ,fix
9512,aio run ee test in production mode this will enable catching error introduced by build optimization that do not appear in development mode fix pr close ,ci
9513,common set correct timezone for iso date in safari fix pr close ,fix
9514,bazel allow ngmodule rule to control whether type checking is enabled default to true which is different than ngc which default to false pr close ,feat
9515,ivy add missing dom element in renderfunction tree benchmark add a missing tree wrapper element in the renderfunction tree benchmark to make it more consistent with other perf test pr close ,perf
9516,aio implement survey notification link close pr close ,feat
9517,ivy add workaround for ajd in google pr close ,fix
9518,benchpress should still support seleniumwebdriver pr close ,fix
9519,form clarify note in reactive form doc pr close ,docs
9520,ivy remove type from directivedef this change make the code cleaner for the user it doe mean a little bit more work for u since we have to patch the type back into the directivedef however since the patching happens only once on startup it should not be significant pr close ,refactor
9521,ivy merged containerstartcontainerend this separation is no longer needed since directive are now passed into the container a an array rather than a child function of the containerstart pr close ,refactor
9522,ivy add canonical template translation example this change creates a spec file which contains canonical example of how the template compiler will translate template into expected output pr close ,test
9523,ivy move directive into elementstart we used to have a separate directive instruction for instantiating directive however such an instruction requires that directive are created in the correct order which would require that template compiler would have knowledge of all dependent directive this would break template compilation locality principle this change only change the apis to expected form but doe not change the semantics the semantics will need to be corrected in subsequent commits the semantic change needed is to resolve the directive instantiation error at runtime based on injection dependency pr close ,refactor
9524,aio add ngmodule doc pr close ,docs
9525,compiler make ngsummaryjson file idempotent fix pr close ,fix
9526,core split up interface file in render pr close ,refactor
9527,ivy add ivy a a recognized label pr close ,docs
9528,aio preserve static observable method pr close ,fix
9529,aio turn on namedchunks option to make debugging profiling and tracking easier pr close ,build
9530,aio upgrade to angular rwrr iminar eng jan distdbeffcdchunkjs rwrr iminar eng jan distcaccdcechunkjs rwrr iminar eng jan distinlinecbbafcdbbundlejs rwrr iminar eng jan distmainbfffceeebundlejs rwrr iminar eng jan distpolyfillsedfdfabfbundlejs rwrr iminar eng jan distworkerbasicminjs pr close ,build
9531,aio track size of all j file pr close ,ci
9532,aio upgrade to angularrc because of cb one of the test assertion had to be adjusted more info pr close ,build
9533,bazel fix merge conflict between cfe and efa pr close ,build
9534,compiler cache external reference resolution cache reference resolution for external reference a finding the declaration of a symbol is expensive and doe not change for a program once created this resolve a signficant performance regression in the langauge service pr close ,fix
9535,aio support multibyte character in heading pr close ,fix
9536,bazel document an installation issue observed by igor on a mac pr close ,docs
9537,aio upgrade to uglifyes this should fix the size regression spotted via the previous commit rwrr iminar eng jan distaafecdcfchunkjs rwrr iminar eng jan distcaccdcechunkjs rwrr iminar eng jan distinlinedcfbcdbundlejs rwrr iminar eng jan distmainfaffedaffbundlejs rwrr iminar eng jan distpolyfillsedfdfabfbundlejs rwrr iminar eng jan distworkerbasicminjs pr close ,build
9538,aio upgrade to angularcli this change introduces a size regression of kb for mainjs i filed an issue for this rwrr iminar eng jan distcliaafecdcfchunkjs rwrr iminar eng jan distclicaccdcechunkjs rwrr iminar eng jan distcliinlinedcfbcdbundlejs rwrr iminar eng jan distclimainfaffedaffbundlejs rwrr iminar eng jan distclipolyfillsedfdfabfbundlejs rwrr iminar eng jan distcliworkerbasicminjs pr close ,build
9539,router remove extra bracket pr close ,docs
9540,serviceworker properly handle invalid hash in all scenario when the sw fetch url listed in a manifest with hash it check the content hash against the manifest to make sure it ha the correct version of the url in the event of a mismatch the sw is supposed to consider the manifest invalid and avoid using it there are case to consider by which this can happen case during the initial sw installation a manifest is activated without waiting for every url to be fully loaded in the background every prefetch url listed by the manifest is requested and cached one such prefetch request could fail the hash test and cause the manifest to be treated a invalid in such a case the sw should enter a state of existingclientsonly a the latest manifest is invalid this case work today case during the initial sw installation a in case a manifest is activated without waiting for each url to fully load however it possible that the application could request a url with a bad hash before background initialization try to load that url this happens if for example the application ha a broken indexhtml in this case the sw should enter a state of existingclientsonly and serve the request from the network instead what happens today is that the internal error escape the sw and is returned a a rejected promise to respondwith causing a browserlevel error that the site can not be loaded breaking the site this change allows the sw to detect the error and enter the correct state falling back on the network if needed case during checkforupdate the sw will try to fully cache the new update before making it the latest version failure here is complicated if the page fails to load due to transient network condition timeouts s etc then it make sense to continue serving the existing cached version and attempt to activate the update on the next cycle if the page fails due to nontransient condition though error hash mismatch etc then the sw should consider the updated manifest invalid and enter a state of existingclientsonly currently all error are treated a transient this change cause the sw to treat all error during update a nontransient which can cause the sw to unnecessarily enter a safe mode a future change can allow the sw to remain in normal mode if the error is provably transient pr close ,fix
9541,animation fix incrementdecrement alias example pr close ,fix
9542,core create consistent naming scheme across class pr close ,refactor
9543,core provide note for unit test change with the ngstarinserted classname pr close ,docs
9544,core add ngafterviewinit and ngafterviewchecked support to render pr close ,feat
9545,aio upgrade to zonejs this cause a kb size regression for polyfillsjs i filed an issue for this rwrr iminar eng jan distfbeffdbachunkjs rwrr iminar eng jan distcaccdcechunkjs rwrr iminar eng jan distinlinefcbundlejs rwrr iminar eng jan distmaindfabbundlejs rwrr iminar eng jan distpolyfillsffdabundlejs rwrr iminar eng jan distworkerbasicminjs pr close ,build
9546,bazel give correct module name for e output fix pr close ,fix
9547,benchpress work around missing event from chrome chrome can cause the navigationstart event for the first run to arrive with a different pid than the start of the benchpress run this make the first collected result invalid this workaround cause the sampler to ignore run that have this condition pr close ,fix
9548,aio fix punctuation for clarity pr close ,docs
9549,benchpress forward compat with seleniumwebdriver this wa a local mod in google introduced by cl pr close ,fix
9550,core reduce payload limit back to normal pr close ,build
9551,aio document the template compiler option pr close ,docs
9552,core improve payload size failure message pr close ,build
9553,core make all render test pas in ie pr close ,fix
9554,core properly stringify html element in render test pr close ,test
9555,common export currency via getcurrencysymbol pr close ,fix
9556,core update payload size of hello world pr close ,build
9557,aio delete duplicated word pr close ,docs
9558,aio add nodoc alias to the internal tag the internal tag prevents code item from appearing in the doc and the typing file you can now use nodoc if you only want it to be excluded from the doc and not the typing file close pr close ,build
9559,aio fix plunker for custom plunker pr close ,build
9560,aio wait for angular to avoid flake in ee test pr close ,test
9561,router fix missing export in doc for urlmatcher fix pr close ,docs
9562,common update copyright year pr close ,docs
9563,aio add missing import to interceptor example pr close ,docs
9564,aio fix test message mistake duplicated message for st link hero is nd link pr close ,fix
9565,aio do not redirect page on next deployment we redirect nondocs page in the archive deployment back to the stable deployment we should not redirect page in the next deployment close pr close ,fix
9566,aio fix example protractor config for travis without setting the chromebin travis will not use the correct version of chrome for running ee test close pr close ,build
9567,aio dont use objectkeys on namednodemap to prevent seo error apparently objectkeys on namednodemap work differently with googlebot there are not test since we dont have a way to write test for googlebot but i did manually verify that after this fix googlebot correctly render several of the previously broken page fix pr close ,fix
9568,aio use one argument for docviewer error reporting pas one argument to loggererror to improve error reporting in environment that do not handle more than one argument well eg googlebots web rendering service related to pr close ,refactor
9569,languageservice ignore null metadata there can be null metadata in certain case for example with locale fix pr close ,fix
9570,aio httpclientxsrfmodule withconfig withoptions docummentation suggests use of httpclientxsrfmodulewithconfig but this method look like it renamed to withconfig pr close ,docs
9571,core final adjustements to ngivy read option for query pr close ,feat
9572,core support read option when querying for type pr close ,fix
9573,core more read option for ngivy query pr close ,feat
9574,core add ngoninit and ngdocheck support in render pr close ,feat
9575,core avoid object creation in bind pr close ,refactor
9576,changelog fix typo in pr close ,docs
9577,form add text about min and max a function pr close ,docs
9578,common generate t declaration for in locale file fix pr close ,build
9579,platformbrowser exclude node incompatible test from test target pr close ,build
9580,compilercli exclude command line script from compilation pr close ,build
9581,serviceworker enable karma bazel test for serviceworker corrected the environment detection code which wa incorretly throwing exception in the browser if require function wa found pr close ,build
9582,upgrade enable bazel test for upgrade added missing angularmocks dependency pr close ,build
9583,router enable bazel test for router bazel run on newer version of rxjs than is installed in yarn the never version subclass emptyerror in a different way which fails the instanceof check this change make the instanceof check more robust with respect to emptyerror pr close ,build
9584,core add bazel test target for core add test target for test testnodeonly and testweb in core package created a testinginit pseudo package where bootstrap code for test is kept moved sourcemaputil from test to testing so to prevent circular dependency removed visibilitypublic for testing build package pr close ,build
9585,core remove main from spec main function used to be needed to support dart since dart doe not allow top level statement since we no longer use dart the need for main ha been removed in preparation for basel and standardized way of running test we are removing main pr close ,build
9586,animation avoid infinite loop with multiple blocked sub trigger this patch fix animation so that if multiple sub trigger are used and are blocked by a parent animation then the engine will not lead itself into an infinite loop pr close ,fix
9587,router fix wildcard route with lazy loaded module again close description we doesnt handle child of wildcard route properly link it always an empty array created from pr close ,fix
9588,common handle j floating point error in percent pipe fix pr close ,fix
9589,core support read option for ngivy query pr close ,feat
9590,core add missing doc to component and fix formatting pr close ,docs
9591,core animation renderer factory in render pr close ,test
9592,core add renderer factory in render pr close ,feat
9593,core rename instruction for consistency pr close ,refactor
9594,core add doc to instruction minor renames pr close ,docs
9595,core renamed and split out interface pr close ,refactor
9596,core add more comment to di and fix formatting pr close ,docs
9597,core document di and minor renames pr close ,docs
9598,core store directive defs in static data pr close ,refactor
9599,core add comment to nodemanipulation function pr close ,docs
9600,core add comment to assert function pr close ,docs
9601,core store local in main array in rederer pr close ,refactor
9602,core moving renderer into angularcore pr close ,feat
9603,serviceworker fix word wrap the fix remove space between c and ache in doc pr close ,docs
9604,animation renaming issue with domanimation closure compiler renames all property that are internal to the program domanimation however is external it is a browser api so it field must not be renamed this change mark domanimation a external using declare interface which will cause closure compiler to back off and prevent renaming of any of it field pr close ,fix
9605,router update the public api guard for the router this fix a badly applied revert earlier ,ci
9606,compiler report an error for recursive module reference module that directly or indirectly export or imported themselves report an error instead of generating a stack fault fix ,fix
9607,router add paramsinheritancestrategy router configuration option previously the router would merge path and matrix params a well a dataresolve with special rule only merging down when the route ha an empty path or is componentless this change add an extra option paramsinheritancestrategy which when set to always make child route unconditionally inherit params from parent route close ,feat
9608,compilercli do not force type checking on j file the compiler host would force any file that is in nodemodules into the list of file that needed to be type checked which capture j file if allowjs is set to true this should have only forced dts file into the project to enable generation of factory fix ,fix
9609,compilercli do not emit invalid metadatajson file if no metadata is collected the ngc would generate file that contained null instead of eliding the metadatajson file fix ,fix
9610,aio rename service worker file update example move service worker under technique ,docs
9611,aio fix inconsistency in lifecycle hook table ,docs
9612,aio improve transition between page avoid unnecessary animation style transition repositioning on initial rendering better handle transitioning fromto home page which is the only page with transparent topmenu better coordinate sidenav and hamburger animation with page transition improve fadeinout animation fix ,fix
9613,aio clean up topmenu cs cleanup and reorganize topmenu style cleanup and merge hamburger style into topmenu style ,refactor
9614,aio support disabling docviewer animation via class ,feat
9615,aio make zipper work correctly with cli project ,build
9616,core move core example into examplescore directory this allows example to be found during aios yarn serveandsync which only look for example in packagesexamplespackagename where packagename is the name of the package that the modified file belonged to eg core common etc ,docs
9617,upgrade replaces getsetangularlib with getsetangularjsglobal the current name are confusing because angular should refer to the latest version of the framework ,fix
9618,compiler allow ngif to use the ngif expression directly a a guard allows a directive to use the expression passed directly to a property a a guard instead of filtering the type through a type expression this more accurately match the intent of the ngif usage of it template enabling better type inference moved ngif to using this type of guard instead of a function guard close ,feat
9619,serviceworker check for update on navigation currently the service worker check for update only on sw startup an event which happens frequently but also nondeterministically this make it hard for developer to observe the update process or reason about how update will be delivered to user this problem is exacerbated by the devtools behavior of keeping the sw alive indefinitely while opened effectively preventing the page from updating at all this change cause the sw to additionally check for update on navigation request app page reloads this creates deterministic update behavior and is much easier for developer to reason about it doe leave the old updateonswstartup behavior in place a removing that would be a breaking change fix ,fix
9620,router replaceurl when reacting to a change coming from angularjs close ,fix
9621,router add a function set up router sync when used with downgrademodule ,feat
9622,aio correct usage of fakeasync and inject together in test corrects a test which wrapped the fakeasync call in an inject call this caused the test to not actually run ,test
9623,compiler make tsx file aot compatible fix ,fix
9624,compiler generate the correct import for summary typecheck summary should be ignored when importing the type used in a typecheck block ,fix
9625,form avoid producing an error with hostbindingtypecheck using the default value accessor no longer produce error when used in combination with fulltemplatetypecheck and hostbindingtypecheck fix ,fix
9626,common fix a closure compilation issue closure compiler can not infer that the swtich statement is exhaustive which cause it to complain that the method doe not always return a value work around the problem by throwing an exception in the default case and using the never type to ensure the code is unreachable ,fix
9627,aio move ee test to nonoptional job this essentially reverts since the flake should be gone after pinning chromedriver and chrome version to and respectively ,ci
9628,aio disable docviewer animation during ee test ,test
9629,aio fix and clean up ee test ,test
9630,common dont generate dts metadatajson file for in locale fix ,build
9631,core add source to staticinjectorerror message close pr close ,feat
9632,compiler support referencing enums in namespaces due to an overly agressive assert the compiler would generate an internal error when referencing an enum declared in namspace fix pr close ,fix
9633,compilercli merge fileoverview comment previously this code would unconditionally add a fileoverview comment to generated file and only if the contained any code at all however often existing fileoverview comment should be copied from the file the generated file wa originally based off of this allows user to eg include closure compiler directive in their original componentts file which will then automaticallly also apply to code generated from it this special case license comment a closure disregard directive in comment containing license pr close ,fix
9634,compiler add a pseudo any function to disable type checking any can now be used in a binding expression to disable type checking for the rest of the expression this similar to a any in typescript and allows expression that work at runtime but do not typecheck pr close ,feat
9635,bazel dont equate modulename with filename fix broken material build cc jelbourn pr close ,fix
9636,animation ensure multilevel route leave animation are queryable close pr close ,fix
9637,common update in locale data to cldr v list of change between v and v pr close ,refactor
9638,compiler narrow type of expression used in ngif structural directive can now specify a type guard that describes what type can be inferred for an input expression inside the directive template ngif wa modified to declare an input guard on ngif after this change fulltemplatetypecheck will infer that usage of ngif expression inside it template is truthy for example if a component ha a property person person and a template of div ngifperson personname div the compiler will no longer report that person might be null or undefined the template compiler will generate code similar to if ngifngiftypeguardinstanceperson instancepersonname to validate the template use of the interpolation expression calling the type guard in this fashion allows typescript to infer that person is nonnull fix pr close ,feat
9639,core removed readonly getters and changed to readonly variable pr close ,refactor
9640,common fix mistake in number pipe example pr close ,docs
9641,aio upgrade to latest angularcli pr close ,build
9642,aio upgrade to latest angularmaterial and angularcdk pr close ,build
9643,aio upgrade to latest angular pr close ,build
9644,aio upgrade to latest rxjs pr close ,build
9645,aio fix embedded toc and improve toc destroying component and scroll timing fix embedded toc previously the element wa added too late and wa never instantiated improve toc update timing previously the toc wa updated after the entering animation wa over which resulted in the toc being outdated for the duration of the animation improve destroying component timing previously the old embedded component were destroyed a soon a a new document wa requested even if the transition ended up never happening eg due to error while preparing the new document the embedded component would have been destroyed and the displayed document would not work a expected now the old embedded component are destroyed only after the new document ha been fully prepared improve scrolltotop timing previously the page wa scrolled to top after the entering animation wa over which resulted in jumpiness now the scrolling happens after the leaving document ha been removed and before the entering document ha been inserted pr close ,fix
9646,aio animate the leavingentering document this commit add a simple fadeinout animation fix pr close ,feat
9647,aio do not show new document until embedded component are ready previously the document wa shown a soon a the html wa received but before the embedded component were ready eg downloaded and instantiated this caused fouc flash of uninstantiated component this commit fix it by preparing the new document in an offdom node and swapping the node when the embedded component are ready pr close ,fix
9648,aio lazyload embedded component fix pr close ,feat
9649,aio fix typo for missing quote pr close ,docs
9650,aio tsconfigappjson excludes all testing file fix app build error in testing guide which ha testing folder at multiple level with file in them referring to file in the root testing folder also removed the exclusion of file with in the name because all app t file must be buildable per aio policy must build pr close ,fix
9651,animation properly recover and cleanup dom when cd failure occur close pr close ,fix
9652,animation instantiate setmatching code with value in constructor for some reason prior to this fix the boolean set matching code within animationtransitionexprts failed to remain the same when compiled with closure this refactor make sure that the code stay in tact reproduction detail pass without ng build prod fails with ng build prod close pr close ,refactor
9653,animation reintroduce support for transition matching function close pr close ,feat
9654,animation ensure the webanimations driver properly handle empty keyframes close pr close ,fix
9655,animation support webkitbased vendor prefix for prop validation close pr close ,fix
9656,router navigatonerror and navigationcancel should be emitted after resetting the url pr close ,fix
9657,form allow null on setasyncvalidators close pr close ,feat
9658,compilercli disable checktypes in emit closure compiler by default will report diagnostics from type check in any javascript code including code emitted by the angular compiler disabling checktypes substantially reduces warning spam for user and allows them to run with stricter compiler flag eg treating actual diagnostics from user code a error closure compiler will still type check the code and use type where found and correct for optimization pr close ,fix
9659,compilercli fix swallowed error message this commit fix a bug in which nonformatted error are silently dropped internal issue b pr close ,fix
9660,animation ensure dom is cleaned up after multiple trigger leave animation finish close pr close ,fix
9661,serviceworker ensure initialised in browser only close pr close ,fix
9662,serviceworker esm point to wrong path the packagejson esm point to the wrong path esm should be esm service worker cant be compiled with use of closure compiler pr close ,fix
9663,aio add service worker guide content and update nav pr close ,docs
9664,core add doc for in token pr close ,docs
9665,aio update myunless reference to appunless fix issue number pr close ,docs
9666,aio fix numbering of the three way to access hero detail fix pr close ,docs
9667,form broken link ngvalidators replace by an example pr close ,fix
9668,aio architecture review for ay pr close ,docs
9669,aio fix typo remove duplicate word to pr close ,docs
9670,core improve the payload size message pr close ,ci
9671,serviceworker use relative path for ngswjson not every application is served from the domain root the service worker made a bad assumption that it would be and so requested ngswjson from the domain root this change corrects this assumption and request ngswjson without the leading slash this cause the request to be interpreted relative to the sw origin which will be the application root ,fix
9672,serviceworker send initialization signal from the application the service worker contains a mechanism by which it will postmessage itself a signal to initialize it cache through this mechanism initialization happens asynchronously while keeping the sw process alive unfortunately in firefox the sw doe not have the ability to postmessage itself during the activation event this prevents the above mechanism from working and the sw initializes on the next fetch event which is often too late therefore this change ha the application wait for sw change and tell each new sw to initialize itself this happens in addition to the selfsignal that the sw attempt to send a selfsignaling is more reliable that way even on browser such a firefox initialization happens eagerly ,fix
9673,compilercli propagate tssourcefile modulename into metadata ,fix
9674,serviceworker dont crash if sw not supported currently a bug exists where attempting to inject swpush crash the application if service worker are unsupported this happens because swpush doesnt properly detect that navigatorserviceworker isnt set this change ensures that all passive observation of swpush and swupdate doesnt cause crash and that calling method to perform action on them result in rejected promise it up to application to detect when those service are not available and refrain from attempting to use them to that end this change also add an issupported getter to both service so user dont have to rely on feature detection directly with browser apis currently this simply detects whether the sw api is present but in the future it will be expanded to detect whether a particular browser support specific apis such a push notification for example ,fix
9675,serviceworker allow disabling sw while still using service currently the way to not use the sw is to not install it module however this mean that you cant inject any of it service this change add a serviceworkermoduledisabled mwp that still register all of the right provider but act a if the browser doe not support service worker ,fix
9676,aio remove service plurality remove service plurality for the sentence formation to be proper pr close ,docs
9677,compilercli fix memory leak in program creation saving oldprogram in angularcompilerprogram instance is causing a memory leak for unemitted program it not actually used so simply not saving it fix the memory leak fix pr close ,fix
9678,aio cleaner approach to reliable google analytics ee test pr close ,test
9679,aio fix ee api test due to pr close ,test
9680,languageservice allow empty template fix the bug where template with empty string show up a error in the editor pr close pr close ,fix
9681,languageservice fix crash when no script file are found fix the crash in typescript host when getscriptfilenames return an empty array pr close pr close ,fix
9682,aio updating with ignite ui for angular pr close ,docs
9683,aio add service worker guide content and update nav pr close ,docs
9684,aio add class attribute to example referenced in structural directive guide see from the structuraldirectivesmd the rest of the div including it class attribute moved inside the ngtemplate element maybe this made sense at one time but it ha become out of sync pr close ,docs
9685,core should use native addeventlistener in ngzone pr close ,fix
9686,aio upgrade codelyzer to x and angularcli to pr close ,build
9687,common dont strip xssi prefix for if error isnt json this change xhrbackend to not strip the xssi prefix from error text if such a prefix is present but the remaining body doe not parse a json pr close ,fix
9688,common treat an empty body a null when parsing json in httpclient previously xhrbackend would call jsonparse if the response body wa empty a status code with contentlength this change the xhrbackend to attempt the json parse only if the response body is nonempty otherwise the body is left a null fix fix fix fix pr close ,fix
9689,common remove useless guard in httpclient an invalid if condition is always true and is thus useless this change remove it no behavior change fix pr close ,fix
9690,common accept falsy value a http body previously httpclient used the overly clever test body null to determine when a body parameter wa provided this break when the valid body or false are provided this change test directly against undefined to detect the presence of the body parameter and thus correctly allows falsy value through fix fix pr close ,fix
9691,animation ensure multilevel leave animation work pr close ,fix
9692,animation ensure multilevel enter animation work pr close ,fix
9693,compiler correctly detect when to serialze summary metadata the change to improve error message broke the summary serialization of summary pr close ,fix
9694,common add locale id parameter to registerlocaledata pr close ,feat
9695,compilercli improve error message produced during structural error the error produced when error were encountered while interpreting the content of a directive wa often incomprehencible with this change these kind of error message should be easier to understand and diagnose pr close ,feat
9696,animation ensure multilevel leave animation work pr close ,fix
9697,animation ensure multilevel enter animation work pr close ,fix
9698,bazel produce named amd module for codegen fix signedoffby alex eagle alexeaglegooglecom pr close ,fix
9699,aio prevent comment in code from leaking into docgen code snippet the new version of dgenipackages doe a better job of rendering code node which do not include comment fix pr close ,build
9700,aio update homepage tooling image fix pr close ,docs
9701,aio ensure downloadable zip filename are unique fix pr close ,build
9702,compilercli normalize sourcepaths for in extracted file fix pr close ,fix
9703,core fix broken ngzone code example the current code example wa broken a there were a couple of syntax error this commit fix the demo pr close ,docs
9704,aio add ngatl header fix pr close ,docs
9705,animation always fire start and done callback in order for noop animation pr close ,fix
9706,animation always fire inner trigger callback even if blocked by parent animation close pr close ,fix
9707,aio add a french onsite training ressource pr close ,docs
9708,aio add a french onsite training ressource pr close ,docs
9709,aio fix filename pr close ,docs
9710,platformbrowserdynamic export jitcompilerfactory fix pr close ,feat
9711,common return isubscription from locationsubscribe fix pr close ,fix
9712,aio filter out ambiguous directive from auto code linking close pr close ,build
9713,aio do not store duplicate metadata alias having duplicate wa causing the code autolinking to ignore ngform directive pr close ,build
9714,aio better parsing of selector a alias for directivescomponents pr close ,build
9715,aio add angularfirebasecom to education resource pr close ,docs
9716,core fix should be able to cancel listener from mixed zone pr close ,fix
9717,compiler support event binding in fulltemplatetypecheck the typecheck block now disables type checking event access instead of generating a reference to an undefined variable pr close ,fix
9718,form updateon should check if change occurred fix pr close ,fix
9719,aio fix typo in attribute directive documentation changed apphightlight to apphighlight pr close ,docs
9720,core should support eventstopimmediatepropagation pr close ,fix
9721,animation validate against trigger name that use symbol pr close ,fix
9722,aio tighten up code autolinking do not match code word that are part of a hyphenated string of character eg platformbrowserdynamic should not autolink browser do not match code word that correspond to pipe name but are not preceded by a pipe character eg packagejson should not auto link json to the jsonpipe close pr close ,build
9723,compiler emit correct typecheckblocks with templaterefs the typecheck block generated with fulltemplatetypecheck wa invalid if the it contained a template ref a would be generated using the else microsyntax of ngif fix pr close ,fix
9724,aio fix a typo to improve readability remove a comma and space pr close ,docs
9725,aio clearing array with convert remaining reference to directly use loggerservices log pr close ,docs
9726,aio removing reference to loggerservice property the reference removed so that calling loggerservice clear method behaves a intended in spycomponent pr close ,docs
9727,aio clearing array with clearing array with setting length to replaced with for being short and marginally efficient for reference is turned into a sequence of around machine instruction on x if bump pointer allocation succeeds whereas alength is a c runtime function call which requires x a many instruction benedikt meurer pr close ,docs
9728,benchpress allow ignoring navigationstart event in perflog metric pr close ,fix
9729,aio add instruction to fork angularangular pr close ,docs
9730,aio fix window title on home page using display none on the h cause innertext to not work a expected and include the icon ligature link in the title this caused the window title on the angulario home page to appear a angular link this commit fix it by not generating anchor at all for heading with the noanchor class fix pr close ,fix
9731,aio add missing closing backtick pr close ,docs
9732,bazel adjust mock of tsconfig for ngmodule rule unit test due to pr close ,fix
9733,core fix comment format for linter ,style
9734,core fix max line length to pas linting accidentally introduced in where other linting error unrelated to the pr prevented proper linting pr close ,style
9735,animation always fire inner trigger callback even if blocked by parent animation close pr close ,fix
9736,aio fix wrong copy pr close ,docs
9737,core change from deprecated renderer to renderer we now show the proper class instead of the deprecated renderer fix pr close ,docs
9738,animation ensure final state style are applied within disabled animation close pr close ,fix
9739,router merge queryparamhandling strategy should be able to remove query params close pr close ,fix
9740,aio fix broken link in guidecomponentinteraction add a blank line before line with markdown link pr close ,docs
9741,aio make it clear we are talking about a tag a is it could be seen a a typo at first glance wrapping the a in caret and backticks for formatting add some clarity pr close ,docs
9742,aio fix typo in filename packagesjson packagejson pr close ,docs
9743,aio fix not found schema fix pr close ,docs
9744,aio fix rxjs import close pr close ,docs
9745,aio update template form to cli pr close ,docs
9746,aio update reactiveforms to cli pr close ,docs
9747,aio update displayingdata for cli pr close ,docs
9748,aio update glossary for cli pr close ,docs
9749,aio update ajsquickreference for cli pr close ,docs
9750,aio remove trailing underscore from provide provide wa already emphasized in the previous paragraph pr close ,docs
9751,aio fix missed grave accent pr close ,docs
9752,core ensure init lifecycle event are called throwing an exception in a lifecycle event will delay but not prevent an init method such a ngoninit ngaftercontentinit or ngafterviewinit from being called also calling detectchanges in a way that cause duplicate change detection such a a child component causing a parent to call detectchanges on it own changedetectorref will no longer prevent change ngoninit ngaftercontentinit and ngafterviewinit from being called with this change lifecycle method are still not guarenteed to be called but the init method will be called if at least one change detection pas on it view is completed fix pr close ,fix
9753,animation us a loop instead arraymap which creates and return a new array that is discarded this pattern will become a compilation error in google pr close ,refactor
9754,compiler recognize ngmodule with a redundant injectable the compiler now again recognizes ngmodule decorator on class with a redundant injectable decorator fix pr close ,fix
9755,aio markdown typo in tour of hero tutorial pr close ,fix
9756,common update default display value for currencypipe pr close ,docs
9757,core remove prolyfill from error message pr close ,refactor
9758,changelog remove unnecessary revert item pr close ,docs
9759,languageservice pas compileroptionspaths to reflectorhost this commit fix the option passed to reflectorhost to include path if it specified in compiler option so that dependency module can be loaded pr close ,fix
9760,aio typo fix tutorial part app component template file extention fix pr close ,docs
9761,aio empty line between html tag and content pr close ,docs
9762,aio fix typo pr close ,docs
9763,aio show correct path for mockheroes code pr close ,docs
9764,aio fix typo in tutorial pr close ,docs
9765,aio fix tohpt typo pr close ,docs
9766,aio fix mm to mm for month in datepipe pr close ,docs
9767,compiler show explanatory text in template error fix pr close ,fix
9768,compiler do not use a a a content selector a it might trigger false positive in the regexp from makescopematcher close ,test
9769,compiler fix corner case in shadow cs cmphost and cmphost someotherselector were not handled consistently note those should not match anything but are made equivalent to respectively hostcmp and hostcmp someotherselector to avoid breaking legacy apps ,fix
9770,core misc change and integrate review feedback on close ,refactor
9771,compiler introduce testbedoverridetemplateusingtestingmodule this allows to overwrite template for jit and aot component alike in contrast to testbedoverridetemplate the template is compiled in the context of the testing module allowing to use other testing directive close ,feat
9772,core allow to pas in aot summary also to testbedconfiguretestingmodule also add caching for summary close ,feat
9773,common fix misordered line ,docs
9774,aio upgrade to anglarcore and cli rwrr iminar eng nov distbefbdddbchunkjs rwrr iminar eng nov distinlinebfedfbabundlejs rwrr iminar eng nov distmainffccbundlejs rwrr iminar eng nov distpolyfillsdfcacacdbundlejs close ,build
9775,aio remove the buildoptimizer flag it on by default now ,build
9776,aio use aot compiler for development since it wa not turned on by default in the cli we have to opt in ,build
9777,aio update toh for cli ,docs
9778,compiler report a reasonable error with invalid metadata the compiler would throw an internal exception if an import using the ngmodule syntax and the module a not a resolvable symbol fix ,fix
9779,aio style correctly on safari ,fix
9780,aio move ee test to optional job ,ci
9781,aio fixed casetypo for code ,docs
9782,core should support eventstopimmediatepropagation ,fix
9783,aio update pipe for cli ,docs
9784,aio add payload size percentage change check to payload size task ,ci
9785,aio make ee test le flakey close ,test
9786,aio upgrade protractor to v ,build
9787,aio use correct type for ee test ,build
9788,core add source to staticinjectorerror message ,feat
9789,platformbrowser support symbol in custom jasminetostring method it illegal to coerce a symbol to a string and result in a typeerror typeerror can not convert a symbol value to a string previously the custom jasminetostring method monkeypatched onto map in platformbrowsertestingsrcmatchersts would coerce key and value to string a change in a newer version of jasmine call this method more often resulting in call against map which contain symbol in some application which cause crash the fix is to explicitly convert key and value to string which doe work on symbol ,fix
9790,compiler dont overwrite missingtranslations value in jit ,fix
9791,aio fix typo in architecture overview ,docs
9792,aio add v doc link to navigation fix ,docs
9793,aio make plunker work with rxjs operator ,build
9794,element implement registerascustomelements close ,feat
9795,element implement ngelements ,feat
9796,element implement ngelementconstructor ,feat
9797,element implement ngelement ,feat
9798,element implement ngelementapplicationcontext ,feat
9799,element implement extractprojectablenodes ,feat
9800,element implement utils ,feat
9801,element set up the element package ,feat
9802,core symbol should return zonesymbol without zonejs loaded ,fix
9803,aio avoid building before running the local pwa test when this command is run on ci yarn build ha already been run so this wa unnecessarily building angulario again adding min to the aio job when this command is run locally it is most often about testing a new lighthouse versionconfig so you dont need to build angulario over and over and if necessary one can always run yarn build manually close ,build
9804,aio upgrade lighthouse to v ,build
9805,aio do not fail the initial docgen when running docswatch check that cause the docgen to fail were already disabled in docswatch for the docgen that run when a file is changed now these check are also disabled for the initial docgen run close ,build
9806,aio do not fail on bad example when running docswatch ,build
9807,aio allow renderexamples to complete even if example are broken by setting renderexamplesignorebrokenexamples true the docgen will not fail if there is something wrong with an example instead it will just log a warning ,build
9808,aio fix badly formatted codeexamples close ,docs
9809,aio fail docgen if a codeexample is badly formatted this will catch the problem that wa missed in ,build
9810,compilercli dont report emit diagnostics when noemitonerror is off ,fix
9811,aio updated in guide and example ,docs
9812,aio fix linting for universal pr close ,docs
9813,aio update lockfile for example installing dependency for the doc example fails because the lockfile is outofsync with the corresponding packagejson this commit brings the lockfile in sync with packagejson for reference this wa accidentally broken in ,build
9814,aio upgrade to angularmaterialbeta rwrr iminar eng nov distbefbdddbchunkjs rwrr iminar eng nov distinlineadecdcbundlejs rwrr iminar eng nov distmainffaaddabebundlejs rwrr iminar eng nov distpolyfillsdfcacacdbundlejs pr close ,build
9815,aio upgrade to angularcorerc build fails material upgrade required pr close ,build
9816,aio upgrade to angularclirc rwrr iminar eng nov distbefbdddbchunkjs rwrr iminar eng nov distinlineddccdbdbundlejs rwrr iminar eng nov distmainbbbdfeaefefcbundlejs rwrr iminar eng nov distpolyfillsfdbccdfbbundlejs pr close ,build
9817,aio upgrade to angularclirc rwrr iminar eng oct distbefbdddbchunkjs rwrr iminar eng oct distinlinecbdebbundlejs rwrr iminar eng oct distmaindabundlejs rwrr iminar eng oct distpolyfillsdfcacacdbundlejs pr close ,build
9818,aio decrease payload size limit for main file pr close ,ci
9819,aio rename custommdiconregistry to customiconregistry the change of angular material version mean that the md prefix is no longer appropriate pr close ,refactor
9820,aio lock zonejs to later version before had a size increase pr close ,build
9821,aio fix doc linting issue these issue appeared after upgrade of eslint jasmine plugin pr close ,style
9822,aio increase payload size limit for polyfillsts the latest build have added kb to the size of this file byte zipped pr close ,ci
9823,aio remove hack to modify cli version pr close ,build
9824,aio upgrade to angularrc and clirc pr close ,build
9825,aio revert temporary increase in size limit pr close ,build
9826,aio fix test to work with angularmaterialcdkbeta pr close ,build
9827,aio remove cli patch pr close ,build
9828,aio revert to clean cli testts file the use of systemimport in testts wa causing the webpack build to fail with a mysterious module build failed error typescript compilation failed error when running yarn test pr close ,build
9829,aio temporarily increaze the size limit until the regression are fixed related issue pr close ,build
9830,aio disable global support in webpack this will be fixed in cli once land rwrr iminar eng oct distbefbdddbchunkjs rwrr iminar eng oct distinlinedbeceafddbundlejs rwrr iminar eng oct distmainebbcaaefbundlejs rwrr iminar eng oct distpolyfillsdfcacacdbundlejs pr close ,build
9831,aio upgrade to buildoptimizer rwrr iminar eng oct distbefbdddbchunkjs rwrr iminar eng oct distinlineebcfdccfbundlejs rwrr iminar eng oct distmainecfbffcdbundlejs rwrr iminar eng oct distpolyfillsfaebacaabundlejs pr close ,build
9832,aio upgrade to angularclirc rwrr iminar eng oct distfdchunkjs rwrr iminar eng oct distcaccdcechunkjs rwrr iminar eng oct distinlineffebbundlejs rwrr iminar eng oct distmainedcedcfdcbdbundlejs rwrr iminar eng oct distpolyfillsfaebacaabundlejs pr close ,build
9833,aio upgrade to angularclirc rwrr iminar eng oct distfdchunkjs rwrr iminar eng oct distcaccdcechunkjs rwrr iminar eng oct distinlineffebbundlejs rwrr iminar eng oct distmainedcedcfdcbdbundlejs rwrr iminar eng oct distpolyfillsfaebacaabundlejs pr close ,build
9834,aio upgrade to rxjs rwrr iminar eng oct distefcdcafchunkjs rwrr iminar eng oct distcaccdcechunkjs rwrr iminar eng oct distinlineadcebcffdbundlejs rwrr iminar eng oct distmainbdcaffbundlejs rwrr iminar eng oct distpolyfillsfaebacaabundlejs pr close ,build
9835,aio turn off preservewhitespaces in compiler option rwrr iminar eng oct distbefbdddbchunkjs rwrr iminar eng oct distinlineeedeefeabcbbundlejs rwrr iminar eng oct distmainfaacfbaabundlejs rwrr iminar eng oct distpolyfillsfaebacaabundlejs pr close ,build
9836,aio patch angularcli to use esm build of rxjs rwrr iminar eng oct distbefbdddbchunkjs rwrr iminar eng oct distinlinecafcbbbundlejs rwrr iminar eng oct distmaincaccabundlejs rwrr iminar eng oct distpolyfillsfaebacaabundlejs pr close ,build
9837,aio upgrade to rxjsbeta rwrr iminar eng oct distbefbdddbchunkjs rwrr iminar eng oct distinlinedffddcfbundlejs rwrr iminar eng oct distmaincdaccfdcdbundlejs rwrr iminar eng oct distpolyfillsfaebacaabundlejs pr close ,build
9838,aio upgrade to angularmaterialcdkbeta rwrr iminar eng oct distbefbdddbchunkjs rwrr iminar eng oct distinlineffbdbfbundlejs rwrr iminar eng oct distmainbefabbbedebbundlejs rwrr iminar eng oct distpolyfillsfaebacaabundlejs pr close ,build
9839,aio hand fix the renaming mdmat issue these are change that the matswitcher missed and i had to make them by hand pr close ,fix
9840,aio upgrade to angularmaterialcdkbeta mdmat migration all the nonnpm change were made by the angularmaterialprefixupdater tool the tool missed a few thing which ill fix in a separate commit to preserve the diff rwrr iminar eng oct distbefbdddbchunkjs rwrr iminar eng oct distinlineccebdacadbundlejs rwrr iminar eng oct distmaindedcafaccdebundlejs rwrr iminar eng oct distpolyfillsfaebacaabundlejs pr close ,build
9841,aio upgrade to angularclirc and typescript the size regression ha gotten worse rwrr iminar eng oct distbefbdddbchunkjs rwrr iminar eng oct distinlineecedeefbundlejs rwrr iminar eng oct distmainccdbcdbundlejs rwrr iminar eng oct distpolyfillsfaebacaabundlejs pr close ,build
9842,aio upgrade to angularcli this cause the size regression to get only worse rwrr iminar eng oct distbefbdddbchunkjs rwrr iminar eng oct distinlinecccbedcbundlejs rwrr iminar eng oct distmainebdfbabundlejs rwrr iminar eng oct distpolyfillsaaadebfebundlejs pr close ,build
9843,aio update to angularcorerc there is a size regression right now because the cli is out of date rwrr iminar eng oct distbefbdddbchunkjs rwrr iminar eng oct distinlineaafecceccbundlejs rwrr iminar eng oct distmainbbffaeabundlejs rwrr iminar eng oct distpolyfillsaaadebfebundlejs pr close ,build
9844,aio fix typo in attributedirectives close ,docs
9845,aio update universal for cli pr close ,docs
9846,aio upgrade to v and cli pr close ,docs
9847,packaging fix typo pr close ,docs
9848,doc fix on amcdnl image pr close ,fix
9849,aio update angularjs quick reference guide pr close ,docs
9850,aio fix typo pr close ,docs
9851,aio fix typo pr close ,docs
9852,aio fix typo pr close ,docs
9853,aio add in boilerplate type pr close ,build
9854,compiler report error properly in g in certain condition condition static analysis error given noresolvetrue generatecodeforlibraries false compilerhostgetsourcefile throw on non existent file all of these are true in g pr close ,fix
9855,compiler reexport le symbol in ngfactoryts file dont reexport symbol that the user already reexported never reexport symbol that are part of argument of non simple function call fix pr close ,fix
9856,compiler always use relative path to refer to generated code previously we generated import like angularmaterialindexngfactory which doesn ’ t make sense a we don ’ t ship generated code on npm close ,fix
9857,compilercli avoid producing source mapping for host view the host view doesnt map back to user code so the template compiler produce a blank url for them pr close ,fix
9858,platformserver add missing package to the umd global rollup config this add the proper binding for calling angular package from platformserver in the umd this wa not a problem for universal apps that dont use umd fix ,fix
9859,compiler make watch mode work on window fix pr close ,fix
9860,compiler recover from structural error in watch mode this also change the compiler so that we throw le often on structural change and produce a meaningful state in the ngprogram in case of error related to pr close ,fix
9861,compiler translate emit diagnostics with noemitonerror true this prevents error reported against ngfactoryts file show up a the result of running ngc close pr close ,fix
9862,compiler don ’ t store invalid state when using listlazyroutes previously listlazyroute would store invalid information in a compiler internal cache which lead to incorrect path that were used during emit this commit fix this pr close ,fix
9863,serviceworker fix improper call of observablemerge observablemerge wa called using call a if it were an operator and not an observable factory this remove the call and us the factory properly pr close ,fix
9864,serviceworker dont block initialization on registration importing serviceworkermoduleregister will schedule registration of the service worker inside an appinitializer previously the promise returned by navigatorserviceworkerregister wa returned from the initializer function this ha the unwanted side effect of blocking initialization until the sw is registered even worse if the sw script fails to load this can cause the app initialization to fail the solution is to not return the registration promise from the initializer function essentially decoupling registration from the rest of the initialization flow this change is not unit testable a there are no mocksadapters yet for navigatorserviceworker a future integration test should cover this case with better fidelity pr close ,fix
9865,serviceworker listen for message on the right event source currently the swupdate service doesnt receive message from the sw this is because it attempt to subscribe to the message event on serviceworkerregistration when really message are emitted by the serviceworkercontainer this change move to listening on serviceworkercontainer and change the mock to reflect the way the browser actually work pr close ,fix
9866,compiler automatically set emitdecoratormetadata when annotationsas static field ” this is a workaround for fix pr close ,fix
9867,compilercli produce correct path for window output the path mapping wa broken for window by fcbdbaffddbfdff fixed the path mapping and put code in place to make such a problem to sneek by again pr close ,fix
9868,compilercli only use error collector when needed the error collector change behavior of the metadata resolver in way that havent been fully hardened this change limit it use to the lazy route detection and the language service issue pr close ,fix
9869,compiler don ’ t type check template with skiptemplatecodegen this change is needed to prevent user ’ build from breaking if a user set fulltemlatetypecheck to true we will continue to check the template even when skiptemplatecodegen is true a well related to pr close ,fix
9870,compilercli report all diagnostic error message this fix a problem introduced in dfefcaebddbbadcdbebd which modified how diagnostic error message are reported for structural metadata error causing some of the diagnostics to be lost pr close ,fix
9871,router add onsameurlnavigation router configuration option pr close ,feat
9872,router do not call locationgo when skipping a navigation close pr close ,fix
9873,router navigating to the current location work close pr close ,fix
9874,serviceworker set skiptemplatecodegen for build pr close ,build
9875,aio add service worker entrypoint to aio build fix pr close ,fix
9876,compiler correctly calculate the outdir if it repeat a part of the rootdir fix pr close ,fix
9877,compiler remove old ngtools api and add listlazyroutes to new api usage of ngtoolsinternalaping from angularcompilercli will now throw an error add listlazyroutes to angularcompilerclingtoolsts for getting the lazy route of a ngprogram pr close ,refactor
9878,bazel dont consoleerror from the compile helper this let other caller of compile choose different formatting for the diagnostics pr close ,fix
9879,serviceworker include versionedfiles in the manifest hashtable there is no difference in runtime yet between versioned and unversioned file theoretically the sw doe not have to cachebust versioned file but the sw doesnt cache bust file on the first request anyway so in the common case it doesnt matter if the hash doesnt match the sw will cache bust the file to be sure which is technically unnecessary but since the file itself is versioned the likelihood of this happening is rare this fix a critical bug where versioned file were erroneously not included in the hashtable in the generated manifest this could lead to application not updating if only versioned file changed in between version pr close ,fix
9880,aio use http push for navigationjson ,build
9881,aio simplify gaservice to avoid ee test failure the gaservice and the ee spec were unnecessarily complicated and had arbitrary async timeouts to ensure that the interplay between the ga library code and the rest of the app worked correctly this resulted in potential flaky test if the timeouts were not adequate this wa experienced when travis upgraded to chrome the new approach is to block loading of the analytics library altogether if there is a ee flag set in the sessionstorage of the browser it doesnt appear to be enough just to set the flag directly on the window i think this is because the window get cleaned when navigation occurs but i am not certain the downside of this is that we had to add a small piece of extra logic to the ga snippet in indexhtml and we also had to switch from using script async to a programmatic approach to loading the ga library which prevents the browser from eagerly fetching the library this may be mitigated by adding it to the http push configuration of the firebase hosting reenables the test that wa disabled in close ,fix
9882,common attempt to jsonparse error for json response pr close ,fix
9883,compilercli do not add reference to file outside of rootdir reference to resource such a cs file that are generated into the outdir directory outside of rootdir would cause a spurious compiler error about not being able to find a file that end in ngstylets also fixed a minor issue in compiler error reporting fix pr close ,fix
9884,changelog fix typo pr close ,docs
9885,serviceworker pusheventdata ha to be decoded pusheventdata is not the data object itself but an instance representing the data in wire format with method to synchronously decode it to json arraybuffer etc ngsw assumes all push data is in json format pr close ,fix
9886,serviceworker freshness strategy should clone response for cache when cacheput is called with a response it consumes the response if the response is used for any other purpose such a satisfying the original fetchevent it must be cloned first a bug exists in the mock used for sw test where this condition is not validated the body of mockresponses can be utilized repeatedly without erroring in the same way that a real browser would this bug is fixed by this commit which cause test for the freshness strategy of data caching to start failing the cause of this failure is a second bug in the data caching code where the response is not cloned prior to being passed to cacheput this is also fixed pr close ,fix
9887,aio changed confusing term controller should be decorator i believe pr close ,docs
9888,compilercli diagnostics file path relative to cwd not tsconfig pr close ,fix
9889,animation ensure enter callback fire on container insertion pr close ,test
9890,router routerlinkactive should update it state right after checking the child close pr close ,fix
9891,aio make test le flaky pr close ,fix
9892,animation always fire inner trigger callback even if blocked by parent animation close pr close ,fix
9893,animation ensure enter callback fire on container insertion pr close ,test
9894,router routerlinkactive should update it state right after checking the child close pr close ,fix
9895,compiler add first bazel test for ngmodule we were missing quite a bit of test coverage this is the start of recreating it pr close ,fix
9896,serviceworker use posix path resolution for generation of ngswjson pr close ,fix
9897,serviceworker add missing annotation for swpush pr close ,fix
9898,aio update event update ac date pr close ,docs
9899,aio change inmemwebapi version for example pr close ,docs
9900,compiler generate correct import for type check block fix pr close ,fix
9901,animation ensure inner leave animation do not remove node when skipped pr close ,fix
9902,animation ensure animatechild work with all inner leave animation pr close ,fix
9903,bazel fix the output directory for extractor to be genfiles instead of bin pr close ,fix
9904,compiler prepare for future bazel semantics of this is a local mod that wa already applied in g pr close ,fix
9905,aio fix overwriting with local angular package that depend on other local one pr close ,build
9906,aio fix testing of ngpackagesinstaller pr close ,test
9907,aio raise payload limit to accommodate the new search feature pr close ,ci
9908,aio add search to page the page will now run a search based on the given url to offer suggestion for the page that the user really wanted pr close ,feat
9909,aio move searchresultscomponent into shared module this will allow it to be used by an embedded component pr close ,refactor
9910,aio allow searchservice to have multiple client pr close ,feat
9911,aio tidy up ee test that used invalid url pr close ,test
9912,aio remove unused import and local variable pr close ,build
9913,aio upgrade rxjs dependency to work with t pr close ,fix
9914,animation add missing bracket to fadeanimation close ,docs
9915,core dont refer to hydration in doc anymore close ,fix
9916,aio improve the angular connect homepage banner the original logo wa too small the conference is over two day pr close ,docs
9917,aio change material to material it is just called angular material now pr close ,docs
9918,compiler skip type check and emit in bazel in some case if no user file changed only type check the changed generated file never emit non changed generated file we still calculate them but don ’ t send them through typescript to emit them but cache the written file instead pr close ,perf
9919,aio update banner ad pr close ,docs
9920,aio freeze lockfile when setting up example pr close ,build
9921,aio freeze yarn lockfile for aiobuildssetup script pr close ,build
9922,aio freeze lockfile when installing example dependency pr close ,build
9923,aio freeze the lockfile for ci build the ci will now fail if the dependency in the aio packagejson have been modified without the lockfile being updated pr close ,ci
9924,aio improve accessor rendering includes an update to dgenipackages which provides more info about accessors if required pr close ,build
9925,aio append information about link in and out of doc close pr close ,build
9926,compiler testbedoverrideprovider should keep imported ngmodules eager before a soon a a user called testbedoverrideprovider for a provider of a ngmodule that wa imported via testbedconfiguretestingmodule that ngmodule became lazy this commit change this behavior to keep the ngmodule eager with or without a call to testbedoverrideprovider pr close ,fix
9927,aio update animation for cli pr close ,docs
9928,animation ensure inner leave animation do not remove node when skipped pr close ,fix
9929,animation ensure animatechild work with all inner leave animation close pr close ,fix
9930,compiler introduce testbeddeprecatedoverrideprovider this allows use to fix testbedoverrideprovider to keep imported ngmodules eager while allowing our user to still keep the old semantics until they have fixed their test pr close ,refactor
9931,compiler correctly instantiate eager provider that are used via injectorget close pr close ,fix
9932,compiler correctly calculate the out path on window fix pr close ,fix
9933,aio add copy about ngnoform to ngform api doc pr close ,docs
9934,aio do not fail on first yarn setup pr close ,build
9935,aio ensure yarn lockfile ha correct dgenipackages version pr close ,build
9936,aio sort api list alphabetically close pr close ,build
9937,router do not call locationgo when skipping a navigation close pr close ,fix
9938,router navigating to the current location work close pr close ,fix
9939,animation reduce size of bundle by removing ast class this cl refactors the animation ast code to make use of interface instead of class given that interface are not persisted during runtime the removal of class should nicely cut down on size for the animationsbrowser bundle before animationsbrowserumdjs kb animationsbrowserumdminjs kb after animationsbrowserumdjs kb animationsbrowserumdminjs kb pr close ,perf
9940,animation properly support booleanbased transition and state change close close pr close ,fix
9941,animation properly support booleanbased transition and state change close close pr close ,fix
9942,router do not call locationgo when skipping a navigation close pr close ,fix
9943,router navigating to the current location work close pr close ,fix
9944,animation ensure animatechild work with all inner leave animation close pr close ,fix
9945,animation test to see if trigger get cancelled on removal pr close ,test
9946,animation reduce size of bundle by removing ast class this cl refactors the animation ast code to make use of interface instead of class given that interface are not persisted during runtime the removal of class should nicely cut down on size for the animationsbrowser bundle before animationsbrowserumdjs kb animationsbrowserumdminjs kb after animationsbrowserumdjs kb animationsbrowserumdminjs kb pr close ,perf
9947,compilercli produce smaller source map for template assocating each template node with a the generated typescript generated overly verbose source map changed to creating a source map entry per unique source span instead of each unique template ast node fix pr close ,fix
9948,compiler speed up loading of summary for bazel for hazel we have a specific way of writing summary which we can leverage to make the deserialization faster pr close ,perf
9949,compiler only type check input file when using bazel this help hazel a it doe not check library eg the default lib which are not input file but still check dts file that are input pr close ,perf
9950,aio exampleboilerplate is no longer responsible for yarn install the tooling for boilerplate wa also running yarn install on the example shared folder but since this is handled by ngpackagesinstaller this commit refactors the tool so that the boilerplate no longer doe this anymore pr close ,build
9951,aio fix aotcompiler example to work with angular v pr close ,docs
9952,aio ignore angularmobiletoolkit in dist build the new v version of this toolkit is too incompatible for u to run aio against both version so for now we will ignore this libary when running against local angular distribution and continue to use the version on npm pr close ,build
9953,aio support ignoring dist package in local mode pr close ,build
9954,aio provide cleaner script for local build switching pr close ,build
9955,aio use custom packagejson to run with local distributables close pr close ,ci
9956,aio fix aotcompiler example to work with angular v pr close ,docs
9957,aio ensure webdriver is updated when switching between local and npm deps pr close ,build
9958,aio fix pipe example ee spec to work with angular v there wa a breaking change between and for in formatting of date pr close ,docs
9959,aio fix animation example to work with angular v pr close ,docs
9960,aio upgrade tsnode to support newer typescript config this wa causing can not find type definition file for jasmine error when running protractor pr close ,build
9961,aio fix searchservice to work with typescript the call to race required a type parameter to disambiguate the return type pr close ,fix
9962,serviceworker several misc fix for corner case this commit fix several issue discovered through use in real apps the sha function operated on text content causing issue for binaryformat file a shabinary function which operates on unparsed data now avoids any encoding issue the character and were not escaped in globtoregex conversion previously but are now url from the browser contain the full origin but were checked against the table of hash from the manifest which only ha the path for url from the same origin now the origin is checked and url are relativized to the domain root before comparison if appropriate ngsw prefix wa missing from data group is now added occasionally server will return a redirected response for an asset and caching it could cause error for navigation request the sw now handle this by detecting such response and following the redirect manually to avoid caching a redirected response the request for known asset is now created from scratch from the url before fetching from the network in order to sanitize it and avoid carrying any special mode or header that might result in opaque response debugging log for troubleshooting avoid creating error by returning response on error fix bug where idle queue doesnt run in some circumstance add test for the above ,fix
9963,compiler don ’ t use ng in aot source map and never point to the original source file this is important to not confuse user nor downstream tool that consume our source map for generated content for which we don ’ t have an original source file we use the generated file now fix ,fix
9964,compiler remove stale metadata class for animation these are no longer needed a animation are a purely runtime concept ,refactor
9965,aio document custom async validators docsaio custom async validators edits incorporating suggestion from kapunahelewong ,docs
9966,compiler fix perf issue in loading aot summary in jit compiler the current flattensummaries function reprocess the same ngmodule summary even if it ha been processed before certain module like commonmodule are repeated multiple time in the module tree and it is expanded out every time this wa making unit test using aot summary really slow this will also slow down jit bootstrap application that load aot summary for component library the fix is to remember which summary were seen before and not to process them again ,perf
9967,platformbrowser support customequalitytesters when overriding jasmine toequal ,fix
9968,compiler properly work on window verified manually on a window surface tablet fix ,fix
9969,core add a checkindex to the compiler view node each node now ha two index nodeindex and checkindex nodeindex is the index in both the view definition and the view data checkindex is the index in in the update function update directive and update renderer while nodeindex and checkindex have the same value for now having both of them will allow changing the structure of view definition after compilation ie for runtime translation ,refactor
9970,compiler only don ’ t emit already emitted file in incremental compilation ,fix
9971,compiler disallow reference for select and index evaluation also fix an issue where enum value of or where not treated correctly fix ,fix
9972,aio fix typo in preview server config file comment ,docs
9973,aio document the special treatment of undefined ,docs
9974,aio fix broken link in tohpt ,docs
9975,compiler also count generated file to determine whether to use single file emit ,fix
9976,compiler always emit summary for jit with ngmodule bazel rule ,fix
9977,compiler set emitskipped to false for incremental compilation ,fix
9978,aio fix incorrect wording ,docs
9979,aio fix various api rendering issue upgrading to dgenipackages give u access to more property on the api doc which allows u to fix the following issue close close close ,build
9980,aio add ngvikings to the event page ,docs
9981,upgrade call ngoninit after ngonchanges on component with input fix ,fix
9982,upgrade correctly run change detection when propagatedigest is false ,fix
9983,upgrade ensure angularjs is bootstraped inside the angular zone in test ,test
9984,upgrade remove redundant call to apprefdetach once a viewref is attached to the applicationref destroying the corresponding componentref will automatically detach the viewref ,refactor
9985,upgrade ensure downgraded component are destroyed in the angular zone ,fix
9986,compiler only emit changed file for incremental compilation for now we always create all generated file but diff them before we pas them to typescript for the user file we compare the program and only emit changed typescript file this also add more diagnostic message if the —diagnostics flag is passed to the command line ,perf
9987,compiler don ’ t emit summary for jit by default this readds the flag enablesummariesforjit to the compiler option that already existed in angular ,perf
9988,compiler add typing for compiled note this commit ha to be synced into g again ,fix
9989,serviceworker introduce the angularserviceworker package this service worker is a conceptual derivative of the existing angularserviceworker maintained at githubcomangularmobiletoolkit but ha been rewritten to support use across a much wider variety of application entrypoints include angularserviceworker a library for use within angular client apps to communicate with the service worker angularserviceworkergen a library for generating ngswjson file from globbased sw config file angularserviceworkerngswworkerjs the bundled service worker script itself angularserviceworkerngswclijs a cli tool for generating ngswjson file from globbased sw config file ,feat
9990,compiler make watch mode work with declaration false close ,fix
9991,compiler make sure our out path calculation is correct ,fix
9992,compiler allow to use flat module and summary the combination of flat module flat module redirects and summary lead to error before ,fix
9993,router resolve and guard should be able to reject with null and undefined close ,fix
9994,compiler correctly map error message location ,fix
9995,compiler do not consider a reference with member a a reference fix ,fix
9996,core removed readonly getters and changed to readonly variable ,refactor
9997,core change abstract get to readonly ,refactor
9998,animation document usage of negative limit value for query ,docs
9999,compilercli dont rewrite import when annotating for closure closure no longer need to have the import rewritten avoid rewriting a this can cause issue when the source directory structure differs from what is deployed fix ,fix
10000,languageservice do not report error for opaquetoken opaquetoken wa removed from angular but the languageservice should not report error when it is used for older version of angular ,fix
10001,aio remove from more yarn command ,build
10002,aio disable cache when building a new docker image for the preview server ,build
10003,aio add copy about ngforof ,docs
10004,aio edit summary and next step header ,docs
10005,aio remove link to top of document ,docs
10006,aio update metadata documentation to include expression lowering ,docs
10007,compiler implement in with new compiler this commit is from vikerman close ,fix
10008,introduce named type for httpparams option this is necessary to enable typebased optimization with closure without explicity making these option the same named type closure think they are different type and can not disambiguate the fromobject property ,fix
10009,compiler enabled strict checking of parameter to an injectable added the compiler option strictinjectionparameters that default to false if enabled the compiler will report error for parameter of an injectable that can not be determined instead of generating a warning this is planned to be switched to default to true for angular ,feat
10010,compiler bump metadata version to also add auto upgrade from lower version based on the dts file eg from version to this is needed a we are now also capturing type alias in metadata file and we rely on this see ecaecdcceefd ,refactor
10011,animation support negative query option value close ,feat
10012,animation properly support the query limit option value close ,fix
10013,compilercli dont join error with comma ,fix
10014,aio temporarily disable aotcompiler example ee test ,ci
10015,common use correct pipe name in error message fix ,fix
10016,compiler remove deprecated compilernggetcontentselectors breaking change the method nggetconentselectors deprecated in angular ha been removed use componentfactoryngcontentselectors instead ,fix
10017,compilercli set source file range in node emitter enables source mapping from the template to the generated file ,fix
10018,aio fix the build script ng build must be the last command on the corresponding yarn script because it need to be passed extra argument such a the target environment in specific case ,build
10019,aio remove unnecessary from yarn command ,refactor
10020,aio add support for using the locally built angular package for aio this commit allows building angulario against the locally built angular package it add two new npm script setuplocal same a setup but overwrites the angular package for both angulario and the example boilerplate with the locally built one buildlocal same a build but us setuplocal instead of setup under the hood thus overwriting installed angular package with locally built one fix ,build
10021,compiler make sure to detect path that start with rootdir correctly close ,fix
10022,compiler work well with forwardref with usevalue usefactory the new expression lowering lower everything after usevalue usefactory into a separate exported variable if the value wa a forwardref this wa passed to the runtime and resulted in error this change unwraps forwardrefs during runtime again note we can ’ t unwrap the forwardref into an exported variable during compile time a this would defeat the purpose of the forwardref in referring to something that can ’ t be referred to at this position ,fix
10023,compiler allow to use lowering with export previously we generated incorrect code when a file had lowering and also exported another file via export that also had lowering in it ,fix
10024,compiler add parens around binary ternary expression this fix case where binary ternary operator are nested eg a nested ternary operator ,fix
10025,compiler various squashed fix for the new ngc introduce the option allowemptycodegenfiles to generate all generated file even if they are empty also provides the original source file from which the file wa generated in the write file callback needed eg for g when copying over pinto mod name from the original component to all generated file use importas from flat module when writing summary ie prevents incorrect entry like angularcommoncommon in the ngsummaryjson file change interaction between ng and t to prevent race condition before angular would rely on t to first read the file for which we generate file and then the generated file however this can break easily when we reuse an old program don ’ t generate file for source that are outside of rootdir see ,fix
10026,compiler skip nbsp when trimming removing whitespaces fix ,fix
10027,compilercli update ngtools emitflags ,fix
10028,compilercli do not validate metadata from declaration file upgrading metadata file cause spurious report of metadata error fix ,fix
10029,aio run the upload server a a nonprevileged user close previously the upload server for pr preview wa run a root and downleveled to a nonprivileged user from inside the node script now with the latest version of pm which is used to run the upload server script we can get rid of that workaround and set the desired uid directly through pm ,build
10030,aio upgrade all preview server dependency ,build
10031,aio add metadata alias for directive component and pipe this change will enable people to link to the api doc via their selector or name a used in a template since the selector can be quite complex we are not able to get accuracy close ,build
10032,aio render classinterface descendant in api doc for class the tree of subclass is rendered recursively for interface the descendant are separated into child interface which extend the interface and class which implement the interface close ,build
10033,aio ensure decorator with shared interface type are found close ,build
10034,platformbrowser fix mx attack test in canary pr close ,test
10035,aio change example to cli pr close ,build
10036,core support for bootstrap with custom zone pr close ,feat
10037,common dont generate tsickle reexport file for locale package pr close ,build
10038,platformserver add an api to transfer state from server transferstate provides a shared store that is transferred from the server to client to use it import browsertransferstatemodule from the client app module and servertransferstatemodule from the server app module and transferstate will be available a an injectable object pr close ,feat
10039,aio tidy up tooling documentation pr close ,docs
10040,aio applying some feedback pr close ,docs
10041,aio add zipper documentation pr close ,docs
10042,aio complete the plunkerbuilder doc pr close ,docs
10043,aio add boilerplate readme pr close ,docs
10044,aio highlevel documentation of the transforms folder pr close ,docs
10045,aio highlevel documentation of aio tooling pr close ,docs
10046,core viewdef related refactoring optimize the way node flag are propagated in viewdef fix elementdef signature to make namespaceandname nullable move render parent computation with the parent computation pr close ,refactor
10047,compiler correctly derive fileexists for generated file pr close ,fix
10048,compiler also create ngfactoryjs file in non obvious case eg when an exported class contains a ctor argument which is from another compilation unit pr close ,fix
10049,compiler support noresolve pr close ,fix
10050,compiler don ’ t type check property access of literal map this wa the behavior in ng so we put the stricter check behind the fulltemplatetypecheck flag pr close ,fix
10051,compiler don ’ t lower property access of exported symbol eg this allows the following to work decorator usevalue myclasssomemethod class myclass static somemethod pr close ,fix
10052,compiler collect non exported symbol in dts file t treat all symbol in dts file a exported whether they have an export keyword or not pr close ,fix
10053,compiler don ’ t workaround a fixed tsickle bug pr close ,refactor
10054,upgrade use correct property name it doesnt make any difference in this case because the we only check the property for truthfulness and being undefined ha the same effect a being set to false pr close ,refactor
10055,router fix activation event tostring and doc pr close ,fix
10056,compiler misc minor refactor cleanup pr close ,refactor
10057,core make dynamic inline code checking behave the same pr close ,fix
10058,core removed getter and changed to readonly variable pr close ,refactor
10059,core remove getters for packagesanimations languageservice platformbrowser router pr close ,refactor
10060,form remove readonly getters in form pr close ,refactor
10061,compiler update in comment deprecation message pr close ,refactor
10062,aio improve error message for ignored example file address pr close ,build
10063,aio remove commented out code pr close ,build
10064,aio correctly serialize commit message with doublequotes pr close ,ci
10065,compiler speed up watch mode don ’ t regenerate code for dts file when an oldprogram is passed to createprogram cache fileexists getsourcefile readfile in watch mode refactor test to share common code in testsupport support —diagnostic command line to print total time used per watch mode compilation pr close ,perf
10066,compiler introduce emitflagscodegen this flag control whether the compiler emits generated file it is initially calculated via skiptemplatecodegen from the compiler option also add a small performance improvement to not generate the file at all if we don ’ t emit generated code remove emitflagssummaries a we never used it pr close ,refactor
10067,compiler only use tsickle if needed pr close ,perf
10068,compiler make the creation of tsprogram faster we now create program with exactly the same filename and exactly the same import export declaration allowing t to reuse the structure of first program completely when passing in an oldprogram and the file didn ’ t change t can also reuse the old program completely this is possible buy adding generated file to t in hostgesourcefile via tssourcefilereferencedfiles this commit also ha a minor side effect on how we generate shared stylesheets previously every import in a stylesheet would generate a new ngstylests file now we only generate ngstylests file per entry in componentstyleurls this wa required a we need to be able to determine the program file without loading the resource which can be async make all angular related method in compilerhost optional allowing to just use a regular tscompilerhost a compilerhost simplifies the logic around compileranalyzengmodules by introducing nganalyzedfile perf impact s improvement in compiling angular io pr close ,perf
10069,tscwrapped deduplicate metadata only when the module is the same fix pr close ,fix
10070,core remove readonly getters in common compiler pr close ,refactor
10071,compiler reuse the typescript typecheck for template typechecking this speed up the compilation process significantly also introduces a new option fulltemplatetypecheck to do more check in template check expression inside of templatized content eg inside of div ngif check the argument of call to the transform function of pipe check reference to directive that were exposed a variable via exportas pr close ,feat
10072,compiler remove all sourcelevel trace to tscwrapped temporarily keep the old source under packagestscwrapped until the build script are changed to use compilercli everywhere remove the compiler option disabletransformerpipeline that wa introduced in a previous beta of angular ie the transformer based compiler is now always enabled pr close ,refactor
10073,core reduce payload size for clihelloworld pr close ,build
10074,common inject deprecated getpluralcase for treeshaking fix pr close ,build
10075,compiler use new ngc for in this also change ngc to support all tsc command line argument pr close ,refactor
10076,packaging added test for source map correctness ,test
10077,upgrade add testability hook to downgraded component add testability hook to downgraded component so that protractor can wait for asynchronous call to complete add unregisterapplication and unregisterallapplications to testability registry for cleaning up testability and unit test ,fix
10078,platformserver support setting innertext property domino doesnt support innertext so the actual inner text wasnt getting set if the innertext wa set on an element in a template add it to the domino adapter to map it to textcontent also change wrongly named initparseadapter to initdominoadapter ,fix
10079,aio autolink more code item we now parse all code block after they have been rendered by dgeni and insert link to api doc that match word in the code ,build
10080,aio fix typo ,docs
10081,aio relax search on title further this change will now match controlvalueaccessor for the query accessor close ,fix
10082,aio do not render annotation block for directive ,build
10083,aio improve rendering of directive selector ,build
10084,aio do not render comment in decorator close ,build
10085,aio update karma systemjs config for httpclient while adding the reference to the httpclient package it also crucially add ref to new “ tslib ” library required by httpclient ,build
10086,aio update packagejson for angularinmemwebapi ,build
10087,aio provide link text for abstractcontrol reference in reactive directive for form close ,docs
10088,aio render metadata member from decorator ancestor ,build
10089,aio render ancestor member in directive see checkboxrequiredvalidator for an example ,build
10090,tscwrapped fix metadata symbol reference ,fix
10091,router remove deprecated routeroutlet property breaking change routeroutlet property locationinjector and locationfactoryresolver have been removed a they were deprecated since v ,refactor
10092,router add activationstartend event ,feat
10093,aio include more api result in search by adding a more relaxed search on the title of doc we are more likely to catch api doc the additional search term match anything with a word in the title that start with the character of the first term in the search eg if the search is ngcont guide then search for ngcont guide titlewordsngcont ,feat
10094,aio dont show constructor detail if there is none ,build
10095,aio change stack overflow link ,docs
10096,compiler fix bazel integration and make performcompile more flexible needed to allow custom checking for diagnostics ,fix
10097,compiler emit preamble in generated file ,fix
10098,compiler lower variable with a closure by exporting the variable this eg leaf comment at the right place which is important for closure ,fix
10099,upgrade remove code setting id attribute the id wa leftover from previous iteration of ngupgrade and is no longer needed moreover setting it can clash with cs usage of id fix ,fix
10100,aio updated jqwidgets resource desc and url updated the description and url of the jqwidgets item in the resource page ,docs
10101,platformbrowser fix typo fix ,build
10102,tscwrapped deduplicate metadata for reexported module ,fix
10103,aio support rendering of constructor overload in api doc close ,build
10104,aio fix doc example ee test remove an assertion that is no longer true this wa supposed to be removed in but wa somehow dropped from adab probably due to a bad rebase travis ha been failing due to this since ,test
10105,platformserver provide a way to hook into rendermodule a multi rendermodulehook provider can provide function that will be called with the current document just before the document is rendered to string this hook can for example be used for the state transfer module to serialize any server state that need to be transported to the client just before the current platform state is rendered to string pr close ,feat
10106,router adjust childactivation event to only fire when the child is actually changing the problem wa with the firechildactivationstart function it wa taking a path param which wa an array of activatedroutesnapshots the function wa being fired for each piece of the route that wa being activated this resulted in far too many childactivationstart event being fired and being fired on route that werent actually getting activated this change fire the event only for those route that are actually being activated fix pr close ,fix
10107,router remove routeevent base class introduced with routeevents dont actually have a common constructor reverting here to be able to add new functionality to childactivation event pr close ,refactor
10108,aio align footer background image repeat ref pr close ,fix
10109,compiler update template parse error message to ngtemplate pr close ,refactor
10110,aio add changelog a hidden to navigation this ensures that the changelog page is formatted correctly close pr close ,docs
10111,aio add nir kaufman to gde resource pr close ,docs
10112,form clarify controlvalueaccessor doc close pr close ,docs
10113,animation ensure animatechild work with all inner leave animation close pr close ,fix
10114,aio updating about page for team change pr close ,docs
10115,compiler deprecate in comment in favor of ngcontainer pr close ,feat
10116,platformbrowser run blacklistedevents outside of ngzone pr close ,fix
10117,platformbrowser simple version of zone aware addeventlistener pr close ,fix
10118,aio render the extends ancestor of class in api doc pr close ,build
10119,aio ensure dgeni can load all angular typescript module pr close ,build
10120,aio add new lib to data library add angularcommerse set of component to build ecommerce solution with angular firebase pr close ,docs
10121,aio updated usage of observables in router guide added section for advanced redirects pr close ,docs
10122,aio fix deploy to firebase script should use for string operation pr close ,fix
10123,core remove deprecated opaquetoken breaking change opaquetoken ha been removed a it wa deprecated since v use injectiontoken instead pr close ,refactor
10124,core complete eventemitter in querylist on component destroy fix pr close ,fix
10125,tscwrapped decouple bundle index host from tsickle dependency pr close ,fix
10126,upgrade deprecate the dynamic version of ngupgrade ,fix
10127,compilercli use locale parameter for transformer pr close ,fix
10128,core improve formatting for the preservewhitespaces option pr close ,docs
10129,compiler set enablelegacytemplate to false by default breaking change the compiler option enablelegacytemplate is now disabled by default a the template element ha been deprecated since v use ngtemplate instead the option enablelegacytemplate and the template element will both be removed in angular v pr close ,feat
10130,animation do not leak dom nodesstyling for host triggered animation close pr close ,fix
10131,compilercli expose ngtools api separately pr close ,refactor
10132,compiler treat absolute import a package import this is a corner case and converting them is what wa expected in g this also fit the fact that we already convert package path into relative path pr close ,fix
10133,compiler workaround bug in t when combining transformer pr close ,fix
10134,compiler use either summary or metadata information when reading dts file this fix applies for getting all symbol in file pr close ,fix
10135,compilercli fix memory leak in watch mode pr close ,fix
10136,changelog improving readability pr close ,style
10137,changelog improving readability pr close ,style
10138,compilercli expose ngtools api separately pr close ,refactor
10139,common export locale data from closurelocale pr close ,refactor
10140,compilercli add watch mode to ngc with this change ngc now accepts a w or a watch commandline option that will automatically perform a recompile whenever any source file change on disk pr close ,feat
10141,compilercli lower metadata usevalue and data literal field with this commit the compiler will lower expression into exported variable for value the compiler doe not need to know statically in order to be able to generate a factory for example provider provider token usevalue calculated produced an error a the expression calculated is not supported by the compiler because calculated is not a known function with this commit this is rewritten during emit of the j file into something like export var ɵ calculated provdiers provider token usevalue ɵ the compiler then will now generate a reference to the exported ɵ instead of failing to evaluate calculated pr close ,feat
10142,compilercli expose ngtools api separately pr close ,refactor
10143,compilercli add watch mode to ngc with this change ngc now accepts a w or a watch commandline option that will automatically perform a recompile whenever any source file change on disk pr close ,feat
10144,compilercli lower metadata usevalue and data literal field with this commit the compiler will lower expression into exported variable for value the compiler doe not need to know statically in order to be able to generate a factory for example provider provider token usevalue calculated produced an error a the expression calculated is not supported by the compiler because calculated is not a known function with this commit this is rewritten during emit of the j file into something like export var ɵ calculated provdiers provider token usevalue ɵ the compiler then will now generate a reference to the exported ɵ instead of failing to evaluate calculated pr close ,feat
10145,platformserver provide a dom implementation on the server fix us domino and remove dependency on parse the document and nativeelement were never typed earlier and were different on the browserdom node and the serverparse node with this change platformserver also expose a document and nativeelement that is closer to the client if you were relying on nativeelement on the server you would have to change your code to use the dom api now instead of parse ast api remove the need to add service for each and every document manipulation like titlemeta etc this doe not provide a global variable document or window on the server you still have to inject document to get the document backing the current platform server instance ,feat
10146,common use v plural when importing deprecatedinpipesmodule ,fix
10147,compiler normalize the locale name ,fix
10148,common use correct group separator for currency pipe pr close ,fix
10149,core document the preservewhitespaces option close pr close ,docs
10150,common add new example for datenumber pipe pr close ,docs
10151,common fix xssi prefix stripping by using jsonparse always currently httpclient sends request for json data with the xmlhttprequestresponsetype set to json with this flag the browser will attempt to parse the response a json but will return null on any error if the json response contains an xssiprevention prefix this will cause the browser parsing to fail which is unrecoverable the only compelling reason to use the responsetype json is for performance especially if the browser offloads json parsing to a separate thread im not aware of any browser which doe this currently nor of any plan to do so jsonparse and responsetype json both end up using the same v code path in chrome to implement the parse thus this change switch all json parsing in httpclient to use jsonparse directly fix pr close ,fix
10152,common accept object map for httpclient header params today constructing a new get request with header look like const header new httpheaders myheader header value headerssubscribe this indirection is unnecessary itd be more ergonomic to write header myheader header valuesubscribe this commit allows that new syntax both for httpheaders and httpparams in the httpparams case it also allows construction of httpparams with a map pr close ,feat
10153,common fix improper packaging for angularcommonhttp pr close ,fix
10154,common fix a duplicate case in the locale switch ,fix
10155,common update closurelocale generation for tree shaking ,fix
10156,common simplify closurelocale by removing import ,refactor
10157,common generate closurelocalets to tree shake locale data closure will only keep the data for the locale defined in googlocale pr close ,feat
10158,common move generated locale file pr close ,refactor
10159,common update generated in data pr close ,refactor
10160,common refactor in code to ease tree shaking pr close ,refactor
10161,common remove availablelocales fix pr close ,refactor
10162,compiler don ’ t emit stub when we didn ’ t generate code for a file applies to the new transformer compiler pr close ,fix
10163,compiler don ’ t reexport type in ngfactory file this is needed a the typescript no longer elides type reexports in the generated code when using transformer a nice side effect is that this make summary shorter and produce le reexports a we rollup reexports pr close ,fix
10164,compiler always check summary first before falling back to metadata from dts file pr close ,fix
10165,compiler always emit ngfactories with reexports previously we only did this when setting the generatecodeforlibraries false this is needed so that library compiled with generatecodeforlibraries true can be used a dependency of other compilation unit pr close ,fix
10166,compiler quote non identifier in map key pr close ,fix
10167,aio add amcdnl to bio pr close ,docs
10168,aio fix deploy to firebase script pr close ,ci
10169,compilercli move ngcwrapped to packagesbazel see design pr close ,refactor
10170,router remove deprecated routeroutlet property breaking change routeroutlet property locationinjector and locationfactoryresolver have been removed a they were deprecated since v pr close ,refactor
10171,router remove deprecated initialnavigation option breaking change the value true false legacyenabled and legacydisabled for the router parameter initialnavigation have been removed a they were deprecated use enabled or disabled instead pr close ,refactor
10172,aio add info about local option in the readme pr close ,docs
10173,aio fix error handling section in httpclient removed additional curly bracket to fix block also replaced tab with space pr close ,docs
10174,platformbrowserdynamic keep preservewhitespaces default setting in one place compilerconfig should be the only source of default setting for preservewhitespaces so let not enforce default on the compileroptions level pr close ,refactor
10175,core make sure onstable run in the right zone make sure the callback to the ngzone callback run in the right zone with or without the rxjs zone patch pr close ,fix
10176,common drop use of the intl api to improve browser support breaking change because of multiple bug and browser inconsistency we have dropped the intl api in favor of data exported from the unicode common locale data repository cldr unfortunately we had to change the in pipe date number currency percent and there are some breaking change in pipe breaking change by default angular now only contains locale data for the language enus if you set the value of localeid to another locale you will have to import new locale data for this language because we dont use the intl api anymore feature you dont need to use the intl polyfill for angular anymore all in pipe now have an additional last parameter locale which allows you to use a specific locale instead of the one defined in the token localeid whose value is enus by default the new locale data extracted from cldr are now available to developer a well and can be used through an api which should be especially useful for library author you can still use the old pipe for now but their name have been changed and they are no longer included in the commonmodule to use them you will have to import the deprecatedinpipesmodule after the commonmodule the order is important t import ngmodule from angularcore import commonmodule deprecatedinpipesmodule from angularcommon ngmodule import commonmodule import deprecated module after deprecatedinpipesmodule export class appmodule dont forget that you will still need to import the intl api polyfill if you want to use those deprecated pipe date pipe breaking change the predefined format short shorttime shortdate medium now use the pattern given by cldr like it wa in angularjs instead of the one from the intl api you might notice some change eg shortdate will be instead of for enus the narrow version of era is now ggggg instead of g the format g is now similar to gg and ggg the narrow version of month is now mmmmm instead of l the format l is now the short standalone version of month the narrow version of the week day is now eeeee instead of e the format e is now similar to ee and eee the timezone z will now fallback to o and output gmt instead of the complete zone name eg pacific standard time this is because the quantity of data required to have all the zone name in all of the existing locale is too big the timezone z will now output the iso basic format eg you should now use zzzz to get gmt field type format example value v v era narrow a for ad g ggggg month narrow s for september l mmmmm week day narrow m for monday e eeeee timezone long location pacific standard time z not available timezone long gmt gmt z zzzz feature new predefined format long full longtime fulltime the format yyy is now supported eg the year will be and the year will be standalone month are now supported with the format l to lllll week of the year is now supported with the format w and ww eg week and week of the month is now supported with the format w eg week fractional second are now supported with the format s to ss day period for ampm now support additional format aa aaa aaaa and aaaaa the format a to aaa are similar while aaaa is the wide version if available eg ante meridiem for am or equivalent to a otherwise and aaaaa is the narrow version eg a for am extra day period are now supported with the format b to bbbbb and b to bbbbb for the standalone equivalent eg morning noon afternoon the short nonlocalized timezones are now available with the format o to oooo the format o to ooo will output gmt while the format oooo will be gmt the iso basic time zone are now available with the format z to zzzzz the format z to zzz will output while the format zzzz will be gmt and zzzzz will be bug fix the date pipe will now work exactly the same across all browser which will fix a lot of bug for safari and ie era can now be used on their own without the date eg the format gg will be ad instead of ad currency pipe breaking change the default value for symboldisplay is now symbol instead of code this mean that by default you will see for enus instead of usd previously deprecation the second parameter of the currency pipe symboldisplay is no longer a boolean it now take the value code symbol or symbolnarrow a boolean value is still valid for now but it is deprecated and it will print a warning message in the console feature you can now choose between code symbol or symbolnarrow which give you access to more option for some currency eg the canadian dollar with the code cad ha the symbol ca and the symbolnarrow percent pipe breaking change if you dont specify the number of digit to round to the local format will be used and it usually round number to digit instead of not rounding previously eg percent will output for the locale enus instead of previously fix pr close ,feat
10177,common add generated in locale data file pr close ,build
10178,common extract in locale data from cldr pr close ,build
10179,animation report error when invalid cs property are detected close pr close ,feat
10180,common remove deprecated ngfor breaking change ngfor ha been removed a it wa deprecated since v use ngforof instead this doe not impact the use ofngfor in your template pr close ,refactor
10181,aio do not redirect api page on archive and next deployment pr close ,fix
10182,compilercli propagate preservewhitespaces option to codegen pr close ,fix
10183,aio add ngatlanta to the event page pr close ,docs
10184,aio update resource to include ninjacodegen angular crud generator pr close ,docs
10185,common remove usage of deprecated renderer pr close ,refactor
10186,animation format integration spec ,style
10187,animation restore autostyle support for removed dom node pr close ,fix
10188,animation make sure animation cancellation respect auto style value close pr close ,fix
10189,animation make sure disabled respect disabled parentsub animation sequence prior to this fix if parent and child animation ran at the same time within a disabled region then there wa a chance that a child sub animation would never complete this would cause directive to never close a removal when a child trigger wa placed on them this patch fix this issue pr close ,fix
10190,animation ensure animation are disabled on the element containing the disabled flag prior to fix this fix disabled would only work to disable child animation now it will also disable animation for the element that ha the disabled flag which make more sense pr close ,fix
10191,animation allow disabled property to work without an expression pr close ,feat
10192,compilercli use forward slash for tsresolvemodulename window path have back slash but typescript expects to always have forward slash in other place where this call happens like srccompilerhostts the same fix is present pr close ,fix
10193,common remove deprecated ngtemplateoutletngoutletcontext breaking change ngtemplateoutletngoutletcontext ha been removed a it wa deprecated since v use ngtemplateoutletngtemplateoutletcontext instead pr close ,refactor
10194,aio fix card inconsistency pr close ,docs
10195,aio refactored payload size script add script to track payload pr close ,ci
10196,core correct order in contentchildren query result fix pr close ,fix
10197,core remove deprecated testabilityfindbindings breaking change testabilityfindbindings ha been removed a it wa deprecated since v use testabilityfindproviders instead pr close ,refactor
10198,core remove deprecated debugnodesource breaking change debugnodesource ha been removed a it wa deprecated since v pr close ,refactor
10199,compiler remove option usedebug breaking change the option usedebug for the compiler ha been removed a it had no effect and wa deprecated since v pr close ,refactor
10200,aio do not autolink code element already inside a link close pr close ,build
10201,compiler align ngsp handling with angular dart implementation pr close ,refactor
10202,aio typo in templatesyntax guide pr close ,docs
10203,core remove deprecated changedetectionref argument in differfactorycreate breaking change differfactorycreate no longer take changedetectionref a a first argument a it wa not used and deprecated since v pr close ,refactor
10204,core remove deprecated trackbyfn breaking change trackbyfn ha been removed because it wa deprecated since v use trackbyfunction instead pr close ,refactor
10205,aio update resource for codelyzer pr close ,docs
10206,aio fix error logged during test the fixed test expected there to be a doc version without a url this used to be the case but not any more a a result an error wa logged in the test output but no failure this commit fix it by ensuring that a version without a url exists pr close ,test
10207,aio move code snippet to appropriate location pr close ,docs
10208,platformwebworker remove deprecated primitive breaking change primitive ha been removed a it wa deprecated since v use serializertypesprimitive instead pr close ,refactor
10209,platformbrowser remove deprecated ngprobetoken breaking change ngprobetoken ha been removed from angularplatformbrowser a it wa deprecated since v import it from angularcore instead pr close ,refactor
10210,core remove deprecated parameter for errorhandler breaking change errorhandler no longer take a parameter a it wa not used and deprecated since v pr close ,refactor
10211,packaging increase node memory for test pr close ,build
10212,aio typo in metadata guide pr close ,docs
10213,tscwrapped add metadata for type declaration close testtscwrapped fix collector test refactortscwrapped change symbolic to interface for typealiasdeclaration tscwrapped reword test pr close ,fix
10214,compiler add missing test to compare core and compiler metadata pr close ,refactor
10215,compiler make the new ngc api independent of tsickle this change performcompile programemit to not tsickle automatically but allows to pas in an emitcallback in which tsickle can be executed ,refactor
10216,compiler split compiler and core after this neither angularcompiler nor angularcomnpilercli depend on angularcore this add a duplication of some interface and enums which is stored in angularcompilersrccorets breaking change angularplatformserver now additionally depends on angularplatformbrowserdynamic a a peer dependency pr close ,refactor
10217,compiler drop typing test for typescript ,refactor
10218,tscwrapped make testsh tool run the tscwrapped test again ,fix
10219,animation resolve error when using animationbuilder with platformserver use an injected document instead of assuming the global document exists fix pr close ,fix
10220,packaging increase node memory for test pr close ,build
10221,common add an empty deprecatedinpipesmodule module adding an empty module to ease the migration to the in pipe pr close ,feat
10222,compiler allow multiple exportas name this change allows user to specify multiple exportas name for a directive by giving a commadelimited list inside the string the primary motivation for this change is to allow these name to be changed in a backwards compatible way ,feat
10223,form add updateon and ngformoptions to ngform this commit introduces a new input property called ngformoptions to the ngform directive you can use it to set default updateon value for all the form child control this default will be used unless the child ha already explicitly set it own updateon value in ngmodeloptions potential value change blur submit html form ngformoptionsupdateon blur input nameone ngmodel will update on blur form for more context see ,feat
10224,compiler use typescript for resolving resource path this can also be customized via the new method resourcenametofilename in the compilerhost ,feat
10225,compiler make ngsummaryjson file portable this also allows to customize the filepaths in ngsummaryjson file via the new method tosummaryfilename and fromsummaryfilename on the compilerhost ,feat
10226,compiler simplify the compilerhost used for transformer remove unneeded method getngcanonicalfilename assumefileexists simplify modulename filename conversion logic a we don ’ t need to account for gendir anymore rename createngcompilerhost createcompilerhost ,refactor
10227,compiler extract a baseaotcompilerhost that is shared between the old and new logic ,refactor
10228,languageservice remove tsickle dependency remove the tsickle dependency added when tsickle wa added to the transform compiler added a test to ensure stray dependency are not added and no error are introduced during module flattening ,fix
10229,form reassigning option should not clear select fix ,fix
10230,form fix reactiveforms guide typo close ,docs
10231,common mark ngtemplateoutlet api a stable ,feat
10232,compiler dont strip cs source map fix cs source mapping for component by keeping sourcemappingurl and sourceurl comment relates to ,fix
10233,core remove tostring method from defaultiterablediffer tostring from defaultiterablediffer is only used in test and should not be part of the production code tostring method from differs add kb mingzip to the production bundle size ,refactor
10234,form add updateon support to ngmodeloptions this commit introduces a new option to templatedriven form that improves performance by delaying form control update until the blur or submit event to use it set the updateon property in ngmodeloptions html input ngmodel ngmodeloptionsupdateon blur like in angularjs setting updateon to blur or submit will delay the update of the value a well a the validation status updating value and validity together keep the system easy to reason about a the two will always be in sync it also worth noting that the valuevalidation pipeline doe still run when the form is initialized in order to support initial value upcoming pr will address support for setting grouplevel updateon in templatedriven form option for skipping initial validation run or more global error display configuration better support of reactive validation strategy see more context in and the design doc ,feat
10235,aio switch from angular to angularcommon l l distjs distbefbdddbchunkjs distinlineabbeebbdbundlejs distmainfecffeeefbundlejs distpolyfillsfeebceacebundlejs distworkerbasicminjs total ,build
10236,aio upgrade zonejs to l l distjs distbefbdddbchunkjs distinlineabbeebbdbundlejs distmainfecffeeefbundlejs distpolyfillsfeebceacebundlejs distworkerbasicminjs total ,build
10237,aio upgrade angular to beta l l distjs distbefbdddbchunkjs distinlineffbcbundlejs distmainfecffeeefbundlejs distpolyfillsbdfbcebfbundlejs distworkerbasicminjs total ,build
10238,aio upgrade angular to l l distjs distbefbdddbchunkjs distinlineddbdbundlejs distmainfffdbbbabcecbundlejs distpolyfillsbdfbcebfbundlejs distworkerbasicminjs total ,build
10239,aio upgrade angularcli to l l distjs distbefbdddbchunkjs distinlineeeebfccbundlejs distmainfacadcbundlejs distpolyfillsbdfbcebfbundlejs distworkerbasicminjs total ,build
10240,core correct code example for changedetectorref ,docs
10241,form add api doc for abstractcontroldirective ,docs
10242,form add status to abstractcontroldirective ,feat
10243,aio add metadata guide based on chuck ’ s doc chuck ’ s gist also chuck ’ s doc on metadatarelated error link needed ,docs
10244,core add option to remove blank text node from compiled template ,perf
10245,aio update to new version of buildoptimizer ,perf
10246,compilercli cleanup api for transformer based ngc this is in preparation for watch mode ,refactor
10247,core remove decorator dsl which depends on reflect breaking change it is no longer possible to declare class in this format component class constructor function this format would only work with jit and with e this mode doesn ’ t allow build tool like webpack to process and optimize the code which result in prohibitively large bundle we are removing this api because we are trying to ensure that everyone is on the fast path by default and it is not possible to get on the fast path using the e dsl the replacement is to use typescript and decorator format component class constructor ,perf
10248,compilercli use the transformer based compiler by default the source map doe not currently work with the transformer pipeline it will be reenabled after typescript is made the min version to revert to the former compiler use the disabletransformerpipeline in tsconfigjson angularcompileroptions disabletransformerpipeline true ,refactor
10249,aio skip pwa test when redeploying nonpublic commit ,fix
10250,aio fix compilation error by using the correct type for provider ,fix
10251,form add default updateon value for group and array this commit add support for setting default updateon value in formgroups and formarrays if you set updateon to ’ blur ’ at the group level all child control will default to ’ blur ’ unless the child ha explicitly specified a different updateon value const c new formgroup one new formcontrol updateon blur it worth noting that parent group will always update their value and validity immediately upon valuevalidity update from child in other word if a group is set to update on blur and it child are individually set to update on change the group will still update on change with it child it default value will simply not be used ,feat
10252,core deprecate reflectiveinjector close ,docs
10253,aio fix running doc example against local build this commit also update the version of angularcli used for doc example the previous transient dependency ngtoolswebpack wa not compatible with angularcompilercli and wa breaking when running against the local build currently at beta the version of ngtoolswebpack used by the latest angularcli version is compatible with angularcompilercli ,test
10254,aio add missing code snippet the snippet got lost some time during the migration from the old version it is present in v fix ,fix
10255,aio fix the deploytofirebase test this commit also ensures that if the test fail the script exit with an error ,test
10256,aio fix deploying the stable branch to firebase the deploytofirebasesh always expects there to be a srcextrafilesmode directory and break if it doesnt exist ,ci
10257,animation disable buggy test in chrome fix ,test
10258,core forbid destroyed view to be inserted or moved in vc fix ,fix
10259,aio fix deploying to firebase ,ci
10260,compilercli fix and reenble expression lowering fix issue uncovered by and reenables expression lowering disabled by ,fix
10261,core fix platformbrowserdynamic followup for ,fix
10262,core create staticinjector which doe not depend on reflect polyfill ,feat
10263,form add updateon submit option to formcontrols ,feat
10264,common dont recreate view when context shape doesnt change problem description when using ngtemplateoutlet with context a an object literal in a template and binding to the context property the embedded view would get recreated even if context object remains essentially the same the same shape just update to one property this happens since currently change detection will recreate object reference when an object literal is used and one of it property get updated through a binding solution this commit change ngtemplateoutlet logic so we take context object shape into account before deciding if we should recreate view or just update existing context fix ,fix
10265,compilercli remove minimist dependency of compilercliindex indirectly remove the minimist dependency in the language service package wa added with the addition of ngcts ,fix
10266,common fix the datepipe api doc ,docs
10267,animation support persisting dynamic style within animation state close close ,fix
10268,animation revert containerqueried animation accordingly during cancel ,fix
10269,aio typo update the bio ,docs
10270,aio compute aio deployment mode there are now mode for deployment next stable archive we compute which mode and other deployment property from the travisbranch and the stablebranch if the travisbranch is master we deploy a next if the travisbranch match the stablebranch we deploy a stable otherwise if the branch ha a major version lower than the stable version and it minor version is highest of similar branch we deploy a archive for archive deployment we compute the firebase project and deployment url based on the major version of the travisbranch a well a choosing where to deploy the build we also use this to select the environment file for the aio angular app this will enable the app to change it rendering and behaviour based on it mode see close ,ci
10271,aio add archive and next color theme ,feat
10272,aio redirect marketing page to doc if deploy mode is archive see ,feat
10273,aio add deploy mode to version picker see ,feat
10274,aio enable deployment mode to be set via url query the deployment mode set from the environment provided at build time or overridden by the mode query parameter eg modearchive see ,feat
10275,aio update ui based on deployment mode add a banner if the mode is archive add a mode class to the aioshell element to enable mode based theming see ,feat
10276,aio include extra file in aio deployment based on mode any file that are inside the extrafilesmode folder will be copied over to the dist folder before deployment to firebase see ,ci
10277,aio compute aio deployment mode there are now mode for deployment next stable archive we compute which mode and other deployment property from the travisbranch and the stablebranch if the travisbranch is master we deploy a next otherwise if the branch is the highest of it minor version we deploy a stable if the travisbranch match the stablebranch or else archive for archive deployment we compute the firebase project and deployment url based on the major version of the travisbranch a well a choosing where to deploy the build we also use this to select the environment file for the aio angular app this will enable the app to change it rendering and behaviour based on it mode see ,ci
10278,compilercli disable buggy expression lowering ,fix
10279,aio tech edits to form validation close ,docs
10280,form update and reorganize validation guide ,docs
10281,compilercli modified ngc to throw all error not just syntax ,fix
10282,compiler ignore import in multiline cs fix ,fix
10283,form add updateon blur option to formcontrols by default the value and validation status of a formcontrol update whenever it value change if an application ha heavy validation requirement updating on every text change can sometimes be too expensive this commit introduces a new option that improves performance by delaying form control update until the blur event to use it set the updateon option to blur when instantiating the formcontrol t example without validators const c new formcontrol updateon blur example with validators const c new formcontrol validators validatorsrequired updateon blur like in angularjs setting updateon to blur will delay the update of the value a well a the validation status updating value and validity together keep the system easy to reason about a the two will always be in sync it also worth noting that the valuevalidation pipeline doe still run when the form is initialized in order to support initial value close ,feat
10284,router compile router cleanly with typescript ,refactor
10285,router fix typo ,docs
10286,platformbrowser compiler platformbrowser package cleanly ,refactor
10287,form compile form cleanly with typescript ,refactor
10288,upgrade compile upgrade cleanly with typescript ,refactor
10289,compiler cleanly compile with typescript ,fix
10290,benchpress compile cleanly with t ,fix
10291,upgrade fix an ie timer issue in downgrade module test ,test
10292,aio fix layout of the webpack guide this is possibly a temporary fix for the layout until we decide whether we want to remove the guide or properly add it to the sidenav menu fix ,fix
10293,aio add commit message to payload data ,ci
10294,aio fix missing anchoropen in in documentation the internationalisation documentation translate text node section ha an incomplete markdown anchor and leak markdown into the page fix the anchor by adding the opening bracket ,docs
10295,aio correctly redirect cookbookaaquickreferencehtml fix ,fix
10296,common skip some datepipe test in old chrome where intl is buggy ,test
10297,aio replace old blog link in footer fix ,docs
10298,aio use cli rc ,build
10299,router add event tracking activation of individual route add childactivationstart and childactivationend add test to verify the preactivation phase of routing ,feat
10300,compiler do not consider argument when determining recursion the static reflectory check for macro function recursion wa too agressive and disallowed calling a function with argument that also call the same function for example it disallowed nested animation group fix ,fix
10301,aio fix warning about missing h fix ,build
10302,aio fixed list format in formarray section ,docs
10303,compilercli automatically lower lambda expression in metadata ,feat
10304,tscwrapped allow value to be substituted by collector client also reenabled test that were unintentionally disabled when they were moved from toolsangular ,feat
10305,compiler fix for element needing implicit parent placed in toplevel ngcontainer fix ,fix
10306,form add option arg to abstract control formcontrols formgroups and formarrays now optionally accept an option object a their second argument validators and async validators can be passed in a part of this option object though they can still be passed in a the second and third arg a before t const c new formcontrol validators validatorsrequired asyncvalidators myasyncvalidator this commit also add support for passing array of validators and async validators to formgroups and formarrays which formerly only accepted individual function t const g new formgroup one new formcontrol mypasswordvalidator myothervalidator this change pave the way for adding more option to abstractcontrols such a more finegrained control of validation timing ,feat
10307,aio fix link to source for path with symlinks fix ,fix
10308,aio delay ngupgrade ee test to avoid flake ,docs
10309,aio fix deprecated protractor api usage browsergetlocationabsurl is deprecated we should use browsergetcurrenturl instead ,docs
10310,aio test the example ee file using local build of angular ,ci
10311,aio ignore generated aot file asset such a image and data which are generated by the aot build were not being ignored ,build
10312,aio remove generated stylescss file this file should have been ignored a it is created during the build of the example ,docs
10313,aio support overriding the angular package in example with locally built one ,build
10314,aio refactor and test the exampleboilerplate tool ,build
10315,aio support sharding of example ee test ,ci
10316,aio upgrade angularmaterial to meta ,build
10317,aio upgrade angular to ,build
10318,aio fix urlsearchparams interface link to mdn fix ,docs
10319,aio move contentspecific image to contentimages fix ,refactor
10320,aio rename unused directory to unused ,refactor
10321,aio fix link to logo in example ,fix
10322,aio move unused image to unused directory this prevents the serviceworker from prefetching unnecessary file ,refactor
10323,form move value accessor test into own spec pr close ,refactor
10324,compilercli allow custom error checking function in ngc pr close ,refactor
10325,router child canactivate guard should wait for parent to complete close pr close ,fix
10326,router should throw when lazy loaded module doesnt define any route close pr close ,fix
10327,aio add my detail a a contributor pr close ,docs
10328,aio correctly process markdown link in browser support the markdown processor expects an empty line between an opening tag and the markdown content if there is no empty line the content is interpreted a plain html previously the line between the opening td and the content contained whitespace which caused the content to be interpreted a html and not markdown fix pr close ,fix
10329,aio update example to ,docs
10330,aio fixed link to the glossary dashcase term pr close ,docs
10331,compiler add equiv disp attribute to xliff icu placeholder fix pr close ,fix
10332,compiler add representation of placeholder to xliff xmb close ,feat
10333,platformserver inline platformoptions and add doc string fix documentation for the option passed into rendermodule and rendermodulefactory pr close ,docs
10334,compilercli add support for browser compiler bundle pr close ,refactor
10335,core use native addeventlistener for faster rendering angular can make many assumption about it event handler a a result the bookkeeping for native addeventlistener is significantly cheaper than zone addeventlister which cant make such assumption this change bypass the zone addeventlistener if present and always us the native addeventhandler a a result registering event listener is about time faster pr close ,perf
10336,core invoke error handler outside of the angular zone in nodejs consolelogerrorwarn function actually resuls in a socket write which in turn is considered by zonejs a an async task this mean that if there is any exception during change detection in a platformserver application the error handler will make the angular zone unstable which in turn will cause change detection to run on next tick and cause an infinite loop it is also better to run the error handler outside of the angular zone in general on all platform so that an error in the error handler itself doesnt cause an infinite loop fix pr close ,fix
10337,tscwrapped update tscwrapped to pas strictnullcheck pr close ,refactor
10338,tscwrapped move tscwrapped to the package directory ,refactor
10339,animation export browsermodule a apart of browseranimationsmodule pr close ,fix
10340,aio pngcrush all pngs pr close ,docs
10341,platformserver dont clobber parse property when setting element property fix we now store all element property in a separate property bag pr close ,fix
10342,common cleanup httpclients import pr close ,refactor
10343,compiler allow number for icu message case in lexer close fix ,fix
10344,aio fix aio payload script ,ci
10345,upgrade ensure downgraded component are created in the angular zone pr close ,fix
10346,upgrade fail test when there are angularjs error ,test
10347,upgrade throw error if trying to get injector before setting previously undefined would be returned this change make it easier to identify incorrect usesbugs discussed in ,fix
10348,aio invalid formatting in architecuremd introduced in ,fix
10349,aio replace old blog link fix docsaio replaced old blog link now with the link to the new angulario blog removed double brace ,docs
10350,aio fixed typo with closing div ,docs
10351,aio fix http guide ,docs
10352,router minor typo fix a minor typo in the description of a router spec ,docs
10353,aio fix typo in ngmodule faq fix fix typo added to add in the why doe lazy loading create a child injector section ,docs
10354,animation support increment and decrement transition alias ,feat
10355,compilercli dont generate empty target when extracting xliff fix ,fix
10356,aio fix typo in router documentation fix title and link to routeconfigloadend documentation ,docs
10357,animation make sure disabled work in nonanimation component note only prior to this fix when disabled wa used in a component that contained zero animation code it wouldnt register properly because the renderer associated with that component wa not an animation renderer this patch ensures that it get registered even when there are no animation set ,fix
10358,animation do not crash animation if a nested component fire cd during cd close ,fix
10359,animation always camelcase style property name that contain auto style close ,fix
10360,animation capture cancelled animation style within grouped animation close ,fix
10361,upgrade allow accessing angularjs injector from downgraded module ,fix
10362,platformserver provide xhrfactory for httpclient ,fix
10363,common send flushed body a error instead of null fix ,fix
10364,make name of injected httptestingcontroller consistent ,docs
10365,upgrade propagate touched state of ngmodelcontroller ,feat
10366,platformserver add doc string for platformoptions ,docs
10367,router terminal route in custom matcher ,fix
10368,compiler ensure jit external id argument name are unique fix ,fix
10369,router candeactivate guard should run from bottom to top close ,fix
10370,router should navigate to the same url when config change close ,fix
10371,router should run resolvers for the same route concurrently fix ,fix
10372,aio fix httpclient setting new header sample ,docs
10373,aio remove title attribute from codeexamplecomponent this wa causing browser to add an unwanted tooltip that appeared when the user hovers over the code see ,fix
10374,aio add quote to module ,fix
10375,aio do not wrap codetabs tab label fix ,fix
10376,aio fix cheatsheet layout for narrow screen tell the app that this will have no table of content since we have no h heading anyway remove all the nbsp from the code since that doesnt help with layout remove side padding from sidenavcontent when screen is narrow restyle the cheatsheet table when the screen is narrow ,docs
10377,aio fail docgen if referenced image are missing ,build
10378,aio fix broken image source ,docs
10379,aio fix up broken link ,docs
10380,aio abort docgen on dangling link ,build
10381,aio abort docgen if an example is missing close ,build
10382,aio update jelbourn photo ,docs
10383,aio add george fix ,docs
10384,aio add npm install to sublime instruction ,docs
10385,aio add chuck comment ,docs
10386,aio add language service doc ,docs
10387,aio fix httpclients interceptor sample ,docs
10388,fix expecting and answering request example mistake possibly overlooked testing documentation mistake fixed probably ought to be paired with instead of ,docs
10389,fixed syntax error in authinterceptor example ,docs
10390,aio remove title from callout ,fix
10391,aio remove unused newshtml file although outdated and not used the file would be picked up and showed in search result ,fix
10392,aio render type parameter of api function export fix ,build
10393,upgrade support lazyloading angular module into angularjs app ,feat
10394,upgrade clean up some type ,refactor
10395,aio document xsrf protection in httpclient ,fix
10396,common rename httpxsrfmodule to httpclientxsrfmodule ,fix
10397,animation make sure disabled work in nonanimation component note only prior to this fix when disabled wa used in a component that contained zero animation code it wouldnt register properly because the renderer associated with that component wa not an animation renderer this patch ensures that it get registered even when there are no animation set ,fix
10398,aio turn on debugging of the payloadsh script to debug ci failure ,build
10399,common onbydefault xsrf support in httpclient fix ,feat
10400,common expose reportprogress option on httpclient api ,fix
10401,compiler do not evaluate metadata expression that can use reference ,feat
10402,tscwrapped support a and class expression ,fix
10403,aio exclude change in aiocontent folder ,ci
10404,aio add hr in between overload ,fix
10405,common document httpclient fixing a few other issue ,fix
10406,tscwrapped report error for invalid ast form fix ,fix
10407,common dont guess contenttype for formdata body fix ,fix
10408,aio add dart a a language option ,docs
10409,aio updated resource to ui component with the site give console error because it load font with ,docs
10410,aio simplify the primary overload anchor the primary link to a member should simply be it name and not require the parameter list ,build
10411,aio improve api doc layout and styling ,build
10412,aio fix githublinks line number the api doc have changed the line number are now found in startingline and endingline property rather than the location property which moved into the fileinfo property anyway ,build
10413,aio truncate api overview parameter at one line ,build
10414,aio upgrade to dgenipackages rc this fix unwanted extra overload in interface and abstract class this provides the overload grouping support and fix api doc line number ,build
10415,aio render grouped overload ,build
10416,aio truncate api overview parameter at one line ,build
10417,aio added resource link to amexiongextensions duplicate of ,docs
10418,aio change angular module to ngmodule ,docs
10419,benchpress fix android broken link ,docs
10420,router fix outdated homepage url in npm package ,fix
10421,aio fix host usage in styleguide ,docs
10422,aio fix tab animation on codetabscomponent in our attempt to remove the material ripple effect from tab label we were killing all transformbased animation on other mdtabgroup element such a animating the content when enteringleaving this wasnt an issue on chrome because it didnt respect our important flag this commit fix it by properly hiding the ripple effect using a feature introduced in angularmaterialecb and allowing other animation to execute normally fix ,fix
10423,aio add test for codetabscomponent ,test
10424,aio remove unnecessary commentsimports improve indentation ,refactor
10425,aio add term from heading to the search index ,build
10426,aio capture all the heading from a doc in the vfileheadings property ,build
10427,aio revert to general purpose search algorithm now that we have upgraded to the latest lunr search engine the result from the standard search method are more appropriate so we do not need to create our own special query to get good result ,build
10428,aio fix dangling link ,docs
10429,aio fix matchupdirectivedecorators processor ,build
10430,aio fix mergedecoratordocs processor ,build
10431,aio fix potential invalid jsdoc tag ,docs
10432,aio use dedicated overview for decorator api doc ,build
10433,aio update docgen template ,build
10434,aio fix mergedecoratordocs processor ,build
10435,aio fix matchupdirectivedecorators processor ,build
10436,aio fix test description ,build
10437,aio refactor filtermemberdocs to be more general now it also filter functionoverloads hence the name change ,build
10438,aio upgrade to dgenipackages vrc ,build
10439,aio remove unused script and github token since bdaf we are no longer preverifying pr before uploading the build artifact to the preview server thus we no longer need the travispreverifyprsh script or the githubteammembershipcheckkey variable ,build
10440,aio add api endpoint for notifying about pr update this commit add an api endpoint for notifying the preview server about pr update prupdated according to the update the preview server can take several action currently it will only check and if necessary update the pr preview visibility but more action could be supported in the future the api can be used with an automatic trigger eg a github webhook to instantly update a pr preview visibility when it change fix ,feat
10441,aio implement a way to check and update a pr preview visibility previously buildcreatorchangeprvisibility would throw an error if the pr visibility wa already uptodate or if the pr directory did not exist eg wa removed this method wa only used from inside buildcreatorcreate which had already checked for the existence of the directory this commit renames changeprvisibility to updateprvisibility and make it more forgiving ie it will only throw if both public and nonpublic directory exist this allows it to be used on event that may or may not have caused the pr visibility to change eg a github webhook triggered whenever a pr label change ,feat
10442,aio unify error message for invalid request to uploadserver previously there wa a distinction between get request to invalid url and all other request this wa mainly because the uploadserver only accepts get request but that is not a hard limitation and may change in the future thus it make sense to return a response for request to invalid url regardless of the method used ,refactor
10443,aio use dedicated constantsts file for eespecific constant ,refactor
10444,aio move script to a more relevant directory ,refactor
10445,aio fix text blurring when hovering over item in resource fix ,fix
10446,aio add new commonhttp package into api list ,fix
10447,fix linting error in ,style
10448,aio only deploy latest commits to stagingproduction fix ,ci
10449,aio use new ngo ,feat
10450,compilercli fix relative source path on window for extracted msg fix ,fix
10451,compilercli add parameter to ngc main needed by bazel rule ,feat
10452,aio update ngstyle and ngclass to use quoted key ,docs
10453,compiler emits quoted key only iff they are quoted in the original template fix ,fix
10454,compiler add support for quoted object key in the parser ,feat
10455,compiler fix type ,fix
10456,compiler remove in markup even if no translation fix ,fix
10457,animation support disabling animation for sub element close ,feat
10458,animation ensure animating query collect previous animation element properly ,fix
10459,animation properly detect state transition change for object literal ,fix
10460,common two missing feature in httpclient add params to httprequest api add optional description to testing apis ,feat
10461,common new httpclient api httpclient is an evolution of the existing angular http api which exists alongside of it in a separate package angularcommon this structure ensures that existing codebases can slowly migrate to the new api the new api improves significantly on the ergonomics and feature of the legacy api a partial list of new feature includes typed synchronous response body access including support for json body type json is an assumed default and no longer need to be explicitly parsed interceptor allow middleware logic to be inserted into the pipeline immutable requestresponse object progress event for both request upload and response download postrequest verification flush based testing framework ,feat
10462,aio activate serviceworker update asap previouly whenever a new serviceworker update wa detected the user wa prompted to update with a notification this turned out to be more distracting than helpful also one would get notification on all open browser tabswindows and had to manually reload each one in order for the whole content including the app to be updated this commit change the update strategy a follows whenever a new update is detected it is immediately activated and all tabswindows will be notified once an update is activated regardless of whether the activation wa initiated by the current tabwindow or not a flag will be set to do a full page navigation the next time the user navigates to a document benefit all tabswindows are updated asap the update are applied authomatically without the user needing to do anything the update are applied in a way that a ensures that the app and content version are always compatible b doe not distract the user from their usual workflow note the full page navigation may cause a flash while the page is loading from scratch but this is expected to be minimal since at that point almost all necessary resource are cached by and served from the serviceworker fix ,fix
10463,aio home marketing style cleanup ,fix
10464,common replace objectassign with the spread operator objectassign is not available in all supported browser and one had to provide a polyfill this commit replaces objectassign with the spread operator which typescript will transpile to escompatible code ,refactor
10465,upgrade bring the dynamic version closer to the static one this commit change the dynamic version of ngupgrade to use upgradehelper thus bringing it behavior wrt upgraded component much closer to upgradestatic fixesfeatures include fix template compilation now take place in the correct dom context instead of in a detached node thus ha access to required ancestor etc fix support for the oninit lifecycle hook fix singleslot transclusion including optional transclusion and fallback content add support for multislot transclusion inclusing optional slot and fallback content add support for binding required controller to the directive controller and make the require behavior more consistent with angularjs add support for prepostlinking function this also port the fix from to the dynamic version fix ,fix
10466,upgrade fix support for directivelink in upgraded component although pre and postlinking function are correctly called during directive linking directive with linkpost would throw an error interestingly having linkpre only or defining link fn which is an alias for linkpost fn would not throw this commit remove this check and allows directive with pre andor postlinking function to work ,feat
10467,upgrade move shareable functionality to upgradehelper class this functionality can be potentionally reused by the dynamic version ,refactor
10468,upgrade fix transclusion on upgraded component previously only simple singleslot transclusion worked on upgraded component this commit fixesadds support for the following multislot transclusion using fallback content when no transclusion content is provided destroy unused scope when using fallback content fix ,fix
10469,languageservice ignore hover of symbol not in the typescript program fix ,fix
10470,tscwrapped emit export metadata in flat module fix ,fix
10471,languageservice do not crash when hovering over a label definition fix ,fix
10472,router encode url the same way angularjs did closer to spec fix ,fix
10473,core fix reinsertions in the iterable differ fix ,fix
10474,compiler update the schema by extracting from latest chrome add the slot element the slot attribute on element a few other attribute ,feat
10475,compilercli remove the dependency on f in codegents ,refactor
10476,aio serveandsync command ,feat
10477,aio add instruction for example ee test to readme ,docs
10478,aio add devextreme to the ui component section of resourcesjson ,docs
10479,animation properly handle cancelled animation style application ,fix
10480,animation properly cleanup query artificats when animation construction fails ,fix
10481,aio raise polyfill payload limit ,ci
10482,router export missing urlmatcher and urlmatchresult type fix ,fix
10483,aio upgrade to angular and zonejs ,build
10484,changelog correct typo ,docs
10485,aio fix the payload script only check for change in aioscripts ,ci
10486,aio update quickstart to latest cli ,docs
10487,aio use valid database path for firebase payload size upload firebase doe not allow in the path so when trying to upload payload size data for branch like x the following error is thrown http error invalid path invalid token in path this commit fix it by replacing with in branch name ,ci
10488,aio fix visualstudio typo this fix ,docs
10489,router add routerlevel event for guardscheck and resolve ,feat
10490,core refactor ngzone decrease size by kb remove getters hide private method for better property renaming may coreumdjs may coreumdjsmap may coreumdminjs may coreumdminjsmap may coreumdjs may coreumdjsmap may coreumdminjs may coreumdminjsmap diff ,perf
10491,aio avoid printing too large pwa report and restore printlogssh there have been some issue lately with travis job failing due to printlogsh this is likely due to trying to print the lighthouse pwa report which is too large this commit stop printing that report since it wa rarely used and is pretty easy to acquire when needed and restores the printlogssh script that wa temporarily removed with dfccafd ,ci
10492,aio add resource contributor info ,docs
10493,aio use correct url for preview in pwa score test in c the preview url were changed to not use the whole sha but just the first character ,ci
10494,aio fix quickstartcli bad html escape char ,docs
10495,aio restore visible sidenav keyboard focus shift toc up close restores keyboard focus that wa removed by commit bbd raise the righttoc by px pxpx because wa too far down to prevent keyboard focus on hidden child node also collapse inner expanded node when parent node is collapsed the implicit parent node of top node is always expanded ,fix
10496,aio do not include hidden content in window title the window title is derived based on the current document h heading such heading may contain hiddennonvisible content eg textual name of font ligature i classmaterialiconslinki that should not be included in the title this commit fix this by using innertext instead of textcontent to extract the visible text from the h heading it will still fall back to textcontent on browser that do not support innertext eg firefox fix ,fix
10497,aio use shorter url for preview use the first character of the char long shas for shortercleaner url the collision probability is extremely low since all shas are further namespaced under the corresponding pr in case of a collision the second pr will not be deployed in order to avoid overwriting the original build this is a design decision to keep the implementation simple it can be changed later if necessary ,feat
10498,aio clean up nonpublic preview the previous cleanup code for pr directory on the preview server assumed that all directory were named after the pr number with the change introduced in it is possible to have pr directory that do not follow that naming convention eg nonpublic directory this pr ensures that both public and nonpublic directory are removed when cleaning up ,fix
10499,aio cross reference readme and doc styleguide ,feat
10500,aio update punctuation mark added in tool guide ,docs
10501,animation add proper test to check multiple combination of enterleave animation query ,test
10502,animation properly collect enter node that exist within multilevel dom tree close ,fix
10503,animation do not remove container node when child are queried by a parent animation close ,fix
10504,animation do not delay style value before a stagger run close ,fix
10505,aio build scriptsjs before creating a new docker image for the preview server when creating a new docker image for the preview server the typescript source code in scriptsjs is not copied over instead only the generated javascript core in scriptsjsdist are because of that it is necessary to have run yarn build before running docker build so that the new docker image contains the latest change in scriptsjs this wa previously part of the createimagesh script but wa accidentally removed in ddfc ,fix
10506,compiler add a test for component not part of any ngmodule ,test
10507,aio boilerplate wont be removed by default now ,build
10508,aio typo in setup anatomy documentation page solves ,fix
10509,aio fix typo ,docs
10510,aio animation typo fixed ,docs
10511,compilercli new compiler api and commandline using typescript transformer ,feat
10512,form remove usage of deprecated renderer ,refactor
10513,router remove usage of deprecated renderer ,refactor
10514,core add needed closure compiler warning suppression ,fix
10515,compiler add support ngdeep deep is deprecated and being removed from chrome is semantically invalid in a stylesheet sas will no longer support either in any version of sas use ngdeep in emulated shadow dom mode because the deep combinator is deprecated in the cs spec deep and ngdeep are also deprecated in emulated shadow dom mode and will be removed in the future see ,feat
10516,compiler add tracking comment for selfimport detection the underlying cause of need to be investigated and a a simple string compare should have been valid ,refactor
10517,aio cleanup rollupconfig script ,docs
10518,aio change the firebase token ,ci
10519,aio address comment ,ci
10520,aio fix test ,ci
10521,aio remove umd ,ci
10522,aio debug ,ci
10523,aio add back deploypreview ,ci
10524,aio updated limit ,ci
10525,aio rename limit file and address comment ,ci
10526,aio also track umdminjs file size ,ci
10527,aio add payload size limit file ,ci
10528,aio upload aio payload size to firebase ciaio add timestamp and change data ,ci
10529,aio provide fallback value for secret useful during dev ,refactor
10530,aio enable u flag on preview server script ,refactor
10531,aio document preview server http status code ,docs
10532,aio deploy preview for all pr pr that could not be automatically verified will not be publicly accessible until manually verified ,ci
10533,aio add ee test for nonpublic preview ,test
10534,aio enable preview for any pr this commit introduces the ability to show preview for pr by any author it work a follows the build artifact of all pr are uploaded to the preview server automatically verified pr ie from trusted author or having a specific label are deployed and publicly accessible a usual pr that could not be automatically verified are stored for later use after reverification a pr can be marked a trusted and make it preview publicly accessible by adding the github label specified in the aiotrustedprlabel env var of the preview server at the moment there is no automatic mechanism for notifying the preview server about change to the pr verification status the pr visibility will be checked and updated every time a new build is uploaded ,feat
10535,aio simplify preview server build event ,refactor
10536,aio add missing unit test for preview server ,test
10537,aio fix preview server test on window ,test
10538,aio upgrade preview server dependency ,build
10539,aio prefix locationassign with window no practical effect but clear the t compiler warning ,fix
10540,aio fix link on about in firefox fix ,fix
10541,aio clean up aiocontributor template and style ,refactor
10542,aio preserve newlines when copying code before ff we were using innertext to retrieved the code content for copying this preserved the text layout including newlines but suffered from other issue browser support performance with ff we switched to textcontent which work well except in the following case when prettify format the code to have line number it remove the newlines and us li element instead this affect textcontent this commit fix this by keeping a reference of the code a text and using that for copying fix ,fix
10543,aio update resourcesjson fixed language error ,docs
10544,aio update resource add compodoc documentation tool for angular app ,docs
10545,aio fix topbar navitem focus style fixing it requires upgrading angularmaterial to vbeta fix ,fix
10546,aio resourcesjson replace “ angular ” in titlesdescriptions close ,docs
10547,aio update bash for window info a of the creator update bash on ubuntu on window support all npm command update setup documentation accordingly ,docs
10548,aio minor fix for the upgrade guide fix ,docs
10549,aio add missing weakmap polyfill ,fix
10550,animation do not validate style overlap error in different transition ,fix
10551,aio replace “ angular ” in upgrade phonecat script ,docs
10552,aio fix promise link in tohpt close ,docs
10553,aio remove from private property name follow best practice from the documentation ,docs
10554,aio correct typo in tour of hero herosearchservice ,docs
10555,aio added resource to ui component docsaio added resource to ui component ,docs
10556,aio remove min max move builtin validators paragraph ,docs
10557,aio added link to russian angular course ,docs
10558,aio ward change ,docs
10559,aio change to overall prose ,docs
10560,aio create author style guide ,docs
10561,compiler avoid emitting self importing factory fix ,fix
10562,aio display “ searching while building search index close ,feat
10563,aio fix patch script on window running the patch script on window with patch available yield an invalid syntax warning and doe not apply patch kamiktp mingw dworkangularaio master yarn postinstall yarn postinstall v node toolsclipatchespatchjs uglifyjs nodemoduleslunrlunrjs c m o srcassetsjslunrminjs sourcemap the syntax of the command is incorrect done in s ,fix
10564,aio ensure all doc test are run it is not possible to run all the doc test directly via the jasmine cli instead we now have a small script that will run jasmine via it library ,build
10565,aio do not recurse nodemodules when loading example in docgen ,build
10566,aio select contributor group with url “ aboutgroupgde ” close also add test for contributorlistcomponent ,feat
10567,aio restore componentstylesexclude hidden child ,fix
10568,aio redirect cliquickstart to quickstart ,fix
10569,aio fix numbered list in testingmd this list render ok in the github ui but not at ,docs
10570,tscwrapped skip collecting metadata for default function fix ,fix
10571,compilercli find lazy route in nested module import array fix ,fix
10572,aio update resource listing ,docs
10573,core remove tostring method from defaultkeyvaluediffer tostring from defaultkeyvaluediffer is only used in test and should not be part of the production code tostring method from differs add kb mingzip to the production bundle size ,refactor
10574,languageservice infer any ngforof of type any fix ,fix
10575,languageservice rollup tslib into the language service package fix ,fix
10576,form roll back breaking change with minmax directive with we introduced the min and max validator directive this wa actually a breaking change because their selector could include custom value accessors using the minmax property for their own purpose for now we are rolling back the change by removing the export at the least we should wait to add them until a major version in the meantime we will have further discussion about what the best solution is going forward for all validator directive close pr tried to roll this back but did not remove the dead code this failed internal test that were checking that all declared directive were used this pr roll back the original pr and commit the same a while also removing the dead code ,fix
10577,aio leave result panel open when opening search result on new page fix ,fix
10578,aio upgrade jasmine to v this version fix the disconnected error described in and remove the need to the workaround afc the relevant jasmine commit is jasminejasminecd ,build
10579,router update the version placeholder so that it get replaced during the build fix ,fix
10580,triageandlabels update label to reflect the current state ,docs
10581,releaseschedule fix version number for augustseptember release ,docs
10582,releaseschedule update the release schedule w recent regression patch release ,docs
10583,aio switch from innertext to textcontent to support older browser innertext is not supported in firefox prior to v in most case at least the one we are interested in innertext and textcontent work equally well but textcontent is more performant a it doesnt require a reflow from mdn on the difference of innertext v textcontent innertext is aware of style and will not return the text of hidden element whereas textcontent will a innertext is aware of cs styling it will trigger a reflow whereas textcontent will not fix ,fix
10584,aio update angularserviceworker to beta this version includes a fix for potential cache corruption and invalid redirect behavior in rare case ,build
10585,core update zonejs to ,feat
10586,aio improve nojavascript screen ,fix
10587,aio remove unused icon reference and file these icon are not there and never were afaict fix ,fix
10588,aio correctly redirect docstslatest and styleguide previously we had redirect rule for firebase for docstslatest and styleguide but once the serviceworker wa activated it would take over routing and rewrite these request to indexhtml this commit fix it by excluding them from serviceworker routing fix ,fix
10589,compiler fix typo mamespace ,test
10590,form temp roll back breaking change with minmax directive with we introduced the min and max validator directive this wa actually a breaking change because their selector could include custom value accessors using the minmax property for their own purpose for now we are rolling back the change by removing the export close ,fix
10591,aio readd biography entry for devversion with sha ceeadaefedfbebc the biography of paul gschwendtner ha been accidentally removed this readds the biography entry picture still present a requested on slack ,docs
10592,aio do not fail if checkenv for the main angular project fails fix ,build
10593,aio remove dependency on build artifact from parent folder ,build
10594,aio add missing redirect rule for styleguide fix ,fix
10595,animation remove duplicate license header ,fix
10596,aio update about page ,docs
10597,aio add iphone pwa feature ,feat
10598,aio incorporate ward comment ,docs
10599,aio add short section on builtin validators copy edits ,docs
10600,aio do not log message in production in dev mode all message passed to logger will be logged in production mode only warning and error will be logged fix ,fix
10601,aio remove unused logger dependency ,refactor
10602,aio extra redirect rule ,build
10603,aio http guide show how to import topromise operator from rxjs solves ,docs
10604,aio specify large image for pwa splashscreen ,fix
10605,aio upgrade lighthouse to v ,build
10606,aio fail the build if the pwa score is too low previously there wa an issue with testing the pwa score on staging and failing the build wa temporarily disabled it work now so we need to enable failing the build is the score drop below some threshold ,ci
10607,aio add async beforeeach to prevent chrome disconnect related to dfffffffecbcdecf from ,test
10608,aio always cover the whole footer with it background fix ,fix
10609,aio fix trackby demo in templatesyntax article ,fix
10610,platformserver fix and reenable integration test ,test
10611,aio make the footer link clickable on all browser the footer background implemented via footerafter had a higher zindex than other footer element and wa obscuring the footer link on certain browser firefox edge ie which made them unclickable this commit lower the index of footerafter so that link are clickable on these browser fix ,fix
10612,compiler remove duplicate code ,refactor
10613,aio update typescript for exampleswebpack to same a cli ,docs
10614,aio add staging environment you can now specify what environment you are building by add it to the yarn build command for example yarn build envstage moreover the deploytofirebasesh script will automatically apply the appropriate environment ,build
10615,aio in guide update for v ,docs
10616,aio increase doc integration test timeouts the api doc test have very variable run time depending upon the build environment this change double their test timeout value to prevent falsenegative failure ,build
10617,aio fix scrolling to element near the bottom of the page previously we always assumed that element would be scrolled to the top of the page when calling elementscrollintoview this is not true for element that can not be scrolled to the top eg when the viewport height is larger than the height of the content after the element common for small section near the end of the page in such case we would unnecessarily scroll up to account for the static toolbar which wa unnecessary since the element wa not behind the toolbar anyway and caused scrollspy to fail to identify the scrolledto section a active this commit fix it by ensuring that we do not scroll more than necessary in order to align the top of the element with the bottom of the toolbar fix ,fix
10618,aio show search result when search box get focus due to a previous commit the search wa only triggered if the query changed and not when the search box regained focus ,fix
10619,aio use locally hosted lunr library the library is downloaded from npm but then copied into the asset folder and ignored by git a part of the postinstall step ,fix
10620,aio make search result better update to latest version of lunr search add trailing wildcard to search term to increase match fix unwanted error when escape wa pressed close ,fix
10621,aio fix button in home and feature using a inside a button is not syntactically valid html and break on some browser eg firefox furthermore clicking the button doesnt do anything unless you click on the link eg clicking on the padding around the link doe nothing which is inconvenient and confusing fix ,fix
10622,aio ensure that api filter page can display column in wide view fix ,fix
10623,aio tidy up layout of api filter page remove the infobanner styling from the filter fix alignment of the search box on a narrow screen close remove unnecessary whitespace before section header ,fix
10624,aio rename upgrade doc to cheatsheet ,docs
10625,aio remove outline from search input on focus close ,fix
10626,aio make deploytofirebasesh executable ,build
10627,aio update google analytics property id for the prod environment this is the same property id a the one used by the current angulario ,build
10628,aio deploy commits on the stable branch to production the current stable branch is determined based on the current version mapped to the npm latest tag by replacing the patch version number with x eg x pr against the stable branch will be deployed to the preview server a long a the rest of the requirement are met commits on the stable branch itself will be deployed to production fix ,ci
10629,compiler don ’ t always compile ngfactoryts file by default this put the behavior introduced in behind the new flag alwayscompilegeneratedcode to not break user that might have relied on this behavior ,refactor
10630,animation properly collect enter node in a partially updated collection this pr fix an issue where queryenter will only collect element up until it an element that is found that isnt apart of the enter query close ,fix
10631,animation compute removal node height correctly ,fix
10632,animation do not treat a animation state a void ,fix
10633,aio fix chrome getting disconnected during unit test chrome v often get disconnected during unit test causing them to fail this ha been happening locally on window and on travis the exact reason are not known but it seems that some of the appcomponent test are to blame based on the discussion in and plenty of trialanderror using jasmine done callback before each of test even calling it synchronously fix the issue ,test
10634,aio upgrade jasminerelated dependency according to this might help with help with frequent disconnected error especially on travis ,build
10635,aio upgrade karmarelated dependency ,build
10636,aio fix broken example in upgrade guide fix ,docs
10637,aio remove gap between sidenav menu fix ,fix
10638,bazel fix the typescript path in the build file ,build
10639,aio upgrade purify to deal with messed up comment in animation code ,build
10640,aio upgrade to angular ,build
10641,aio turn on webpack scopehoisting ,build
10642,aio remove duplicate webpack version ,build
10643,aio upgrade to purify that support webpack ,build
10644,aio turn off vendor chunking this wa done to prevent webpack from generating cross chunk registry call which prevent dce ,build
10645,aio upgrade to an unreleased version of cli with webpack rc ,build
10646,aio upgrade angularserviceworker to beta ,build
10647,aio restore animation original value ,docs
10648,compiler don ’ t write summary for jit by default the default is false externally but true internally at google ,refactor
10649,aio reorganise the sidenav menu reorganizes the item in the sidenav menu and consolidates the quickstart and cliquickstart guide into one ,docs
10650,aio update typescript to ,build
10651,aio update example to ,docs
10652,move destructuring inside requestresponseoptions ctor previously the requestoptionsresponseoptions class had constructor with a destructured argument hash represented by the requestresponseoptionsargs type this type consists entirely of optional member this produce a dts file which includes the constructor declaration constructorparam otherparam optionsargs however this declaration doesnt typecheck properly typescript determines the actual type of the hash parameter to be optionsargs undefined which it then concludes doe not have a param or otherparam member this is a bug in typescript a a workaround destructuring is moved inside the method where it doe not produce broken artifact in the dts fix ,fix
10653,aio temporarily remove link to source from the api page we need to come up with a better design possibly involving an icon button to link to the source code for viewing andor editing fix ,fix
10654,packaging update homepage in angulartscwrapped motivation yarn outdated for exmaple show the homepage url on the command line if copypasting or clicking on the url it nice to see the repos page instead of a ,docs
10655,aio fix image width on the homepage ,docs
10656,aio update event page ,docs
10657,aio update to ,build
10658,aio temporarily remove the focus style of topbar nav item temporarily address until we upgrade to an angularmaterial version that includes angularmaterialbcfdc ,fix
10659,aio sidebar folder state after select item close and when the user selects a doc item in the side nav expand folder leading to the selected doc item on a wide display keep other already expanded folder open on narrow mobile display collapse other expanded folder used to do when wide issue asks for that logic wa bypassed for selected node when we allowed header to have content because that unintentionally expanded the header ’ s folder when selected because the selected node is no longer a header with content removing this exclusion also mean that folder are expandedcollapsed with above logic even for api page ,fix
10660,aio remove example specific gitignore file all the file that should be ignored are defined in the aiocontentexamplesgitigore folder ,docs
10661,aio remove cliquickstart stylescss from git ,docs
10662,aio remove example specific style from the shared boilerplate stylescss ,docs
10663,aio create stylescss snippet file for tohpt example ,docs
10664,aio move example specific style into router example appcss file ,docs
10665,aio do not ignore in example j file ,docs
10666,aio ignore example file that are gitignored rather than hard coding excludes into the dgeni config use the fact that we are already ignoring the boilerplate and generated file via the gitignore file ,build
10667,aio expand the main content width when there is no toc previously the main content would always leave a margin on the right to be occupied by the toc even if there wa no toc this commit let the main content expand to the right to occupy all the available space when there is no toc fix fix ,fix
10668,aio restrain scrolling inside toc when cursor over toc previously when scrolling the toc and reaching the topbottom further mousewheel event would result in scrolling the window and thus the main content this is standard browser behavior in the case of the toc though the scrollspy would detect scrolling in the main content and scroll the active toc to entry into view thus resetting the scroll position of the toc reproduction open guidetemplatesyntax start scrolling through the long toc try to go to the bottom of the toc once you reach the bottom the main content start scrolling down the first section html in template becomes active so the toc is scrolled back up to make it corresponding entry visible go back to step this commit improves the ux by not allowing the main content to scroll when the cursor is ovr the toc and the user ha scrolled all the way to the topbottom of it ,fix
10669,aio animate hamburger inout fix ,fix
10670,aio update the home page and doc landing page content close close ,feat
10671,aio recolor code pretty print close ,fix
10672,form fix min and max validator behavior on nonnumbers ,fix
10673,aio rename feature header ,build
10674,aio document the nonnull assertion operator ,docs
10675,aio style and fix hover color for feature cta button ,fix
10676,aio copy code button overlap fix on mobile ,fix
10677,aio contributor img offset and hover fix ,fix
10678,aio remove glossary lsubsection class ,fix
10679,aio alert subsection and callout width fix ,fix
10680,aio scroll to top immediately when doc change ,fix
10681,aio api list column overflow fix ,fix
10682,animation evaluate substitution on option param value ,fix
10683,aio make the toc left handside bar shorter make the toc left handside bar shorter so that it start at the initial bullet and end at the final bullet fix ,fix
10684,aio smoother transition from page with sidenav to homepage when navigating from a page with open sidenav to a page without closed sidenav the main content area animates from a nonzero left margin to zero left margin additionally the topbar on the homepage is transparent which allows the white background behind the main content to be seen while the left margin is animated to zero making it appear a if something eg the sidenav cover the topbar this commit work around this issue by not making the topbar transparent immediately when navigating to the homepage but animating it from it blue color to transparent with a delay fix ,fix
10685,aio add “ nougat ” to compat chart close ,docs
10686,aio remove separator from search result an ellipsis wa used to separate the most relevant search result from the alphabetic list the separator wa confusing because it wa not clear what it represented this ha been removed and the most relevant result are now indicated by styling with a more bold font and a bit of whitespace between them and the rest of the result to keep thing consistent if there are fewer than result all the result are now displayed a prioritypages close ,fix
10687,aio use the selectmenucomponent for all select menu the api filter and the doc version switcher now use the selectmenucomponent fix and ,refactor
10688,aio add aioselect component provide the functionality for select menu in a single reusable component ,feat
10689,aio use h rather than divs and hide heading anchor in the marketing page we do not want to show heading anchor on hover previously this wa achieved by using div rather than heading element now we can use semantically accurate heading while hiding the anchor close close ,docs
10690,aio do not display anchor if heading ha noanchor class ,feat
10691,aio update contrast on mediumgray color ,fix
10692,animation do not create a closure each time a node is removed ,perf
10693,aio fix scrolling to an element previously the topbars height wasnt taken into account when scrolling an element into view a a result the element would be hidden behind the topbar taking the topbar height into account wa not necessary before because the topbar wa not fixed ie it scrolled away this commit fix the scrolling behavior by accounting for the topbars height when scrolling an element into view this partially reverts fix fix ,fix
10694,aio adjust sidenav top to avoid extra whitespace partially address ,fix
10695,aio fix button alignment and jump fix alignment on get started button on home page remove jump by removing arrow from learn more button on home page ,fix
10696,compilercli introduce synchronous codegen api ,feat
10697,upgrade call setinterval outside the angular zone this wrap the interval service when using upgrade to run the interval call outside the angular zone however the callback is invoked within the angular zone so change still propagate to downgraded component ,fix
10698,platformbrowser remove setglobalvar from dom adapter ,refactor
10699,aio update feature and presskit marketing page ,build
10700,aio fix and clean up topbar styling restore the change introduced in which wre accidentally overwritten while rebasing also simplify the topbar positioning rule ,fix
10701,aio make scrollspy respond quicker to scroll event fix ,fix
10702,aio migrate contribute page to html ,build
10703,aio remove tutorial from doc landing page ,docs
10704,aio topnav toolbar position style fixed topnav on all mobile fixed topnav on all doc page absolute topnav on all marketing page cleanup and code consolidation for all topmenu style add styling to topnav link on focus ,fix
10705,aio ensure all view can indicate the active node when more than one node match a url the last node defined in the navigationjson file won this meant that for instance item in both the topbarnarrow and the footer view would not indicate that they were active now each url is associated with a map of current node keyed off their view close ,fix
10706,aio upgrade ngo and purify ,build
10707,aio fix search box overlap for small device adjust search box height adjust search box standard width and width for smaller device fix search jump outside of specified max width ,fix
10708,aio ignore ngsummaryts file in example ,build
10709,aio fix toc styling make the left bar gray instead of blue show gray dot when hovering over an element hide left bar and dot in embedded mode ,fix
10710,animation ensure webanimations understands a numeric cs perspective value close ,fix
10711,animation only apply leave flag if animation are set to run ,perf
10712,router opening link in new window shiftclicks on routerlinks should not prevent browser default action a follow on to ,fix
10713,aio place progress bar at the top previously the progress bar would be placed right under the static top bar now that the top bar i not tatic any more it make more sense to place the progress bar at the top of the page fix ,fix
10714,aio fix up api docgen template remove whitespace before type specifier generate new and call member info for interface ensure that there is no double space after class name ,build
10715,aio fix scrolling to top previously the topofpage element used when scrolling to top wa placed inside the content section which at the time had zero top margin and padding furthermore there wa a top offset applied when scrolling that took the static top bar height into account since now the top bar is not static any more and the content section ha a nonzero top padding scrolling to top doe not work a expected this commit fix this by moving the topofpage element to the top of the aioshell stop accounting for the top bar top fix ,fix
10716,animation do not retain deleted node during an nonremoval animation close ,fix
10717,animation do not place enterid value on element for querying purpose ,perf
10718,compilercli produce template diagnostics error message refactoring the compiler to use transformer move the code generation after typechecking which suppresses the error typescript would generate in the user code typechecker currently produce the same factory code that wa generated prior the switch to transfomers getting back the same diagnostics a before the refactoring will allow the code to diverge from the factory code and allow better diagnostic error message than wa previously possible by typechecking the factory ,feat
10719,aio fix home learn more button alignment ,fix
10720,aio swap feature header for divs to remove anchor and fix feature image resizing ,fix
10721,animation always change to desired animation state even if no transition fire fix ,fix
10722,router make remove trailing slash consistent with url params close ,fix
10723,aio fix typo in web worker check ,fix
10724,aio disable search on browser that dont support web worker ,fix
10725,aio googlebot polyfill fix ,fix
10726,aio display call and new member of interface in api doc ,build
10727,aio upgrade to dgenipackages this provides the fix where static class member were not being displayed in api doc close ,build
10728,aio the the captured h a the title for the search index if there is no title already provided use the one captured from the renderedcontent ,build
10729,aio use the captured h a the title if necessary if the doc doe not already have a title tag then use the one captured from the renderedcontent in the final json output instead ,build
10730,aio capture the h title and attach it to the document the html postprocessing now collect any h that is found in the renderedcontent and attache it to the doc via the docvfiletitle property ,build
10731,aio make the searchpane larger and improve the searchbox fixaio make the searchpane larger fix feataio give the searchbox a type of search this enables browser to style it better eg add an x button for clearing the field which allows user to quickly reset the search query and hide result ,fix
10732,aio fix sidenav item alignment fix ,fix
10733,aio fix toc styling there seems to have been a bad rebase of on top of which affected toc style from both pr this commit restores the horizontal line under h element and the vertical blue bar on the lefthand side of the toc with the circle running along the bar to indicate the active section fix ,fix
10734,compiler enablelegacytemplate should not be ignored fix ,fix
10735,tscwrapped always convert shorthand import now convert shorthand import for every typescript target tsickle is able to expand index shorthand import for every typescript target and module possibility expanding shorthand import for commonjs module is also helpful when testing in the browser module loader like systemjs are not able to understand directory import or index shorthand import ,feat
10736,common always use other case for locale with no plural rule locale with no rule were using the wrong plural rule instead of the default ,fix
10737,compiler emit typescript node from an output ast ,feat
10738,platformserver fix target of t outdir for integration test ,test
10739,aio upgrade to ngo with toplevel newexpression and callexpression prefixing ,build
10740,aio add polyfill for googlebot i chose to use unknownpolyfill option a per recommendation found at ,fix
10741,aio marketing design refresh add styling for active toc item add sidenav style change header tag to divs from index marketing page to remove anchor fix use of card mixin and create separate carddocs class add marketing styling topnav styling when on home landing page remove hamburger menu on home page add fully rounded border to top nav toolbar search input add mobile style add title banner to other marketing page ,feat
10742,aio remove e syntax from the onerror webmaster tool debugger ,fix
10743,animation use a lightweight renderer for nonanimation component this reverts commit cbeedfcd ,fix
10744,aio update header for toc ,docs
10745,aio temporarily add debugging code for google crawler ,feat
10746,compiler change bundle to flatmoduleindex in the code ,refactor
10747,aio provide noop service worker file use this file if we need to turn off the service worker in deployed site in an emergency where the worker ha a bug that is blocking the application from working close ,feat
10748,aio add google webmaster tool verification file this file need to remain in the repo for u to remain verified a owner of aiostagingfirebaseappcom ,build
10749,aio externalize angularcli patch into a j file this improves code readability and maintainability ,build
10750,aio switch over to shared account for deployment to staging and production ,ci
10751,aio use purify to include tslib cli script setup evals string which requires too much escaping that bloat the code ,build
10752,aio turn on puregetters option in uglify ,build
10753,aio upgrade purify to with better coverage ,build
10754,aio upgrade ngo to with static prop unhoisting ,build
10755,aio start using tsc importhelpers option for the app this mean well be temporarily duplicating the helper onces included via script and secondly imported via e import once rxjs core and material migrate over to tslib we can drop the scriptsglobal dupe ,build
10756,compiler change bundle to flatmoduleindex in the code ,refactor
10757,animation use a lightweight renderer for nonanimation component ,fix
10758,aio group topbar item into a single sidenav node when narrow screen the topbarnarrow now only show a single top level container about angular and the original topbar item will be child of this container the topbarnarrow styling is changed to match the rest of the sidenav ,fix
10759,aio restore missing file ,docs
10760,aio le verbose boilerplate generator ,build
10761,aio correctly handle renavigation to the empty path ,fix
10762,compiler compile ngfactoryts file even if nobody reference them this is especially important for library author a they will not reference the ngfactoryts file fix ,fix
10763,aio better error message for invalid link ,build
10764,aio use a special version of the topbar if the screen is narrow if there is a topbarnarrow nav view then use this when the screen is narrow otherwise just use the normal topbar this commit also creates such a narrow topbar view where the doc item is in a different position close ,fix
10765,aio align toplevel navitems consistently fix ,fix
10766,compiler add ability to produce stub ngfactory ngsummary file these file are needed so that user code can compile even without real codegen a tsc transformer can not create but only change existing file in the transformation pipeline ,refactor
10767,tscwrapped ignore null and undefined when collecting type ,fix
10768,compiler do not report type error for argument with inject fix ,fix
10769,core make decorator closure safe this is required a eg token from inject is accessed in string form via makeparamdecorator but a a property in the reflectiveinjector close a this is a more general fix ,fix
10770,compiler allow sync aot compilation aot compilation can be executed synchronously now if the reosurceloader return a string directly and no promise ,refactor
10771,compiler don ’ t rely on global reflector using the global reflector made it impossible to compile multiple program at the same time ,refactor
10772,compiler emit outputast and not source this is in preparation for creating typescript node directly from outputast node ,refactor
10773,compiler make outputast contain the modulename not the filepath the goal of this change is to simplify the emitter a we will soon create a new one to emit typescript node directly ,refactor
10774,aio avoid warning from material during test ,test
10775,aio add progress bar close ,feat
10776,animation repair flicker issue with wa polyfill fix fix ,fix
10777,compiler add location note to extracted xliff file add source location a a note tag a note categorylocationpathtofiletsstartlineendlinenote endline part is optional and specified only if the end line is different from the start line fix ,feat
10778,core update zonejs to and expose the flush method flush can now be used from within fakeasync test to simulate moving time forward until all macrotask event have been cleared from the event queue ,feat
10779,tscwrapped support template literal in metadata collection fix ,feat
10780,tscwrapped resolve shorthand literal value to local fix ,fix
10781,aio use the current version in the version picker previously we hardcoded the current version into the navigation item now only previous version are included there the current version is computed from the currentversion info close ,fix
10782,aio make the postinstall script more windowsfriendly ,build
10783,aio implement scrollspy service to highlight the active section in toc ,feat
10784,animation introduce routeable animation support ,feat
10785,animation add documentation for new animation feature ,docs
10786,router dont run the change detection every time an outlet is activated fixrouter inside on push squash after review ,refactor
10787,router cleanup simplification ,refactor
10788,animation only require one flushmicrotasks call when testing animation ,fix
10789,aio update aioshell class when sidenav open or close ,feat
10790,aio support ie via conditionally loaded polyfills close ,fix
10791,aio tidy up doc that use float clearing close ,docs
10792,aio ensure that subsection clear float correctly ,fix
10793,aio code copy button ha tooltip and arialabel based on optional title passed in from parent element such a codeexample or codetabs darkens uncovered copy button slightly a recommended for ay pr ,feat
10794,aio button for toc content label use button for the toc “ content ” label when embeddedandexpandable or toc on the right to satisfy ay add ariapressed setting for the toggle in toc and navitem clicking the right panel toc “ content ” button scroll to top when embedded use same rotating caret a sidebar when embedded and no secondary “ content ” is just a label gray background for focused button rather than outline because can ’ t get caret to work with outline ,feat
10795,aio rework of the upgrade guide this commit wa worked on by a number of people including filipesilva gkalpak and wardbell it contains change that remove unused file fix the bootstrap approach to ensure that bootstrap is in the correct zone fix unclosed codeexample tag replace use of we with you remove broken dual router example related to angularangulario ,docs
10796,animation make sure reuseable animation subtitutions work without default params ,fix
10797,aio do not ignore ison in lighthouse check lighthouse v treat localhost a secure domain ie a if they where http so we need to stop handling the ison audit specially ,build
10798,aio fix pwa testing on window and reduce flakyness adding a delay after lighthouse ha run and before killing the chrome process avoids econnrefused error on window and will hopefully prevent such error occasionally appearing on ci based on info in ,fix
10799,aio fix up typing error in test the new version of jasmine type identified issue with our unit test ,fix
10800,aio upgrade to angularclirc ,build
10801,aio load reflectmetadata polyfill only in the dev mode ,perf
10802,aio add ngo purify ,build
10803,aio log the full pwa testing result this will help diagnose error or regression in pwa score ,ci
10804,aio fix pwa testing in case where atobbtoa is necessary in some case unclear when traceviewerjs used by lighthouse under the hood assumes atobbtoa are defined in the global scope this is true for browser environment but not on node a a result some aggregation that required access to modeltracing failed to produce result dropping the overall pwa score this affected eg commit deeeca ,fix
10805,aio upgrade angular and friend remove obsolete deps ,build
10806,aio minor updatepreviewserversh improvement ,build
10807,aio add small delay before autoscrolling this delay allows any async layout to complete before we autoscroll to a heading anchor close ,fix
10808,aio add script for updating the preview server ,build
10809,aio fix syntax error in preview server dockerfile ,build
10810,aio minor doc fix for aiobuildssetup ,docs
10811,aio reduce image weight ,build
10812,router dont run the change detection every time an outlet is activated ,refactor
10813,router cleanup simplification ,refactor
10814,animation reduce size of animation bundle before animationsumdjs k animationsumdminjs k after animationsumdjs k animationsumdminjs k ,perf
10815,aio remove searchbox shrink animation ,fix
10816,aio enable http on the preview server fix ,build
10817,animation make animation testing work with fixturewhenrenderingdone ,refactor
10818,animation single animation engine code pas ,refactor
10819,animation introduce a wave of new animation feature ,feat
10820,compilercli allow to compare nullable type fix fixcompilercli diagnose issue in conditional of ternary fix ,fix
10821,platformserver wait for async app initializers to complete before removing server side style this fix a flicker when transitioning from server rendered page to client rendered page in lazy loaded route by waiting for the lazy loaded route to finish loading assuming initialnavigation on the route is set to enabled fix ,fix
10822,aio compute link title more effectively if a usage of link doe not provide a title then compute it based on the title andor name property or set the link to invalid close ,build
10823,aio no white band below toolbar when mobile at px wide the button on tool bar shrank from to px should shrink the content ’ s top padding from to a well ,fix
10824,aio sidenav header should be focusable button sidenav header had been anchor wo hrefs these can ’ t take focus which make you can ’ t navigate through them with keyboard for ay purpose this pr turn them into button ,feat
10825,aio remove fundamentalstechniques intro page ,docs
10826,aio remove compilecomponents from all test by reflex we began all component test with an async beforeeach that called compilecomponents in at least one case liveexamplecomponentspects that led to the it test being async a well there is no need to call compilecomponents because cli web pack plugin inlines all template and style while compilecomponents wa harmless it added complexity and distraction which we should not inflict on future reader and tester ,test
10827,aio fix toh ee test ,docs
10828,compilercli import routing module with forroot ,fix
10829,aio automatically link code block to api doc ,build
10830,aio set focus back to search box on escape for improved accessibility the focus should be sent back to the input box when we are displaying the search result and the user hit esc see ,fix
10831,aio centralise search ui management previously the logic for deciding when to display the search result wa spread between different part of the application and used nonintuitive logic such a sending a blank result set to the searchresults this commit move the management of displaying the search result and also setting focus of the search input box to the appcomponent this make it easier to understand what happens and why but also allows the search ui component to be more easily reused such a embedding them in the page ,refactor
10832,aio remove unused mock method ,refactor
10833,core introduce fixturewhenrenderingdone for testing ,feat
10834,aio drop run from yarn run rename script and remove unnecessary cmds ,refactor
10835,aio build aiobuildssetup script before preverifying pr coincidentally this wasnt an issue before fdfeaaff because preverification wa run after testsh during which aiobuildssetup wa built now that deploystagingsh is being run before testsh we need to build the aiobuildssetup script first ,ci
10836,aio correctly catch pr preview preverification error previously aioaiobuildssetupscriptstravispreverifyprsh wa supposed to exit with if a pr did not meet the precondition and if an error occurred during preverification it relied on the exit code of the node script that did the actual work but didnt account for error that would be thrown in the sh script itself eg if the node script wa not available this caused such error to appear a nonverified pr instead of real error that should fail the build this commit swap the exit code so that now a mean nonverified pr and designates an error ,ci
10837,router wrap promiselike instance in native promise hybrid apps mix of angular and angularjs might return angularjs implementation of promise that do not play well with the change detection wrapping them in native promise fix this issue this could be the case when a resolver return a q promise ,fix
10838,upgrade prevent renaming of inject property use bracket notation to access inject in downgradeinjectable to support property renaming since the return type is any closure compiler renames inject ,fix
10839,aio resize image ,docs
10840,aio only register serviceworker in production mode since abbecb we no longer rely on the cli to set up serviceworker but do it manually a part of yarn build when using ng serve registering the serviceworker fails because we havent created ngswmanifestjson nor copied workerbasicminjs into dist this commit work around this by only registering the service worker in production mode which is what the cli doe too caveat it is not possible to enable serviceworker with ng serveyarn start and using the prod flag will try to register it but fail because the necessary file ngswmanifestjson and workerbasicminjs will not be available a a workaround you can use yarn build and serve the file in dist with yarn dist p ,fix
10841,aio deploy preview early right after build previously pr preview were deployed after successfully running all test while this make sense for stagingproduction deployment preview should be available a soon a possible and regardless of the outcome of test fix ,ci
10842,aio create preview for all pr that touch nonspec file in aio or package previously no preview would be deployed for pr that didnt touch file inside aio now preview will be deployed for pr that touch nonspec file inside either aio or package a long a other precondition are met partially address ,ci
10843,upgrade use quote to prevent clossurecompiler obfuscating event this is critical for angularjs to get the event object in template ,fix
10844,aio switch to nguswmanifest gen to unblock critical path ,fix
10845,compiler produce more dense generated code this change the formatting to be le verbose but still try to be readable ,refactor
10846,compiler support a nonnull postfix assert template expression can now use a postfix operator that asserts the target of the operator is not null this is similar to the typescript nonnull assert operator expression generated in factory will be generated with the nonnull assert operator close ,feat
10847,aio add test for renderattributes helper ,test
10848,aio serve gzipped content from the preview server fix ,build
10849,common remove h from api doc only one h is allowed per document and this is provided by the template so we can not have any h tag or markdown shorthand in any api doc close ,docs
10850,aio remove excess h from guide only one h is allowed per document also took the opportunity to remove unnecessary blank line from these doc and a bit of general tidying close ,docs
10851,aio fail build if more than h is found in a doc close ,build
10852,router change candeactivate to canload fix mistake in doc candeactivate should be canload ,docs
10853,aio style toc scrollbar similar to other scrollbars ,fix
10854,aio remove warning when testing in the webpack guide ,docs
10855,aio remove redundant style due to the new structure of liveexample the only style in liveexamplescss wa not applied this is ok according to since we want it to take the full width fix ,refactor
10856,aio style sidenavcontent scrollbar similar to other scrollbars ,fix
10857,aio make le verbose tool ,build
10858,aio more content fix ,docs
10859,aio add a progress reporter for the webpack guide ,docs
10860,aio fail the docgen if there is an invalid link tag this fail behaviour is only turned on for yarn doc in yarn docswatch you only receive a warning this is because you can get false error when watching since we dont parse all the doc in that case ,build
10861,aio update code style ,feat
10862,aio basic fix to the toc styling without any major refactoring these change bring the toc much closer to how the google developer doc toc look close ,fix
10863,aio remove unwanted code styling from styleguide doc close ,fix
10864,compilercli move the expression expression type checker the expression type checker moved from the language service to the compilercli in preparation to using it to check template expression ,refactor
10865,aio image sweep fixaio allow code block to clear floated image previously the negative margin on the code heading were causing floated image to overlay the start of a code block now all code block successfully clear all floated element feataio add a clear class for clearing floating image fixaio tidy up image style the cs rule for imgright and imgleft allow author easy access to floating an image on the left or right respectively the imagedisplay rule which wa always found on a figure ha been simplified so that all figure have this styling it is very unlikely that a figure will be used outside the content area and at this time it seems like figure is a good an indicator that we want this kind of styling a anything now that image are all tagged with width and height value we can not assume to modify these dimension via cs a it can cause the image to lose it correct proportion until we find a better solition we must set height to auto when the screen width is below px to ensure that these image maintain their proportion a they get shrunk to fit docsaio general tidy up of image html in guide previously the guide have a lot of inline image styling and unnecessary use of the imagedisplay cs class image over px are problematic for guide doc so those have been given specific width and associated height docsaio use correct anchor for back to the top link the toc anchor doe not work when the page is wide enough that the toc is floating to the side buildaio add topofpage to path variant for link checking since the topofpage is outside the rendered doc the checkanchorlinks processor doesnt find them a valid target for link adding them a a pathvariant solves this problem but will still catch link to doc that do not actually exist fixaio ensure that heading clear floated image fixaio do not force liveexample embedded image to size this made them look too big generally leaving them with no size mean that they will look reasonable in large viewports and switch to width in narrow viewports ,docs
10866,fix dangling link in api doc docsanimations fix link to component animation docscore fix link to reflectiveinjector method the resolve and other method were moved from the injector to the reflectiveinjector docscore fix link to renderer the local link were assuming that that method were on the current document eg rootrenderer but they are actually on the renderer class docsrouter fix link to method docsforms fix link to method docscore fix link to method docsrouter fix api page link and an internal link ,docs
10867,core remove link to nonexistent class in injectabledecorator close ,docs
10868,aio remove pure property from pipe template this information is not relevant to user right now close ,build
10869,aio scrolling tweak per ,feat
10870,aio run doc after plunker and zip in setup ,build
10871,aio local asset are not dangling link close close ,build
10872,aio doc guide tweak g thru component working through obvious nonimage content defect from top of menu getting started through fundamentalscomponents ,docs
10873,aio rename autoscroll scroll and refactor refactor inspired by gkalpak feedback on pr ,refactor
10874,aio scroll back to top when toc moreitems clicked to close close usability feature when long embedded toc collapsing it should scroll user to toc top not leave in the middle of the page ,feat
10875,aio simplifyclarify some observables ,refactor
10876,aio do not nav to an image url close formerly tried to navigate when user clicked an anchor with an image url to view image in a new tab resulting in now ignores href url with any extension and let browser handle it ,fix
10877,router fix redirect to a url with a param having multiple value fix pr close ,fix
10878,router simplify redirect test ,test
10879,compiler avoid a null spread in extraction this code only run in e mode in the test suite so this is difficult to test however updatefromtemplate is being called with a spread operator a updatefromtemplate the spread operator should fail on null value this change avoids the problem by always returning a possibly empty array pr close ,fix
10880,core detach projected view when a parent view is destroyed this also clarifies via a test that we only update projected view when the view is created or destroyed but not when it is attacheddetachedmoved fix pr close ,fix
10881,core projected view should be dirty checked when the declaring component is dirty checked previously a projected view wa only dirty checked when the component in which it wa inserted wa dirty checked this fix change the behavior so that a view is also dirty checked if the declaring component is dirty checked note this doe not change the order of change detection only the fact whether a projected view is dirty checked or not fix ,fix
10882,aio close sidenav in narrow mobile mode when select a new document close a before this pr when wide sidebyside the sidenav openclose status only change when nav tofrom marketing page in which case it open for guideapi and close for marketing page ,feat
10883,aio focus search when is pressed this will aid accessibility close ,feat
10884,core eventemitter doc for isasync default solves ,docs
10885,animation remove duplicate word ,docs
10886,aio move link from nav group to item fundamental and technique nav group we also link to page this caused counterintuitive behaviour when clicking on them this commit move each link from the group item to a child item called introduction close ,docs
10887,aio fix sizing of marketing doc image this commit ensures that all the image in the marketing doc are correcly sized related to ,docs
10888,aio constrain headerlink style the cs rule for positioning the automated header link wa too general causing other link inside heading to be positioned incorrectly close ,fix
10889,aio do not display a toc initially previously the hastoc wa initialised to true which caused a flash of unwanted content sic even if the page wa not going to need a toc close ,fix
10890,aio toc float right service refactor toc appears in right panel when wide and hide embedded toc right toc panel height adjusts dynamically during scroll refactored tocservice and it test for clarity ,feat
10891,aio upgrade to angularserviceworkerbeta ,build
10892,aio remove redundant test the search worker is now initialised from the searchboxcomponent which ha it own test for this close ,refactor
10893,aio tweak the cs to account for new cs class on aioshell ,refactor
10894,aio add helper cs class to the aioshell for fine grained styling alternative to close ,feat
10895,flatten metadata for angular angular used to publish a metadata structure which paralleled the dts structure this cause ngc to write incorrect import for this bundle when compiling provider using mockbackend and other http testing class this change restructures the angular build a bit modeling it after angularplatformbrowseranimations and produce a fesm structure that ha flat metadata fix ,fix
10896,introduce encodinghint for text for better arraybuffer support currently if a response ha an arraybuffer body and text is called angular attempt to convert the arraybuffer to a string doing this requires knowing the encoding of the byte in the buffer which is context that we dont have instead we assume that the buffer is encoded in utf and attempt to process it that way unfortunately the approach chosen interpret buffer a uintarray and create a javascript string from each entry using stringfromcharcode is incorrect a it doe not handle utf surrogate pair what angular actually implement then is ucs decoding which is equivalent to utf with character restricted to the base plane no standard way of decoding utf or utf exists in the browser today apis like textdecoder are only supported in a few browser and although hack like using the filereader api with a blob to force browser to do content encoding detection and decoding exist theyre slow and not compatible with the synchronous text api thus this bug is fixed by introducing an encodinghint parameter to text the default value of this parameter is legacy indicating that the existing broken behavior should be used this prevents breaking existing apps the only other possible value of the hint is iso which interprets each byte of the buffer with stringfromcharcode utf and utf are not supported it is up to the consumer to get the arraybuffer and decode it themselves the parameter is a hint a it not always used for example if the conversion to text doesnt involve an arraybuffer source additionally this leaf the door open for future implementation to perform more sophisticated encoding detection and ignore the userprovided value if it can be proven to be incorrect fix pr close ,fix
10897,honor requestargssearch and requestargsparams map type currently new requestsearch is not honored and new requestparams x y doesnt work either a this object would have tostring called this change allows both of these case to work a proved by the new test fix pr close ,fix
10898,aio fix broken link discovered may th ,docs
10899,aio api label style moved info bar section in pipe template to be the first section to match other template fixed label styling for type label added label styling for status label ,feat
10900,aio remove toc from all marketing page ,docs
10901,aio do not route eplnkr url to from serviceworker ,fix
10902,aio should not send inpage navigation to google analytics close locationservice sends gaservice a url stripped of fragment and query string gaservice already guard against resend of the prior url so it will only report doc change ,feat
10903,aio throw an error if a codeexample tag is not closed ,build
10904,aio improve tutorial nextsteps proselinks ,docs
10905,aio remove hardcoded toc ,docs
10906,compilercli add test for missingtranslation parameter ,test
10907,core add begin and end renderer method to track change detection ,feat
10908,aio ensure that tutorial index arrives in the tutorial search area fix ,build
10909,aio provide icon for api package in search ,feat
10910,aio compute search title for certain api doc ,build
10911,aio docsearchtitle can override name in search result ,build
10912,aio remove workaround for browser without serviceworker support this essentially reverts which is no longer necessary after angularmobiletoolkiteebb which is included in vbeta ,refactor
10913,aio simplify docviewer ,refactor
10914,aio make aiotopmenu navlink cover the whole li discussed in ,fix
10915,aio cheatsheet table layout fix ,fix
10916,aio update to dgenipackages this contains an updated dependency to typescript which support the language construct that we are using in angular ,build
10917,upgrade initialize all input in time for ngonchanges previously nonbracketed input eg xyzfoo on downgraded component were initialized using attrsobserve which us evalasync under the hood while bracketed input eg xyzfoo were initialized using watch if the downgraded component wa created during a digest eg by an ngif watcher the nonbracketed input were not initialized in time for the initial call to ngonchanges and ngoninit this commit fix it by using watch to initialize all input observe is still used for subsequent update on nonbracketed input because it is more performant fix ,fix
10918,aio toc styling toc styling toc container placeholder ,feat
10919,aio lint example ,build
10920,aio remove top bar menu item focus jump ,fix
10921,aio fix missing title warning this commit provides missing title for press kit license appears not to want a title ngmodule and resource are no longer needed ,docs
10922,aio revert removal of tutorial example these file were inadvertently removed in but are actually still referenced close ,docs
10923,aio rename srccontent to srcgenerated this commit will definitely require a clean up of your working folder cd aio git clean xdf yarn setup ,build
10924,aio hide the copy button for code in styleguide table ,docs
10925,aio set “ avoid ” class by convention filename ha “ avoid ” most important for styleguide which lost example cs class in migration also hide copy for “ avoid ” file ,feat
10926,aio add attribute utils for code atty interpretation these utils support flexible natural attribute interpretation a applied to codeexample and codepane then apply those utils to codeexample and liveexample ,feat
10927,aio fix path to template macro in overviewdump template ,build
10928,aio mark api doc a not having a toc ,build
10929,aio refactor api template for clean start ,build
10930,aio upgrade to dgenipackages this contains a fix for the typescript module reader previously t module that were of the form abindexts would be given the name index and id of abindex this is not desirable so the new version of dgenipackagestypescript remove this index from the id and name which result in name of b and id of ab ,build
10931,aio do not collapse api code example indentation ,fix
10932,aio add the api folder to the list of template folder ,build
10933,aio fixing new url on glossary date pipe ,docs
10934,aio remove unnecessary anchor link from styleguide ,docs
10935,aio move pipe guide under component ,docs
10936,aio add hero “ zero ” to toh update to inmemorywebapi should handle id make sure this work by having a hero with id in toh coincidentally delete lingering dead app folder todo fix toh image which have to do anyway ,docs
10937,aio grammatical fix remove duplicate word our ,docs
10938,compiler simplify aot test ,refactor
10939,aio sidenav styling extended ,feat
10940,aio support hiding the copy button on codeexamole component in the api doc there are occasion where we do not wish the code snippet to have a copy button this commit support that by providing a new hidecopy attribute ,feat
10941,aio move search result under search box this enables keyboarders to tab from the search box into the result important for ay according to issue ,feat
10942,aio delete guideindexmd which is no longer used ,fix
10943,aio display api icon in search result add api symbol for let and var so don ’ t have to translate those type into const also replace hr in search result html with ellipsis icon ,feat
10944,aio top weighted search result shown when many area result ,feat
10945,aio comment cleanup api table style api table styling cleanup on resource page comment ,feat
10946,core don ’ t stop change detection because of error prevents unsubscribing from the zone on error prevents unsubscribing from directive eventemitters on error prevents detaching view in dev mode if there on error ensures that ngoninit is only called x also in prod mode fix fix fix ,fix
10947,aio fix image size on homepage ,docs
10948,aio fix comment on postprocesshtml processor fix ,style
10949,aio autofill widthheight to all image tag parse all img tag during docgen and insert the width and height of the sourceed image if neither are already specified warning are reported if the img tag ha no src attribute or the image can not be loaded the work is done in the addimagedimensions postprocessor which must be configured with a basepath so that it know where to find the image close ,build
10950,aio capture and log error and warning when postprocessing html ,build
10951,aio move copycontentassets processor to the base package this allows other processor who need to know about the copycontentassets processor to ensure that the run after the content ha been copied ,build
10952,aio move attribute utils to helper folder this allows these utility function to be reused across package ,build
10953,aio include new package in docswatch ,build
10954,aio add tooltip to nav node if none specified ,feat
10955,aio tell user when no search result close ,feat
10956,aio fix lot of broken link close ,docs
10957,aio improve infobar template the npm module and ngmodule are now rendered correctly close ,build
10958,aio correct position of sidenav icon ,fix
10959,aio remove max width on marketing page and footer removed the maxwidth on all marketing page moved the footer so that it extends fully horizontally on all screen size ,fix
10960,aio search result styling changed search result link hover state to white to be more legible increased the maxheight on search result container to remove the jitter changed search result to have spacearound v spacebetween for more appropriate spacing ,fix
10961,aio convert triple backtick block to codeexample tag close ,build
10962,aio remove unused exampletabs inline tag ,build
10963,aio confirm ga track user ’ s fragment click within a page this wa the behavior and we think we still want to do it added comment and test to confirm that is our present intention ,test
10964,aio header click should always toggle expandcollapse also add class test for this navitemcomponent not yet testing effect on the templated html ,fix
10965,aio add number and step to tutorial navigation ,docs
10966,core upgrade dep on zonejs to pr close ,feat
10967,languageservice remove asserts for nonnull expression reworked some of the code so asserts are no longer necessary added additional and potentially redundant check added check where the null checker found real problem pr close ,fix
10968,common fix api doc for ngcomponentoutlet fix pr close ,docs
10969,languageservice provide external file list to typescript also ensures that it only call base language service for file that it contains pr close ,feat
10970,core don ’ t set ngversion for dynamically created component angular us the ngversion attribute to indicate which element were used to bootstrap an application however after we also added this attribute for all dynamically created component fix pr close ,fix
10971,core allow to detach onpush component fix ,fix
10972,core allow directive to inject the component ’ s changedetectorref when a directive life on the same element a a component eg mycomp mydir the directive wa not able to get hold of the changedetectorref of the component on that element however a directive are supposed to decorate component this is incorrect this commit enables this use case close ,fix
10973,core allow custom selector when bootstrapping component fix pr close ,feat
10974,languageservice update ci test to official build pr close ,ci
10975,aio add marketing class to appcomponent aioshell on mkt page also navigationjson doc page should be hidden in sidebar shown in top ,feat
10976,aio apply guideline to tstojs adapt for aio site ,docs
10977,aio add missing word ,docs
10978,aio fix broken ngmodules link in tutorial bracket included in link title content were breaking markdown parsing preventing correct link generation ,docs
10979,aio do not create toc for filenotfound and fetchingerror document related to ,fix
10980,aio code snippet source available shown when code missing tell reader usually the author what code file is missing also when no linenums specified turn them on if num of line ,feat
10981,aio implement gkalpak review suggestion ,feat
10982,aio revise doc page doc version selector in sidenav ,feat
10983,aio move autolinkheadings to postprocessing the autolinking is now done on the renderedcontent which mean it also capture and autolinks heading that were generated outside of markdown pr close ,build
10984,aio improve positioning of headinganchors ,fix
10985,aio ensure styling of icon is specific to usage previously the cs styling for material icon wa too broad and affected all instance of icon this commit constrains the position of copy button icon only to copy button ,fix
10986,aio add new postprocess dgeni package this package will allow u to do complex postprocessing on the html that is rendered by nunjucks ,build
10987,aio correct abbreviation change abbreviation from e to e the e abbreviation is used elsewhere in the tutorial ,docs
10988,form introduce min and max validators pr close ,feat
10989,compilercli add param to set missingtranslationstrategy on ngc this commit add a new parameter to ngc named missingtranslation to set the missingtranslationstrategy for aot it take the value error warning or ignore fix pr close ,feat
10990,aio add table of content toc component ,feat
10991,aio update angularserviceworker to vbeta ,build
10992,aio move guidedocsmd to marketingdocsmd because doc feel like a top level page similar to feature resource event etc this enables the serviceworker to prefetchcache the document similar to what happens with all other direct child of contentdocs without the need for specialcasing it in ngswmanifestjson ,refactor
10993,aio cache external resource in the serviceworker cache resource that are necessary for displaying the basic page when offline ,feat
10994,aio fix serviceworker routing ,fix
10995,aio update file ignored by the serviceworker fix ,fix
10996,aio fix incorrect image url in guide ,fix
10997,aio move contentrelated image to contentimages ,refactor
10998,aio move unused image to unused subdirectory ,refactor
10999,aio update dgenipackages to this version ha fix for the jsdoc parser which wa causing false negative warning and error in the doc gen close ,build
11000,aio api page styling banner class code consolidation for api page set up temporary table of content class and file api page title styling add color styling to doctype listed on each api detail page class and sc variable refactor mobile optimization on header infobanner and api page api page table custom styling api class overview template code overview into table format ,feat
11001,aio resource nav ,fix
11002,aio boilerplateadd clean remove before adding ,feat
11003,aio appcomponent should scroll only once when location change ,fix
11004,aio layout max width and design cleanup content container now ha a max width and made the body background the same offwhite color so the cutoff is not visible sidenav will always remain at the left of the page added a max width to the api banner of filter search input left aligned content container so it is flush with sidenav changed api filter width to match size of filter result ,feat
11005,aio turn on dangling link checking ,build
11006,aio add missing test for appcomponent starting feature ,test
11007,aio dont animate sidenav on launch ,feat
11008,aio copy code snackbar and design update add snackbar and pointer cursor for copy code button inside aiocode component flex cenetered content in feature page removed duplicate global cs class add style to link inside of subsection remove focus outline on top nav bar link ,feat
11009,aio fix other dgeni template the function and interface template were overriding the wrong block ,build
11010,aio fix rendering of decorator api doc the template were a bit out and we were not merging the correct property added some doc and test for the processor related to ,build
11011,aio ignore the version constant correctly we were filtering this document from the doc list but not removing it from the module export list we can actually filter it out much easier at the typescript parsing point which mean we do not need the filterignoreddocs processor any more close ,build
11012,aio copy button placement fix added materialicons back in used throughout codebase prevoiusly renamed ,fix
11013,aio include missing package in the doc these package were not included in the configuration of the docgen so were not being rendered ,build
11014,aio api page column layout ,feat
11015,aio remove blank target ,docs
11016,upgrade use correct attribute name for upgraded component binding previously when using a different propertyattribute name for an upgraded component binding eg binding propname attrname the property and attribute name were swapped eg using attrname a the property name and propname a the attribute name this resulted in unexpected behavior this commit fix this using the correct name for property and attribute this only affect upgradedynamic upgradestatic work correctly already fix pr close ,fix
11017,router forward the query parameter in the ng ng url sync fix pr close ,fix
11018,aio fix decorator j feature explanation ,docs
11019,aio remove duplicate a the word a incorrectly appears consecutively ,docs
11020,aio improve unit test rebuild time ,perf
11021,aio fix url redirection for api page ,fix
11022,aio revised doc page ,docs
11023,aio topic in navigationjson alphabetized per section ,docs
11024,aio revise info architecture in navigationjson ,docs
11025,aio relocate image to match doc ,docs
11026,aio rename cb file and a few others ,docs
11027,aio use svg icon for page load sensitive ui the side nav and menu button need to appear early on in the loading of the page currently we are using icon font with ligature to get icon for these area this can result in a flash of unstyled font by replacing these with svg icon we get a better user experience by overriding the mdiconregistry we can inline the svg source which mean that there will never by a delay in rendering the icon the new custommdiconregistry expects a multiprovider containing an array of svgiconinfo object these object hold the name and svg source of the icon when mdiconcomponent request an svg icon we will get it from the preloading cache if available before delegating back to the original mdiconregistry note that svg version of mdicon do not apply the materialicons cs class to the element so the styling for the icon that we are preloading ha been changed to use maticon instead close ,fix
11028,aio refactor dgeni package this is to tidy up the authorpackagse which currently duplicate a lot of the configuration in the main package we need to dry this up so that we dont fall foul of a change in one being missed in the other ,build
11029,aio correct some minor typo in the form validation cookbook ,docs
11030,aio dont set query params during search close api search still update query params a sending someone a prefiltered api search link is handy while typing in the search box no longer update the url in the addr bar you can still create a link like searchanimations and it will open the search dialog and profile the search box a it may be useful to email such a thing to someone ,feat
11031,aio strip leading slash from path and improve dryness previously the path returned by locationservicepath preserved leading slash which resulted in request with consequtive slash in the url such request would fail with a on staging this commit fix it by removing leading slash from the path it also refactors locationservice a bit converting path to an observable currentpath similar to currenturl and applies certain cleanup eg stripping slash query hash in one place which simplifies consumption close ,fix
11032,aio change hardcoded link to the old site ,docs
11033,aio remove doble title from setup ,docs
11034,aio api page style changed description from h to h to match the other header created api page class for consistent styling add style for infobar section wrapped pre tag for code not to go off of screen ,feat
11035,aio header anchor placement adjusted leftmargin so that the anchor icon doe not push the header in ,fix
11036,aio fix old jade on di ,docs
11037,aio adjust zipsplunker path ,docs
11038,aio compute which example to include when watching guide doc pr close ,build
11039,aio run doc before docswatch this help to ensure that the full doc have been generated before we begin watching you can disable this by providing the watchonly flag eg yarn docswatch watchonly ,build
11040,aio give the authorspackage test long enough not to flake ,build
11041,aio add prettier network fail page ,feat
11042,aio add currentlocation embedded component ,feat
11043,aio rename documentcontents url to id and tidy up dgeni is now providing the id for all the document to be viewed so we no longer need to add this to the documentcontents object there are some notable change in the refactoring documentservice the id of the document to render is now obtained from locationservicepath the getfilenotfounddoc and geterrordoc method have been extracted from the fetchdocument method appcomponent the pageid is now computed in a separate setpageid method appcomponen spec file the testhttp ha had the hard coded document removed and replaced with a function that will generate doc a needed ,refactor
11044,aio add the id to the documentcontents at docgen time ,build
11045,aio add locationservicepath method this enables thing like embedded component easy access to a clean version of the current location path ,feat
11046,aio make glossary link work again ,docs
11047,aio add codeofconduct to footer close ,feat
11048,aio material code tab arrow animation ,fix
11049,aio fix spacing on lsubsections ,docs
11050,aio fix aot toc list item ,docs
11051,aio remove j example ,docs
11052,aio move file to the right folder ,docs
11053,aio rename http guide ,docs
11054,aio autoscroll add topofpage scroll to hash element or top of page when no hash scroll down a bit px to account for top menu overhang no longer scroll when the hash element is not found add a idtopofpagea which will benefit future effort to navigate there from within a page ,fix
11055,aio accessibility item in search and home index changed h to h given hierarchy index aligned text and image block to be centered index announcement bar button darkened for appropriate contrast search result changed to list item in unordered list to accommodate accessibility and updated style accordingly ,fix
11056,aio handle click deep within anchor tag ,fix
11057,compiler make inhtmlparser provider aotcompliant pr close ,fix
11058,compiler suppress another closure warning closure compiler warns in generated ngfactoryts file warning property createinternal already defined on superclass modulecontentscoresrclinkerngmodulefactoryngmoduleinjector use override to override it pr close ,fix
11059,tscwrapped cleanup pr close ,refactor
11060,core distribute extern for testability api workaround for pr close ,fix
11061,aio add ee pr close ,feat
11062,aio page not found layout and design add svg image h custom styling pr close ,feat
11063,aio page ,feat
11064,aio style mod and content udpates fixed capitalization in sidenav menu item add min height property to sidenavcontent for better viewing on short page or high resolution screen add dividier between change log item a before to h table adjustment to reduce offscreen item update home page banner text and icon change and fix banner img and mobile alignment fix and add link in doc landing page and change card footer text to reflect correct name removed doc landing page to rebase with master pr close ,fix
11065,aio revert resize to hostlistener delete device svc angular change detection bug no page update on resize reverting to hostlistenerwindowresize eventtargetinnerwidth cure it delete deviceservice which no longer serf a purpose adjusted affected appcomponent and liveexample test pr close ,fix
11066,aio add ghstyle anchor link to heading close pr close ,feat
11067,aio redirect old url to new one there are external resource that link to the old url in order to avoid breaking them the old url are redirected to the new one fix close pr close ,feat
11068,aio fix bad cookbook url reference for aotcompiler pr close ,docs
11069,aio better styling for disabled javascript message pr close ,fix
11070,aio correctly reload page to apply serviceworker update previously due ot a limitationbug in aot compilation and usevalue the global injected into swupdatenotificationsservice wa always undefined which prevented it from actually reloading the page after activating a serviceworker update this commit fix it by switching to usefactory which work correctly with aot ,fix
11071,aio make the serviceworker update process more intuitiveuserfriendly fix ,feat
11072,aio fix broken region ,docs
11073,aio sidenav padding aligned padding to fit beneath the top nav add scroll bar styling inside sidenav menu increased font size of h to be different from h for better legibility ,fix
11074,aio about page style change added contributor info link a overlay made image larger a a focus ,feat
11075,aio add setup script ,build
11076,aio fix reference to the right example fix reference to the right example it the second route in the example the one showing the route parameter not the first one ,docs
11077,aio allow empty title for content page now if you specifically provide an empty title tag for a content file the docgen will not complain and the browser will just display a reasonable default ,fix
11078,aio search result accessibility item add visually hidden class and apply to h in search result changed h group header to h add role to main and content fix api material icon placement image alt addition where needed add lang attribute to html tag add arialabel on search input ,feat
11079,aio fix the broken doc guide ,docs
11080,aio ability to generate zip ,build
11081,aio render title correctly in content page if a document provided a title jsdoc tag then it h element wa being rendered incorrectly a a markdown paragraph this change render the title a a markdown h tag directly fix ,build
11082,aio rename toh to match the guide name ,docs
11083,aio fix minor typo in deployment guide ,docs
11084,aio testing guide second matcher parameter ,docs
11085,aio add v code advice to readmemd ,docs
11086,aio api list container centered ,fix
11087,aio remove styling comment from cheatsheet these comment were not designed to be rendered ,docs
11088,aio set the pageid to the filenotfound url if the doc is not available previously the appcomponentpageid wa set via the current url rather than the document being displayed this is only really noticeable when the url doe not match a valid doc and we are actually displaying a page now we compute the pageid from the url of the document being viewed which is returned from the documentservicecurrentdocument observable instead ,fix
11089,aio ides should only parse the src file i found that v code wa taking an age to bring up the intellisense for typescript source file in the aiosrc folder i believe that this is because it wa trying to parse all the file in the aiocontentexamples folder a well which is not relevant to the web app development this change restricts the root aiotsconfigjson to only the entry point for the app the unit test and ee test ,build
11090,aio extract the title from the content if necessary document can specify their title via the title or name jsdoc tag this change add that if neither are provided the first h element is removed from the renderedcontent and used for the title if there is still no title then it is set to the empty string and a warning is logged ,build
11091,aio set the document title in the browser title ,feat
11092,platformbrowser update type for typescript nullability support close ,fix
11093,upgrade update type for typescript nullability support close ,fix
11094,router relax nullability requirement ,fix
11095,form update type for typescript nullability support this reverts commit ddfcdeabdbfbdbbd ,fix
11096,router update type for typescript nullability support this reverts commit eaffcefdbfeeccfced ,fix
11097,update type for typescript nullability support this reverts commit accdfbdbda ,fix
11098,core benchmark enable ng benchmark again also make it match the ng benchmark ,fix
11099,benchpress chrome prevent trace buffer overflow ,fix
11100,aio about page header now visible fully when card if flipped to back info contributor website link fixed ,fix
11101,aio aboutcontributor page rebased and tweaked ,feat
11102,aio fix linting issue ,fix
11103,aio about page style contributor fix contributor card styling update button styling and container size fix remove button and add image border selection filter for button header only show when group selected and style initial flip card funcitonality and data change selected button styling complete flip func and card style flip feature contributor group change fix ,feat
11104,languageservice respect baseurl compiler option fix ,fix
11105,compiler ignore call to unresolved symbol in metadata this only show up in the language service call to symbol that are not resolve resulted in null instead of being resolved causing the language service to see exception when the null wa not expected such a in the animation array fix ,fix
11106,upgrade fix for allow setting the angularjs lib at runtime always have a value for angular even if no angular is on the page use const instead of function to allow to export a variable module without breaking tsickle closure ,feat
11107,upgrade allow setting the angularjs lib at runtime readds addeabfbdbefeac ,feat
11108,compiler inform user where quoted error wa thrown ,fix
11109,router prevent routerlinkactive from causing an infinite cd loop fix ,fix
11110,compiler support ngcontainer whatever the namespace fix ,fix
11111,languageservice look for type constructor on canonical symbol ,fix
11112,languageservice infer correct type of expression fix ,fix
11113,languageservice only use canonical symbol language service wa treating some alias typescript symbol a if they where the canonical symbol if the symbol in scope is an alias of another symbol the symbol should be converted to the canonical symbol ,fix
11114,aio add div with class around content close ,build
11115,aio when select node in sidebar close other expanded node ,feat
11116,aio move the transforms folder into the tool folder ,build
11117,aio add missing semicolon ,style
11118,aio add docwatch yarn task for doc author this task is suitable for day to day doc authoring this task cut corner which make it much faster than a full yarn doc run but it doe not produce completely valid output in general this isgood enough for author to see their change a they make them the task is triggered by a call to yarn docswatch this set up watcher on the aiocontents and package folder any change to file below these folder new doc generation run to start the input to the generation is confined to a collection of file related to the changed file for example a change to a file in aiocontentmarketing will generate all the marketing file a change to a file in aiocontenttutorial or aioexamplestoh will generate all the tutorial file and their embedded example a change to a file in aioguide or aioexamples but not a toh example will generate the appropriate guide and it embedded example a change to a file in package or packagesexamples will generate the appropriate api doc and it embedded example be aware that the mapping between doc and it example are based on doc file and example folder structure being equivalent sometimes a doc will reference an example in a different folder in which case the generated doc will be inaccurate mostly this is not a big problem ,build
11119,aio fix jade leftover from toh ,docs
11120,aio edit page link styling and placement ,feat
11121,aio fixed sidenav moved footer inside of sidenav container when content page were short the footer would take up a large part of the display area and the side nav would look like it wa shorter than it really wa this change move the footer into the main content area so that the nav always extends to the full length the browser ,feat
11122,aio force plunker to embeddedstyle on narrow mobile screen regular plunker is unusable on narrow screen refactors liveexamplecomponent and add test refactor width detection to deviceservice because need to know width change in place keep “ disable ” option add in earlier spike because simple and potentially useful in future ,feat
11123,aio detect mobile device and tell user liveexample is not available add deviceservice to detect mobile device and listen for window resize event ,feat
11124,aio fix indentation on location service spec close ,style
11125,aio give intellisense to the example ,build
11126,aio do not fail if pwa score testing fails on staging currently running yarn testpwascore right after deploying to staging fails with the error error unable to load the page timeout reached code pageloaderror a a temporary fix this commit prevents the build from failing because of pwa score error until we identify the cause and fix it ,ci
11127,aio implement resource with resourcesjson ,feat
11128,aio fix link to quickstart on homepage ,docs
11129,aio make deploystagingsh executable ,ci
11130,aio smaller typography code header pad ,feat
11131,aio callout code ex header style lighten up code ex background ,feat
11132,aio filetree and top bar hover style ,feat
11133,aio pwa bg color and name ,feat
11134,aio scroll bar styling ,feat
11135,aio positioning ux for nav and search ,feat
11136,aio remove unused config code ,build
11137,aio verify that the lighthouse pwa score remains above a threshold ,ci
11138,aio convert deploystaging to a shell script ,ci
11139,aio allow reloading page from serviceworker update notification ,feat
11140,aio add better message for disabled javascript ,fix
11141,aio high re screen spacing ,feat
11142,aio add log rotation in preview server ,feat
11143,aio remove dross from navmenucomponent spec ,test
11144,aio sort search result by areatitle display area name in all cap exclude result with no title because they don ’ t show can ’ t be clicked should find these and give their doc a title ,feat
11145,form update type for typescript nullability support this reverts commit eadfadcfdcdabca ,fix
11146,router update type for typescript nullability support ,fix
11147,update type for typescript nullability support ,fix
11148,compiler fix build error in xliff ,fix
11149,router drop the internalroute interface ,refactor
11150,router misc refactoring ,refactor
11151,compiler add source file to xmbxliff translation fix ,feat
11152,compiler implement in xliff serializer ensure that the result pass oasis xliff schema validation use ph for selfclosing placeholder tag use pcpc for other placeholder tag check for the correct xliff file version add icu support fix ,feat
11153,upgrade allow setting the angularjs lib at runtime this pr add an ability to reset the angularjs library which is often needed when angular is loaded lazily using requirejs ,feat
11154,packaging increased buffer size ,fix
11155,core keyvalue differ change iteration fix ,fix
11156,compiler ignore call to unresolved symbol in metadata this only show up in the language service call to symbol that are not resolve resulted in null instead of being resolved causing the language service to see exception when the null wa not expected such a in the animation array fix ,fix
11157,form update type for typescript nullability support ,fix
11158,compiler cleanup ,refactor
11159,aio create a proper commit link on preview comment previously only a few character of the sha would appear on the preview link comment posted on the pr this wa usually enough for github to create a link to the corresponding commit but it wa possible to have collision with other commits with the same first character which prevented github from identifying the correct commit and create a link this commit fix this issue by including the full sha on the commentso github can identify the correct commit and create the link github will automatically truncate the link text by default to char unless more are necessary to uniquely identify the commit ,fix
11160,platformserver handle innertext ,fix
11161,tscwrapped collect new expression with no argument fix ,fix
11162,aio do not fail when redeploying preview for the same prsha previously when trying to upload the build artifact for a prsha that wa already successfully deployed eg when rerunning a travis job the preview server would return a and the build would fail since we have other mechanism to verify that the pr author is trusted and the artifact do indeed come from the specified pr and since the new artifact should be the same with the already deployed one same sha there is no reason to fail the build the preview server will reject the request with a special http status code conflict which the deploypreview script will recognize and exit with ,ci
11163,aio add sidenav test and refactor related test ,test
11164,aio hide side nav in mobile mode don ’ t show the side nav in mobile not sidebyside view when arriving or navigating only show it by request the side nav should continue to appear in wide mode sidebyside when navigating from a marketing page to a guide page ,feat
11165,aio filtree update ,feat
11166,aio hr styling ,feat
11167,aio final migration from old site ,docs
11168,aio make eventshtml current docsaio make eventshtml current ,docs
11169,aio template ngtemplate ,docs
11170,aio upgrade to angularmaterialbeta ,build
11171,aio revert filetrees back to original structure this is an automigration from angulario ,docs
11172,aio remove unused rho package ,build
11173,aio update to remark syntax ,docs
11174,aio implement the remark renderer the implementation add three plugins to the remark processor remove support for code block triggered by indented text only gfm triple backticks are supported and also add support for dgeni inline tag ignore content within codeexample and codetabs element this prevents the content being accidentally treated a markdown ignore dgeni inline tag eg link to prevent the content of the link from being accidentally treated a markdown ,build
11175,languageservice update type for typescript nullability support ,fix
11176,benchpress update type for typescript nullability support ,fix
11177,aio search result layer fix and responsive table ,feat
11178,aio code block style with header ,feat
11179,animation update type for typescript nullability support close ,feat
11180,aio add test for escaped newline in codecomponent ,test
11181,aio left align code in aiocode component ,fix
11182,aio ability to generate plunker ,build
11183,aio v when browser lack service worker disable sw feature ,fix
11184,aio when browser lack service worker disable sw feature ,fix
11185,router fix query param parsing ,fix
11186,router cleanup simplification ,refactor
11187,router enable running the campaign in none browser close ,test
11188,router test preloading when a module is already loaded ,test
11189,router the preloader use the module from the loaded config ,fix
11190,tscwrapped ensure valid path separator in metadata fix that tscwrapped store invalid path separator in the bundled metadata file previous error could have been can not find module corecoordinationniqueselectiondispatcher see fix failing test on window now all tooling test are green on window related to ,fix
11191,languageservice detect when there isnt a tsconfigjson fix ,fix
11192,compiler update type for typescript nullability support ,fix
11193,common update type for typescript nullability support ,fix
11194,aio api search input fix and style ,fix
11195,languageservice parse extended in form ,fix
11196,languageservice initialize static reflector correctly fix ,fix
11197,router fix typo in router preloader method ,style
11198,languageservice avoid throwing exception when reporting metadata error ,fix
11199,aio update boilerplate to new folder structure ,build
11200,aio marketing page style ,feat
11201,aio new migration ,build
11202,aio display “ code sample missing ” message when no code sample not having code in a codeexample or codetabs is presumed to be an error hide the copy button a well ,feat
11203,aio add dtcomponent to viewchange the raw content ,feat
11204,aio add original style for feature page fix link to quick start move unit to constant ,feat
11205,aio currentnode url should not contain hash or search ,fix
11206,aio ensure appcomponentpageid ha no search or hash ,test
11207,aio trim code block before rendering ,fix
11208,aio fix presskithtml typo ,fix
11209,aio enable linting of transforms and add rule for jasmine ,test
11210,aio enable tslint rule for focused jasmine testssuites ,test
11211,aio preserve space after anchor element sometimes depending on the length of line anchor element would be formatted incorrectly by htmlprettyprint and the space right after the element wa removed this wa apparently caused by a bug in htmlprettyprint in combination with it default behavior of wrapping line at a specific limit char since the output is only meant to be used a json string data wrapping the line make it le readable by adding unnecessary n this commit disables the line wrapping which effectively avoids the bug that wa responsible for incorrectly formatting anchor element and surrounding space related to ,fix
11212,aio fix minor syntax error ,style
11213,aio add id to docviewer container based on current url this enables page specific styling via cs ,feat
11214,aio add about component and data ,feat
11215,aio add contribute marketing page ,feat
11216,aio move bio image into content folder ,docs
11217,aio copy content image asset ,build
11218,aio process marketing doc that have md extension see ,build
11219,aio shell code styling ,feat
11220,aio process contributorjson file ,build
11221,aio fix empty docplaster processing ,build
11222,languageservice resolve any parameter type to any result ,fix
11223,languageservice improve resilience to incomplete information ,fix
11224,aio contributorhtml typo ,fix
11225,aio add footer background ,feat
11226,aio doc landing page with style logo re fix ,feat
11227,aio doc landing page with style logo re fix ,feat
11228,aio remove unnecessary blank line ,docs
11229,aio add presskit and correct logosangular ,feat
11230,aio copy example boilerplate ,build
11231,aio remove google feedback ,feat
11232,aio remove v from indexhtml title ,fix
11233,aio update rho to new version this version change the expected syntax for emphasis the original rho renderer us for strong an for em but it is more standard in markdown to use or for bold and or for em ,build
11234,aio quickstarts are now in the guide folder ,docs
11235,aio move quickstarts and glossary into guide ,docs
11236,aio remove doc that are unwanted or in the wrong place ,docs
11237,aio ensure blank line before html block in markdown ,docs
11238,compiler fix inheritance for aot with summary allows to inherit ctor args lifecycle hook and static from a class in another compilation unit will error if trying to inherit from a class in another compilation unit that ha an component directive pipe ngmodule ,fix
11239,aio add footer link with googlefeedbackservice ,feat
11240,aio improve progressivewepappability previous lighthouse score new lighthouse score fix ,feat
11241,aio overall margin code alert style ,feat
11242,aio code cpy btn temp fix and footer ext ,feat
11243,aio code block copy bttn a tag hover ,feat
11244,aio footer repeat background ,feat
11245,aio move medium query to mixin ,refactor
11246,aio enable activating available serviceworker update ,feat
11247,core fix inheritance in jit mode for t fix ,fix
11248,languageservice correctly determine base member of type fix ,fix
11249,remove deprecated stuff and outdated plunkrs ,docs
11250,aio refactors appcomponent and it kid sidenav hiding hide sidenav when current doc is not in sidenav menu display top menu on the side a node instead of mini top menu ,feat
11251,compiler throw when a component defines both template and templateurl close ,fix
11252,router cleanup simplification ,refactor
11253,core update type for typescript nullability support ,fix
11254,languageservice dont require reflectmetadata module to be provided fix ,fix
11255,core fix api doc for injectorget ,docs
11256,router dont create new serializer every time urltreetostring is called ,perf
11257,animation make sure style calculation are not computed too early close ,fix
11258,router should run canactivate after candeactivate guard close close ,fix
11259,router fix test structure ,refactor
11260,core fix the keyvalue differ fix ,fix
11261,aio add liveexamplecomponent ,feat
11262,core check for undefined on normalizedebugbindingvalue debugservices is parsing false atributes value incorrectly parse expects a string value for attribute but currently boolean is being sent close ,fix
11263,languageservice improve performance of updatemoduleanalysis ,fix
11264,compiler ignore error when evaluating base class fix ,fix
11265,router improve flatten fn close ,refactor
11266,router use object spread operator instead of merge fn ,refactor
11267,core improve error msg for invalid keyvaluedifferdiff arg close ,fix
11268,languageservice be resilient to invalidate ordering fix ,fix
11269,core fix typo and example in injectiontoken doc the doc included an example that didnt use injectiontoken ,docs
11270,aio do not html format codeexample content the markdown renderer pass it output through an html pretty printer while this is good in most case it make a mess of element that expect their content to be left untouched the pretty printer already ignores pre tag and other builtins by default this fix allows u to specify other tag that should be left alone further it actually specifies this option for codeexample and codepane tag which expect to contain preformatted content ,build
11271,aio show topnav with same styling a sidenav when window is narrow fix ,feat
11272,aio fix angularcli config typo ,build
11273,aio selectednodes should work for url ending with a slash the mapping wa not accounting for the fact that url with or without a trailing slash are actually the same node ,fix
11274,aio update migrated content from anguario ,docs
11275,aio ensure documentservice doesnt crash on bad json ,fix
11276,aio the tutorial link no longer end with a slash and since the navigation open to the initial page we dont need to click the link ,test
11277,aio render all codeexamples not just the first ,build
11278,aio include top level doc in content ,build
11279,aio update rho to a version that accepts customelements ,build
11280,languageservice guard access to symbolmembers fix what is the current behavior the language service access typescript symbolmembers without checking for null or undefined what is the new behavior the access is guarded ,fix
11281,aio update project config for angularcli v this is a followup to ae the change are based on this wiki entry ,build
11282,aio remove unused gulp dependency ,build
11283,aio correct spelling in overview ,docs
11284,aio add codeexample and codetabs move embedded component to embeddedmodule add prettyprint service load pretty print j dynamically make codeexample to syntax highlighting w prettyprintone add codetabs implement copy code button ,feat
11285,aio add test content ,docs
11286,aio left align code region ,build
11287,aio remove naughty fdescribe from utils spec ,build
11288,aio move searchservice initialisation into searchboxcomponent the appcomponent really doesnt need to know about the search service ,refactor
11289,aio fix typo ,docs
11290,aio add renderexamples processor this processor will eventually replace the example inline tag because it provides a cleaner approach that also support tabbed example straight out of the box the idea is that author will simply add a path and optionally a region attribute to codeexample or codepane element in their doc this indicates to dgeni that the relevant example need to be injected into the content of this element for example assume that there is an example file tohptindexhml with a region called title which look like htour of heroesh then the document author could get this to appear in the doc a a standalone example codeexample pathtohpt regiontitlecodeexample or a part of a tabbed group codetabs codepane pathtohpt regiontitlecodepane codetabs if no path attribute is provided then the element is ignored which enables author to provide inline code instead codeexample some lthtmlgt escaped code codeexample also all attribute other than path and region are ignored and passed through to the final rendered output allowing the author to provide styling hint codeexample pathtohpt regiontitle linenums classimportant codeexample ,build
11291,aio refactor getexampleregion into a reusable service ,build
11292,aio add new class table and image styling ,feat
11293,aio upgrade angularserviceworker to vbeta ,build
11294,aio upgrade angularcli to v ,build
11295,aio upgrade angular to v ,build
11296,aio block code example style fix ,feat
11297,aio search input animation ,feat
11298,aio search result and code margin styling ,feat
11299,aio footer styling ,feat
11300,aio marketing responsive item and footer ,feat
11301,aio add a and ol to standard typo style ,feat
11302,aio search result stying add footer ,feat
11303,aio terminal code styling and code mixin ,feat
11304,compiler allow single quote into named interpolation fix ,fix
11305,router shouldnt execute canload when a route ha been loaded close close ,fix
11306,router polishing ,refactor
11307,compiler support icu message in xliff fix close ,feat
11308,compiler refactor in integration test ,test
11309,compiler correctly handle when tostring is exported fix ,fix
11310,compiler assume query with no match a static this ha the side effect of allowing input and contentchild on the same property if the query is static see the bug description for detail fix ,fix
11311,platformbrowser setattribute should work with xmlns namespace close ,fix
11312,router should pas new data to observable when query params change fix ,fix
11313,aio delete content folder before docgen this should prevent falsepositive ee test run where stale file are left lying around ,build
11314,aio upgrade to angularrc ,build
11315,compiler only log template deprecation warning once ,fix
11316,common update ngfor doc to new a syntax ,docs
11317,travis update excluded branch to g ,ci
11318,router fix typo in parammap api doc ,docs
11319,aio do not fallback to indexhtml for file request previously all url were rewritten to indexhtml in order to support deeplinking this work when navigating to url that correspond to existing resource eg navigating to tutorial return indexhtml and then the docviewer take over and request tutorialjson navigating to a nonexistent url eg foo will return indexhtml which in turn request the nonexistent foojson and throw an error when trying to parse the returned indexhtml a json this commit fix it by only rewriting url that do not request a file ie do not include a in the last path segment fix ,fix
11320,upgrade component injector should not link the module injector tree ,fix
11321,compilercli adding missing format xliff for the extractor to generate xlf file with ngxin we could use the format parameter xlf or xlif the real name is xliff not xlif so this probably wa a typo this pr add xliff a can be expected ,fix
11322,aio output example tag a codeexample element ,build
11323,tscwrapped use window friendly path normalization in bundler fix pr close ,fix
11324,compiler look for flat module resource using declaration module path ngc would look for flat module resource relative to the flat module index ngc now look for flat module resource relative to the dts file that declarates the component fix pr close ,fix
11325,tscwrapped record original location of flattened symbol added an origin section to the flat module metadatajson file that record where the original symbol wa declared this allows correctly calculating relative path reference recorded in metadata ,feat
11326,form make composition event buffering configurable this commit fix a regression where ngmodel no longer syncs letter by letter on android device and instead syncs at the end of every word this broke when we introduced buffering of ime event so imes like pinyin keyboard or katakana keyboard wouldnt display composition string unfortunately io device and android device have opposite event behavior whereas io device fire composition event for ime keyboard only android fire composition event for latinlanguage keyboard for this reason language like english dont work a expected on android if we always buffer so to support both platform composition string buffering will only be turned on by default for nonandroid device however we have also added a compositionbuffermode token to make this configurable by the application in some case apps might might still want to receive intermediate value for example some input begin searching based on latin letter before a character selection is made a a provider this is fairly flexible if you want to turn composition buffering off simply provide the token at the top level t provider provide compositionbuffermode usevalue false or if you want to change the mode based on locale or platform you can use a factory t import shouldusebuffering from mylib provider provide compositionbuffermode usefactory shouldusebuffering close pr close ,fix
11327,core update peer dep on zonejs to close pr close ,fix
11328,core misc cleanup pr close ,refactor
11329,aio upgrade to rxjs ,build
11330,aio cleanup polyfill import and realign them with the latest cli blueprint this shouldnt change anything but it interesting that we used to have this import that seemed bogus but there were no compilation or rutime error ,refactor
11331,aio fix path to index page content page like tutorialindexmd were being mapped to tutorialindexjson which meant that they could only be rendered if you browsed to tutorialindex this didnt sit well so now these page are mapped to tutorialjson which mean that you browser to them via tutorial or just tutorial fixed ,build
11332,aio upgrade angularcli to rc ,build
11333,aio update angular to rc and zonejs to ,build
11334,aio add version into navigationjson the navigationjson is now passed through the dgeni pipeline the source file ha been moved to aiocontentnavigationjson but the generated file will now appear where the original source file wa found aiosrccontentnavigationjson everything inside aiosrccontent is now generated and ignored by git the processnavigationmap processor in this commit add the current version information to the navigationjson file and verifies the relative url in the file map to real document the navigationservice expose the versioninfo a an observable which the appcomponent render at the top of the sidenav ,build
11335,aio ensure that internal document link work with base href ,build
11336,aio fix test description for ordering of processor ,test
11337,aio use mocklogger in appcomponent test this component sends a lot of message to the console which make the test run le easy to follow ,test
11338,aio dont process unnecessary example file in docgen this lower the yarn doc processing time by about from sec to sec ,build
11339,aio remove cheatsheet processing and content this will be replaced by a single file migrated from angulario ,build
11340,aio add version into navigationjson the navigationjson is now passed through the dgeni pipeline the source file ha been moved to aiocontentnavigationjson but the generated file will now appear where the original source file wa found aiosrccontentnavigationjson everything inside aiosrccontent is now generated and ignored by git the processnavigationmap processor in this commit add the current version information to the navigationjson file and verifies the relative url in the file map to real document the navigationservice expose the versioninfo a an observable which the appcomponent render at the top of the sidenav ,build
11341,aio ensure that internal document link work with base href ,build
11342,aio use forked version of rho rendering engine the original rho is too strict when it come to markdown heading it requires that there be a blank line separating the heading and the next paragraph the forked version here fix that but the rho project will not merge it a it go against there basic rule ,build
11343,aio do not render ignored doc ,build
11344,aio do not render private class and member ,build
11345,aio removed dead code ,refactor
11346,aio font change and toolbar shadow ,feat
11347,aio fix generated github link the change from module to package needed to be applied to these link ,build
11348,aio update to dgenipackages this new version fix the problem with mistaking content inside inline html block a tag related to ,build
11349,aio lower prerender browser instance hopefully this will reduce aio test flake ,ci
11350,aio expand nav menu branch of select item on page load ,feat
11351,core mark component for check when host event trigger fix pr close ,fix
11352,platformserver throw a better error message for relative url unlike in the browser on the server there is no concept of a document origin thus it is illegal to make request for relative url against http on platformserver currently this fails with a vague error error uncaught in promise error at resolvepromise this change add explicit validation and a friendlier error message error url requested via http on the server must be absolute url testing another option considered wa to track the concept of an origin for the platform and automatically prepend it to relative url this would cause automatic local rpcs to be made though which would be an unexpected and undesirable default behavior fix pr close ,fix
11353,animation ensure empty animate step work at the end of a sequence close close pr close ,fix
11354,compiler only produce log expression for element text this change reduces the amount of generated code by only adding log call for element and text node we need the log call to allow user to jump to the right place in the template via source map however we only need it for element and text node but not for directive query … a for them we first locate the corresponding element or text node related to pr close ,refactor
11355,core provide ngmoduleref in viewcontainerrefcreatecomponent this is needed to support the corner case usage of a componentfactory that wa created on the fly via compiler overwriting of the ngmoduleref that is associated to a componentfactory by the componentfactoryresolver from which it wa read fix ,fix
11356,core stringify shouldnt throw when tostring return nullundefined fix pr close ,fix
11357,compilercli mention that ngsummaryjson file should be gitignored pr close ,docs
11358,compiler use attribute id to merge translation we extracted id from in attribute but forgot to use them when merging the translation resulting in an error about missing translation even when they were correctly defined fix pr close ,fix
11359,animation correct the main entry path in packagejson pr close ,fix
11360,animation stringify boolean value a and close close pr close ,fix
11361,compiler don ’ t call check if we don ’ t need to if a directive ha not binding nor ha a ngdocheck ngoninit lifecycle hook don ’ t generate a check call this doe not have an impact on the behavior but produce le code pr close ,fix
11362,animation ensure enterleave cancellation work close close pr close ,fix
11363,platformserver interpret native view encapsulation a emulated on the server pr close ,fix
11364,form add tina a secondary for form pr close ,ci
11365,router add parammapkeys to get a list of parameter ,feat
11366,router introduce parammap to access parameter the router use the type params for all of position parameter matrix parameter query parameter params is defined a follow type params key string any because parameter can either have single or multiple value the type should actually be type params key string string string the client code often assumes that parameter have single value a in the following exemple class mycomponent sessionid observablestring constructorprivate route activatedroute ngoninit thissessionid thisroute queryparams mapparams paramssessionid none the problem here is that paramssessionid could be string or string but the error is not caught at build time because of the any type fixing the type a describe above would break the build because sessionid would becomes an observablestring string however the client code know if it expects a single or multiple value by using the new parammap interface the user code can decide when it need a single value calling parammapget string or multiple value calling parammapgetall string the above exemple should be rewritten a class mycomponent sessionid observablestring constructorprivate route activatedroute ngoninit thissessionid thisroute queryparammap mapparammap parammapgetsessionid none added apis interface parammap activatedrouteparammap parammap activatedroutequeryparammap parammap activatedroutesnapshotparammap parammap activatedroutesnapshotqueryparammap parammap urlsegmentparametermap parammap ,feat
11367,router misc minor update ,refactor
11368,core don ’ t create a comment for component with empty template fix pr close ,fix
11369,animation test various combination of animation with host binding pr close ,test
11370,core trigger host animation for element that are removed fix fix ,fix
11371,core view engine change bindingtype to bindingflags ,refactor
11372,animation only process element node through the animation engine close close pr close ,fix
11373,core only apply wrappedvalue to the binding of the pipe previously a pipe that returned a wrappedvalue would force the change of the next bound property independent of the binding in which the pipe wa used now only the binding in which the wrappedvalue is used will be assumed a changed fix pr close ,fix
11374,platformserver setup noopanimationsmodule in servermodule by default this is so that server side rendering doe not throw an exception when it encounter animation on the server side and doe not need the user to explicitly setup noopanimationsmodule in their app server module fix pr close ,fix
11375,tscwrapped emit flat module format correctly on window file name needed to be normalized before comparison when using synthetic file name fix pr close ,fix
11376,animation make sure nontransitioned leave operation cancel existing animation close pr close ,fix
11377,aio implement prerendering the current implementation is based on igorminars angulariov it is using protractor to request all doc url let them fallback to indexhtml and save the rendered page fix ,build
11378,aio rearrange npm script ,refactor
11379,aio use own gitignore file ,build
11380,animation make sure easing value work with webanimations close close pr close ,fix
11381,core allow tree shaking of component factory and style closure compiler is very sensitive to top level function call this commit make the function call createcomponentfactory and createrenderertypev logicless fix pr close ,fix
11382,upgrade use componentfactoryinputsoutputsngcontentselectors deprecation the argument input output ngcontentselectors of downgradecomponent are no longer used a angular calculates these automatically now compilergetngcontentselectors is deprecated use componentfactoryngcontentselectors instead ,feat
11383,core expose input output and ngcontentselectors on componentfactory eg for a component like this component template ‘ ngcontent select “ child ” ngcontent ’ class mycomp input ‘ ainputname ’ ainputprop string output ‘ aeventname ’ aouputprop eventemitterany the componentfactory will now contain the following input ainputprop ‘ ainputname ’ output aoutputprop ‘ aoutputname ’ ngcontentselectors ‘ child ’ ,feat
11384,upgrade don ’ t rely on compiler internals us elementmatches to match selector instead of copying the code from our compiler ,refactor
11385,animation only treat view removal a void state transition close pr close ,fix
11386,compiler add an empty content for source file of non mapped code before this when using ngc tool tried to load ng…componentts if …componentts wa the source file of a template pr close ,fix
11387,form allow to compile form in strictnullchecks mode close pr close ,feat
11388,compilercli update the tscwrapped dependency version ,fix
11389,core update peer dep on zonejs to ,fix
11390,compilercli support metadata file alias ,feat
11391,compiler always use ng prefix for sourcemap url fix in g filepaths don ’ t start with a and therefore became relative always using the ng prefix group angular resource in the same way for aot and jit ,fix
11392,core update peer dep on zonejs to close close ,fix
11393,core errorhandler should not rethrow an error by default errorhandler can not throw error because it will unsubscribe itself from the error stream zone capture error and feed it into ngzone which than ha a rx observable to feed it into errorhandler if the errohandler throw then rx will teardown the observable which in essence cause the errorhandler to be removed from the error handling this implies that the errorhandler can never throw error close close close ,fix
11394,compiler make sourcemaps work in aot mode inlcuded fix include preamble in generated source map always add a mapping for linecol so that the generated sourcemap is not sparse use a uniue sourceurl for inline template even in the aot case ,fix
11395,tscwrapped emit j file in all case ,fix
11396,tscwrapped update tsickle to version update tsickle to version which fix a bug where input source map which specified filename differently than the name supplied to tsc didnt get composed with tscs source map also add a test that the bug wa fixed ,build
11397,platformbrowser prevent clobbered element from freezing the browser see ,fix
11398,platformbrowser cleanup htmlsanitizer spec ,refactor
11399,form ensure observable validators are properly canceled observable subscription from previous validation run should be canceled before a new subscription is created for the next validation run currently the subscription that set the error is canceled properly but the source observable created by the validator is not while this doe not affect validation status or error setting the source observables will incorrectly continue through the pipeline until they complete this change ensures that the whole stream is canceled asyncvalidatorfn previously had an any return type but now it more explicitly requires a promise or observable return type we dont anticipate this causing problem given that any other return type would have caused a runtime error already ,fix
11400,platformserver handle style with extra s correctly previously style value were parsed with a regex that split on this cause error for cs such a div backgroundurl url since the regex would split the backgroundurl line into value instead of now the character is detected with indexof avoiding this error a test wa added to verify the behavior is correct ,fix
11401,core use presence of subscribe to detect observables rather then symbolobservable fix fix fix ,fix
11402,aio scroll to hash fragment element on url change ,fix
11403,aio top bar typography sidenav size ,feat
11404,aio indent and org cleanup ,refactor
11405,aio initial design commit implemented style guide element to top header bar side hamburger nav menu content and search consolidated sc file to style folder fixed pwa test ,feat
11406,aio hide search result when click outside search element clicking anywhere except on the search result and the search box will now hide the search result close ,feat
11407,aio searchboxcomponent should send query on click the input may still have focus when the user hit esc causing the search to be hidden if the user then click on the input again they would expect it to reopen the result ,fix
11408,aio fill in missing api page unit test ,test
11409,aio yarn test sourcemapfalse for faster devtest cycle ,build
11410,aio whitelist aiocontributors for deploying pr preview ,ci
11411,aio move windowresize handler into component ,refactor
11412,aio intercept all click on anchor previously we had the linkdirective which intercepted click on anchor outside the doc viewer now we intercept all link click within the app ,fix
11413,aio ignore private export close ,fix
11414,animation make sure easing value are applied to an empty animate step close close ,fix
11415,make responseoptionsargs an interface close ,fix
11416,router fix query parameter with multiple value fix ,fix
11417,animation always fire callback even for noop animation close ,fix
11418,upgrade use componentfactoryinputsoutputsngcontentselectors deprecation the argument input output ngcontentselectors of downgradecomponent are no longer used a angular calculates these automatically now compilergetngcontentselectors is deprecated use componentfactoryngcontentselectors instead ,feat
11419,core expose input output and ngcontentselectors on componentfactory eg for a component like this component template ‘ ngcontent select “ child ” ngcontent ’ class mycomp input ‘ ainputname ’ ainputprop string output ‘ aeventname ’ aouputprop eventemitterany the componentfactory will now contain the following input ainputprop ‘ ainputname ’ output aoutputprop ‘ aoutputname ’ ngcontentselectors ‘ child ’ ,feat
11420,upgrade don ’ t rely on compiler internals us elementmatches to match selector instead of copying the code from our compiler ,refactor
11421,compiler support interface type in injectable constuctors fix ,fix
11422,animation support multiple state name per state call close close ,fix
11423,tscwrapped use tsicklecompilerhost for initial file load in order for tsickles new support for input source map to work the tsicklecompilerhost must be used for the initial load of source file since thats when the inline source map are read and stripped ,build
11424,tscwrapped update tsickle to version ,build
11425,platformserver fix an exception when hostlistenerwindowscroll is used on the server ,fix
11426,common support a syntax in template binding featcommon support a syntax in template binding close showing the new and the equivalent old syntax ngifexp a var ” ngifexp let var ngif ” ngforvar item of itemsstream async a item ” ngforvar item of itemsstream async let item ngforof ” featcommon convert ngif to use ngifexp a local “ syntax featcommon convert ngforof to use ngfor “ let i of exp a local “ syntax featcommon expose ngforofcontext and ngifcontext ,feat
11427,core update peer dep on zonejs to ,fix
11428,compiler only warn for injectable class with invalid args in vx user had to annotate class that they intended to use a token with injectable this is no longer required in vx for token and we now require the constructor parameter of class annotated with injectable to be statically analyzable by ngc this commit reduces the error into a warning if the constructor parameter do not meet this condition deprecation class annotated with injectable but whose constructor ’ s parameter type are not statically analyzable by ngc will produce a warning close ,fix
11429,compiler generated code should pas nounusedlocals check close ,fix
11430,core don ’ t throw if query change during change detection throwing on query change would be a breaking change compared to v also discovers a bug with querying manually projected content see related to close ,fix
11431,compiler fix utfencode move to sharted utils add test ,fix
11432,compiler warning print warning instead of error ,fix
11433,compiler improve error message for missing annotation currently it say unexpected value fuzzytimepipe in javascriptangularexamplesearchfuzzytimets declared by the module searchmodule in javascriptangularexamplesearchsearchmodulets the new error message also suggests please add a pipedirectivecomponent annotation ,fix
11434,platformserver add initial ee test for platformserver ,test
11435,platformserver support svg element with namespaced attribute ,fix
11436,platformserver correctly implement get href in parse adapter ,fix
11437,form remove equalsto validator this api wa introduced only in a beta release and is being removed because we found it to be incorrect prior to launch for more information about why this is being removed see ,fix
11438,platformbrowser move platformbrowseranimations to animationsbrowser close ,refactor
11439,aio deploy preview from aiomaster ,ci
11440,aio add google analytics ,feat
11441,upgrade support multislot projection in upgradestatic close ,feat
11442,aio fix relative link the migrator wa updated to automatically fix these link see and the result of this is that going forward we should ask author to include the path from the base href to the thing being linked eg guidearchitectureintro ,docs
11443,aio move cookbook into guide also update all doc with migrated version from latest angulario fix ,docs
11444,aio improve search result functionality ensure that all indexed document are displayed in the search result previously the guide document were not appearing because we only showed result that had a name property rather than a name or title group the result by their containing folder eg api guide tutorial etc hide the result when the user hit the esc key hide the result when the user click on a search result close ,feat
11445,aio ensure api doc are generated in the correct place the move of the source code from modulesangular to package caused a problem with the path to the api doc ,build
11446,aio generate the apilistjson file from the api doc ,build
11447,aio locationservice search should handle corner case add test and fix corner case for both search and setsearc for thing like empty query and param key that need encoding this commit refactors the locationservice to rely upon the platformlocation rather than using windowhistory directly this make testing easier but also make the code simpler since platformlocation deal with platform that do not support history for u ,fix
11448,animation adjust animationsbrowser source to new standard for automatic build ,build
11449,platformbrowser move platformbrowseranimations to animationsbrowser ,refactor
11450,aio remove invalid brace from cs ,fix
11451,platformserver fix getset title in parse adapter ,fix
11452,aio hard code a home image link into the toolbar close ,feat
11453,aio tidy up sc file ,style
11454,aio upgrade to zonejs this new version support empty jasmine it clause ,fix
11455,core errorhandler should not rethrow an error by default ,fix
11456,core don ’ t recreate templateref when used a a reference this wa a regression introduced in v rc fix ,fix
11457,aio replace all occurrence of env var on a line in aiobuildssetup ,build
11458,aio improve test description and expectation ,test
11459,aio fix cleanup script on ngbuildsio ,ci
11460,aio add more doc about aiobuildssetup ,docs
11461,aio make it easy to keep relevant log outside the docker container ,feat
11462,aio redirect http to http ,feat
11463,aio remove redundant arg ,build
11464,core use flag in renderersetstyle instead of booleans breaking change since v rc renderersetstyle no longer take booleans but rather a bit mask of flag ,refactor
11465,aio enable deeplinking on deployed apps until prerendering is done ,feat
11466,core allow to provide multiple default testing module this can be used to eg add the noopanimationsmodule by default testbedinittestenvironment browserdynamictestingmodule noopanimationsmodule platformbrowserdynamictesting ,feat
11467,compiler shouldnt throw when symbol is used a di token close ,fix
11468,core errorhandler should not rethrow an error by default close close close ,fix
11469,aio support angularserviceworker using the cli generated service worker manifest ,feat
11470,aio add kapunahele animation v ,feat
11471,compiler improve error msg for unexpected closing tag close ,fix
11472,aio add api list page ,feat
11473,aio do not deploy pr if precondition not met this avoids incorrectly failing the build if the pr author is not a member of one of the whitelisted github team ,ci
11474,aio move script into script directory ,refactor
11475,aio only deploy a preview if the pr touched relevant file ,ci
11476,aio document arg for autorestarting the docker container on boot ,docs
11477,aio use more intuitive log filepath ,refactor
11478,aio fix ee test ,test
11479,aio make it easier to create a docker image le variable to overwrite ,feat
11480,aio ensure ngbuildsiokey is not printed gaining access to another pr jwt would allow faking that pr author wrt to github team membership verification for a long a the jwt is valid currently min ,fix
11481,aio fail the build if preview deployment fails ,ci
11482,aio bringing in because no patience ,ci
11483,aio allow overwriting env var at build time ,build
11484,aio allow passing parameter to docker build ,build
11485,aio test aiobuildssetup a part of the aio job ,ci
11486,aio upgrade to latest and pin major pm version ,build
11487,aio do not hardcode the domain in preview link comment ,fix
11488,aio always compile before running test ,build
11489,aio change mock value for consistency ,style
11490,aio verify uploaded build based on jwt from travis ,feat
11491,aio support passing secret a file to the docker container ,feat
11492,aio implement buildverifier ,feat
11493,aio implement githubteams ,feat
11494,aio remove unnecessary reposlug parameter from githubapi ,fix
11495,aio implement githubapigetpaginated ,feat
11496,aio make githubtoken mandatory for githubapi ,feat
11497,aio add assertnotmissingorempty helper ,refactor
11498,aio add support for http certificate provided by host fallback to selfsigned ,feat
11499,aio update typescript and other dependency ,build
11500,aio check resolution of external url in healthcheck ,feat
11501,aio fix typo reposlag reposlug ,test
11502,aio correctly type tuple ,style
11503,aio use type intead of interface for function ,refactor
11504,aio add initial implementation for aiobuilds setup ,ci
11505,aio update gitignore ,build
11506,router do not finish bootstrap until all the route are resolved deprecation use routermoduleforrootroutes initialnavigation enabled instead of routermoduleforrootroutes initialnavigtaion true before doing this move the initialization logic affecting the router from the bootstrapped component to the boostrapped module similarly use routermoduleforrootroutes initialnavigation disabled instead of routermoduleforrootroutes initialnavigation false deprecated option legacyenabled true same a legacyenabled legacydisabled false same a legacydisabled the router initial navigation design document cover this change read more here ,fix
11507,upgrade populate upgraded component view before creating the controller previously the relative order of the angularjs compilinglinking operation wa not similar to angularjss resulting in inconsistent behavior for upgraded component which made upgrading to angular le straight forward this commit fix it by following the compilinglinking process of angularjs more closely main difference the component view is already populated when the controller is instantiated and subsequent hook are called the correct dom content is available when running the onchanges oninit docheck hook previously the content child were still present not the view child the same for prelinking the template is compiled in the correct dom context eg ha access to ancestor previously it wa compiled in isolation inside a dummy element for reference here is the order of operation before compile template instantiate controller hook onchanges hook oninit hook docheck prelinking collect content child insert compiled template linking postlinking hook postlink after collect content child insert template compile template instantiate controller hook onchanges hook oninit hook docheck prelinking linking postlinking hook postlink fix ,fix
11508,aio reimplement the top menu dropping into the side bar i couldnt find the cs for the small class to make it look nice ,fix
11509,aio simplify and document the navigationservice ,refactor
11510,aio rename local variable ,style
11511,aio rename const to camelcase ,style
11512,aio fix path to image ,docs
11513,aio copy devguide image from angulario ,docs
11514,aio rename activenodes to selectednodes this keep the naming consistent with the navmenu and navitem component property ,refactor
11515,aio reimplement sidenav ,fix
11516,aio ensure that only one request for navigationjson is made ,fix
11517,aio move interface into their own file to workaround compile weirdness for some reason the treeshaker is not picking up these interface perhaps t is not passing it through when they are in the same file a their related service this result in a distracting warning message ,fix
11518,aio no need for path and url property in nav ,fix
11519,aio correctly intercept link with linkdirective ,fix
11520,aio locationservice url should never start with a slash there is a weirdness in the angular location service if the basehref is only a single slash then it change it to be an empty string the effect of this is that locationnormaliseurlurl doe not strip off the leading slash from url path the problem is that the leading slash only appears on the initial location path and not on url that arrive from subscribing to the location service this commit is a workaround this problem ,fix
11521,aio make home doc the default home page now the url will display the home page close ,docs
11522,aio emit a hardcoded doc if filenotfound fails close ,fix
11523,aio map the empty url to the correct doc path ,fix
11524,aio move document path computation do the path computation before doing the cache look up ,refactor
11525,aio ensure that only one request per document is made ,fix
11526,aio add mock service ,test
11527,core allow to use the renderer outside of view fix ,fix
11528,compiler don ’ t throw for empty array literal in assignment close ,fix
11529,compiler improve error message when a module import itself close ,fix
11530,aio move gulp task to packagejson generate the doc with yarn doc test the doc generation code with yarn docstest the doc are automatically built a part of the yarn build task so there is no need to rebuild them in the testaiosh file ,build
11531,aio upgrade to angular rc ,build
11532,aio reimplemented all the commentedout unit test ,test
11533,aio add placeholder test description ,test
11534,aio reorganize search service for easier testing ,refactor
11535,aio generate marketing doc json file ,build
11536,aio fix up link in app ee test ,test
11537,aio add filenotfound doc ,build
11538,aio remove external html and sc from app component ,fix
11539,aio add search service and search ui ,feat
11540,aio implement doc and navigation ui ,feat
11541,aio add navigation service ,feat
11542,aio add logger service ,feat
11543,aio add document service ,feat
11544,aio add location service ,feat
11545,aio content document should have a content field ,build
11546,aio add note ,docs
11547,aio remove previous file ,fix
11548,animation make animation work in aot ,fix
11549,tscwrapped validate metadata in static member of a class fix ,fix
11550,languageservice tolerate error in decorator fix ,fix
11551,languageservice test angularlanguageservice can be loaded by tsserverjs ,test
11552,compiler apply element binding before host binding ,fix
11553,platformserver enable meta tag and title service spec for server fix cs selector syntax to allow single and double quote needed for meta tag service selector to work properly on parse fix ,test
11554,platformserver dont setup testability and testabilityregistry on the server ,fix
11555,core fix iscomponentview and isembeddedview test fix ,fix
11556,upgrade fix upgrade component closure optimization scope and element are passed to angularjs which is not optimized together with the app that mean property must be quoted to prevent renaming ,fix
11557,compiler fix identifier name of emptymap emptyarray ,fix
11558,core call lifecycle hook for sibling in declaration order ,fix
11559,core move nodetype and providertype into nodeflags also remove ngreflect attribute for element property ,refactor
11560,compiler quote animation in renderertypev and skip if empty ,fix
11561,animation ignore trigger that are registered multiple time ,fix
11562,animation always create a new animationrenderer eg for no view encapsulation the delegate will always be the same nevertheless we still need to create a new animationrenderer per component attention this change will conflict with a local mod in g ,fix
11563,platformbrowser extract animation provider into separate file this is needed so that we can use them in a local modification in g attention this change will conflict with a local mod in g ,refactor
11564,languageservice fix tsconfig needed for languageservice rollup ,build
11565,core fix directive instantiation this issue wa discovered in g and the patch wa confirmed there we should add a test a a followup up change ,fix
11566,animation properly cache renderer and namespace trigger don ’ t use the animation renderer if a component used style encapsulation but no animation the animationrenderer should be cached in the same lifecycle a it delegate trigger name need to be namespaced per component type ,fix
11567,compilercli fix flat module import on window ,fix
11568,animation make module and bundle into plural animation ,refactor
11569,animation change noop noop ,refactor
11570,aio copy example code from angulario ,feat
11571,aio migrate content doc from angulario this content wa generated by a tool ,docs
11572,aio remove unused partial file ,docs
11573,aio support unannotated json example file ,feat
11574,aio remove unused extracttitlefromguides processor ,fix
11575,aio convert api and content doc to json ,fix
11576,aio include guide and tutorial in the doc generation ,feat
11577,aio remove unused getexamplefilename service ,fix
11578,aio support annotating json file with docregions this change allows the example writer to add docregion annotation to file that do not allow comment this is done by creating a clone of the file and adding annotated to the file name this new file can contain inline comment that can be used to annotate the doc region example packagejson name angulario version main indexjs repository gitgithubcomangularangulargit author angular license mit private true packagejsonannotated name angulario docregion version version enddocregion main indexjs repository gitgithubcomangularangulargit author angular license mit private true this region can then be referenced in example just like any other doc region example packagejson regionversion ,feat
11579,aio add suppress tag that is used in the api doc ,fix
11580,aio handle html docregions that do not end on the same line ,fix
11581,aio region parser error line number were off by one ,fix
11582,aio correctly handle empty region name ,fix
11583,languageservice support deep import bundling of language service ,build
11584,router add an option to rerun guard and resolvers when query change close close ,feat
11585,animation microtasks should not be timeouts ,fix
11586,platformserver update parse to v ,build
11587,compilercli add an outfile option to ngxin fix close close ,feat
11588,compilercli add a locale option to ngxin fix close ,feat
11589,compiler add a enablelegacytemplate option to support template when the enablelegacytemplate is set to false template tag and the template attribute are no more used to define angular template but are treated a regular tag and attribute the default value is true in order to define a template you have to use the ngtemplate tag this option applies to your application and all the library it us that is you should make sure none of them rely on the legacy way to defined template when this option is turned off false ,feat
11590,compiler introduce ngtemplate deprecate template and template attribute the rationale of this change is to improve the interoperability with web component that might make use of the template tag deprecation the template tag and template attribute are deprecated template ngfor ngforitems letitemlilitemplate li templatengfor let item of itemsli should be rewritten a ngtemplate ngfor ngforitems letitemlilingtemplate note that they still be supported in x with a deprecartion warning in development mode migration template tag or element with a template attribute should be rewritten a a ngtemplate tag ngcontent selector should be updated to referto a ngtemplate where they use to refer to a template ngcontent selectortemplateattr should be rewritten a ngcontent selectorngtemplateattr if you consume a component relying on your template being actual template element that is they include a ngcontent selectortemplateattr you should still migrate to ngtemplate and make use of ngprojectas to override the way ngcontent see the template ngtemplate projectastemplateattr while template element are deprecated in x they continue to work ,feat
11591,compiler misc add a test for directive on inline template ,refactor
11592,core change abstract class for interface breaking change because all lifecycle hook are now interface the code that us extends keyword will no longer compile to migrate the code follow the example below before component class somecomponent extends oninit after component class somecomponent implement oninit we dont expect anyone to be affected by this change close ,refactor
11593,common do not reference deprecated class in provider reference to ngfor are now an alias for ngforof instead of a derived class fix ,fix
11594,core enable new animation dsl also deletes old test that are not needed any more with the new view engine ,refactor
11595,core enable new view engine ,feat
11596,animation always remove element right away unless they have a leave animation ,refactor
11597,animation always flush animation when inserting child ,refactor
11598,animation defer the noop engine event deregistration ,refactor
11599,packaging properly build the coretesting bundle ,fix
11600,animation noop animation module and zone fix ,feat
11601,core view engine misc fix bug when detaching view from applicationref fix integration of adding ngreflect attribute in debug mode ,refactor
11602,core host binding and host listener for animation host binding listener for animation property should use the renderer of the component view ,fix
11603,aio upgrade to cli beta and md beta ,build
11604,aio redefine pipe test a a pending test to confirm code example ,test
11605,compilercli import shallow import to angularupgradestatic correctly fix ,fix
11606,animation support browser animation rendering ,refactor
11607,aio update dgenipackages to ,build
11608,tscwrapped use agreed on option name ,fix
11609,compilercli avoid generating unnecessary factory ,fix
11610,core don ’ t use switch fall through but rather multiple ifs v doe this internally any way this way we can also keep the existing dirty checking order which some apps sadly rely on ,refactor
11611,core conditionally disable test for the view engine ,refactor
11612,core view engine move handleevent function from view to element some version of typescript are super slow to compile function that contain a lot of if condition in them splitting the handle event expression per element is similar to what we did in the old codegen ,refactor
11613,compiler make view engine work with aot ,fix
11614,router do not finish bootstrap until all the route are resolved fix close ,fix
11615,router add an option to rerun guard and resolvers when query change close close ,feat
11616,make responseoptionsargs an interface close ,fix
11617,form add option to use browser native validation and angular form also renames ngnovalidate ngnovalidate close ,feat
11618,form introduce asyncvalidator interface close ,feat
11619,core make new inject optional for deps specified a injectiontoken fix ,feat
11620,router misc close ,refactor
11621,router add routeconfigloadstart and routeconfigloadend event ,feat
11622,router introduce routeconfigloaded event close ,feat
11623,platformwebworker integrate review feedback close ,fix
11624,platformwebworker cleanup ,refactor
11625,platformwebworker renderer v integration ,feat
11626,platformwebworker misc cleanup ,refactor
11627,router fix typo in canload interface doc comment ,docs
11628,aio replace take with more semantic first ,feat
11629,aio fill in navmap from current doc inventory a port of existing navigation not the final information architecture ,feat
11630,platformbrowser allow to mix shadow dom with non shadow dom allow to style component that don ’ t use shadow dom inside of component that do this reverts cfecafefeddbbbeaae and add a test for this case related to ,fix
11631,aio temporarily include ‘ content ’ folder among production asset ,feat
11632,upgrade prevent property renaming for inject switch to bracket notation for directivefactoryinject otherwise closure compiler will property rename it since the output type is any ,fix
11633,aio use cleanurls option rather than bruteforce rewriting rule the cleanurls option is smarter and look at header and mime type to route request correctly ,fix
11634,core fix typo in animation doc ,docs
11635,aio fix prod build fix push to staging ,fix
11636,compiler implement style encapsulation for new view engine included refactoring split the rendererv into a rendererfactoryv and a rendererv make the debugrendererv a private class in angularcore remove setbindingdebuginfo from rendererv but rename renderervsettext to renderervsetvalue and allow it on comment and text node part of ,feat
11637,animation multiple group animation should tallyup delay correctly ,refactor
11638,animation do not inherit past style into sub timeline ,refactor
11639,aio fix staging build travis config ,fix
11640,router fix broken link close ,docs
11641,router fix guard api doc ,docs
11642,platformserver default unspecified section of the url to empty string ,fix
11643,tscwrapped add an option to ngc to bundle metadata close ,feat
11644,aio add sidenav driven by navigation data ,feat
11645,platformserver read initial location from initialconfig if present ,fix
11646,platformserver reflect property to attribute for known element for serialization ,fix
11647,platformserver support angularhttp from angularplatformserver this change installs httpmodule with servermodule and override binding to service http request made from the server with the xhr npm package outgoing request are wrapped in a zone macrotask so they will be tracked within the angular zone and cause the isstable api to show false until they return this is essential for universal support of serverside http ,feat
11648,platformserver render style in app component instead of head this ensures when the tree is serialized to the client and the app is later bootstrapped the style tag created during serverside rendering are destroyed ,fix
11649,platformserver allow multiple instance of platformserver and platformdynamicserver ,fix
11650,compiler integrate compiler with view engine aspect di query content projection included refactoring use a number a query id use a bloom filter for aggregating matched query of nested element separate static v dynamic query part of ,feat
11651,platformserver add api to render module and modulefactory to string platformstate provides an interface to serialize the current platform state a a string or document rendermodule and rendermodulefactory are convenience method to wait for angular application to stabilize and then render the state to a string refactor code to remove defaultdoc from domadapter and inject document where it needed ,feat
11652,core suppress a closure compiler warning ,fix
11653,compiler generate shallow import compiler generated reference ,feat
11654,compiler integrate compiler with view engine change detection test work included refactoring make viewdataparentindex point to component provider index split nodetypeprovider into provider directive pipe make purepipe take the real pipe a argument to detect change order change detection directive prop renderer prop part of pr close ,feat
11655,aio support valuemodule symbol in the typescript source in the following syntax is used in the source import a viewutils from linkerviewutils import a viewengine from viewindex … export viewutils a ɵviewutils export viewengine a ɵviewengine the usage of export a wa not being recognised by dgeni it is now being recognised and a temporary dummy output file is being rendered later we will either ignore this doctype altogether or find a better way of rendering it ,fix
11656,compiler revert allow absolute style url this reverts commit baacaddcacbcfeecfddbd ,fix
11657,form getrawvalue should correctly work with nested formgroupsarrays closed pr close ,fix
11658,compiler add support for source map generation fix pr close ,feat
11659,platformbrowser should only add style with native encapsulation in shadow dom close pr close ,fix
11660,platformbrowser should not throw for debug attrs containing close pr close ,fix
11661,compiler improve error msg for unknown property on ngcontainerngcontent close pr close ,fix
11662,compiler improve error message for unknown element ,fix
11663,platformserver implement platformlocation for platformserver this give serverside apps a current url including hash but doesnt implement a state stack so backandforward navigation isnt possible pr close ,feat
11664,aio update to angularcore upgrade command used yarn upgrade angularcorecommoncompilerforms ,build
11665,aio update to angularclibeta ,build
11666,animation introduce angularanimation module pr close ,refactor
11667,compiler integrate compiler with view engine main integration test work part of pr close ,feat
11668,form test undefined a argument to form pr close ,test
11669,aio remove unnecessary hack from ee test may address ,test
11670,compiler disable noncomponents a an entry component pr close ,fix
11671,common added typed overloaded for asyncpipetransform breaking change class that derive from asyncpipe and override transform might not compile correctly use of async pipe in template is unaffected mitigation update derived class of asyncpipe that override transform to include the type parameter overload related to pr close ,feat
11672,compiler allow absolute style url close pr close ,fix
11673,compiler improve error message in aot compiler do not print the stack trace when the component is not declared in the module pr close ,fix
11674,compiler add target locale to the translation bundle pr close ,feat
11675,revert remove dot from jsonp callback name this reverts commit eeedcbaacd ,fix
11676,core remove changedetectorref paramter from keyvaluedifferfactory and iterabledifferfactory breaking change keyvaluedifferfactory and iterabledifferfactory no longer have changedetectorref a a parameter it wa not used and ha been there for historical reason if you call differfactorycreate remove the changedetectorref argument ,fix
11677,aio big move of doc related file all the doc related file docsapp docgen content etc are now to be found inside the aio folder the related gulp task have been moved from the top level gulp file to a new one inside the aio folder the structure of the aio folder now look like aio build gulp task content markdown file for devguides cheatsheet etc devguides cheatsheets transforms dgeni package template etc src app asset content html json build artifact produced by dgeni from aiocontent this dir is gitignoreded ee protractor test for the doc viewer app nodemodules dependency for both the doc viewer build and the dgeni stuff this dir is gitignoreded gulpfilejs task for generating doc and building deploying the doc viewer close ,build
11678,compiler load the translation bundle only once in the in html parser fix ,refactor
11679,core add isstable observable property to applicationref to indicate when it stable and unstable pr close ,feat
11680,changelog add changelog for beta ,docs
11681,release cut the beta release ,chore
11682,integration fix test previously the integration test were failing because concurrently foo doe not inherit the path env var more info this commit fix it by setting the path env var explicitly concurrently pathpath foo this commit also includes some minor refactoring of the integration test script move buildrelated operation to cilitebuildsh for consistency use yarn run instead of npm run inside packagejson script use global yarn since we are already using it for aio fix some travisfold statement ,build
11683,core change typedef of nodecheckfn to pas tsickle ,refactor
11684,core view engine fix perf regression make sure nodedefs don ’ t fall into dictionary mode use strategy pattern to add debug information check instead of constantly checking for isdevmode introduce a very light weight rendererv interface to not have duplicate code path for direct and non direct rendering the strategy pattern is implemented via the new service object part of pr close ,fix
11685,benchmark don ’ t force gc on the profile button this cause v to depotimize function permanently in same case ,fix
11686,upgrade unregister docheck watcher when destroying upgraded component pr close ,perf
11687,tscwrapped use tsickles new source map composition feature tsickle transforms typescript code which can change the location of code this can cause issue such a runtime stack trace reporting that error were raised on the incorrect line in the orginal source this change replaces the decoratordownlevelcompilerhost and the tsicklecompilerhost with tsickles tsicklecompilerhost which automatically composes tsickles source map with typescript source map so that line number are correctly reported at runtime pr close ,fix
11688,aio refactor docviewer w service component builder add basic functionality to fetch document and display them based on the v prototype ,feat
11689,compiler incorrect method reference pr close ,docs
11690,upgrade pas correct value to ngonchanges for interpolation binding previously the previousvalue and currentvalue argument passed to the simplechange constructor were swapped for interpolation binding this commit also refactors the code so that interpolation binding and property binding share the same implementation and fix some broken test that hide failure by allowing the exceptionhandler to swallow thrown exception pr close ,fix
11691,core fix typo replace than with then pr close ,docs
11692,router fix typo pr close ,docs
11693,compilercli prevent ngxin from emitting the compilation output fix pr close ,fix
11694,aio correctly render decorator doc this commit update the docgen to account for the change to the codebase for decorator there are actually three kind of call that create decorator makedecorator makepropdecorator makeparamdecorator also the actual documentation for each decorator is split between two exported symbol interface decoratorname contains the metadata field interface decoratornamedecorator contains a call member which hold the general description of the decorator this processor now identifies all three decorator type and pull the description of the callmember onto the main decorator doc description there are some outstanding interface in the angularangular project that need to be reexported from angularmodulesangularcoresrcmetadatats to ensure that the docgen is able to access them close ,fix
11695,zone fix whitespace around backtick code if there is no leading empty line then the markdown renderers get confused ,docs
11696,aio support guide authoring this commit implement various tag inline tag and change the markdown renderer to use rho this enables u to generate guide type document ,build
11697,aio add cookbook doc ,docs
11698,aio add example to test cookbook doc ,docs
11699,upgrade test projection on downgraded component with structural directive brings the test of to master pr close ,test
11700,core view engine integrate with componentfactory componentfactorys can now be created from a viewdefinitionfactory via reffactorycreatecomponentfactory this commit also split service into ref and rootdata change viewstate into a bitmask implement viewcontainerrefmove part of pr close ,feat
11701,compiler add integration like test to compiler unit test close pr pr close ,test
11702,build make fsevents an optional dependency in npm pr close ,fix
11703,aio refactor the protractor config use jasmine a framework instead of jasmine since angularprotractorbdeb jasmine is an alias for jasmine simplify the chromeoptions config by always setting if processenvchromebin is not defined binary will be ignored ,ci
11704,aio delete unused kruft ,feat
11705,aio switch local angularcli to angularcli karmaconf merge with angular cli change ,build
11706,aio add initial doc viewer with lot of fix from igor and ward ,feat
11707,changelog add changelog for beta ,docs
11708,release cut the beta release ,chore
11709,changelog add changelog for ,docs
11710,core view engine add missing di feature part of pr close ,feat
11711,core view engine remove viewdataparentdiindex instead calculate it on the fly part of ,refactor
11712,core view engine add support for onpush and detached view part of pr close ,feat
11713,core view engine add wrappedvalue support part of ,feat
11714,common datepipe par input string if it not a valid date in browser close close pr close ,fix
11715,common remove isdate from facade ,refactor
11716,contributing fix typo ,docs
11717,aio remove formatting and style from dgeni template much of the formatting wa hardcoded and copied from the old anguario jade file this give u a clean start also more use ha been made of include file to make the template easier to understand and manage ,build
11718,aio ignore exampleregion doc in keyword generation ,buid
11719,core view engine support content projection part of pr close ,feat
11720,common rename underlying ngfor class and add a type parameter note this affect the underlying class and should not affect usage deprecation the ngfor class is now deprecated use ngforoft instead important only the ngfor class is deprecated not the ngfor directive the ngfor and related directive are unaffected by this change a reference to the ngfor class generated from template will be automatically converted to reference to ngforoft without requiring any template modification trackbyfn is now deprecated use trackbyfunctiont instead migration replace direct reference to the ngfor class to ngforofany replace reference to trackbyfn to trackbyfunctionany breaking change a definition of iterablet is now required to correctly compile angular application support for iterablet is not required at runtime but a type definition iterablet must be available ngfor and now ngforoft already support iterablet at runtime with this change the type definition is updated to reflect this support migration add esiterablets to your tsconfigjson libs field part of pr close ,feat
11721,compiler generate type parameter for generic type reference ,feat
11722,tscwrapped record arity of generic class ,feat
11723,upgrade export version from upgradestatic pr close ,feat
11724,upgrade use shared code in downgradengcomponent this unified the implementation of dynamic downgradengcomponent and static downgradecomponent ,refactor
11725,upgrade respect hierarchical injector for downgraded component correctly wire up hierarchical injector for downgraded component in upgradestatic downgraded component inherit the injector of the first downgraded component up the dom tree this is similar to part of daa but for upgradestatic possible breaking change in order to enable more control over the wiring of downgraded component and their content which eventually allows better control over feature like injector setup and content projection it wa necessary to change the implementation of the directive generated for downgraed component the directive are now terminal and manually take care of projecting and compiling their content in the postlinking function this is similar to how the dynamic version of upgrade doe it this is not expected to affect apps since the relative order of individual operation is preserved still it is difficult to predict how every possible usecase may be affected ,fix
11726,upgrade allow nonelement selector for downgraded component this affect the dynamic version of upgrade and make it more consistent with the static version while removing an artificial limitation this commit also refactors the file layout and code in order to share code wrt to dowgrading component between the dynamic and static version ,feat
11727,upgrade return a function instead of array from downgradeinjectable this make it more consistent with the dynamic version of upgrade and make it possible to share code between the dynamic and static version this commit also refactors the file layout moving common and dynamicspecific file to common and dynamic directory respectively and renaming aot to static some private key used a angularjs di token have also been renamed but this should not affect apps since these key are undocumented and not supposed to be used externally breaking change previously upgradestaticdowngradeinjectable returned an array of the form j dep dep function factorydep dep now it return a function with an inject property j factoryinject dep dep function factorydep dep it shouldnt affect the behavior of apps since both form are equally suitable to be used for registering angularjs injectable service but it is possible that typechecking might fail or that current code break if it relies on the returned value being an array ,feat
11728,aio fix and enable ee test on travis ,ci
11729,compiler allow expression or function in extends fix pr close ,fix
11730,compiler only lex message that are needed by angular to avoid the lexer erroring on syntax not supported by angular pr close ,fix
11731,core view engine add debug information creates debug information for the renderer and also report error relative to the declaration place in the template part of pr close ,feat
11732,languageservice do not crash when angular can not be located fix pr close ,fix
11733,use params without requestoptions params ha been introduced in beta before new requestoptionsparams searchparams after params searchparams fix pr close ,fix
11734,router deprecate preservequeryparamsadd queryparamshandling pr close ,feat
11735,form fix formarray description close pr close ,docs
11736,form verify function passed into async validators return observable or promise ,fix
11737,common introduce isobservable method close pr close ,fix
11738,common add popstateevent interface close pr close ,fix
11739,form provide a method to compare option close pr close ,fix
11740,form async validator cancel previous subscription when input ha changed fix fix fix fix pr close ,fix
11741,closure suppress some closure compiler warning pr close ,fix
11742,form fix broken unit test ,fix
11743,form add equalsto validator pr close ,feat
11744,common add interface pipetransform to async pipe pr close ,fix
11745,router fix canactivatechild guard provided in a lazy loaded module close pr close ,fix
11746,router fix navigation from the root component ngoninit hook close pr close ,fix
11747,router fix canactivate redirect to the root on initial load close pr close ,fix
11748,form select show blank line when nothing is selected in ieedge close pr close ,fix
11749,ngmodelhandle ime event pr close ,feat
11750,developer add description of npmrun to run locally installed npm script pr close ,docs
11751,platformbrowser remove style node on destroy close pr close ,fix
11752,platformbrowser polishing ,refactor
11753,core add bootstrapped module into platform module list close pr close ,fix
11754,testing asyncfakeasyncinjectwithmodule helper should pas through context to callback function make sure that context this that is passed to function generated by test helper is passed through to the callback function enables usage of jasmine variable sharing system to prevent accidental memory leak during test run ,fix
11755,form add email validator close pr close ,feat
11756,upgrade allow closure advanced optimization in upgradecomponent get rid of the dynamic invocation style used in calllifecyclehook which would break under closure compiler advanced optimization related to pr close ,refactor
11757,core viewcontainerrefindexof doesnt throw error when empty pr close ,fix
11758,remove dot from jsonp callback name pr close ,fix
11759,publicapi change description docpublicapi change description benchpress ha been moved to angularangular in modulesangularbenchpress docspublicapi change description here mean other projectslike angularcli angular material and a we know benchpress project ha been moved to angularangular in modulesangularbenchpress it should not be other project ,docs
11760,doc update copyright year ,style
11761,compiler dont print warning from closure compiler fix ,test
11762,aio import zonejs in test ,test
11763,aio deploy from ci to staging ,ci
11764,core simplify reflectiveinjector by removing code for dart implementation reflectiveinjector previously used two strategy for resolving dependency these were to support the dart implementation but are no longer needed a result of this pr is there is no longer a dependency limit and the generated code is smaller pr close ,refactor
11765,abstract use abstract keyword where possible to decrease file size pr close ,refactor
11766,compiler fix missing translation handling pr close ,fix
11767,compiler allow missing translation close ,feat
11768,compiler add ability to get the context around a parselocation ,refactor
11769,core have different data type for each node also have a new node type for query this lead to le memory usage and better performance deep tree benchmark result depth createanddestroy view engine v current codegen purescripttime v scripttime v gc v ie faster when gc is also considered and about x le memory usage update unchanged part of pr close ,refactor
11770,common datepipe doesnt throw for nan fix pr close ,fix
11771,size use abstract keyword where possible to decrease file size ,refactor
11772,compiler do not parse xtb message not needed by angular fix pr close ,feat
11773,upgrade detect async downgrade component change this commit effectively reverts eff but for upgradestatic a it wa an invalid fix for that created a more significant bug which wa that change were not always being detected angular digest should be run inside the ngzone to ensure that async change are detected we dont know how to fix without breaking change detection at this stage that issue is triggered by async operation such a settimeout being triggered inside scope watcher function one could argue that watcher function should be pure and not do work such a triggering async operation it is possible that the original use case could be supported by moving the debounce logic into the watch listener function which is only called if the watched value actually change see pr close ,fix
11774,compiler improve error message in aot compiler previously aot compiler print stack trace when it fails to resolve new behavior aot compiler output the error message example pr close ,refactor
11775,integration add an env for testing closure build feat add an env for testing closure build buildnpm add dev dependency on yarn and remove dev prop for readability build refactor integration test runner ,test
11776,aio add initial angularcli scaffold add initial cligenerated app add material toolbar initial very rough sc setup lifted from angularmaterial initial routing scaffold w homepage ,feat
11777,aio run docstests in travis ,ci
11778,aio move docgen stuff from angulario ,build
11779,aio update node dependency for docgen ,build
11780,vanilla link do not need link tag ,docs
11781,router remove invalid jsdoc tag the selector tag are not valid dgeni should be able to extract this information from the directive annotation metadata ,docs
11782,core add query support to view engine part of close ,feat
11783,core view engine refactor runtime data structure in a better way in preparation for query ,refactor
11784,compiler allow empty translation for attribute fix ,fix
11785,ngcomponentoutlet add ngmodule support to ngcomponentoutlet directive allow ngcomponentoutlet to dynamically load a module then load a component from that module useful for lazy loading code then add the lazy loaded code to the page using ngcomponentoutlet close ,feat
11786,aio add angulario packagejson and yarnlock file close ,build
11787,changelog add changelog for beta ,docs
11788,release cut the beta release ,chore
11789,changelog add changelog for ,docs
11790,compiler run format ,style
11791,core add doc for animationstyles and animationkeyframe ,docs
11792,compiler add comment to warn about regexp change ref ,docs
11793,upgradestatic ensure upgraded injector is initialized early enough this change ensures that the upgraded angularjs injector is initialized before the application run block are executed close ,fix
11794,compiler fix regexp to support firefox fix close ,fix
11795,compiler in integrate review feedback ,refactor
11796,compiler in move dedup and placeholder mapping to the messagebundle it make implementing a serializer simpler a implementation do not have to care any more about message dedup and placeholder mapping ,refactor
11797,compiler in xmbxtb placeholder name can contain only az n there are restriction on the character set that can be used for xmb and xtb placeholder name however because changing the placeholder name would change the message id it is not possible to add those restriction to the name used internally then we have to map internal name to public name when generating an xmb file and back when translating using an xtb file note for implementors of serializer when writing a file the implementor should take care of converting the internal name to public name while visiting the message node this is required because the original node are needed to compute the message id when reading a file the implementor doe not need to take care of the mapping back to internal name a this is handled in the intohtmlvisitor used by the translationbundle fix b ,fix
11798,tscwrapped support of vinyl like config file wa added this feature wa implemented in order to provide easier way of use in gulp ,feat
11799,core export animation class required for renderer impl close ,fix
11800,common fix a typo on the datepipe api doc ,docs
11801,core add pure expression support to view engine part of ,feat
11802,core add event support to view engine part of ,feat
11803,upgrade support ngmodel in downgraded component ,feat
11804,core fix not declared variable in view engine in typescript referring to name doe not lead to an error a window also ha a property name ,fix
11805,core add initial view engine the new view engine allows our codegen to produce le code a it can interpret view definition during runtime the view engine is not feature complete yet but already allows to implement a tree benchmark based on it part of ,feat
11806,e fix bad merge of ,build
11807,doc add missing comment this is a loadbearing change to avoid duplicate license in closurecompiled bundle see ,chore
11808,changelog add changelog for beta ,docs
11809,release cut the beta release ,chore
11810,changelog add changelog for ,docs
11811,dont create a blob out of arraybuffer when type is applicationoctetstream close ,fix
11812,router enable loadchildren with function in aot close ,fix
11813,core remove an unused import in applicationref ,refactor
11814,changelog added reference to closed issue in changelog for informational purpose ,docs
11815,router routerlinkactive should not throw when not initialized fix pr close ,fix
11816,router clean up routerlinkactive pr close ,refactor
11817,build optionally build an e distro pr close ,feat
11818,tscwrapped accept any tsc command line option ,feature
11819,tscwrapped rewrite index import for closure compiler ,feature
11820,tscwrapped update tsickle to latest ,chore
11821,core add type information to injectorget introduce injectiontokent which is a parameterized and typesafe version of opaquetoken deprecation opaquetoken is now deprecated use injectiontokent instead injectorgettoken any notfoundvalue any any is now deprecated use the same method which is now overloaded a injectorgetttoken typetinjectiontokent notfoundvalue t t migration replace opaquetoken with injectiontoken and parameterize it migrate your code to only use type or injectiontoken a injection token using other token will not be supported in the future breaking change because injectorget is now parameterize it is possible that code which used to work no longer type check example would be if one injects foo but configures it a provide foo useclass mockfoo the injection instance will be that of mockfoo but the type will be foo instead of any a in the past this mean that it wa possible to call a method on mockfoo in the past which now will fail type check see this example class foo class mockfoo extends foo setupmock var provider provide foo useclass mockfoo function mytestinjector injector var foo injectorgetfoo this line used to work since foo used to be any before this change it will now be foo and foo doe not have setupmock the fix is to downcast injectorgetfoo a mockfoo foosetupmock pr close ,feat
11822,core opaquetokents injectiontokents must include subsequent sha ,refactor
11823,security allow calc and gradient function pr close also includes support for color notation in function argument common in gradient function ,feat
11824,changelog fix typo pr close ,docs
11825,upgrade detect async downgrade component change this commit effectively reverts effedffcbcaaa a it wa an invalid fix for that created a more significant bug which wa that change were not always being detected angular digest should be run inside the ngzone to ensure that async change are detected we dont know how to fix without breaking change detection at this stage that issue is triggered by async operation such a settimeout being triggered inside scope watcher function one could argue that watcher function should be pure and not do work such a triggering async operation it is possible that the original use case could be supported by moving the debounce logic into the watch listener function which is only called if the watched value actually change close pr close ,fix
11826,upgrade reorganise test layout ,test
11827,compilercli move calculateemitpath into compilerhost this is so that it can be overriden in an environment specific compilerhostlike within google to customize the output path pr close ,chore
11828,common support numeric value a discrete case for ngplural pr close ,fix
11829,animation fix internal jscompiler issue and aot quoting cl pr close ,fix
11830,spelling fix ,docs
11831,changelog add changelog for beta ,docs
11832,changelog add changelog for ,docs
11833,release cut the beta release ,chore
11834,releaseschedule add release schedule doc while authoring this document we agreed to pushing off the release by one week by adding one more rc week compared to the original plan we announced that rc would take month but then i did the calendar math incorrectly this schedule change will give community more time to test the release before we call it done and report any potential regression or unforeseen issue ,docs
11835,owner configure pullapprovecom ,chore
11836,compilercli avoid handling function in loadchildren a lazy load route path the change avoids the compiler cli internal api from mismatching the following case a lazy loading import nonlazyloadedmodule from nonlazyloadednonlazyloadedmodule export function getnonlazyloadedmodule return nonlazyloadedmodule export const route path somepath loadchildren getnonlazyloadedmodule the output of the check is later passed to routedeffromstring so it make sense to be only a string fix angularangularcli ,fix
11837,common remove some facade usage ,refactor
11838,test templatengcontainerdirectives remove outer div in test use ngcontainer instead of template where possible use instead of template tag or attr where possible fix ,refactor
11839,in translate attribute inside element marked for translation fix fix ,fix
11840,ngplural fix api doc fix ,docs
11841,compiler misc cleanup ,refactor
11842,router call resolver when upstream params change with this change the resolver is called when the parameter for the activated and any parent route change ie switching from teamsplayers to teamsplayers will now trigger any playerresolver ,feat
11843,router throw an error when navigate to nullundefined path close fix ,fix
11844,core add type information to differs change remove unused ondestroy method on the keyvaluediffer and iterablediffer deprecation collectionchangerecord is renamed to iterablechangerecord collectionchangerecord is aliased to iterablechangerecord and is marked a deprecated it will be removed in vxx deprecate defaultiterablediffer a it is private class which wa erroneously exposed deprecate keyvaluediffersfactories a it is private field which wa erroneously exposed deprecate iterablediffersfactories a it is private field which wa erroneously exposed breaking change iterablechangerecord is now an interface and parameterized on v this should not be an issue unless your code doe new iterablechangerecord which it should not have a reason to do keyvaluechangerecord is now an interface and parameterized on v this should not be an issue unless your code doe new iterablechangerecord which it should not have a reason to do original pr fix ,fix
11845,compilercli add support for more than level of nested lazy route this change add compiler cli support for any level of nesting for lazy route for example approotlazyloadedmodulelazyloadedmodulelazyloadedmodule where lazyloadedmodule is lazy loaded from lazyloadedmodule and lazyloadedmodule is lazy loaded from module lazyloadedmodule and lazyloadedmodule is lazy loaded from appmodule fix angularangularcli ,fix
11846,compiler avoid evaluating argument to unknown decorator fix ,fix
11847,router fix checking for object intersection ,fix
11848,languageservice support t plugin model ,feat
11849,compiler fix template binding parsing directive fix ,fix
11850,router routerlink mirror input target a attribute close ,fix
11851,ngcomponentoutlet add missing semicolon ,chore
11852,ngcomponentoutlet add ngcomponentoutlet directive add ngcomponentoutlet directive that can be used to dynamically create host view from a supplied component close take over pr ,feat
11853,ngtemplateoutlet make ngtemplateoutlet compatible with syntax breaking change deprecate ngoutletcontext use ngtemplateoutletcontext instead ,feat
11854,animation support function type in transition close close ,feat
11855,animation expose the triggername within the transition event close ,feat
11856,animation expose the element value within transition event ,feat
11857,changelog cherrypick release note into the master branch ,docs
11858,tscwrapped bump version number to beta this wa done in order for u to be able to publish tscwrapped a next tag on npm the next step is to change the build script to version and release angulartscwrapped together with all the other package ill create an issuepr for this ,chore
11859,changelog release note for beta ,docs
11860,release cut the beta release ,chore
11861,languageservice support typescript angularlanguageservice now support using typescript a the the typescript host typescript is now also partially supported in ngc but is not recommended a tsickle doe not yet support ,fix
11862,core animation no longer silently exit if the element is not apart of the dom ,fix
11863,core animation should blend in all previously transitioned style into next animation if interrupted ,fix
11864,common allow nullundefined value for ngfortrackby reverts a breaking change introduced in by fix ,fix
11865,common add an example how to bind multiple class based on a single parameter close ,docs
11866,form validatorsrequired properly validate array close ,fix
11867,common do not override locale provided on bootstrap close ,fix
11868,developer add linting section and correct command to verify api change ,docs
11869,core remove backwards compatibility of simplechange breaking change simnplechange now take an additional argument that defines whether this is the first change or not ,refactor
11870,compiler generate le code for binding to dom element detailed change remove uninitialized initialize change detection field with undefined we use viewnumberofchecks now everywhere a indicator whether we are in the first change detection cycle previously we used this only in a couple of place we keep the initialization itself a change detection get slower without it remove passing around throwonchange in various generated call and store it on the view a property instead change generated code for binding to dom element a follows before var currval selfcontextbgcolor if jitcheckbindingselfthrowonchangeselfexprcurrval selfrenderersetelementstyleselfelbackgroundcolorselfviewutilssanitizersanitizejitcurrval null null selfviewutilssanitizersanitizejitcurrvaltostring selfexpr currval var currval jitinlineinterpolate selfcontextdatavalue if jitcheckbindingselfthrowonchangeselfexprcurrval selfrenderersettextselftextcurrval selfexpr currval after var currval selfcontextbgcolor jitcheckrenderstyleselfselfelbackgroundcolornullselfexprselfexprcurrvalfalsejit var currval jitinlineinterpolate selfcontextdatavalue jitcheckrendertextselfselftextselfexprselfexprcurrvalfalse performance impact none seen checked against internal latency lab part of ,refactor
11871,benchmark make ftl benchmark use their own version of checkbinding ,refactor
11872,benchmark add detectchanges test for ng tree benchmark ,feat
11873,core remove reference to angular in dev mode warning ,fix
11874,http fix and extend sample for testingmockbackend fix sample for mockbackend and mockbackendconnections that were outdated also extend central sample for mockbackend to ease getting started ,docs
11875,compiler improve error message for undefined provider close ,fix
11876,compiler improve the error when template is not a string close close ,fix
11877,compiler clean up directive normalizer ,refactor
11878,compiler don ’ t throw when using analyzeforentrycomponents with user class fixed ,fix
11879,core fix api doc for contentchild and viewchildren move the documentation of the contentchild and viewchildren decorator so that they appear correctly on angulario close ,docs
11880,compiler query template element before their child fix close ,fix
11881,router update route snapshot before emit new value close ,fix
11882,in add extraction to integration spec close ,test
11883,in parse icu message while normalizing template fix inject the in specific htmlparser into the directive normalizer parse icu message while normalizing template normalize visit the content of icu message 🎄🎁🎅 ,fix
11884,compiler allow in attribute selector fix ,fix
11885,router fix lazy loaded module with wildcard route close ,fix
11886,tslint update tslint to x ,chore
11887,upgrade fiximprove support for lifecycle hook with the exception of onchanges all lifecycle hook in ng are called on the controller regardless if it is the binding destination or not ie regardless of the value of bindtocontroller this change make upgrade mimic that behavior when calling lifecycle hook additionally calling the oninit hook ha been moved before calling the linking function which also mimic the ng behavior ,fix
11888,router add an extra argument to candeactivate interface add a nextstate argument to access the future url from candeactivate before candeactivatecomponent t route activatedroutesnapshot state routerstatesnapshot observablebooleanpromisebooleanboolean after candeactivatecomponent t currentroute activatedroutesnapshot currentstate routerstatesnapshot nextstate routerstatesnapshot observablebooleanpromisebooleanboolean close ,feat
11889,compiler throw an error for invalid provider close ,fix
11890,router routerlink support of nullundefined close ,fix
11891,compiler generate proper reexports in ngfactoryts file to not need transitive deps for compiling ngfactoryts file note this check the constructor of injectable class more strictly eg this will fail now a the constructor argument ha no inject nor is the type of the argument a di token injectable class myservice constructordep string last part of close ,feat
11892,common add link to trackby doc ,fix
11893,example fix example path ,docs
11894,ngif fix typo ,docs
11895,testing improve misleading error message when dont call compilecomponents close ,fix
11896,changelog add changelog for beta ,docs
11897,release cut the beta release ,chore
11898,changelog add changelog for ,docs
11899,animation always recover from a failed animation step ,fix
11900,router should reset location if a navigation by location is successful close ,fix
11901,animation always quote string map key value in aot code ,fix
11902,compiler ignore import in comment refactorcompiler clean up style url resolver fixcompiler ignore import in cs comment close ,fix
11903,platformbrowser resolver merge conflict for tslint ,refactor
11904,upgrade support the docheck lifecycle hook in upgradecomponent ,feat
11905,common throw an error if trackby is not a function fixcommon throw an error if trackby is not a function close refactorplatformbrowser disable noconsole rule in domadapter ,fix
11906,core improve error message when component factory can not be found close ,fix
11907,changelog add changelog for ,docs
11908,npm update angular version in shrinkwrap file ,build
11909,compilercli support extracting the mesage bundle without writing a file ,refactor
11910,compilercli private in api for the cli also change the extractor api to align with the codegen api internal apis ,feat
11911,compilercli produce metadata for dts file without metadata fix fix fix ,fix
11912,compiler do not lex when interpolation is disabled doccompiler fix the icu expander api doc testcompiler add lexer and parser spec fixcompiler do not lex when interpolation is disabled fix ,fix
11913,common capitalize first letter of all word in titlecasepipe ,fix
11914,core fix typo close ,refactor
11915,upgrade fix registerforngtests fix an issue in registerforngtests where it pass a null a nginjector to bootstrapdone this cause a typeerror can not read property get of null to be thrown from bootstrapdone ,fix
11916,form refactor integration test to improve speed ,test
11917,in add a default example to xmb placeholder otherwise the tc would not be able to load the message ,fix
11918,animation allow player to be destroyed before initialized close close ,fix
11919,compiler format update ,refactor
11920,common fix ngif example ,docs
11921,compiler dont print stack trace on template parse error ,refactor
11922,build use bash string comparison operator ,fix
11923,developermd add easy way to publish personal snapshot build ,feature
11924,compiler store metadata of top level symbol also in summary this allows a build using summary to not need metadatajson file at all any more part of ,refactor
11925,changelog add changelog for beta ,docs
11926,compiler fix merge error in compilerhost ,fix
11927,compiler update to metadata version this change retracts support for metadata version the collector used to produce version metadata wa incomplete and can cause the aot compiler to fail to resolve symbol or produce other spurious error all library compiled and published with ngc will need to be recompiled and updated with this change ,fix
11928,testing add overridetemplate method close ,feat
11929,animationsaot always export noopanimationdriver ,chore
11930,compiler fix simplify a reference without a name close ,fix
11931,tscwrapped generate metadata for export without module specifier fix ,fix
11932,compiler propagate export when upgrading metadata to v ,fix
11933,compiler resolver should merge host binding and listener fix ,fix
11934,upgrade fix upgradeadapter example close ,docs
11935,upgradeupgradeadapter fix up reference to angularjs and angular ,docs
11936,upgrade enable angular unit testing of upgrade module new method upgradeadapterregisterforngtestsmodules declares the angular upgrade module and provides it to the angularmockmodule helper this prevents the need to bootstrap the entire hybrid for every test close ,feat
11937,upgrade fix downgrade content projection and injector inheritance full support for content projection in downgraded angular component in particular this enables multislot projection and other feature on ngcontent correctly wire up hierarchical injector for downgraded angular component downgraded component inherit the injector of the first other downgraded angular component they find up the dom tree close ,fix
11938,upgradeupgradeadapter use deferred helper making angular s compile asynchronous by chaining injector promise in linking function can cause flickering view in application ,refactor
11939,upgradeutil remove unused stringify method ,refactor
11940,compilertemplateparser export createelementcssselector this is needed in ngupgrade ,refactor
11941,upgrade add missing angular type info ,refactor
11942,core detectchanges doesnt work on detached instance close close ,fix
11943,animation throw error and normalize offset beyond the range of close close ,fix
11944,animation always run the animation queue outside of zone related close ,perf
11945,compiler emit quoted object literal key if the source is quoted feattscwrapped recored when to quote a object literal key collecting quoted literal is off by default a it introduces a breaking change in the metadatajson file a followup commit will address this fix close ,fix
11946,facade dont expect super to return a new error object in baseerror related to ,refactor
11947,form ensure selectmultiple retains selection if you bound an array to selectmultiple via ngmodel and subsequently changed the option to select from the ui would drop any selection made since by the user this wa due to selectmultiplecontrolvalueaccessor not keeping a reference to the new model array it generated when user interacted with the select control update code to keep the reference close close ,fix
11948,form introduce checkbox required validator close close ,fix
11949,core properly destroy embedded view attatched to applicationref fix ,fix
11950,internal api introduce an internal api for ngtools ,chore
11951,compiler generated cs file suffixed with ngstyle mirror factory which end in ngfactory close ,fix
11952,compiler make sure provider value with name property don ’ t break fix close ,fix
11953,in fix a typo in the reference xmb ,test
11954,upgrade fix failing test in browser which do not support raf close ,test
11955,browser provider update browser in sl and b ,ci
11956,compiler narrow the span reported for invalid pipe fix close ,fix
11957,languageservice correctly type undefined fix close ,fix
11958,languageservice warn when a method isnt called in an event close ,feat
11959,compiler xmb ph tag should not self close ,fix
11960,core update ondestroy description close ,docs
11961,languageservice treat string union a string fix ,fix
11962,location updating location doc and adding example close ,docs
11963,form add novalidate by default ,feat
11964,form fix validatorsminmaxlength with formarray fix ,fix
11965,create a copy of header when merge option close ,fix
11966,common export nglocalelocalization close ,feat
11967,domadapter remove logerror from loggroup ,fix
11968,check response body text against undefined ,fix
11969,router routerlink add tabindex attribute fix ,feat
11970,simplify urlsearchparams creation close ,feat
11971,commonn fix lint issue close ,refactor
11972,compiler support dotted property binding fix angularflexlayout ,fix
11973,selector add a test for dotted attribute name ,test
11974,compiler cleanup ,refactor
11975,compiler fix pr ,fix
11976,selector selectormatcher match element with not selector ,fix
11977,animation always cleanup player after they have finished internally close close ,fix
11978,router misc refactoring ,refactor
11979,compiler test in explicit id close ,test
11980,compiler digest method return inmessage id if set ,feat
11981,compiler add id property to inmessage ,feat
11982,platform browser introduce meta service ,feat
11983,router simplify regexp close close ,refactor
11984,router add support for query params with mulitple value close ,fix
11985,common add a titlecase pipe close ,feat
11986,compiler fix transpiled e code fix the inner class would transpile to a nested function declaration which is not allowed in e see ,fix
11987,tslint enable noinnerdeclarations ,build
11988,router use t type in resolve interface ,fix
11989,changelog fix a typo ,docs
11990,release update version of tscwrapped to ,chore
11991,changelog add changelog for ,docs
11992,release cut the release ,chore
11993,changelog fix typo aplicationref applicationref docschangelog fix typo aplicationref applicationref ,docs
11994,languageservice do not throw for invalid metadata fix ,fix
11995,set the default accept header fix ,fix
11996,languageservice remove incompletely used parameter from createlanguageservicefromtypescript fix ,fix
11997,router validate nested route fix ,fix
11998,tscwrapped have usererror display the actual error ,fix
11999,common unify export structure ,refactor
12000,compiler shortcircut expression with an index fix ,fix
12001,languageservice avoid throwing for invalid class declaration fix ,fix
12002,compiler serialize any staticsymbol correctly not matter in which context ,fix
12003,compiler replace isstaticsymbol with instanceof staticsymbol ,refactor
12004,router throw a better error message when angular is not bootstraped ,fix
12005,router make setuplocationchangelistener idempotent ,fix
12006,router code cleanup ,refactor
12007,router fix replaceurl on routerlink directive ,fix
12008,router fix skiplocationchanges on routerlink directive fix ,fix
12009,router cleanup routerlink ,refactor
12010,developer add anchor to source code formatting in contributingmdrules ha reference to developermdclangformat but anchor to clangformat is not present ,docs
12011,facade cache original format string ,fix
12012,cheatsheet correct hostbinding decorator example ,docs
12013,contributing fix styleguide link and typo ,docs
12014,build fix build location of compilercli esm module ,refactor
12015,router run guard every time when unsuccessfully navigating to the same url over and over again ,fix
12016,router allow specifying a matcher wihtout specifying a path fix ,fix
12017,router cleanup config ,refactor
12018,core correct hostlistener typo ,docs
12019,changelog add instruction for people that depend on the cache operator ,docs
12020,languageservice update to use compilerhost from compilercli ,fix
12021,compiler change ngc error handling do not print stack trace for user error print stack trace for compiler internal error ,refactor
12022,compiler include the summary of reexported module directive pipe only if these are not part of the source ,fix
12023,compiler read and write ngsummaryjson file when compiling library this feature extract the minimal information from the directivespipesmodules of the library into ngsummaryjson file so that application that use this library only need to be recompiled if one of the summary file change but not on every change of the library eg one of the template only work if individual codegen for library is enabled see the generatecodeforlibraries false option close ,feat
12024,compiler simplify ngmodulesymmarymetadata merge ngmoduleinjectorsummary and ngmoduledirectivesummary remove directiveloaders from the summary ,refactor
12025,common make sure the plural category exists fix ,fix
12026,routerremove unused parameter pathindex ,refactor
12027,compilercli refactor compiler host parameter ,refactor
12028,changelog move to it place in the chronological order ,docs
12029,changelog add changelog for ,docs
12030,changelog add changelog for rc ,docs
12031,release cut the rc release ,chore
12032,core update peer dep on zonejs to ,fix
12033,changelog add changelog for ,docs
12034,languageservice harden against partial normalization of directive ,fix
12035,compiler fix performance regression caused by bfe fix ,fix
12036,version take all of version string after patch version ,fix
12037,build record angular version in the dom ,feat
12038,compiler convert metadata class used in summary into interface part of ,refactor
12039,router add support for custom route reuse strategy ,feat
12040,compiler correctly evaluate reference to static function ,fix
12041,compiler remove unneeded field from metadata remove compileidentifiermetadataname moduleurl a well a compiletypemetadataname moduleurl and compilefactorymetadataname moduleurl ,refactor
12042,compiler drop old codegen test that run inside of testsh these test were hard to maintain and only yielded little value now that we have the full integration with typescript ,refactor
12043,tscwrapped still emit version metadata to allow to use new component in old setup ,fix
12044,tscwrapped set correct version number ,fix
12045,compilercli pin the version of tscwrapped ,fix
12046,common update datepipe to allow closure compilation quote the date format to prevent closure renaming these are specified a string in template using datepipes and also need to be quoted here ,fix
12047,core properly support inheritance inheritance semantics decorator list the decorator of the class and it parent in the ancestor first order only use the last decorator of each kind eg component constructor parameter if a class inherits from a parent class and doe not declare a constructor it inherits the parent class constructor and with it the parameter metadata of that parent class lifecycle hook follow the normal class inheritance model ie lifecycle hook of parent class will be called even if the method is not overwritten in the child class example eg the following is a valid use of inheritance and it will also inherit all metadata directiveselector somedir class parentdirective constructorsomedep somedep ngoninit class childdirective extends parentdirective close close ,feat
12048,common fix a typo in async pipe ,doc
12049,core remove unused import appid wa removed after x ,refactor
12050,core expose destroy method on viewref ,feat
12051,changelog add changelog for original sha bdbdcdfecedaa ,docs
12052,languageservice make link check pas ,fix
12053,compilercli fix path in source map to be relative the change look bigger than it really is because i reordered the property to match other tsconfigs we have the only real change is removal of sourceroot property fix ,fix
12054,lint dont allow consolelog enable tslint check for consolelog a a followup to ,refactor
12055,build update version of umd bundle fix ,fix
12056,upgrade remove settimeout from lifecycle hook test testupgrade remove unnecessary noerrorsschema testupgrade remove settimeout from lifecycle hook test close ,test
12057,languageservice add service to support editor ,feat
12058,animation blend in all previously transitioned style into next animation if interrupted close close ,fix
12059,closure quote date pattern alias quota the pattern alias to prevent closure renaming these are quoted in datepipe and also need to be quoted here ,fix
12060,compiler allow control of staticsymbol lifetime ,refactor
12061,ngupgrade small cleanup with testability api and resumebootstrap with nonstatic ngupgrade apps callback to whenstable were being invoked with the wrong context with nonstatic ngupgrade apps resumebootstrap wa being run outside the ngzone remove redundent whenstablecontext variable neither of the first two problem were actually causing bug a far a i know but they might have caused problem in the future inspired by but for nonstatic apps ,refactor
12062,upgrade call ng lifecycle hook ,fix
12063,changelog replace beta with beta ,fix
12064,compiler further minor fix ,refactor
12065,compiler reintroduce reflectorhost and move extractor into angularcompiler ,refactor
12066,comiler various cleanup ,refactor
12067,compiler renames nghost to compilerhost aotcompilerhostresolvefiletoimport to aotcompilerhostfilenametomodulename aotcompilerhosetresolveimporttofile to aotcompilerhostmodulenametofilename ,refactor
12068,tscwrapped collect all exported function and class and bump metadata version from to this is needed to resolve symbol without dts file this bump the version of the metadata from to this add logic into nghostts to automatically upgrade version to version metadata by adding the exported symbol from the dts file ,refactor
12069,compiler fix version of angulartscwrapped ,fix
12070,compiler move symbol extraction to aotcompiler ,refactor
12071,compiler add createaotcompiler factory also add more method to the aotcompilerhost loadresource resolvefiletoimport ,refactor
12072,compiler remove asset url these url were just relict from dart ,refactor
12073,compiler move finddeclaration into the staticreflector previously this wa part of the aotcompilerhost the aotcompilerhost is now also greatly simplified ,refactor
12074,compiler move staticreflector into angularcompiler and rename file srcruntimecompilerts srcjitcompilerts srccompilerts srcjitcompilerfactoryts srcofflinecompiler srcaotcompilerts part of ,refactor
12075,tscwrapped add option for closure compiler jsdoc annotation ,feature
12076,tool allow disabling annotation lowering ,feat
12077,build update packagejson version during build ,chore
12078,ci pin version of npm on circleci ,fix
12079,benchmark use sanitized style value ,fix
12080,router guard restor an incorrect url when used with skiplocationchange close ,fix
12081,router support redirects to named outlet close ,fix
12082,release cut the beta realse and add change log ,chore
12083,release cut angular ,chore
12084,tool fix error when running testsh ,fix
12085,compiler allows synchronous retrieving of metadata allows nonnormalized metadata to be retrieved synchronously related to ,refactor
12086,core support ngtemplateoutlet in production mode fix ,fix
12087,upgradestatic improve api doc with example close ,docs
12088,publicapi remove angular type from upgradestatic api ,chore
12089,example add upgradestatic example ,chore
12090,example support upgradestatic example ,chore
12091,router add a banner file for the router ,fix
12092,platformbrowser fix disabledebugtools ,fix
12093,ngupgrade make aot ngupgrade work with the testability api and resumebootstrap ,fix
12094,buildsh echo before building example ,build
12095,router should not create a route state if navigation is canceled close ,fix
12096,form remove facade ,refactor
12097,router remove a peer dependency from router to upgrade ,fix
12098,animation only pas in same typed player a previous player into webanimations close ,fix
12099,router remove angularupgrade peer dep ,chore
12100,remove all facade method from http module ,refactor
12101,tsickle support ctorparams in function closure see for context ,fix
12102,routerlink add skiplocationchange and replaceurl input ,feat
12103,core expose viewref a changedetectorref close this is helpful when manually dirty checking embedded view ,feat
12104,core add attachview detachview to applicationref this feature is useful to allow component embedded view to be dirty checked if they are not placed in any viewcontainer close ,feat
12105,animation retain styling when transition destination are changed close close ,fix
12106,select allow for null value in html select option bound with ngvalue close ,fix
12107,core remove dead code ,refactor
12108,platformbrowser enable aot close ,fix
12109,router register router with ngprobe ,feat
12110,compiler assert xliff message have translation fix close ,fix
12111,compiler improve xliff test ,test
12112,compiler update hash algo for xmbxtb file ,fix
12113,core fix placeholder handling in in prior to this commit translation were built in the serializers this could not work a a single translation can be used for different source message having different placeholder content serializers do not try to replace the placeholder any more placeholder are replaced by the translation bundle and the source message is given a parameter so that the content of the placeholder is taken into account also xmb id are now independent of the expression which is replaced by a placeholder in the extracted file fix ,fix
12114,core misc in fix ,fix
12115,core simplify in serializers code ,refactor
12116,core remove listwrapper from in ,refactor
12117,core fix a typo in the in integration spec ,test
12118,core xmb serializer us decimal messaged id fix ,fix
12119,core implement a decimal fingerprint for in ,feat
12120,return request url if it can not be retrieved from response close ,fix
12121,correctly handle response body for status code close fix ,fix
12122,xhrbackend remove facade ,refactor
12123,release cut the upgradefirebooster release ,chore
12124,lint enforce no var keyword rule ,chore
12125,use const and let instead of var ,refactor
12126,platformbrowser cache plugin resolution in the eventmanager close ,perf
12127,compiler generate safe access strictnullchecks compatible code fix ,fix
12128,router incorrect injector is used when instantiating component loaded lazily ,fix
12129,form add inline doc why ngmodel run a nd change detection run related to ,docs
12130,router routeisactive also compare query params ,fix
12131,router router should not swallow unhandled error close ,fix
12132,event provide the ability to register global hammerjs event close ,fix
12133,event remove facade and clean up ,refactor
12134,router avoid router initialization for non root component close close ,fix
12135,form remove facade ,cleanup
12136,router check if windowsconsole exists before using it ,fix
12137,core ngondestroy called before output event are detached close close ,test
12138,example upgrade to protractor close ,build
12139,compiler introduce summary for metadata this doe not yet introduce loading serialization of summary part of ,refactor
12140,form check if registeronvalidatorchange exists on validator before trying to invoke it close ,fix
12141,publish remove unneeded addlicensetorx ,build
12142,common no tz offset added by datepipe for date without time ,fix
12143,router throw an error when encounter undefined route ,fix
12144,router ignore null or undefined query parameter ,fix
12145,compiler never create compiledirectivemetadata with not loaded resource part of ,refactor
12146,compiler add span to templatebinding fixcompiler corrected error location for implicit template expression ,refactor
12147,playground use basejs from npm close ,chore
12148,playground make playground great again ,refactor
12149,tool harden colletor against invalid asts ,fix
12150,browserstack increase timeout to avoid failure relates to ,ci
12151,animation ensure animation work with webworkers ,fix
12152,compilercli add position data to static reflector error ,refactor
12153,router add support for custom url matcher close close ,feat
12154,router do not require the creation of emptypath route when no url left close ,fix
12155,compiler misc update ,refactor
12156,core map for attribute to htmlfor property this improves ergonomics a bit by allowing people to write label forctxproplabel this is similar to the existing class classname mapping close ,feat
12157,compilercli refactor import in codegen to enable rollup ,refactor
12158,animation ensure webanimations are caught within the angular zone close close close close close close close ,fix
12159,router add a provider making angularangular integration easier ,feat
12160,animation allow animation to be destroyed manually close close ,fix
12161,core apply host attribute to root element fix ,fix
12162,animation always normalize style property and value during compilation close close close ,fix
12163,datepipe handle empty string ,fix
12164,form getrawvalue return any instead of object ,fix
12165,compiler use the other case by default in icu message ,fix
12166,common inselectpipe selects other case on default ,fix
12167,core fix pseudoselector shimming fix fix ,fix
12168,ngclass throw a descriptive error when cs class is not a string fix ,fix
12169,compiler support more than interpolation fix ,fix
12170,common ngswitch don ’ t create the default case if another case match this also simplifies the implementation of ngswitch close close ,fix
12171,npm remove dependency on minimatch ,chore
12172,build remove unused buildutil ,chore
12173,urltreefix typourlsegment path property comment part path ,docs
12174,closure suppress two more closure compiler check in codegen ,fix
12175,animation always trigger animation after the change detection check this patch ensures that animation are run outside of change detection thus allowing for start and done callback to modify application data without causing a cycle loop close ,fix
12176,preserve header case when copying header ,fix
12177,upgradecomponent add support for require this commit also addsimprovesfixes some upgradecomponent test ,feat
12178,upgradecomponent addimprove support for lifecycle hook add support for the postdigest and ondestroy lifecycle hook better align the behavior of the onchanges and oninit lifecycle hook with angular x call oninit before prelinking always instantiate the controller before calling onchanges ,feat
12179,compiler dont convert undefined to null literal fix ,fix
12180,core ensure that component view that have no binding recurse into nested component view container ,fix
12181,core allow to query content of template that are stamped out at a different place previously if a templateref wa created in a viewcontainerref at a different place the content wa not query able at all with this change the content of the template can be queried a if it wa stamped out at the declaration place of the template eg in the following example the querylistchildcmp will be filled once the button is clicked component selector ‘ mycomp ’ template ‘ button vc click “ createview ” button ’ class mycomp contentchildrenchildcmp child querylistchildcmp contentchildrentemplateref template templateref viewchild ‘ vc ’ read viewcontainerref vc viewcontainerref createview thisvccreateembeddedviewthistemplate component template mycomp templatechildcmpchildcmptemplate mycomp class app close close ,fix
12182,contributingmd fix stackoverflow broken link url ,docs
12183,compiler minor cleanup ,refactor
12184,core don ’ t use domadapter nor zone for regular event ,perf
12185,compiler introduce direct rendering this allows to attach detach embedded view and projected node in a faster way ,perf
12186,platformbrowser don ’ t use domadapter any more but use the dom apis directly this also creates a separate serverrenderer implementation for platformserver a it previously reused the browserrenderer ,perf
12187,router advance a route only after it child have been deactivated close ,fix
12188,changedetection fix typochangedetectorstatus enum comment checkedonce checkonce ,docs
12189,common fix a typo in ngstyle api doc ,docs
12190,router resolve guard observables on the first emit ,fix
12191,enabledebugtools create angulartools by merging into contextng when using enabledebugtools the tool are merged into contextng to prevent ngprobe and ngcoretokens from being clobbered fix ,fix
12192,router correctly export concatmap operator in e ,fix
12193,closure suppress closure compiler suspiciouscode check in codegen ,fix
12194,compiler cleanup ,refactor
12195,core use arraypush arraypop instead of splice if possible ,perf
12196,compiler remove view factory use view class directly ,refactor
12197,compiler initialize rendercomponenttype eagerly this move the usage of appid into the domrenderer ,refactor
12198,compiler cleanup ,refactor
12199,compiler remove viewparentinjector ,refactor
12200,compiler rename appelement into viewcontainer ,refactor
12201,core don ’ t store view factory in templateref instead generate createembeddedview ,refactor
12202,compiler don ’ t use appelements for creating component view ,refactor
12203,compiler remove appelementinitcomponent ,refactor
12204,release cut vrc ,chore
12205,router reset url to the stable state when a navigation get canceled close ,fix
12206,router routerlink should not prevent default on nonlink element ,fix
12207,router candeactivate receives a wrong component close ,fix
12208,compiler support multiple component in a view container ,fix
12209,compiler remove unused constructor query support ,refactor
12210,compiler make viewdisposable array null if empty ,refactor
12211,compiler remove viewrootnodes and viewprojectablenodes they are replaced by generated visitor function viewvisitrootnodes viewvisitprojectablenodes ,refactor
12212,compiler inline viewcontentchildren ,refactor
12213,compiler inline viewviewchildren in generated code ,refactor
12214,compiler remove unused subscription in view ,refactor
12215,router call data observer when the path change ,fix
12216,compiler dedupe ngmodule declaration … this is important so that we don ’ t generate thing multiple time ,fix
12217,compiler don ’ t throw on empty property binding close ,fix
12218,platformbrowser clean up hammer gesture ,style
12219,playground update gesture playground to use latest hammerjs ,refactor
12220,lint extend linting to all module and tool ,chore
12221,core improve error when multiple component match the same element close ,fix
12222,lint replace enforcecopyrightheader rule with the native equivalent ,chore
12223,lint deduplicate tslint dependency ,chore
12224,package remove unused lodash and sortedobject ,chore
12225,npm clean up cleanshrinkwrap script ,chore
12226,test clean up testingpublicspec ,style
12227,pipe minor fix and improvement ,docs
12228,lint replace gulp checktask with tslint nojasminefocus rule fix ,chore
12229,lint replace duplicatemoduleimport rule with noduplicateimports ,chore
12230,lint add vrsource tslint rule dependency ,chore
12231,facade cleanup intl facade ,refactor
12232,core add the find method to querylist ,feat
12233,core removed extraneous interface from querylist test ,refactor
12234,router rerun resolvers when url change close ,fix
12235,router run navigation serialy close ,fix
12236,compiler don ’ t double bind function this fix a performance regression introduced by fbbcafecbbffaebacc also make property in the directive wrapper private so that closure compiler can minify them better ,fix
12237,compiler generate host listener in directivewrappers part of ,refactor
12238,upgrade spec cleanup ,refactor
12239,upgrade silent bootstrap failure fix ,fix
12240,changelog fix changelog title ,docs
12241,changelog update changelog with change in v ,docs
12242,release cut the beta release ,chore
12243,upgrade reexport the new static upgrade apis on new entry add upgradestaticumdjs bundle this allows depending on it without getting a transitive dependency on compiler breaking change four newly added apis in beta downgradecomponent downgradeinjectable upgradecomponent and upgrademodule are no longer exported by angularupgrade import these from angularupgradestatic instead ,refactor
12244,reset change semicolon to colon in code example the first code example for the reset function wa invalid a it ha a semicolon instead of a colon for the last property in the json object change the semicolon to a colon close ,docs
12245,compilercli fix type ,fix
12246,selector use map instead of object ,fix
12247,xsrf overwrite already set xsrf header ,fix
12248,compiler move host property into directivewrapper part of ,refactor
12249,compiler make argument in inlinearray optional ,refactor
12250,compiler extract createcheckbindingstmt into compilerutil part of ,refactor
12251,compiler minor cleanup ,refactor
12252,compiler extract expression evaluation and writing to renderer from viewcompiler this is needed to that directivewrappers can also use them later on part of ,refactor
12253,compiler introduce classbuilder part of ,refactor
12254,compiler set element attribute via one call this make the cost of using directive that have host attribute smaller part of ,refactor
12255,compiler extract bindingparser needed so that we can parse directive host binding independent of template part of ,refactor
12256,router export routerlinkactive w isactive property ,feat
12257,router preserve resolve data close ,fix
12258,router add a test showing how to handle resovle error ,tests
12259,router change router not to deactivate aux route when navigating from a componentless route ,fix
12260,router disallow component route with named outlet close ,fix
12261,router add a test to make sure candeactivate guard are called for aux route close ,fix
12262,router candeactivate guard are not triggered for componentless route close ,fix
12263,compilercli assert that all pipe and directive are declared by a module ,fix
12264,common minor correctionsimprovements for ngclass ,docs
12265,compilercli align example with style guide see the angular style guide section separate file name with dot and dash ,doc
12266,compiler walk third party module fix fix ,fix
12267,in extract extractor from extractin i put an extractor into your extract so you can extract while you extract this allows integrator to call extractor a a library also refactors extractor a bit so that caller need fewer argument or argument that are at the right semantic level the refactoring cause no function change ,refactor
12268,changelog fix minor typo ,docs
12269,changelog add changelog ,docs
12270,compiler dont access view local variable nor pipe in host expression fix close ,fix
12271,release cut the beta release and add changelog ,chore
12272,router do not update primary route if only secondary outlet is given ,fix
12273,router module loader should start compiling module when stubbedmodules are set ,fix
12274,router add a test verifying than navigationend is not emitted after navigationcancel ,cleanup
12275,router fix lazy loading triggered by redirects from wildcard route close ,fix
12276,router add support for ngng migration ,feat
12277,compiler introduce directive wrapper to generate le code for now only wrap the input property and call to ngoninit ngdocheck and ngonchanges of directive also group eval source by ngmodule part of ,refactor
12278,compiler don ’ t use the offlinecompiler in extractin ,refactor
12279,compiler remove private export all of angularcompiler is private so we can export everything we need directly ,refactor
12280,ci reenable browserstack test in ci ,chore
12281,ngupgrade add support for aot compiled upgrade application this commit introduces a new api to the ngupgrade module which is compatible with aot compilation primarily it remove the dependency on reflection over the angular metadata by introducing an api where this information is explicitly defined in the source code in a way that is not lost through aot compilation this commit is a collaboration between mhevery who provided the original design of the api gkalpak petebacondarwin who implemented the api and migrated the spec from the original ngupgrade test and alexeagle who provided input and review this commit is an starting point there is still work to be done add more documentation validate the api via internal project align the ngupgrade compilation of a directive closer to the real a compiler add more unit test consider support for async templateurl a upgraded component close ,feat
12282,tslintjson semicolon rule expects an array ,chore
12283,ci make browserstack test optional until they are fixed ,chore
12284,form range value need to be number instead of string ,feat
12285,datepipe support narrow form for month and weekday close ,feat
12286,form add ngpending cs class during async validation close ,feat
12287,form make parent a public property of abstractcontrol ,feat
12288,form added emitevent to abstractcontrol method featforms added emitevent to abstractcontrol method styleforms unified named parameter ,feat
12289,form add haserror and geterror to abstractcontroldirective allows cleaner expression in templatedriven form before labelusernamelabelinput nameusername ngmodel required usernamengmodel div ngifusernamedirty usernamecontrolhaserrorrequiredusername is requireddiv after labelusernamelabelinput nameusername ngmodel required usernamengmodel div ngifusernamedirty usernamehaserrorrequiredusername is requireddiv fix ,feat
12290,benchmark add large form benchmark this benchmark track the generated file size for large form a well a the time to create and destroy many form field ,feat
12291,benchmark fix method name in targetable spec ,fix
12292,form validatorpattern accepts a regexp ,feat
12293,compiler dont redeclare a var in the same scope this is not allowed by closure compiler ,fix
12294,animation generate aot code for animation trigger output event close close ,fix
12295,make normalizemethodname optimizercompatible normalizemethodname reflectively accessed the requestmethod enum with a smart optimizer property from the enum could be removed or renamed and so user code just passing in eg patch might not work this change fix the code to be more explicit and avoids the optimizer issue ,fix
12296,core delete unused reflector code ,refactor
12297,core fix decorator defalut value ,fix
12298,core fix property decorator fix ,fix
12299,core cleanup decorator ,refactor
12300,core simplify cleanup reflection ,refactor
12301,router correctly export filter operator in e ,fix
12302,use httprequest for all http shorthand method ,refactor
12303,router attribute notation for string path either bind an expression or use the attribute notation the mixed way routerlinkpath wont work prefer the attribute notation for stringonly path ,docs
12304,contributingmd fix typo reproduction reproduction ,docs
12305,ngswitch fix mismatched tag in example ,docs
12306,changelogmd remove incorrect link ,docs
12307,form added missing selfonly test ,test
12308,ngif minor improvement ,docs
12309,common remove redundant type ,refactor
12310,animation ensure animation datastructures are created only when used close ,refactor
12311,benchmark update ngswitch to match ng use the same template layout text node use trackby both benchmark now show about the same perfs ,perf
12312,common optimize ngswitch default case relates to ,perf
12313,changelog fix typo in code name ouch ,docs
12314,changelog tweak the change log and group all the change together ,docs
12315,compiler allow w a ngcontent content ,fix
12316,upgrade compileroptions in bootstrap ,feat
12317,router fix canactivatechild api doc fix ,docs
12318,compilercli dont clone static symbol when simplifying annotation metadata ,fix
12319,core cleanup decoratorsts ,refactor
12320,compiler add optional visit to templateastvisitor ,refactor
12321,compiler expose template parser phase ,refactor
12322,core cleanup spyobject ,refactor
12323,animation document enter and leave transition alias ,docs
12324,compiler improve type misc ,refactor
12325,upgrade unify spec code replace all variable declaration using var by const or let replace e function declaration by arrow function where applicable ,refactor
12326,form allow optional field with pattern and minlength validators ,fix
12327,compiler properly shim hostbefore and hostbefore fix ,fix
12328,compiler add optional visit to html ast visitor ,refactor
12329,compiler template element ast ha endsourcespan ,refactor
12330,publicapi fix missing backtick ,docs
12331,platformbrowserdynamic mark platformbrowserdynamic a stable api everyone building angular apps need to use this api to bootstrap or aot compile so it cant be experimental ,fix
12332,compiler validate hostbinding name relates to ,fix
12333,compiler attribute ast record span of the value ,refactor
12334,compiler refactor analyzemodules out of offlinecompiler ,refactor
12335,savedreplies order the reply a shown in github github sort the reply by reply name ,docs
12336,savedreplies add document with saved reply for our issue tracker ,docs
12337,ngzone merge ngzoneimpl and ngzone ,refactor
12338,compiler interpolation expression report the correct offset ,fix
12339,fix header initialization from header and object ,fix
12340,headersappend should append to the list ,fix
12341,move one header test inside the main describe ,refactor
12342,router improve error message ,fix
12343,router wildcards route should support lazy loading close ,fix
12344,router parent resolve should complete before merging resolved data close ,fix
12345,compilercli remove peerdependency on angularplatformserver there is no runtime dependency from the compilercli on angularplatformserver it wa most likely added to packagejson by mistake ,fix
12346,compilercli remove unused parse dependency from packagejson this wa added in error or is an obsolete dependency we dont need parse for the compilerclis runtime ,fix
12347,changelog fix mention backticks and a misplaced line ending docschangelog fix mention and backticks page and document were both incorrectly linking to github repository enter and leave in the feature section were missing backticks fix misplaced line ending ,docs
12348,form properly validate blank string with minlength ,fix
12349,core simplify reflector code add type ,refactor
12350,compiler module collector is reusable ,refactor
12351,facade inline stringwrapper ,refactor
12352,contributing remove reference to angular it just angular ,docs
12353,contributing update the submitting an issue section ,docs
12354,contributing update got a question or a problem section inspired by ,docs
12355,benchpress fix the license it not apache mit thats a mishmash of apache and mit ,chore
12356,routertestingmodule change module to import in example ,docs
12357,benchmark allow ngswitch benchmark to be used with aot ,fix
12358,benchmark add indexaot to support aot bootstrap note this only make sure it can compile the aot version but doe not yet use it in ee test ,refactor
12359,changelog tweak changelog ,docs
12360,changelog added changelog for rc ,docs
12361,triage add info about user pain frequency and severity label ,doc
12362,triage correct existing incorrect info ,doc
12363,readme remove incorrect download count badge npm doesnt currently support download count for scoped package so there is no replacement right now ,docs
12364,benchmark refactor to support aot bootstrap in g ,refactor
12365,form properly validate empty string with pattern ,fix
12366,traige update triaging doc ,docs
12367,shadowcss fix attribute selector in host and hostcontext fix a regression introduced in while fixing ,fix
12368,facade remove most of stringmapwrapper facade this change mostly automated by with some manual fix ,refactor
12369,header preserve case of the first init set or append fix ,fix
12370,ngmodule fixed doc for ngmoduleentrycomponents docsngmodule corrected the wording of the documentation of entrycomponents fixed some minor grammar issue docsngmodule remove redundant componentfactory mention docsngmodule restore componentfactorycomponentresolver link ,docs
12371,developermd fix typo on test section ,docs
12372,facade remove datewrapper ,refactor
12373,offline compiler fix expected output ,text
12374,astserializer fix serializing void tag ,test
12375,xlif fix x ctype name fix see ,fix
12376,in carriage return in serialized file ,style
12377,gh try to improve the issue template ,docs
12378,shadowcss support page and document cs rule fix ,fix
12379,shadowcss support quoted attribute value fix ,fix
12380,shadowcss add missing type ,refactor
12381,shadowcss fix hosttag and hostcontexttag fix ,fix
12382,browseradapter correctly remove style on ie fix ,fix
12383,browseradapter cleanup ,refactor
12384,cssselector misc cleanup ,refactor
12385,cssselector namevalue is not supported fix ,docs
12386,parse update to the latest version fix ,feat
12387,shadowcss support attrvalue with space fix ,fix
12388,shadowcss cleanup ,refactor
12389,directiveresolver test that a prop can have both input and hostbinding ,test
12390,directiveresolver cleanup ,refactor
12391,urlsearchparams change a behavior when a param value is null or undefined ,fix
12392,routerlinkactive optimised routerlinkactive active check code modify routerlinkactive to optimise performance by removing unnecessary iteration by replacing arrayreduce with arraysome the loop will break when it find an active link useful if used on the parent of a large group of routerlinks furthermore if a routerlink is active it will not check the routerlinkwithhrefs ,refactor
12393,facade inline isblank called with objecttype argument ,refactor
12394,animation provide alias for enter and leave transition ,feat
12395,upgrade bind optional property when upgrading from ng previously optional property of a directivecomponent would be wrongly mapped and thus ignored close ,fix
12396,form added formcontrol initialization information ,docs
12397,ngc allow reflectorhost passed a argument to codegeneratorcreate ,fix
12398,lint remove unused import this wa done automatically by tslint which can now fix issue it find the fixer is still pending in pr also i have a local bugfix for which cause too many import to be deleted ,chore
12399,compiler move detection of unsafe property for binding to elementschemaregistry ,fix
12400,compiler do not embed templateurl in view factory in nondebug mode fix ,fix
12401,facade remove useless facade ,refactor
12402,upgrade rename undeclared ng to ngcomponent ,docs
12403,doc removing addprovider from upgradeadapter the addprovider function in the upgradeadapter wa deprecated in this commit and ha been removed in final given this the documentation for downgrading ng provider for use in ng is invalid ,
12404,routerconfig add missing quote ,docs
12405,changelog fix wrong issue link ,chore
12406,compiler followup fix for pr original pr set to any but any is a tighter type and still work for snc enabled consumer of the emit ,chore
12407,exceptionhandler fix api doc fix ,docs
12408,travis increase node heap size to prevent oom on travis ,ci
12409,animation ensure animation inputoutputs are managed within the template parser close close related ,refactor
12410,changelog remove info about an internal change ,docs
12411,release vbeta ,chore
12412,changelog release note for beta ,docs
12413,upgrade allow attribute selector for component in ng which are not part of upgrade fix ,fix
12414,compiler emit a any instead of purely in snc mode ha type of never so we cast it to any to typecheck correctly see this is temporary workaround until we fully migrate the framework to t and strictnullchecks ,chore
12415,component api doc for encapsulation and interpolation ,docs
12416,common cleanup ,refactor
12417,core mark testbed a stable api and add preliminary doc testbed wa accidentaly ommited from the stable api list during the api sweep before final we do consider it to be stable ,docs
12418,contributing remove preview reference ,docs
12419,browserstack add safari ,ci
12420,templateparser clearer error message for on binding fix ,refactor
12421,issuetemplate update angular version field ,chore
12422,router update the router not to reset router state when updating root component ,fix
12423,form disable all radio with disable ,fix
12424,form support unbound disabled in ngmodel ,fix
12425,zonejs update to ,chore
12426,compiler safe property access expression work in event binding ,fix
12427,router update dts file ,feat
12428,router add router preloader to optimistically preload route ,feat
12429,form make setdisabledstate optional for reactive form directive close ,fix
12430,form add select control example ,docs
12431,node allow current node version node current is see ,chore
12432,common pipe code cleanup ,refactor
12433,offlinecompiler support older t version ,fix
12434,offlinecompiler do not provide in value when theyre not specified fix ,fix
12435,offlinecompiler cleanup ,refactor
12436,contentchild query descendant by default fix ,fix
12437,form add radio button example ,docs
12438,npm update fsevents to fix ,build
12439,injector api doc remove lone codeblock backticks the triple backticks in the markdown of the api entry are unbalanced ,docs
12440,doc fixed wording for ngmodule schema ,fix
12441,gulp fail on ddescribe iit left in test close ,build
12442,gulpfile cleanup add comment ,refactor
12443,compiler attributevalue selector change the seperator regular expression to ignore tilde which are followed by an equal sign close ,fix
12444,host fix the api example fix ,docs
12445,facade move ispromise to core private ,refactor
12446,common fix ngonchanges signature of ngtemplateoutlet directive ,fix
12447,metadataresolver throw componentmoduleid is not a string fix ,fix
12448,metadataresolver cleanup ,refactor
12449,benchpress add more type ,refactor
12450,benchpress normalize phase b into b and e into e this simplifies the perflog metric and prevents future error ,refactor
12451,benchpress support measuring scripttime and other metric of page reload eg for benchmark that measure page start time ,fix
12452,benchpress remove chrome v support ,refactor
12453,benchpress remove facade from chromedriverextension ,refactor
12454,api change to correct jade error in api doc gen ,docs
12455,readme update the note about rc ,docs
12456,release v proprioceptionreinforcement ,chore
12457,changelog add changelog for bug fix that landed between rc and ,docs
12458,core update dts file ,docs
12459,core doc for directive and component ,docs
12460,common add directive doc close ,docs
12461,core fix example ,docs
12462,core reexport query metadata decorator ,chore
12463,core update public api file ,chore
12464,core update query decorator doc ,docs
12465,core extract how to example ,docs
12466,pipe updated pipe documentation ,docs
12467,pipe move pipe example to the common folder ,docs
12468,core update public api file ,chore
12469,core update query decorator doc ,docs
12470,core extract how to example ,docs
12471,platformbrowser provide title service a part of the module fix ,fix
12472,di update doc on di ,docs
12473,lifecycle update doc for lifecycle hook ,docs
12474,example make them work with noimplicitany and declarationstrue ,fix
12475,example include in main tsconfigjson also rename examplestsconfigjson into examplestsconfigbuildjson so that it doe not shadow the main tsconfigjson in editor also add noimplicitany and declaration examplestsconfigjson ,build
12476,example fix tsconfig ,build
12477,shadowcss remove a comment that trigger an issue with webpack fix ,refactor
12478,example fail buildsh if error are found ,build
12479,example work around protractor typing issue and fix existing type error this work around the typing issue until we have a build of protractor with typing that dont polute global type via ambient type definition ,build
12480,form add doc for formarray ,docs
12481,form add doc for formgroup ,docs
12482,form add doc for formcontrol ,docs
12483,form add doc for abstractcontrol ,docs
12484,npm roll back jasmine upgrade due to console reporter issue no longer print dot in the testsh node mode ,build
12485,form update doc for formbuilder ,docs
12486,core update doc for query metadata ,docs
12487,core add an example of using viewchildren ,docs
12488,core add an example of using viewchild ,docs
12489,core add an example of using contentchildren ,docs
12490,core add an example of using contentchild ,docs
12491,benchpress update packagejson and add publish script ,chore
12492,readme fixed visual of browserstack link instead of using a variable for the link of browserstack it wa using the direct link that caused to show the text and the link incorrect markdown moved the link to the bottom with the other link assignment it will now only show the blue text with the link to the browserstack ,docs
12493,upgrade correct the main entry path in packagejson ,fix
12494,release vrc ,chore
12495,changelog add release note for rc ,docs
12496,core make name in pipe non optional ,fix
12497,core add a name to all decorator and other fix ,refactor
12498,core remove …metadata for all decorator and use the decorator directly breaking change all …metadata class have been removed use the corresponding decorator a constructor or for instanceof check instead example before new componentmetadata… after new component… note new component… worked before a well ,refactor
12499,core simplify decorator every decorator now is made of the following a function that can be used a a decorator or a a constructor this function also can be used for instanceof check a type for this function callable and newable a type that describes the shape of the data that the user need to pas to the decorator a well a the instance of the metadata the doc for decorator live at the followig place so that ides can discover them correctly general description of the decorator is placed on the decorator interface on the callable function definition property description are placed on the interface that describes the metadata produce by the decorator ,refactor
12500,form update doc for ngform ,docs
12501,form fix resetting radio close ,fix
12502,form support dot in control name in contains close ,fix
12503,npm update to jasmine close ,build
12504,npm update to rxjsbeta fix ,build
12505,zone upgrade to zonejs ,feat
12506,form add example apps for ngmodelgroup ,docs
12507,form add example apps for ngmodel ,docs
12508,localization bcp us hyphen a separator ,fix
12509,form add example app for formarrayname ,docs
12510,form update example for formgroupname ,docs
12511,form add example app for formcontroldirective ,docs
12512,form update example for formgroupdirective ,docs
12513,form add example app for formcontrolname ,docs
12514,router update publicapi ,chore
12515,router fix typo ,docs
12516,router update doc of the router lifecycle interface ,docs
12517,router update doc of routemodule and routertestingmodule ,docs
12518,router update routerstate doc ,docs
12519,router update router configuration doc ,docs
12520,router update doc of the router service ,docs
12521,router update doc for router directive ,docs
12522,common cleanup directive test ,refactor
12523,common cleanup directive ,refactor
12524,form rename validator change fn due to conflict close ,fix
12525,test add missing import ,fix
12526,common cleanup strip deprecated doc ,refactor
12527,test simplify code ,refactor
12528,ngclass cleanup readability ,refactor
12529,form clear error on disable close ,fix
12530,github update issue template to hide comment wrap additional description in comment so that they are hidden in created issue only visible during editing ,chore
12531,testbed fix to current packageing ,docs
12532,build prevent package tsconfigs from shadowing main tsconfig ,fix
12533,cssselector fix getmatchingelementtemplate for void tag fix ,fix
12534,cssselector misc ,refactor
12535,github update pull request template fix link fix the link to the contribution guildelines commit message guidlines ,chore
12536,form fix disabled support for empty form container close ,fix
12537,animation allow group to be used a entry point for an animation trigger close close ,fix
12538,factoryprovider add missing backtick ,docs
12539,shadowcss fix perf regression fix ,fix
12540,ngc use the compilerhost to detect file existence ,fix
12541,cheatsheet fix typo ngmodule definition class and not class in j approach for ngmodule definition ,docs
12542,build test example directory with unit and ee test ,fix
12543,github update issue template ,chore
12544,router fix typo of segment name and odd quote ,docs
12545,compilemetadataresolver better error message ,style
12546,testsh clear dist directory when the script start this is to prevent stale file causing the test to fail when we run them locally after checking out a new revision ,build
12547,benchmark align tree benchmark with largetable benchmark add ngswitch benchmark to track ngfor over ngswitch measure create only createdestroy and update simplify the created dom always add a style binding ,refactor
12548,benchmark add targetable benchmark back ,feat
12549,lazyloading fix an issue with webpack and lazy loader the issue wa introduced in pr ,fix
12550,compiler error when ngmodulebootstrap contains undefined or null ,fix
12551,compiler correctly type event handler proxy function ,fix
12552,eventmanager remove listwrapper ,refactor
12553,changelog fix provider syntax fix ,docs
12554,domrenderer use const ,style
12555,offlinecompilertestsh lock down npm dependency ,test
12556,npm remove obsolete npm dependency i also removed an obsolete bundling script which depended on systemjsbuilder that i removed ,build
12557,git cleanup gitignore all obsolete path have been removed ,chore
12558,form support rebinding nested control ,fix
12559,domschema add missing element fix ,fix
12560,domschema improve readability by making the schema more explicit using interface name ,refactor
12561,ngc prepend a rootdir when assuming a file exists otherwise well later try to resolve the file under one of the rootdirs and wont find it ,fix
12562,router fixed example for routernavigate ,docs
12563,ngc propagate error to main ,fix
12564,publish shallow fetch to improve perfs depth ,build
12565,publish replace version placeholder in minjs file ,build
12566,form disabled control should never be invalid close ,fix
12567,benchmark add incrementaldom version of deep tree benchmark ,feat
12568,benchmark add baseline for deep tree that only used createelement ,feat
12569,benchmark add static tree benchmark ,feat
12570,router register ngmodulefactory object when lazily loading code user need to be able to get hold of the ngmodulefactory for systemjs environment the systemjs registry serf this purpose however other environment such a module compiled with closure compiler do not expose export object or a path based registry for these environment ngmodule object can include an identifier and the loading code can then pas loadmoduleidthen getngmoduleid to the router ,feat
12571,animation ensure parent animation are triggered before child ,fix
12572,cheatsheet complete the copy edit …and general cleanup of the cheatsheet ,docs
12573,core doc fix ,docs
12574,changelog add missing animation feature for rc ,docs
12575,changelog small fix ,docs
12576,changelog add note about required systemjs and karma config change ,docs
12577,router add changelog for rc ,docs
12578,release bump angular version to rc in packagejson ,chore
12579,changelog add changelog for rc ,docs
12580,platformwebworker remove trailing comma in packagejson ,fix
12581,compilercli update packagejson to tscwrapped ,fix
12582,router correct peerdependencies info in packagejson ,fix
12583,animation ensure animation callback are fired for embedded view ,fix
12584,tscwrapped correct the tsickle dependency in packagejson ,fix
12585,core dont require reflectmetadata shim when in aot mode ,fix
12586,core report error for missing di token correctly ,fix
12587,benchmark make setup nicer simplify and correct systemjs config remove deep import into ng package to work with bundle have separate ng and polymer bootstrap file ,refactor
12588,benchmark add polymerleaves benchmark ,feat
12589,benchpress also report the statistic in the generated file ,feat
12590,benchpress support chrome without this fix the scripttime wa always ,fix
12591,benchmark recreate setup for running benchmark ,fix
12592,benchpress make code compile and unit test green again ,fix
12593,templateparser disallow eventproperty binding even with the noerrorsschema close ,fix
12594,domschemaregistry detect invalid element ,fix
12595,bundle correct rxjs mapping in rollup config for umdes bundle ,fix
12596,webworkers move webworkers to separate angularplatformwebworker and angularplatformwebworkerdynamic package breaking change web worker platform is now exported via separate package please use angularplatformwebworker and angularplatformwebworkerdynamic ,refactor
12597,router fix type ,fix
12598,router fix up the exampesd ,docs
12599,router do not use rxaddoperator ,fix
12600,publish fix multiple umd file ,ci
12601,package use e module for primary build ,fix
12602,cheatsheet copy edit bootstrappingmd also remove dartspecific code since the dart cheatsheet is produced from dartlangangular ,docs
12603,cheatsheet copy edit classdecoratorsmd no copy edits to this one but i removed dartspecific code since the dart cheatsheet is produced from dartlangangular ,docs
12604,cheatsheet copy edit componentconfigurationmd also remove dartspecific code since the dart cheatsheet is produced from dartlangangular part of a group of cheatsheet pr see cc foxandxss igorminar ,docs
12605,cheatsheet copy edit builtindirectivesmd also remove dartspecific code since the dart cheatsheet is produced from dartlangangular ,docs
12606,router support guard navigating synchronously ,fix
12607,form support radio button with same name but diff parent close ,fix
12608,form update validity when validator dir change close ,fix
12609,validation add support to bind validation attribute this change enables to bind the validation attribute required minlength maxlength and pattern close ,feat
12610,closure prevent closure renaming of testability interface ,fix
12611,compiler replace compileidentifiermap with regular map close also rename compileidentifiermetadataruntime into compileidentifiermetadatareference also remove compileidentifiermetadataequalsto a now it is enough to just check the reference field for equality ,refactor
12612,compiler no longer us assetcachekey for token identity fix fix ,fix
12613,benchmark make tree benchmark work again ,refactor
12614,compiler make shadowcss shim work on android browser fix ,fix
12615,core update errorhandler test to handle browser without stack fix ,test
12616,shadowcss properly shim selector after host and hostcontext fix before the change original cs host foo bar foo bar translated to nghostshh foo bar foongcontentshh barngcontentshh note that foo and bar where not scoped and would then apply to nested component with this change those selector are scoped a they are without host you can explicitly apply the style to inner component by using or deep host foo ,fix
12617,ngc dont quote property in literal map closure compiler treat quoted property specially and doesnt rename them fix ,fix
12618,encode correct value for d ,fix
12619,compilercli make ngc to work on window fix ,fix
12620,urlparser stop setting default value true matrix params this wa already fixed recently for query params in ,fix
12621,example refactor forwardref example into a spec and unignore example spec ,refactor
12622,codegen add an error message when the locale is not provided ,feat
12623,tool make the test suite to pas on window ,test
12624,contributing remove documentation note ,chore
12625,errorhandler make rethrowerror internal so that the interface can be implemented ,fix
12626,error rename exception to error remove from public api breaking change exception are no longer part of the public api we dont expect that anyone should be referring to the exception type exceptionhandlercallexception any stacktrace any reason string void change to errorhandlerhandleerrorerror any void ,fix
12627,error rename exception to error remove from public api ,fix
12628,router merge artifact close close ,fix
12629,router add an option to disable initial navigation ,fix
12630,router add support for custom error handler ,feat
12631,router make routerlink and routerlinkwithhref create url in a similar way ,refactor
12632,router use encodeuridecodeuri to encode fragment ,fix
12633,router fix the order of guard so canactivatechild run before canactivate ,fix
12634,router update the location before activating component ,fix
12635,in change default locale from enus to enus ,fix
12636,compiler handle invalid host binding and event ,fix
12637,in currencydatenumber pipe use injected locale ,fix
12638,dependency switch from esshim to corejs ,chore
12639,compiler allow tscwrapped to be compile with typescript ,fix
12640,template remove supporter deprecated var breaking change and var are not supported any more in expression use let varname could not be used any more on template use letname varname could not be used any more to create a reference use refname ,refactor
12641,form fix conflicting getter name ,fix
12642,form fully support rebinding form group directive ,fix
12643,core factoryproviders deps property should be optional ,fix
12644,core update stability marker for core apis ,docs
12645,router remove routerdirectives which were replaced by routermodule ,refactor
12646,upgrade mark upgrade apis a stable ,docs
12647,form remove formproviders formdirectives reactiveformproviders reactivedirectives all of these have been replaced by formsmodule and reactiveformsmodule ,refactor
12648,common mark platformbrowser and platformbrowserdynamic apis stable ,docs
12649,common rename urlchangeevent and urlchangelistener to locationchangeevent and locationchangelistener these apis are not expected to be used anyone hence im not documenting this change a a breaking ,refactor
12650,common mark all common apis except for in a stable ,docs
12651,common remove commondirectives commonpipes coredirectives that were replace with commonmodule ,refactor
12652,form updating example to avoid typeerror converting circular structure to json ,doc
12653,cheatsheet update javascript section ,docs
12654,closure replace property access accessing a property on the window object must be done with square bracket otherwise closure compiler may collide the symbol alias between the property and variable mapping also accessing the provide property must be done with dot syntax so that it can be renamed along with the code that declares such a property ,fix
12655,form add support for disabled control ,feat
12656,animation make sure animation callback report the totaltime close ,feat
12657,linker allow configurable module prefix and suffix ,feat
12658,core assigns an overriden name to constructor named constructor fix ,fix
12659,router canload should cancel a navigation instead of failing it ,fix
12660,restructure export so that we dont leak private factory function ref ,fix
12661,ngc allow codegen to skip over dts input ,feature
12662,compiler throw descriptive error meesage for invalid ngmodule provider fix ,fix
12663,core share private type through an exported interface instead of using declare namespace to share the type this allows the generated code to be compiled with closure with full optimization ,fix
12664,platformbrowser remove export for private symbol workeruiplatformproviders ,fix
12665,compiler correctly handle reference to static method fix ,fix
12666,router throw a helpful error when misusing forroot from a lazy module ,feat
12667,datepipe add ampm designator in description ,docs
12668,core remove deprecated componentdirectives and componentpipes breaking change previously deprecated componentdirectives and componentpipes support wa removed all the component and pipe now must be declarated via an ngmodule ngmodule is the basic compilation block passed into the angular compiler via compilercompilemodulesync or compilemoduleasync because of this change the compilercompilecomponentasync and compilecomponentsync were removed a well any code doing compilation should compile module instead using the apis mentioned above lastly since module are the basic compilation unit the ngupgrade module wa modified to always require an ngmodule to be passed into the upgradeadapters constructor previously this wa optional ,refactor
12669,core fix typo in private property name ,refactor
12670,coretesting remove deprecated testcomponentbuilder breaking change deprecated testcomponentbuilder wa removed please use testbed instead ,refactor
12671,platformbrowserdynamic removed testcomponentbuilder from resourceloadercache spec ,refactor
12672,compiler added strictmetadataemit option to ngc ngc can now validate metadata before emitting to verify it doesnt contain an error symbol that will result in a runtime error if it is used by the staticreflector to enable this add the section angularcompileroptions strictmetadataemit true to the top level of the tsconfigjson file passed to ngc enabled metadata validation for package that are intended to be used statically ,feat
12673,animation deport tcb away from animationland forever featanimations support animation trigger template callback refactoranimations deport tcb away from animationland forever ,refactor
12674,core update rxjs to beta ,feature
12675,animation add an onstart handler for animationplayer ,refactor
12676,ngc codegen allows strictnullchecks ,fix
12677,ngc comment out a private keyword in codegen workaround for b ,fix
12678,ngc support pathmapping using a separate reflector until we have comprehensive ee test it too risky to change the reflectorhost misko wrote before final but google us path mapping and need all import to be and all path to be canonicalized to the longest rootdir this change introduces a subclass of reflectorhost with override for method that differ after final or when we have good test well refactor them back into one class ,feat
12679,compiler only emit metadata for exported enums close ,fix
12680,formatting fix formatting for component fixture spec ,chore
12681,test remove fit in componentfixturespec ,fix
12682,core add noerrorsschema that allows any property to be set on any element often it is useful to test a component without rendering certain directivescomponents in it template because these directive require some complicated setup you can do that by using noerrorsschema testbedconfiguretestingmodule schema noerrorsschema this would disable all schema check in your test ,feat
12683,router add syntax sugar for confuguring routertestingmodule ,feat
12684,compiler do not autoinclude component declared a entry point ,fix
12685,router added additional router documentation including cheatsheet update ,docs
12686,test add componentfixture test remove old testcomponentbuilder test and keep relevant componentfixture test a componentfixturespec ,refactor
12687,zone bump zone version to this fix issue with microtasks being called too early in certain test ,fix
12688,fakeasync have fakeasync use proxy zone close it is possible for code in beforeeach to capture and fork a zone for example creating ngzone in beforeeach subsequently the code in it may chose to do fakeasync the issue is that because the code in it can use ngzone from the beforeeach it effectively can escape the fakeasync zone a solution is to run all of the test in proxyzone which allows a test to dynamically replace the rule at any time this allows the beforeeach to fork a zone and then it to retroactively became fakeasync zone ,fix
12689,inline httpproviders and jsonpproviders until the metadata collector can do it automatically ,fix
12690,deep copy for constructor using existing header when creating a new header object using an existing header object the existing header map is copied by reference therefore adding a new header value to the new header object also added this value to the existing header object which is not in accordance with the spec this commit alters the constructor to create a deep copy of existing header map and therefore unlink existing header from new header close breaking change any code which relies on the fact that a newly created header object is referencing an existing header map is now broken but that should normally not be the case since this behavior is not documented and not in accordance with the spec ,fix
12691,core throw a descriptive error when browsermodule is installed a second time via lazy loading such a configuration is unsupported and cause all kind of problem ,feat
12692,pipe remove bidi control char fix inconsistent result in edge v other browser close ,fix
12693,core removed test deprecated reference from runtimecompiler removed reference to testcomponentbuilder from runtimecompilerspects ,refactor
12694,ngc dont codegen foodngfactoryts from foodts ,fix
12695,form update reactive form integration test to use testbed ,test
12696,core remove deprecated function reflectiveinjectorfromresolvedbindings and resolvedreflectivebinding ,refactor
12697,core removed linker test reference to testcomponentbuilder removed reference to testcomponentbuilder from queryintegrationspects regressionintegrationspects securityintegrationspects viewinjectorintegrationspects ,refactor
12698,compiler move testtestbindings to testingtestbindings testbindings is used in core test case too but test should be private to the package so it should live in testing ,refactor
12699,various remove a few lingering but unused deprecated apis remove deprecated applicationcommonproviders a well a some internal apis that were deprecated ,refactor
12700,debug switch test from tcb to use testbed ,refactor
12701,directivelifecycle switch test from tcb to use testbed ,refactor
12702,metadata throw better error when component are passed to import or module are passed to declaration close ,fix
12703,core removed linker test reference to testcomponentbuilder removed testcomponentbuilder reference from ngcontainerintegrationspectts ,refactor
12704,router update stability label ,refactor
12705,security mark the various domadapters a unsafe part of ,docs
12706,core remove linker test reference to testcomponentbuilder removed testcomponentbuilder reference from projectionintegrationspects ,refactor
12707,platformbrowserdynamic rename cachedtemplateprovider to resourcecacheprovider fixplatformbrowserdynamic rename cachedtemplateprovider to resourcecacheprovider close breaking change cachedtemplateprovider is now renamed to resourcecacheprovider before j import cachedtemplateprovider from angularplatformbrowserdynamic after j import resourcecacheprovider from angularplatformbrowserdynamic rename xhr resourceloader ,fix
12708,core update public api ,feat
12709,router update router spec not to use testcomponentbuilder ,refactor
12710,testing add testbedget ,feat
12711,core update entrycomponentsintegrationspec not to use testcomponentbuilder ,refactor
12712,core update changedetectionintegrationspec not to use testcomponentbuilder ,refactor
12713,core update forwardrefintegrationspec not to use testcomponentbuilder ,refactor
12714,animation report error for missing hostlevel referenced animation close ,fix
12715,form update form label ,chore
12716,removed deprecated httpproviders and jsonpproviders breaking change previously deprecated httpproviders and jsonpproviders were removed see deprecation notice for migration instruction ,refactor
12717,core removing linker test reference to testcomponentbuilder removed reference to testcomponentbuilder from integrationspects ,refactor
12718,ngfor add documentation for ngfortrackby docsngfor add documentation for ngfortrackby wo prefix ,docs
12719,doc remove sentence for dart ,chore
12720,router explanation in code should be comment ,docs
12721,router fix mismatching of code and comment ,docs
12722,changelog added missing closing parenthesis ,docs
12723,animation remove deprecated trigger apis breaking change animation defined using an atsymbol prefix that are not property bound are now invalid html this is now invalid div flipflipstatediv change that to div flipflipstatediv breaking change animation that are not bound using the atsymbol prefix using animate must now be preixed using bindanimate html this is now invalid div animateflipflipstatediv is valid now div bindanimateflipflipstatediv close ,fix
12724,coretesting remove deprecated viewmetadata note that this doesnt actually remove all us but make them private ,refactor
12725,tsconfig emit decorator metadata so that tsc watch work with demo ,chore
12726,router remove deprecated apis ,refactor
12727,core remove deprecated bootstrap ,refactor
12728,in xliff integration ,feat
12729,xmlhelper declaration ,fix
12730,in xliff ,feat
12731,testing remove deprecated testing function remove testcomponentbuilder addproviders and withproviders these were deprecated in rc see the changelog for update information note this doe not actually remove the function but make them internal only they will be removed from the codebase entirely at a later time ,refactor
12732,router extend support for lazy loading child ,feat
12733,provider remove deprecated providerbind api close breaking change these form of provider are no longer accepted bindmyclasstofactory new providermyclass tofactory we now only accept provider myclass tofactory ,refactor
12734,form update templatedriven form test to use testbed ,test
12735,chore remove deprecated ngzoneerror breaking change previously deprecated ngzoneerror ha been removed ,refactor
12736,core removed deprecated query and viewquery breaking change previously deprecated query and viewquery were removed see deprecation notice for migration instruction ,refactor
12737,core remove deprecated dynamiccomponentloader breaking change previously deprecated dynamiccomponentloader wa removed see deprecation notice for migration instruction ,refactor
12738,testbed remove deprecated testbedreset ,refactor
12739,core remove previously deprecated systemjscomponentresolver and systemjscmpfactoryresolver breaking change previously deprecated systemjscomponentresolver and systemjscmpfactoryresolver have been removed please follow deprecation instruction to migrate your code ,refactor
12740,common remove us of deprecated testcomponentbuilder ngclassspec working through ngforspec finishing up ngforspec finish the rest of the spec convert pipe test ,refactor
12741,platform removed webworker and server deprecated apis ,cleanup
12742,router make routerlinkactiveoptions public ,fix
12743,core replace some for statement with mapreduce ,refactor
12744,core replace all var with const and let ,refactor
12745,core dont strip sourcemappingurl fix ,fix
12746,datepipe allow float for date pipe input ,fix
12747,outputast builtinmethodbind renamed to bind ,refactor
12748,form refactor form model test to three file ,test
12749,in provide localeid and nglocalization ,feat
12750,in update nglocallocalization ref ,fix
12751,common remove deprecated replacepipe breaking change previously deprecated replacepipe wa removed ,refactor
12752,core remove deprecated corebootstrap and coreloadandbootstrap breaking change previously deprecated corebootstrap and coreloadandbootstrap have been removed please follow deprecation instruction to migrate your code ,refactor
12753,applicationref remove all previously deprecated applicationref apis breaking change all previously deprecated applicationref apis have been removed please follow the deprecation instruction to migrate your code ,refactor
12754,platformref remove deprecated platformrefregisterdisposelistener disposed dispose breaking change previously deprecated platformrefregisterdisposelistener disposed dispose follow deprecation instruction to upgrade ,refactor
12755,ngupgrade remove deprecated addprovider breaking change previously deprecated upgradeadapteraddprovider wa removed see deprecation notice for migration instruction ,refactor
12756,core removed depricated disposeplatform breaking change previously deprecated disposeplatform wa removed see deprecation notice for migration instruction ,fix
12757,core removed deprecated property and event from metadata breaking change previously deprecated directivemetadatatypeproperties and directivemetadatatypeevents were removed see deprecation notice for migration instruction ,refactor
12758,facade removed unnecessary override and deprecation ,refactor
12759,core removed depricated lockrunmode breaking change previously deprecated lockrunmode wa removed see deprecation notice for migration instruction ,refactor
12760,testing override metadata subclass properly this fix an issue where testbedoverridecomponentmycomp would remove some property including provider from the component this wa due to the override not properly dealing with getter field on subclass ,fix
12761,ngc revert fixngc add an option to produce tspathmapping import this reverts commit beadfaeeeafbaeec ,fix
12762,core removed deprecated debugnodeinject breaking change previously deprecated debugnodeinject wa removed see deprecation notice for migration instruction ,refactor
12763,form remove deprecated form provider function breaking change the deprecated provideforms and disabledeprecatedforms function have been removed please import the formsmodule or the reactiveformsmodule from angularforms instead ,fix
12764,in add nglocalelocalization which return plural case given a locale ,feat
12765,in pas translation config directly into ngc ,feat
12766,router location change and redirects break the back button ,fix
12767,expose jsonpfactory for aot compilation ,fix
12768,security work around an escaping bug in ie ,test
12769,gh you never know ,docs
12770,form add ngform method that reset submit state ,feat
12771,sharedstyleshost remove setwrapper facade ,refactor
12772,extractormerger return error together with node a a parsetreeresult ,fix
12773,xmb add a space after icu message case ,style
12774,travis enable fast finish mode for optional mode travis ci run the optional task in waiting mode which mean that the whole build is only ready once the optional task are also ready eg this build lost about minute just from an optional mode the travis fast finish mode will mark the build a finished once all required task have finished ,ci
12775,router lazy loading keep refetching module ,fix
12776,core make ngprobe token pluggable ,feat
12777,router make routerconfig public ,feat
12778,return empty string if no body is present ,fix
12779,compiler generate temporary variable for guarded expression fix ,fix
12780,form fix reactive form api example ,docs
12781,in add an htmlparser decorator fixin merge retains attribute wo value featin allow attribute on ngcontainer ie in featin add an htmlparser decorator style clang format ,feat
12782,form remove deprecated form apis breaking change the deprecated form apis in angularcommon have been removed please update to the new form api in angularforms see angulario for more information ,fix
12783,build remove duplicate system declaration add it to a common dts prevents closure from complaining of duplicate declaration when compiled using tsickle to generate extern ,fix
12784,ngc allow ngc implementation to provide xhr ,feat
12785,form add control status class to form group ,feat
12786,facade missed a couple place in this let u skip srcfacadeexception when compiling module other than core ,chore
12787,type merge type and concretype into type close breaking change type is now typet which mean that in most case you have to use typeany in place of type we dont expect that any user application use the type type ,refactor
12788,import dont import exceptionhandler from facade this let u skip srcfacadeexception when compiling module other than core it prevents having many conflicting declaration ,chore
12789,metadata treat empty array of metadata like absent file ,fix
12790,test move public test apis to testbed completely remove deprecated testcomponentbuilder and friend ,refactor
12791,in icu placeholder are replaced by their translation they were replaced by the original message ,fix
12792,router support relative paramonly navigation ,fix
12793,ngc add an option to produce tspathmapping import this fix a regression in ,fix
12794,router android browser doe not support elementclick ,test
12795,router use objectisfrozen instead of relying on an exception ,test
12796,router increase karma timer and add polyfills for old browser ,test
12797,changelog update convetionalchangelog conventionalchangelogangular make breaking change message detection more forgiving ,chore
12798,router update changelog ,chore
12799,router bump up version number ,chore
12800,changelog add the ngmodel is now fully async note ,docs
12801,testing remove deprecated test setup function remove test setup function which were deprecated in rc see the changelog for rc for how to update in brief instead of setbasetestproviders use testbedinittestenvironment ,refactor
12802,changelog update change log to rc close ,docs
12803,in switch to sha for message fingerprinting ,feat
12804,extractormerger ignore implicit tag in translatable section ,feat
12805,extractormerger allow nested implicit tag ,feat
12806,release update packagejsons ,chore
12807,animation make sure hostprop animation deprecation is correctly emitted close ,chore
12808,cheatsheet update for rc ,docs
12809,cheatsheet add ngmodules doc to the cheatsheet ,docs
12810,ngupgrade to work with ngmodule we changed the bootstrap order create ngzone bootstrap ng inside ngzone and upgrade ng component to ng component bootstrap ng with ngzone note previous footgun behavior wa bootstrap ng first to extract ngzone so that ng bootstrap can happen in ngzone this meant that if ng bootstrap eagerly compiled a component which contained ng component then we did not have complete metadata ,fix
12811,ngupgrade convert the upgrade example to use ngmodules the example worked even before this change verifying that the fallbacklegacy mode work a well ,test
12812,ngupgrade add support for loading plagroundupgrade example without bundle ,test
12813,ngupgrade small cleanup ,style
12814,ngupgrade add support for ngmodules breaking change upgradeadapteraddprovider are now deprecated in favor of passing in an ngmodule into the adapter constructor before let upgradeadapter new upgradeadapter upgradeadapteraddprovidersmyprovidersarray after ngmodule provider myprovidersarray class mymodule let upgradeadapter new upgradeadaptermymodule ,feat
12815,router update dts file ,fix
12816,router add routeroot returning the root of router state ,feature
12817,router routeparent should work for secondary child ,fix
12818,router support outlet in nonabsolute position ,fix
12819,router fix matrix params check to handle special object ,fix
12820,add option method to http add option method to the http object which could be useful when using selfdescribing restful apis this close close ,feat
12821,linker prevent pollution of empty embeddedview context fix ,fix
12822,in remove circular dep ,refactor
12823,digestmessage take a inmessage ,refatcor
12824,in drop htmlmessage and create inmessage right away ,refactor
12825,in merge translation ,feat
12826,in misc update ,refactor
12827,in extractor array manipulation ,fix
12828,compiler htmlparser mlparser ,refactor
12829,form allow both patching and strict setting of value ,feat
12830,router fix type definition ,fix
12831,router absolute redirects should work with lazy loading ,fix
12832,router add segmentpath to the link dsl ,fix
12833,facade remove most facadeasync function ,chore
12834,playground clangformat ,chore
12835,regexpwrapper remove the facade ,refactor
12836,expressionparser undefined is undefined wa null ,fix
12837,expressionparser add support for this ,feat
12838,ngfor spec code cleanup ,refactor
12839,ngstylespec simplify ngstyle test ,refactor
12840,router allow navigation without updating the url ,feat
12841,linkercompiler rename const to avoid duplicate declaration currently in the linkercompilerts file the same identifier is used in two declaration typescript export type compileroptions … … export const compileroptions new opaquetokencompileroptions this break the api doc generation i ’ m surprised that this wa not flagged by the tsc the duplicate declaration wa introduced in ,fix
12842,ngtemplateoutlet simplify implementation ,refactor
12843,ngstyle add support for the styleunit notation close ,feat
12844,compiler use objectkeys instead of objectgetownpropertynames ,refactor
12845,benchpress clangformat and lint ,chore
12846,benchpress make benchpress compile also add compiling benchpress to the build script to verify that ,chore
12847,ngc gather metadata for opaquetoken fix ,fix
12848,router providerouter should use provideroutes ,fix
12849,compiler report reference to nonexported symbol includes fix to place now reported a error part of ,fix
12850,form export abstractformgroupdirective because form is exported see line of modulesangularformssrcformsts ie brexport form from directivesforminterface and method of form which are public have an abstractformgroupdirective parameter egbrformgetformgroupdir abstractformgroupdirective formgroup then it make sense for abstractformgroupdirective to be publicexported too in any case if it isnt exported then the api doc for form dont get generated properly ,fix
12851,router add queryparams and fragment to every activated route ,feat
12852,router add parent child firstchild to activatedroute ,feat
12853,router remove dead code ,refactor
12854,router support sibling module providing route ,feat
12855,compiler allow to use pipe inside of ngif fix ,fix
12856,compiler staticreflect now resolve reexported symbol fix ,fix
12857,core deprecate old method on applicationref breaking change applicationrefrun is deprecated use ngzonerun directly applicationrefinjector is deprecated inject an injector or use ngmodulerefinjector instead applicationrefzone is deprecated inject ngzone instead ,refactor
12858,core don ’ t use zonerun in applicationrefbootstrap applicationrefbootstrap is supposed to be run inside of ngdobootstrap method of the module that is bootstrapped and that method already run inside of the zone ,refactor
12859,core introduce appinitstatus this class allows any provider to know and wait for the initialization of the application this functionality previously wa tied to applicationref breaking change applicationrefwaitforasyncinitializers is deprecated use appinitstatusdonepromise appinitstatusdone instead ,refactor
12860,core introduce ngmodulebootstrap and ngdobootstrap method if a ngmodule ha a bootstrap property platformrefbootstrapmodule platformrefbootstrapmodulefactory will automatically bootstrap the component listed in there if such a property doe not exist platformrefbootstrapmodule platformrefbootstrapmodulefactory will try to call the method ngdobootstrapappref applicationref on the module class otherwise an error is reported ,refactor
12861,core introduce appbootstraplistener multi provider using the registerbootstraplistener easily lead to race condition and needed dependency on applicationref breaking change applicationrefregisterbootstraplistener is deprecated provide a multi provider for the new token appbootstraplistener instead ,refactor
12862,core use ngondestroy in provider note about the addition of beforeeachfakeasyncinject… in some test applicationref is now using ngondestroy and there is eager including all of it dependency which contain ngzone the additional fakeasync in beforeeach ensures that ngzone us the fake async zone a parent and not the root zone breaking change via deprecation applicationrefdispose is deprecated destroy the module that wa created during bootstrap instead by calling ngmodulerefdestroy aplicationrefregisterdisposelistener is deprecated use the ngondestroy lifecycle hook for provider or ngmodulerefondestroy instead disposeplatform is deprecated use destroyplatform instead platformrefdipose is deprecated use platformrefdestroy instead platformrefregisterdisposelistener is deprecated use platformrefondestroy instead plaformrefdiposed is deprecated use platformrefdestroyed instead ,refactor
12863,core introduce ngmodulerefdestroy and call ngondestroy on all provider ,feat
12864,core support ngondestroy on provider of a directive such provider also become eager a they will be instantiated anyways on destruction ,feat
12865,core collect lifecycle hook for all injectable class ,refactor
12866,fakeasync share zone between beforeeach and it this is needed for the case if a beforeeach instantiates ngzoneand the it us testcomponentbuildercreatefakeasync otherwise the ngzone will use the root zone a parent and testcomponentbuildercreatefakeasync will always return undefined a tick doe not forward promise created under the zone of ngzone ,fix
12867,pipe update inselectpipe api documentation ,docs
12868,form allow array a parent close ,fix
12869,cheatsheet add moduleid ,docs
12870,form add invalid prop to abstract control ,feat
12871,router make an outlet to unregister itself when it is removed from the dom ,fix
12872,router fix offline compilation by exporting providelocationstrategy ,fix
12873,router fix api doc ,docs
12874,form add get method for easy access to child control ,feat
12875,templateparser report empty expression fix ,fix
12876,core ensure ngfor only insertsmovesremoves element when necessary close close close close close ,fix
12877,browser provider update browser in sl and b ,ci
12878,router configure di correctly when using the old providerouter function ,fix
12879,core fix bootstrapmodule regarding zone and initializers this make bootstrapmodulefactory wait for promise returned by appinitializers also making bootstrapmodulefactory async ie now bootstrapmodule and bootstrapmodulefactory behave in the same way this ensures that all code from module instantiation to creating applicationrefs a well a calling appinitializers is run in the angular zone this also move the invocation of the initializers from the applicationref constructor into the bootstrapmodulefactory call allowing initializers to get a hold of applicationref see fix fix fix ,refactor
12880,core cleanup unused ngzone factory this factory wa only used when using corebootstrap coreloadandboostrap which is not supported any more ,refactor
12881,urlsearchparamsclone propagate the queryencoder ,fix
12882,urlparser stop setting default value true ,fix
12883,github remove reference to dart in the issue template ,chore
12884,rewrite for readable efficient ,refactor
12885,header should be caseinsensitive fix spec at ,fix
12886,xmbxtb support dtd ,feat
12887,test refine type ,refactor
12888,in move code around ,refactor
12889,in xtb serializer ,feat
12890,compiler rearrange file ,refactor
12891,in xmb serializer ,feat
12892,inast introduce an intermediate ast ,feat
12893,in message extractor fix ,refactor
12894,htmlast add a serializer ,test
12895,icu extract icu message ,feat
12896,router add a validation to make sure pathmatch is set correctly ,feat
12897,router add isactive to router ,feat
12898,router activateroute should expose it route config ,feat
12899,platformbrowser iemobile is badly detected when testing ,fix
12900,fix blob creation for android close ,test
12901,add typed array polyfill for ie ,test
12902,form normalize written value in numbervalueaccessor close ,fix
12903,compiler support default parameter in static reflector close ,feat
12904,testing introduce new testing api to support ng module breaking change deprecation withproviders use testbedwithmodule instead addproviders use testbedconfiguretestingmodule instead testcomponentbuilder use testbedconfiguretestmodule testbedoverride testbedcreatecomponent instead close ,refactor
12905,compiler introduce mockdirectiveresolversetdirective ,feat
12906,core introduce interface for constructor argument of decorator for directive component pipe ngmodule ,refactor
12907,compiler add mockpiperesolver ,feat
12908,core remove viewresolver and viewresolvermock the method on viewresolvermock have been merged into directiveresolver breaking change e user can no longer use the view… function to provide viewmetadata this mirror the removal of the view decorator a while ago ,refactor
12909,compiler added support for conditional expression expression evaluated by the static reflector can now support conditional expression close ,feat
12910,router update dts file ,fix
12911,router relax type defintion of route to improve dev ergonomics ,fix
12912,core fix offline detection in ngmodulefactoryloader ,fix
12913,router update router module to be offlinecompilation friendly ,fix
12914,form update dirty before emitting value change close ,fix
12915,compiler auto declare entrycomponents recursively close ,fix
12916,compiler report better error message for host binding close ,fix
12917,metadata fix typechecking with typescriptnext ,fix
12918,core support component without a selector component without a selector now get the selector ngcomponent directive without a selector will throw an error message close close ,fix
12919,compiler added support for reference to static field close ,feat
12920,use ngmodules for http ,refactor
12921,testing fix error message in test bed the api name in the error message wa wrong ,fix
12922,form improve ngmodel error message ,fix
12923,core only warn and auto declare undeclared entrycomponents this is needed to support existing application after final these warning will become error close ,fix
12924,core allow module provider to overwrite provider from modulewithproviders fix close ,fix
12925,staticreflector report method with decorator in propmetadata a well this wa the behavior of our regular reflector a well although the method name doe not imply this fix close ,fix
12926,facade add support for all thenables all object that have a then function will be considered promise ,feat
12927,router take advantage of the new way of configuring module ,refactor
12928,ngclass do not deconstruct class on element removal prior to this fix ngclass would remove all dynamic class when destroyed it essential that class are persisted such that removebased animation will still be stylistically correct this patch fix this issue close close ,fix
12929,router implement canload ,feat
12930,compiler treat custom element a unknown element by default close ,fix
12931,security only warn when actually sanitizing html previously angular would warn user when simply reencoding text outside of the ascii range while harmless the log spam wa annoying with this change angular specifically track whether anything wa stripped during sanitization and only report a warning if so fix ,feat
12932,compiler allow call to simple static method close ,feat
12933,form throw error if wrong control container for reactive form ,fix
12934,animation ensure animation detection doesnt rely on the body node close close close ,fix
12935,core change bootstrap of module and name of platform breaking change browserplatformbrowserdynamicplatform have been deprecated and renamed into platformbrowserplatformbrowserdynamic bootstrapmodule and bootstrapmodulefactory have been moved to be member of plaformref eg platformbrowserdynamicbootstrapmodulemymodule ,refactor
12936,core introduce ngmoduleschemas this allows angular to error on unknown property allowing application that don ’ t use custom element to get better error reporting part of breaking change by default angular will error during parsing on unknown property even if they are on element with a in their name aka custom element if you application is using custom element fill the new parameter ngmoduleschemas with the value customelementsschema eg for bootstrap bootstrapmycomponent schema customelementsschema ,refactor
12937,core introduce modulewithproviders module can now provider helper function that allow to import a module together with an array of provider part of ,feat
12938,staticreflector resolve value of function in the function context ,fix
12939,core rename precompile into entrycomponents part of breaking change componentprecompile wa renamed to componententrycomponents old property still work but is deprecated analyzeforprecompile wa renamed to analyzeforentrycomponents no deprecation ,refactor
12940,core change module semantics this contains major change to the compiler bootstrap of the platform and test environment initialization main part of close breaking change semantics and name of appmodule now ngmodule changed quite a bit this is actually not breaking a appmodules were not part of rc we will have detailed doc on ngmodule separately coreloadandbootstrap and corebootstrap cant be used any more without migration support use bootstrapmodule bootstrapmodulefactory instead all component listed in route have to be part of the declaration of an ngmodule either directly on the bootstrap module lazy loaded module or in an ngmodule imported by them ,refactor
12941,ng upgrade do not compile ng component until after ng bootstrap close and angularprotractor ,fix
12942,router make router provides work with cli and offline compilation ,fix
12943,form separate out test for reactive form ,chore
12944,router rename urlpathwithparams into urlsegment breaking change urlpathwithparams urlsegment urlsegment urlsegmentgroup ,feat
12945,router handle when both primary and secondary are emptypath and primary ha a child ,fix
12946,router advance query params and fragment after advanced route ,fix
12947,router handle url fragment when no url segment present ,fix
12948,router router link active should take all descendant into account ,fix
12949,router renames primaryoutlet into primary ,refactor
12950,htmllexer better hint on unclosed icu message error fix ,feat
12951,lexer code cleanup ,refactor
12952,testing componentfixture avoid extra schedulemicrotask dont schedule microtask to check for pending macrotasks when no one is waiting for a whenstable ,fix
12953,eventemitter optional emits the subjectnext is optional ,refactor
12954,testing correctly import ngmatchers some test case incorrectly rely on the side effect of other test case importing ngmatchers this commit fix this by making expect in coretestinginternal properly typed ,fix
12955,add contenttype override support for http request ,feat
12956,currencypipe use default intl formatting option when none provided fix ,fix
12957,tool remove unused file ,chore
12958,dart remove obsolete file update the doc ,chore
12959,security trust resource url a url resource url are strictly more trustworthy than plain url so trusting them maintains the same level of security while avoiding to break people when we downgrade a resource url context to a plain url context ,feat
12960,test enable lint make it green ,chore
12961,router throw when can not parse a url ,fix
12962,router handle url with only secondary toplevel segment ,fix
12963,security categorize track src a a regular url after security review it turn out we were too paranoid about track src it content is not actually active or dangerous fix ,feat
12964,add support for blob a a response type ,feat
12965,router routerlinkactive should only set class after the router ha successfully navigated ,fix
12966,router make an error message clearer ,refactor
12967,router navigation should not preserve query params and fragment by default breaking change previously both imperative routernavigate and declarative routerlink navigation would preserve the current query params and fragment this behavior turned out to be confusing this commit change it now neither is preserved by default to preserve them you need to do the following routernaviagenewurl preservequeryparams true preservefragment true a routerlinknewurl preservequeryparams preservefragmenta ,fix
12968,router remove unnecessary file from tsconfig ,cleanup
12969,router rename routertestmodule into routertestingmodule ,refactor
12970,testing add an explicit doasyncprecompilation step this remove the magic from the inject test helper that would inspect the current zone and would only work with our async test helper now inject is always synchronous and if you are using a module that requires async precompilation youre required to call doasyncprecompilation in your test this is part of the breaking change introduced with the swap to each test having an appmodule close close breaking change testinjector is now renamed to testbed before j import testinjector gettestinjector from angularcoretesting after j import testbed gettestbed from angularcoretesting ,fix
12971,router fix provider token ,docs
12972,numberpipe add string support fix ,feat
12973,testing add platform directive to the shim that keep setbasetestproviders running due to test using the setbasetestproviders stopped working with ambient directive such a ngif add them back in to keep the shim working ,fix
12974,router export navigation extra ,fix
12975,router lazy loaded component should use loaded injector ,fix
12976,router handle lastpathindex of emptypath route ,fix
12977,convert object passed to request into a string this remove a breaking change introduced with commit eaebdffbdfddfd where json object passed to request were not converted into string breaking change the behavior in this commit is the same a before pr the object sent with the request are converted to a string therefore there is no need for the user to take care of the serialization fix ,fix
12978,keyvaluediffer check for change fix ,fix
12979,differ cleanup ,refactor
12980,decorator cleanup ,refactor
12981,ngfor cleanup ,refactor
12982,ngswitch fix typo ngswitch to ngswitch ,docs
12983,router fix rollup config to properly set up rxjs ,fix
12984,router back button doe not work in ie and safari ,fix
12985,router expose initalnavigation and dispose so they can be used with webworkers ,fix
12986,router update the doc of locationpathstrategy ,docs
12987,router freeze params and queryparams to prevent common source of bug ,fix
12988,developer update ,doc
12989,router add extra validation for when route wa passed a array ,feat
12990,router lazilyloaded module should use loaded injector instead of the root one ,fix
12991,router guard and data resolvers can now return promise ,feat
12992,router add support for canactivatechild ,feat
12993,compiler query expression lambda should have dynamic type fix ,fix
12994,form improve no value accessor error message ,fix
12995,lint enable lint check for duplicate var ,chore
12996,router merge systemjsappmodulefactoryloader and systemjsallmoduleloader ,fix
12997,router do not fire event on duplicate location event ,fix
12998,router update current state and url before activating component ,fix
12999,compiler no longer writes length file outside of gendir fix ,fix
13000,platformbrowser remove testingee target the testingee util doe not belong in platformbrowser and wa never intended to be a public api move it out of that whole tree breaking change the following api wa never intended to be public and is removed j import verifynobrowsererrors from angularplatformbrowsertestingee consider using protractor console plugin ,fix
13001,exceptionhandler update code example in comment block to correct syntax error ,docs
13002,router added injectable decorator to router api example ,docs
13003,router fix syntax in code example of comment block ,docs
13004,share body logic between request and response ,refactor
13005,add support for arraybuffer add the buffer option to store response in arraybuffer improve the interface to get back response independently of the buffer type ,feat
13006,icu enable icu extraction even when when in is not used breaking change is used a a delimiter for icu message then it could not be used in text node should be escaped a before spansome valid textspan after spansome invalid textspan throw parse error spansome valid textspan ,feat
13007,htmllexer add test for and escaping ,test
13008,hmtllexer cleanup ,refactor
13009,lexer add type relates to ,refactor
13010,htmlparser correctly propagate the interpolation config across layer ,fix
13011,form add ability to reset form close close ,feat
13012,animation allow animation integration support into host params close close ,feat
13013,animation throw error when duplicate component trigger name are registered ,fix
13014,animation collect parser lookup error in the same place ,refactor
13015,syncasyncresult fix default async value ,fix
13016,router update routerlink dsl to handle aux route ,feat
13017,compiler catch exception in the logging of binding update fix ,fix
13018,datepipe remove hardcoded timezone close ,test
13019,platformbrowserdynamic add injectable annotation to xhrimpl otherwise closure compiled code will complain that the class is missing the annootation ,fix
13020,core dont use e spread operator when undefined is allowed workaround a closure bug where it doesnt produce the right code e operator when the array value can be undefined ,fix
13021,compiler ignore reference to declared module and unneeded type fix ,fix
13022,compiler generates function expression a returning any function expression are used in an expression context so untyped function expression should have any a the result type fix ,fix
13023,directiveresolver throw on duplicate input output name ,fix
13024,testing remove deprecated testing apis see for prior deprecation and how to update ,fix
13025,ngstyle remove duplicate input declaration fix ,fix
13026,testing reintroduce and deprecate setbasetestproviders this change reverts the removal of setbasetestproviders that wa introduced in defcfaaefbeb instead setbasetestproviders and the provider provided from angularplatformbrowserdynamictesting and angularservertesting will still work for the next release but are deprecated see defcfaaefbeb for how to upgrade ,fix
13027,form reenable form provider function for easier migration ,fix
13028,compiler fixed operator to shortcircut execution fix ,fix
13029,compiler collector collect enum value fix ,fix
13030,animation move mockanimationplayer back into core close ,refactor
13031,router not use reserved word a variable ,refactor
13032,animation ensure all child element are rendered before running animation close close close ,fix
13033,core deprecate corebootstrap platformpipesdirectives provider and componentresolver breaking change deprecation instead of corebootstrap create an appmodule and use bootstrapmodule instead of coreloadandbootstarp create an appmodule and use bootstrapmodulefactory instead of bootstrapworkerapp create an appmodule that includes the workerappmodule and use bootstrapmodule with the workerappplatform instead of bootstrapworkerui create an appmodule that includes the workeruimodule and use bootstrapmodule with the workeruiplatform instead instead of serverbootstrap create an appmodule and use bootstrapmodule with the serverdynamicplatform instead instead of platformpipes and platformdirectives provide platform directivespipes via an appmodule instead of componentresolver use componentfactoryresolver together with appmoduleprecompilecomponentprecompile or analyzeforprecompile provider for dynamic component creation use appmodulefactoryloader for lazy loading instead of systemjscomponentresolver create an appmodule and use systemjsappmoduleloader instead of systemjscmpfactoryresolver create an appmodule and use systemjsappmodulefactoryloader close ,refactor
13034,router add activate and deactivate event to routeroutlet ,feat
13035,router emptypath route should inherit matrix params ,feat
13036,router disallow root segment with matrix params ,fix
13037,core clean up platform bootstrap and inittestenvironment introduces compilerfactory which can be part of a platformref introduces workerappmodule workeruimodule servermodule introduces serverdynamicplatform for application using runtime compilation on the server change browser bootstrap for runtime and offline compilation see below for an example introduces bootstrapmodule and bootstrapmodulefactory in angularcore introduces new browserdynamicplatform in angularplatformbrowserdynamic change inittestenvironment which used to be setbasetestproviders to not take a compiler factory any more see below for an example breaking change migration from setbasetestproviders to inittestenvironment for the browser platform before import setbasetestproviders from ‘ angularcoretesting ’ import testbrowserdynamicplatformproviders testbrowserdynamicapplicationproviders from ‘ angularplatformbrowserdynamictesting ’ setbasetestproviderstestbrowserdynamicplatformproviders testbrowserdynamicapplicationproviders after import inittestenvironment from ‘ angularcoretesting ’ import browserdynamictestplatform browserdynamictestmodule from ‘ angularplatformbrowserdynamictesting ’ inittestenvironment browserdynamictestmodule browserdynamictestplatform for the server platform before import setbasetestproviders from ‘ angularcoretesting ’ import testserverplatformproviders testserverapplicationproviders from ‘ angularplatformservertestingserver ’ setbasetestproviderstestserverplatformproviders testserverapplicationproviders after import inittestenvironment from ‘ angularcoretesting ’ import servertestplatform servertestmodule from ‘ angularplatformbrowserdynamictesting ’ inittestenvironment servertestmodule servertestplatform bootstrap change appmodule module browsermodule precompile maincomponent provider … additional provider directive … additional platform directive pipe … additional platform pipe class mymodule constructorappref applicationref apprefbootstrapmaincomponent offline compile import browserplatform from ‘ angularplatformbrowser ’ import bootstrapmodulefactory from ‘ angularcore ’ bootstrapmodulefactorymymodulengfactory browserplatform runtime compile long form import browserdynamicplatform from ‘ angularplatformbrowserdynamic ’ import bootstrapmodule from ‘ angularcore ’ bootstrapmodulemymodule browserdynamicplatform close part of ,refactor
13038,templateparser add support for datatemplate attribute fix ,fix
13039,templateparser cleanup ,refactor
13040,form updatevalue for form group and form array close ,feat
13041,developer update building and testing instruction fix ,docs
13042,expressionchangedafterithasbeencheckedexception more meaningful error message fix ,feat
13043,api fix invalid doc link error were reported during api doc generation ,doc
13044,router add the analyzeforprecompile provider to make dev ergonomics better ,feat
13045,router encodedecode params and path segment ,fix
13046,router fix routerlinkactive to work with routerlink ,fix
13047,form export form directive array for offline compile ,fix
13048,core make lockrunmode a noop and deprecate it breaking change lockrunmode is deprecated and no more needed close ,refactor
13049,core add a deprecation message for using platformdirectives platformpipes compilerconfig xhr a regular provider in bootstrap we still support this via a hack but should remove this soon this also fix test for module directive pipe a they used directive pipe that were already present in the underlying platform ,refactor
13050,public api run buildsh before generating the api doc ,chore
13051,ngplural expression inside case fix ,fix
13052,router add routertestmodule ,feat
13053,router renamed routerappmodule into routermodule ,refactor
13054,animation change trigger binding syntax to function a a property binding animation trigger can now be set via template binding breaking change animation trigger expression within the template that are assigned a an element attribute eg prop are deprecated please use the angular property binding syntax eg prop when assigning property t this is now deprecated div triggerexpressiondiv do this instead div triggerexpressiondiv ,fix
13055,animation ensure all child element are rendered before running animation close close ,fix
13056,core allow to add precompiled token via a provider introduces the new analyzeforprecompile token this token can be used to create a virtual provider that will populate the precompile field of component and app module based on it usevalue all component that are referenced in the usevalue value either directly or in a nested array or map will be added to the precompile property close related to ,feat
13057,form add module for form and deprecatedforms close breaking change we have removed the deprecated form directive from the builtin platform directive list so apps are not required to package form with their app this also make form friendly to offline compilation instead we have exposed three module old api deprecatedformsmodule new api formsmodule reactiveformsmodule if you provide one of these module the default form directive and provider from that module will be available to you appwide note you can provide both the formsmodule and the reactiveformsmodule together if you like but they are fullyfunctional separately before t import disabledeprecatedforms provideforms from angularforms bootstrapapp disabledeprecatedforms provideforms after t import deprecatedformsmodule from angularcommon bootstrapapp module deprecatedformsmodule or t import formsmodule from angularforms bootstrapapp module formsmodule or t import reactiveformsmodule from angularforms bootstrapapp module reactiveformsmodule you can also choose not to provide any form module and run your app without form or you can choose not to provide any form module and provide form directive at will this will allow you to use the deprecatedforms api for some component and not others import formdirectives formproviders from angularforms component selector somecomp directive formdirectives provider formproviders class somecomp ,feat
13058,inpluralpipe update api doc example ,doc
13059,datepipe short timezone not displayed close ,fix
13060,compilercli correct homepage url in packagejson ,chore
13061,testing add implicit test module every test now ha an implicit module it can be configured via configuremodule from angularcoretesting to add provider directive pipe the compiler now ha to be configured separately via configurecompiler from angularcoretesting to add provider or define whether to use jit breaking change application provider can no longer inject compiler internals ie everything from angularcompiler inject compiler instead this reflects the change to bootstrap for module support faafffdedbcb compiler provider can no longer be added via addproviders withproviders use the new method configurecompiler instead platform directive pipe need to be provided via configuremodule and can no longer be provided via the platformpipes platformdirectives token setbasetestproviders wa renamed into inittestenvironment and now take a platformref and a factory for a compiler eg for the browser platform before import setbasetestproviders from ‘ angularcoretesting ’ import testbrowserdynamicplatformproviders testbrowserdynamicapplicationproviders from ‘ angularplatformbrowserdynamictesting ’ setbasetestproviderstestbrowserdynamicplatformproviders testbrowserdynamicapplicationproviders after import setbasetestproviders from ‘ angularcoretesting ’ import browsertestcompiler browserdynamictestplatform browserdynamictestmodule from ‘ angularplatformbrowserdynamictesting ’ inittestenvironment browsertestcompiler browserdynamictestplatform browserdynamictestmodule eg for the server platform before import setbasetestproviders from ‘ angularcoretesting ’ import testserverplatformproviders testserverapplicationproviders from ‘ angularplatformservertestingserver ’ setbasetestproviderstestserverplatformproviders testserverapplicationproviders after import setbasetestproviders from ‘ angularcoretesting ’ import servertestcompiler servertestplatform servertestmodule from ‘ angularplatformbrowserdynamictesting ’ inittestenvironment servertestcompiler servertestplatform servertestmodule related to close ,feat
13062,router clean up naming ,refactor
13063,router add routerappmodule ,feat
13064,router remove a circular dep ,fix
13065,build update build script to increase node heap size ,chore
13066,publicapi update public api ,chore
13067,router update the example app to use lazilyloaded module ,feat
13068,router add support for lazily loaded module ,feat
13069,core add addmodulefactoryloader ,feat
13070,api fix link ,docs
13071,compiler missing metadata file should result in undefined relectorhost threw an exception when metadata wa requested for a dts file that didnt have a metadatajson file changed it to return undefined fix ,fix
13072,compiler expression span information and error correction added error correction so the parser always return an ast added span information to the expression parser refactored the test to account for the difference in error reporting added test for error corretion modified test to validate the span information ,feat
13073,api fix broken example url ,docs
13074,animation ensure a null easing value is never used with webanimations close close ,fix
13075,core ensure cs parser us parsesourcespan to track ast location this commit also fix up any remaining todo comment close ,refactor
13076,gulp fix path for publicapi task on window ,build
13077,browser use appmodules for bootstrap in the browser this introduces the browsermodule to be used for long form bootstrap and offline compile bootstrap appmodule module browsermodule precompile maincomponent provider … additional provider directive … additional platform directive pipe … additional platform pipe class mymodule constructorappref applicationref apprefbootstrapmaincomponent offline compile import bootstrapmodulefactory from ‘ angularplatformbrowser ’ bootstrapmodulefactorymymodulengfactory runtime compile long form import bootstrapmodule from ‘ angularplatformbrowserdynamic ’ bootstrapmodulemymodule the short form bootstrap can now creates a module on the fly given directive pipe provider precompile and module property related change make sanitizationservice securitycontext public in angularcore so that the offline compiler can resolve the token move animationdriver to platformbrowser and make it public so that the offline compiler can resolve the token breaking change short form bootstrap doe no longer allow to inject compiler internals ie everything from angularcompiler inject compiler instead to provide custom provider for the compiler create a custom compiler via browsercompilerproviders and pas that into the bootstrap method ,feat
13078,core ensure cs parser us parsesourcespan to track ast location this commit also fix up any remaining todo comment close ,refactor
13079,form mark control container a touched when child control are touched ,fix
13080,datepipe passing hh to the datepipe close ,bug
13081,router handle router outlet in ngif ,fix
13082,router update link when query params change ,fix
13083,router rename global redirects into absolute redirects ,docs
13084,form use change event for select multiple ,fix
13085,router remove private and internal annotation ,fix
13086,form add test for multiselect and custom accessors ,test
13087,changelog clean up markdown for breaking change ,doc
13088,doc typo in comment correct a typo in comment ,fix
13089,router bump up version number ,chore
13090,router remove private and internal annotation ,fix
13091,router remove the precompile warning ,fix
13092,compiler fix cyclic dependency ,chore
13093,typescript make router compile with typescriptnext fix ,fix
13094,router bump up version number ,chore
13095,router update router change log ,chore
13096,core introduce appmodule main part for close ,feat
13097,changelog change log and packagejson to rc close ,docs
13098,router fix routerlinkactive to handle the case when the link ha extra path ,fix
13099,router redirect should not add unnecessary bracket ,fix
13100,router reexport router directive ,fix
13101,directive fix incorrect example code ,doc
13102,compiler make code easier to type check these change are needed for the g sync a we use a different versionsettings of typescript than on github close ,fix
13103,compiler report not existing file a error close ,fix
13104,router make the contstructor of the router service public ,fix
13105,router make router link work on nona tag ,fix
13106,security point user to doc when sanitization fails ,docs
13107,upgrade add peerdependency on platformbrowserdynamic close ,fix
13108,router add api doc ,docs
13109,form use formcontrolname on radio button when name is absent ,feat
13110,security security api doc update and fix stability marker for type ,docs
13111,public api update golden file broken by ,fix
13112,security allow empty cs value ,fix
13113,dont encode value that are allowed in query this implement a new class queryencoder that provides method for encoding key and value of query parameter the encoder encodes with encodeuricomponent and then decodes a whitelist of allowed character back to their unencoded form breaking change the change to http urlsearchparams serialization now prevent encoding of these character inside query parameter which were previously converted to percentencoded value the default encoding behavior can be overridden by extending queryencoder a documented in the urlsearchparams service fix ,fix
13114,compiler support sync runtime compile add new abstraction compiler with method compilecomponentasync and compilecomponentsync this is in preparation of deprecating componentresolver compilecomponentsync is able to compile component synchronously given all component either have an inline template or they have been compiled before also change testcomponentbuildercreatesync to take a type and use the new compilecomponentsync method also support overriding the component metadata even if the component ha already been compiled also fix in a better way breaking change testcomponentbuildercreatesync now take a component type and throw if not all template are either inlined are compiled before via createasync close ,feat
13115,router add pathmatch property to replace terminal ,feat
13116,router use componentfactoryresolver ,feat
13117,core split changedetectorstrategy into changedetectionstrategy and changedetectorstatus ,feat
13118,form emit statuschange when child control have async validator ,fix
13119,animation ensure void animation are triggered when an expression is omitted close close ,fix
13120,form make radio button selection logic more flexible close ,fix
13121,router implement data and resolve ,feat
13122,typing restrict angular to escollectionspromise ,chore
13123,router toplevels do not work in ngif ,fix
13124,router canceled navigation should return a promise that is resolved with false ,fix
13125,router handle empty path with query params ,fix
13126,router preserve fragment on initial load ,fix
13127,npm upgrade tsapiguardian to v close ,build
13128,security test for html element srcset part of ,test
13129,security allow more html element and attribute in sanitizers allow more element and attribute from the html spec which were stripped by the htmlsanitizer fix featsecurity allow audio data url in urlsanitizer testsecurity add test for valid audio data url featsecurity allow and sanitize srcset attribute testsecurity test for srcset sanitization ,feat
13130,domrenderer adding support for document fragment in svg foreign object ,feat
13131,changelog add backticks around html element so they actually render ,doc
13132,form async validatordirectives process observables correctly close ,fix
13133,form add select multiple accessor a builtin accessor ,fix
13134,form add support for formarrayname close ,feat
13135,form expose validatorfn and asyncvalidatorfn close ,feat
13136,testing remove wrapping of jasmine function instead the async function now determines whether it should return a promise or instead call a done function parameter importing jasmine function from angularcoretesting is no longer necessary and is now deprecated additionally beforeeachproviders is also deprecated a it is specific to the testing framework instead use the new addproviders method directly before j import beforeeachproviders it describe inject from angulartestingcore describemy code beforeeachproviders myservice itdoes stuff injectmyservice service actual test after j import addproviders inject from angulartestingcore describemy code beforeeach addprovidersmyservice itdoes stuff injectmyservice service actual test ,refactor
13137,coretesting compilertesting move testcomponentbuilder to coretesting testcomponentbuilder now life in coretesting compilertesting contains a private overridingtestcomponentbuilder implementation which handle the private behavior we need to override template this is part of the effort to simplify the testing import and hide compiler apis close breaking change testcomponentbuilder is now imported from angularcoretesting import from angularcompilertesting are deprecated before import testcomponentbuilder testcomponentrenderer componentfixtureautodetect from angularcompilertesting after import testcomponentbuilder testcomponentrenderer componentfixtureautodetect from angularcoretesting ,fix
13138,node enable source map in testsh node ,test
13139,form make valuechanges and statuschanges available on abstract control directive ,feat
13140,router bump up version number ,chore
13141,router clangformat ,chore
13142,router wildcard dont get notified on url change ,fix
13143,router default exact to false in routerlinkactiveoptions ,fix
13144,router add a test checking that you can use a slash in query params ,test
13145,router doent throw on candeactive when route hasnt advanced ,fix
13146,commontesting remove internal mocklocationstrategy from commontesting breaking change mocklocationstrategy wa intended to be internal only and is now removed from the angularcommontesting public api use spylocation from angularcommontesting for location testing ,fix
13147,coretesting move componentfixture to core breaking change componentfixture will be moving out of angularcompilertesting to angularcoretesting in this release for now it is deprecated from angularcompilertesting ,fix
13148,form ngmodel should emit valuechanges and statuschanges asynchronously ,fix
13149,router handle path redirects and match ,fix
13150,ngc work with typescriptnext this is required due to breaking change in t see ,fix
13151,testing upgrade tsapiguardian to ,chore
13152,changelog remove old changelog script and add gulp task ,build
13153,npm update conventionalchangelog dependency fix ,build
13154,coretesting clean up the core testing public api previously we were exporting internal mock and helper move these to coretestingtestinginternal or remove them if they were never used remove deprecated item injectasync clearpendingtimers breaking change remove the following apis from angularcoretesting which have been deprecated or were never intended to be publicly exported injectasync clearpendingtimers log mockappliacationhref mockngzone clearpendingtimers gettypeof instantiatetype instead of injectasync use asyncinject clearpendingtimers is no longer required ,fix
13155,platformbrowsertesting clean up public api for platformbrowsertesting mostly removing thing that were never intended to be exported publicy breaking change the following are no longer publicly exported apis they were intended a internal utility and you should use your own util browserdetection dispatchevent el normalizecss stringifyelement expect and custom matcher for jasmine ,fix
13156,platformbrowsertestingee clean up unused export from ee testing helper ,fix
13157,api clean up compilertesting api do not export mockxhr which is a private helper ,chore
13158,security simplify integration test ,test
13159,security ensure xlinkhref is not bindable the dom schema doe not allow binding any property to dangerous svg attributesproperties this change add a smoke test to verify that behaviour by testing that xlinkhref a sample dangerous property is not bindable fix ,test
13160,common add license header to localizationts ,fix
13161,security no warning when sanitizing escaped html ,fix
13162,core add componentprecompile and componentfactoryresolver part to close ,feat
13163,compiler dont inject viewproviders into content child element eg in the following scenario somedirective should not be able to inject any view provider that mycompwithviewproviders declares mycompwithviewproviders div somedirectivediv mycompwithviewproviders ,fix
13164,in inpipe us nglocalization and some refactoring ,refactor
13165,typing dont test compilercli typing on t ,fix
13166,core improve error message for broken binding fix close ,fix
13167,form add support for standalone ngmodel dirs inside form close ,feat
13168,ngc correct dependency for compilercli update compilercli dependency to include minimist and also increment tscwrapped to there is signature mismatch between tscwrapped v collectorjsgetmetadata and compilercli reflectorhostjsgetmetadatafor that caused an error anytime ngc wa executed the error received wa a follows typeerror can not read property getsymbolsinscope of undefined after forcing npm to install angulartscwrappedlatest the error wa resolved fix ,fix
13169,animation make sure the easing value is passed into the webanimations player close close ,fix
13170,lint added license header to most typescript file relates to ,chore
13171,lint add lint check for license header added a tslint check to make sure all source file begin with a license header at the very beginning or after a relates to ,chore
13172,testing remove the tothrowerrorwith matcher jasmine ha tothrowerror breaking change before expecttothrowerrorwithmsg after expecttothrowerrormsg ,fix
13173,testing remove the tomatchpattern matcher jasmine ha tomatch breaking change before expecttomatchpatternpattern after expecttomatchpattern ,fix
13174,ngswitch display deprecation message only once ,fix
13175,form support updating of validators on exiting control lint fix async d test test ,feat
13176,core report duplicate template binding in template fix breaking change previously multiple template binding on one element ex div ngif ngfor were allowed but most of the time were leading to undesired result it is possible that a small number of application will see template parse error that shuld be fixed by nesting element or using template tag explicitly close ,fix
13177,add search param escaping for key ,fix
13178,typescript enabled nofallthroughcasesinswitch turned on the nofallthroughcasesinswitch flag in tsconfig and fixed a few case where there were fallthroughs ,chore
13179,querylist implement some close ,feat
13180,compiler relax childisrecursive check fix how the compiler check for recursive component by also considering component descendant previously it only checked if the current component wa evaluated previously this failed in certain case of mutually recursive component causing createasync in test to not resolve close ,fix
13181,router add an example app for the new router ,example
13182,router enable bundling ,chore
13183,router fix tsconfig to use e module ,fix
13184,router test karma config to rerun test on change ,chore
13185,htmllexer simplify the code ,refactor
13186,core properly report missing provider and viewproviders fix ,fix
13187,release rc ,chore
13188,router remove a circualr dep ,refactor
13189,router change the router setup to align with other module ,chore
13190,router remove lint and format task from router ,chore
13191,router clangformat ,chore
13192,router add support for componentless route ,feat
13193,resolve change resolve not to resolve root activate route ,fix
13194,router url serializer should handle segment without primary child ,fix
13195,readme fix a typo ,chore
13196,router bump up version ,chore
13197,router add a readme to include a link to the guide ,docs
13198,router typo in start with slash validation error ,fix
13199,router change serialize not to require parenthesis in query string to be encoded ,fix
13200,router fix a type issue in a test ,fix
13201,router change postinstall hook to devsetup to not require having typing installed ,fix
13202,router add changelog ,chore
13203,router add route config validation ,feat
13204,router do not support path starting with ,feat
13205,router drop index property use path instead of index true ,feat
13206,router stringify positional parameter when using routerlink ,fix
13207,router bump up version number ,chore
13208,router enable noimplicitany and noimplicntreturns ,cleanup
13209,router add a test checking that guard work for child route ,test
13210,router port fix done on angular current router to the new one the bug were fixed on current angular router in the following commits angularangularbafdcbccaacebebe angularangularfacebedecfffeec angularangularbcddacfcdceeddfcad close ,fix
13211,router implement routerlinkactive ,feat
13212,router support navigating by url tree ,feat
13213,router bump up version number ,chore
13214,package unpin version ,chore
13215,router bump up version number ,chore
13216,router make it work with typescript ,feat
13217,router minor refactoring ,refactor
13218,router mark the index property a deprecated use path component a instead of index true component a ,feat
13219,router fix params type to allow passing any value type when calling routernavigate ,fix
13220,router test update location when route doe not change ,test
13221,router test empty url with global redirect ,test
13222,provider make provider static analysis friendly ,fix
13223,router implement terminal ,feat
13224,router add a readme ,docs
13225,router fix a typo ,fix
13226,router clangformat ,cleanup
13227,router add enabletracing option ,feat
13228,router emit an event when route are recognized ,feat
13229,router provide meaningful tostring impls ,feat
13230,router bump up version number ,chore
13231,router fix nested deactivation ,fix
13232,router bump up version number ,chore
13233,router init is not triggered in certain scenario ,fix
13234,router make stringify handle null ,fix
13235,router bump up version number ,chore
13236,router use bootstrap listener to trigger initial navigation ,fix
13237,router support index route with path ,fix
13238,router fix lazy loading issue ,fix
13239,router update config before publishing to npm ,chore
13240,router implement redirectto ,feat
13241,provider fix a circular dependency remove common provider ,fix
13242,guard cancel inflight guard if one return false ,fix
13243,router fix tslint error ,cleanup
13244,router add test verifying that updating secondary segment using router link work ,tests
13245,router rename queryparameters into queryparams ,refactor
13246,router update routerlink to support query params and fragment ,feat
13247,router add an app initializer to trigger initial navigation close ,fix
13248,router fix router to handle guard that return observable close ,fix
13249,router traverse route config in depthfirst order close ,fix
13250,router update the npm dist ,chore
13251,router add doc ,docs
13252,router add support for basic event ,feat
13253,router implement cancelation ,feat
13254,router update build dir ,chore
13255,router add support for using class a guard ,feat
13256,router add internal to constructor where needed ,cleanup
13257,router implement canddeactivate ,feat
13258,router make strictnullchecks happy ,cleanup
13259,router fix index route ,fix
13260,router rename candidate into snapshot ,refactor
13261,router add support for canactivate guard ,feat
13262,router remove rootnode function ,refactor
13263,router make activation sync ,feat
13264,router add a function to resolve component ,feat
13265,router change recognize to return a router state candidate ,feat
13266,router implement a function create router state out of a candidate ,feat
13267,router add routerstatecandidate ,feat
13268,router fix a typo ,cleanup
13269,router fix router to take root component type instead of instance ,fix
13270,router export providerouter via index ,feat
13271,router add providerouter to configure the router when bootstrapping an app ,feat
13272,router export all public api token via index ,feat
13273,router implement relative navigation ,feat
13274,router change router config not to use name ,feat
13275,router add createurltree ,feat
13276,router serialize outlet name into the url ,feat
13277,router change karma reporter ,chore
13278,typing use typing instead of tsd ,chore
13279,xmbserializer add meaning attribute escape attribute value ,fix
13280,messageextractor pas the interpolationconfig around ,refactor
13281,in misc ,refactor
13282,partition fix partition when in is the only child ,fix
13283,messageextractor do not expand icu message before extraction ,feat
13284,compiler codegen view query generic type ,fix
13285,npm add repository metadata ,chore
13286,testinjector fix documentation typo change teh for the ,docs
13287,upgrade fix bundling issue and fix ee test the previous demo app wa broken and is missing an ee test i fixed the app but wa not able to get protractor to properly test this app julie and i are looking into that for now i manually verified that the app work and that the original issue wa fixed close ,fix
13288,compiler properly report unresolved dependency fix close ,fix
13289,coretesting show full error testplatformbrowser update fail capture testplatformbrowserdynamic update fail capture ,fix
13290,httpxhrbackend correctly set the status code on error fix fix angular ,fix
13291,animation ensure starting style are applied when a delay is present close close ,fix
13292,compiler make interpolation symbol configurable component config close ,feat
13293,npm update tsapiguardian to v ,build
13294,router remove router ,cleanup
13295,cheatsheet update ngswitch syntax in the cheatsheet ,doc
13296,datepipe date format pipe digit interpretation of minute and second close ,bug
13297,changelog add note about forthcoming deprecation of parsedomadapter ,docs
13298,perf support prod mode again after splitting the facade into multiple module enabling prod mode for code had no effect for the compiler also in a change between rc and rc we created the compilerconfig via a provider with usevalue and not via a usefactory which read the prod mode too early close close close ,fix
13299,datepipe numeric string support ,feat
13300,datepipe fix ,test
13301,browserutil fix supportsintlapi ,fix
13302,numberpipe fix broken regexp introduced in ecfc ,fix
13303,changedetection changedetectorref reattach should restore original mode after using changedetectorref detach it should keep the changedetector mode so that it is restored after calling reattach close close ,fix
13304,compiler staticreflector ignores unregistered decorator also modified static reflector to allow writing test in using the t and using the metadatacollector also made metadatacollector be able to use sourcefiles that have not been bound that is dont have the parent property set fix fix ,fix
13305,in expander do not add extra ul li around icu message fix ,feat
13306,security fail more detectably when using a safe value in an interpolation if a user end up with a safe value in an interpolation context thats probably a bug returning safevalue must use property binding will make it easier to detect and correct the situation detecting the situation and throwing an error for it could cause performance issue so were not doing this at this point but might revisit later part of and ,feat
13307,form remove the facade local copy ,refactor
13308,querylist support index in callback close ,feat
13309,local dev fix testsh ,ci
13310,core get rid of the bitwise operator facade helper ,refactor
13311,core rename cssparser and csslexer file close ,refactor
13312,core rename ast to ast for all cs parser code ,refactor
13313,core ensure cs parser track startend value and understands complex pseudo selector ,feat
13314,github improve github issue and pr template the current template accidentaly introduce task list which is confusing to both people submitting the issue a well a triaging it ,chore
13315,htmlparser clang format ,refactor
13316,tsickle add annotation annotation this let user continue using runtimesideeffect decorator if they choose only downleveling the marked one to annotation also remove the skiptemplatecodegen option which is no longer needed since angular compiles with tscwrapped rather than ngc the former doesnt include any codegen ,chore
13317,htmlparser add missing ,fix
13318,benchpress add custom user metric to benchpress this is a continuation of jeffbcross close ,feat
13319,compilercli add a debug option to control the output fix ,feat
13320,domelementschemaregistry add support for ngcontent and ngcontainer ,feat
13321,htmlparser do not add required parent to template root element fix ,fix
13322,htmlparser consider ngcontainer when adding required parent ,fix
13323,ngcontainer test nesting ngcontainers ,test
13324,form ngmodel should export a ngmodel ,fix
13325,webworker addcorrect experimental marker to web worker apis ,docs
13326,radio support radio button sharing a control ,feat
13327,doc update changelog for release ,chore
13328,webworkers add experimental marker for all web worker public apis ,docs
13329,webworkers rename all web worker apis with render to ui render is gramatically incorrect and confusing to developer who used this api since webworker apis were exposed only in master renaming these before the rc release is not a breaking change ,fix
13330,form suppress form deprecation warning after first ,fix
13331,viewbuilder cleanup ,refactor
13332,compiler add support for ngcontainer ngcontainer is a logical container that can be used to group node but is not rendered in the dom tree a a node ngcontainer is rendered a an html comment ,feat
13333,form add easy way to switch between form module ,feat
13334,inextractor add file path to error message featinextractor add file path to error message relates to featin allow in start comment without meaning refactorin cleanup testhtmlparser add depth to expansion form ,feat
13335,platformserver correctly import private domtestcomponentrenderer ,fix
13336,snapshot publish tscwrapped snapshot ,ci
13337,form support setting control name in ngmodeloptions ,feat
13338,compiler added support for limited function call in metadata the collector now collect the body of function that return an expression a a symbolic function the static reflector support expanding these function statically to allow provider macro also added support for the array spread operator in both the collector and the static reflector ,feat
13339,form separate ngmodelgroup from formgroupname ,fix
13340,compiler change argument of compilerconfig to named argument breakikng change compilerconfig used to take positional argument and now take named argument close ,refactor
13341,compiler make platformpipes platformdirectives an option on compilerconfig this aligns the configuration of platform pipe directive with offline compilation breaking change platformpipes and platformdirectives now are field on compilerconfig instead of providing a binding to these token provide a binding for compilerconfig instead ,refactor
13342,doc fixed precommit command for clangformat ,chore
13343,form compose validator fns automatically if array ,feat
13344,typescript changed double asterisk in to single asterisk a in these comment are being read a jsdoc comment this commit is smaller and only touch a few file that are causing error ,chore
13345,in fix typo ,docs
13346,compilercli add a bootstrap example for a compiled application ,doc
13347,form rename ngcontrol to formcontrolname ,chore
13348,animation ensure auto style are cleared at the end of the statechange animation close close ,fix
13349,animation ensure the webanimations driver convert style prop to camelcase the web animation api now requires that all style are converted to camel case chrome ha already made this breaking change and hyphenated style are not functional anymore close close ,fix
13350,form rename ngformmodel to formgroup ,chore
13351,form rename ngformcontrol to formcontrol ,chore
13352,componentresolver add a systemjs resolver for compiled apps ,feat
13353,form rename control controlgroup and controlarray class ,chore
13354,templateoutlet fix linting ,chore
13355,ngtemplateoutlet add context to ngtemplateoutlet close ,feat
13356,form allow ngmodel to register with parent form ,feat
13357,in generate error on unknown case fix ,feat
13358,htmllexer add support for alphabetic case ,feat
13359,respect custom contenttype header in xhrconnection fix a bug due to which setting a custom contenttype header in the request led to multiple contenttypes being set on the sent xmlhttprequest first the detected content type based on the request body followed by the custom set content type fix ,fix
13360,ngswitch use switchcase instead of switchwhen ,fix
13361,lint reformat modulesangular ,style
13362,tscwrapped update to newest tsickle ,chore
13363,compiler properly report missing di token fix ,fix
13364,datepipe update date doc reference in datepipets ,docs
13365,linker document the injector argument a mandatory fix ,docs
13366,build activate optional job in sl and b ,chore
13367,compiler added unit test to reflectorhost and fixed issue refactored reflectorhost to allow it to be tested fixed an issue where the dts wa findable but it wasnt used by the project this happens when the metadatajson file reference a module that wa not needed such a it doesnt declare any type and the reference to it wa elided by typescript when writing the dts file added test for reflectorhost ,fix
13368,compiler added support for a m style import also includes fix for broken test ,fix
13369,lint remove unused lint check now that we have noimplicitany we dont need these check for explicit type in specific location also reenable the check to disallow keywords a variable name ,chore
13370,security support xssi prefix with and without comma some implementation use an xssi prefix with a trailing comma some without this change angular to support both ,fix
13371,build update api spec to include the return value ,fix
13372,security document iframe src to be trustedurl doc on the domsanitizationservice didnt match actual usage before also fix some minor doc and implementation issue ,feat
13373,form fix implicit any ,chore
13374,form add new form folder ,feat
13375,typescript add noimplicitany we automatically insert explicit anys where needed these need to be addressed a in fix ,refactor
13376,form update value and validity when control are added close ,fix
13377,remove peerdep on angularcommon it is not needed there because it will get transitively installed by angularplatformbrowser we only need to declare this dependency in tsconfigjson because tsconfigjsons do not support transitive dependency in this way ,fix
13378,lint sort import in tool ,chore
13379,lint upgrade clangformat ,chore
13380,form rename old form folder to formsdeprecated ,fix
13381,router dont mark the routeroutletmap a internal it currently being reexported a public api which break anyone tryin to import the router because the routeroutletmap definition is missing ,fix
13382,travis pin the version of tsickle for offlinecompilertest ,fix
13383,public api sort symbol case insensitive ,test
13384,in extract message ,feat
13385,ngupgrade prevent digest already in progress fixngupgrade prevent digest already in progress ,fix
13386,animation support styling of the default animation state it is now possible to set a fallback state that will apply it styling when the destination state is not detected t state style close ,feat
13387,query set fixed viewchild contentchild right after the view is created this is needed to have a true replacement of the previous dynamiccomponentloaderloadnexttolocation so that component can be loaded into the view before change detection run close ,fix
13388,compiler improved error reporting of the static reflector staticreflector provides more context on error reported by the collector the metadata collector now record the line and character of the node that caused it to report the error includes other minor fix to error reporting and a wording change fix close ,fix
13389,ngupgrade prevent digest already in progress ,fix
13390,upgrade allow function for template and templateurl ,fix
13391,testing type beforeeachproviders these are valid otherwise typescript beforeeachproviders beforeeachproviderswat beforeeachproviders http ,refactor
13392,ngcontrolname correct export name ,docs
13393,compiler remove obsolete viewrelated code ,refactor
13394,compiler report error for query without selector fix ,fix
13395,karma remove ref to legacy file ,chore
13396,animation provide api doc for the animation dsl close ,docs
13397,renderer remove unecessary setelementstyles method there is no need to expose this additional method inside of the renderer api the functionality can be restored by looping and calling setelementstyle instead note that this change is changing code that wa wa introduced after the last release therefore this fix is not a breaking change close close ,fix
13398,import simplify path ,refactor
13399,readme update missing step in compilercli doc readme ,chore
13400,animation provide support for offline compilation ,feat
13401,debug collect style and class for the debugelement ,feat
13402,compiler reflector generates import for relative module fix close ,fix
13403,core fix type of debugnodeproperties property can have any value not just string ,fix
13404,htmlparser properly report error for not properly closed tag fix ,fix
13405,testrunner make karma internal reporter compatible with cause internal reporter to produce output message again after upgrade to ,fix
13406,build added a version stamp in metadatajson file also modified staticreflector to handle multiple version in a single metadatajson file fix close ,feat
13407,pipe cleanup unused import remove unused import from the pipe package no impact on the code ,style
13408,compiler rename compilercli to compilercli ,refactor
13409,tool remove use of typechecker from metadata collector the metadata collector wa modified to look up reference in the import list instead of resolving the symbol using the typechecker making the use of the typechecker vestigial this change remove all us of the typechecker modified the schema to be able to record global and local nonmodule specific reference added error message to the schema and error are recorded in the metadata file allowing the static reflector to throw error if an unsupported construct is referenced by metadata close fix fix ,chore
13410,compiler expose type needed by the language service the language service need access to the parser error range and the static reflector close ,chore
13411,schemaregistry add nodetextcontent fix ,feat
13412,upgrade allow deeper nesting of ng componentsdirectives fixupgrade add test for upgrade adapter bug fixupgrade allow deeper nesting of ng componentsdirectives allow a nesting sequence of ng ng ng directive ,fix
13413,core keep core export seperate from coretesting export ,fix
13414,changedetectorref make detectchanges correct close ,feat
13415,publicapispec reformat ,style
13416,numberpipe remove numberpipe and replace it with private helper function numberpipe wa just an implementation detail that we were accidentaly exposing a a public api ,refactor
13417,location make locationplatformstrategylocationstrategy property private breaking change locationplatformstrategy property wa previously accidentaly exported a public if any application requires access to the current location strategy it should be accessed via di instead by injecting the locationstrategy token the likelyhood of anyone actually depending on this property is very low ,fix
13418,router export routerlink and routeroutlet make it possible to individually import routerlink and routeroutlet from the router module ,feat
13419,postmessagebusadd the worker scope to please closure ,fix
13420,core keep core export seperate from coretesting export ,fix
13421,dts enable angular compilation with t flag strictnullchecks eliminate the following compiler error when using t with strict null checking enabled nodemodulesangularcoresrcutildecoratorsdts error t property extends of type type undefined is not assignable to string index type type function any ,fix
13422,asyncpipe include observable example add the missing example usage case and a bit more description to the asyncpipe ,docs
13423,security automatic xsrf handling automatically recognize xsrf protection cooky and set a corresponding xsrf header allows application to configure the cookie name or if needed completely override the xsrf request configuration by binding their own xsrfhandler implementation part of ,feat
13424,buildsh make tscwrapped installable ,chore
13425,ngc run integration test hermetically this ensures we run in a clean directory using our real distribution it find bug like internal apis needed to typecheck in the offline compiler a well a problem in packagejson also move tscwrapped under toolsangular ,build
13426,packagejson make the package installable ,chore
13427,security complete dom security schema this address several oversight in assigning security context to dom schema element found by our security reviewer thanks this also add some more precise unit test for the interaction between domelementschemaregistry and the templateparser and extract the security specific part into domsecurityschemats comparison of potentially dangerous property name is done case insensitive to avoid issue like formaction v formaction part of issue ,feat
13428,readme add circleci status badge ,chore
13429,mockconnection add mockerror usage example ,docs
13430,lint enable requireinternalwithunderscore tslint check ,chore
13431,lint enable duplicatemoduleimport tslint check ,chore
13432,lint upgrade tslint and it gulp plugin ,chore
13433,domregistry fix svg support ,fix
13434,lint fix missing semicolon to make circle green ,chore
13435,lint enable semicolon and variablename tslint check ,chore
13436,lint format tool dir ,chore
13437,lint reenable clangformat on tool ,chore
13438,lint upgrade clangformat and gulp plugin ,chore
13439,intl facade remove outdated code ,refactor
13440,viewencapsulation default viewencapsulation to configurable breaking change directivenormalizer take new constructor argument configcompilerconfig close ,feat
13441,changedetection make interpolateregexp customizable breaking change parser constructor required new parameter config compilerconfig a second argument ,feat
13442,compiler throw an error if variable with the same name is already defined fixcompiler throw an error if variable with the same name is already defined close fixcompiler clean up formatting for issue fixcompiler throw an error if reference with the same name is already defined close ,fix
13443,commondatepipe change date formatter to use correct pattern close add regular expression to parse date part add date part creator function replace token in pattern to parsed part ,feat
13444,ngrouteshim update anchor to function similar to angular x fixngrouteshim update anchor to function similar to angular x when setting the target fixngrouteshim update anchor target check to use indexof instead of contains on array ,fix
13445,router replace state when path is equal to current path same a bfecebcfcaa but for new router this also fix an issue where when application load it clear forward history because router constructor call navigatebyurl which wa causing a push state to happen ,fix
13446,control support select multiple with control class ,fix
13447,upgrade ensure upgrade adapter work on angularjs ,fix
13448,form add the submitted flag to ngform and ngformmodel directive close close ,feat
13449,implement responseprototypetostring to make for a nicer error message added a tostring method to the response class displaying status status and the url of the request close close ,feat
13450,renderer update signature to make renderdebuginfo optional the code doe not force the user to provider renderdebuginfo the current implementation list this a a mandatory parameter update the parameter to be optional fix close ,fix
13451,lifecyclehooks correct ngdocheck description the current behavior is for ngdocheck to supplement not override the default change detector onchanges will still be called when docheck is implemented fix ,docs
13452,router openning link in new tab click on routerlink should not prevent browser default action when any mouse button other than left mouse button or ctrlmeta key is pressed routerlink href should use location strategy external url close close close close close ,fix
13453,platformbrowserdynamic readd a deprecated platformbrowserdynamic ,feat
13454,platformbrowser fix rollup config ,fix
13455,testing add discardperiodictasks to be used with fakeasync close ,fix
13456,metadata allow spacing in multiple selector ,fix
13457,compiler remove obsolete code ,refactor
13458,playground fix webworker singlethread example ,fix
13459,api correct formatting of embeddedviewref api doc example remove from embeddedviewref api example doc comment ,docs
13460,api correct public api variable name correct public api variable name routerdepretacedtesting routerdeprecatedtesting ,refactor
13461,doc add missing comma in example ,fix
13462,router added pushstate fallback for ie browser close close ,fix
13463,security test case for quoted url value test case that fix this is already supported with the latest sanitizer change but it good to have an explicit test case ,test
13464,facade change eventemitter to be sync by default ,fix
13465,contributing fix link to styleguide change to new link to google javascript style guide ,chore
13466,ee workaround flaky ee test ,test
13467,ci incorrect import ,fix
13468,ci extra api in publicapispec ,fix
13469,ngc depend on correct tscwrapped package ,fix
13470,core introduce support for animation close ,feat
13471,ngc fix release instruction ,chore
13472,git update gitignore ,chore
13473,ngc refactor out tscwrapped this allows angulars build to depend on some extension but not on code generation and break a cycle in the angular build we now merge tsmetadatacollector into tscwrapped and stop publishing the former ,chore
13474,npm trigger tsd install from npm postinstall ,build
13475,core remove internal annotation from platformcoreproviders this symbol is no longer reexported at the top level so it safe to not mark it a internal this fix the offline compilation which got broken by this symbol not being present in the dts file when the compiler try to do a deep import close ,fix
13476,compiler add ability to parse in directive add ability to parse binding properly when is present when using a directive with the prefix close ,fix
13477,animation problem decimal using comma a decimal separation test where failing due to character being used a decimal separator in some regional setting like spanish for example close close ,fix
13478,developer jdk is needed for protractor to run selenium close ,docs
13479,set responseok the ok property wa not being set on response object it now set based on the status code close close ,fix
13480,domrootrenderer allow registeredcomponents access close ,refactor
13481,directive add a deprecation comment for property event close ,docs
13482,support for comment finishing with multiple dash xxxx the issue came from a lack of support for backtracking on string matching the way it is done if the end pattern for consumerawtext start with twice the same character you end up having problem when your string being parsed ha time this char example end string xxyz string to parse aaaaaaxxxyz calling consumerawtextfalse x attemptparsestrxyz would fail close ,fix
13483,pipe handle undefined value in slice close ,fix
13484,contentchild add example with ref add missing example on how contentchild work with ref close close ,docs
13485,router fix detect active route in depth ,fix
13486,form radio button with different name should not share state close ,fix
13487,form update accessor value when native select value change close ,fix
13488,renderer add a setelementstyles method ,feat
13489,public api update the public api to the new world ,test
13490,testingserver optimize import ,refactor
13491,typing remove rxjs workaround close ,fix
13492,serve added cors support for the jsserver task added and used the cors middleware add the module a a dev depedency in the packagejson file require the module in the jsservejs file add the module in the middleware list close close ,build
13493,added withcredentials support taken into account the withcredentials property within the request option added corresponding property in the requestoptions class added corresponding property in the request class handle this property when merging option set the withcredentials property on the xhr object when specified added a test in the xhrbackendspects to check that the property is actually set on the xhr object close close close ,feat
13494,automatically set request contenttype header based on body type implement the ability to provide object a request body the following use case are supported raw object a json payload is created and the content type set to applicationjson text the text is used a it is and no content type header is automatically added urlsearchparams a form payload is created and the content type set to applicationxwwwformurlencoded formdata the object is used a it is and no content type header is automatically added blob the object is used a it is and the content type set with the value of it type property if any arraybuffer the object is used a it is and no content type header is automatically added close close ,feat
13495,build force a compatible baseurl for systemjsbuilder close close ,fix
13496,in support implicit tagsattributes ,feat
13497,browser platform code cleanup ,fix
13498,test execute the security spec only once ,fix
13499,bootstrap swap corebootstrap and coreloadandbootstrap argument ,fix
13500,core fix build ,fix
13501,fix mockbackend example import syntax error fix close ,docs
13502,browserts update bootstrap injector override argument name close ,docs
13503,chore remove unused maptoobject and objecttomap method from serializer resolve close ,refactor
13504,asyncpipe use subscription strategy interface the strategy for promise and observable based subscription have nearly the same method signature they should implement a common interface close ,refactor
13505,compiler have cs parser support nested parenthesis inside function close ,fix
13506,corelinker add simplechanges type to lifecyclehooks to simplify onchanges signature close ,feat
13507,chore replace all binding with provider breaking change deprecated binding and viewbindings are replaced with provider and viewproviders close ,refactor
13508,router remove deprecated a from ‘ routeconfig ’ breaking change remove deprecated a from ‘ routeconfig ’ in favour of ‘ name ’ ,refactor
13509,router do not kill eventemitter on navigation failure close close close ,fix
13510,regexurlpaths add regexgroupnames to handle consistency with serializers by adding regexnamedgroups to regex route configuration we can consistently map regex matching group to component parameter this should fix close ,feat
13511,changelog add view decorator breaking change close ,fix
13512,di type error in invalidprovidererror when trying to instantiate an injector with an unknown provider close ,fix
13513,doc fix pony greeting equivalence cheatsheet claim equivalence between two statement which are not equivalent close ,
13514,common datepipe support iso string close ,feat
13515,router ensuring matchedurl pas query params ,fix
13516,lint disallow duplicate import from a module close ,chore
13517,lint reenable linter and fix violation fix ,chore
13518,routerparsing change route rule error to say pascalcase instead of camelcase close ,fix
13519,developermd add a clearer explanation about window symlinks issue add a clearer explanation about window symlinks issue ,docs
13520,router replace state when normalized path is equal to current normalized path make sure the same path is not added multiple time to the history it is replacing the state instead of skipping it completely because the current path in the browser might not be normalized while the given one is normalized close close ,fix
13521,ngcontrolgroup update api doc syntax close ,docs
13522,form remove useless import remove useless import and change binding to provider inside component and directive close ,refactor
13523,platformbrowser fix type spacing close ,style
13524,shadowcss add encapsulation support for cs support atrule close ,feat
13525,request change requesttexts return type to string change the return typing for the text method to string so typescript treat it like a normal string close ,fix
13526,compiler support string token with inside close ,fix
13527,webworker move xhr worker side ,refactor
13528,browser merge static dynamic platform ,refactor
13529,enabledebugtools return componentref allows for bootstrapapp httpproviders routerproviders thenenabledebugtools without breaking the rule of always returning a value in a promise ,feat
13530,changelog fix viewquery read usage example in beta ,docs
13531,doc fix a missing opening bracket ,fix
13532,emptyts typo emppty empty ,refactor
13533,core accurate dev mode message for dart ,fix
13534,changelog line number to master can go out of sync ,docs
13535,router fix import and replace routeconfig ,docs
13536,routerdeprecated export rootroute fix close ,fix
13537,angularrouter nglink should not throw an error if routeparams are undefined if routeparams are undefined no href attribute should be rendered this match the behaviour of nghref ,fix
13538,mockconnection update mockrespond usage example close ,docs
13539,router browser back and forward button not working correctly close close ,fix
13540,readme update readme no longer beta ,chore
13541,update http doc to mention map operator close ,docs
13542,build remove use of qdenodeify this change also make webpack properly reject promise on build error close ,chore
13543,typing enforce noimplicitany for tool directory exposed a couple of bug close ,chore
13544,ie make shim work with instrumented code close ,fix
13545,angularrouter delay view update until activate promise get fullfilled if the routeronactivate hook return a promise the navigation is commited once the promise get fullfilled but the view is updated immediately this commit delay the view update so that both view and url are updated at the same time close ,fix
13546,asyncpipe allow onerror argument close ,feat
13547,ngzone isstable close ,feat
13548,set the statustext property from the xmlhttprequest instance close ,feat
13549,contributing added commit message sample each time i am pointing someone to this contribution doc to read and apply commit message style guide each time type part of message formatting is missed ,chore
13550,form remove unused import remove unused import from the form package ,style
13551,cheatsheet document svg idiosyncrasy ,docs
13552,webworker remove the platformbrowser dependency on compiler ,fix
13553,upgrade fallback to root ng injector when element is compiled outside the document currently downgraded ng element fail inside a uirouter view because they are unable to require an ng injector via the require attribute of the ddo because uirouter compiles it template before they are inserted in a uiview this add a fallback behavior if a parent injector can not be found to go to the root ng injector ,fix
13554,security fix changelog formatting turn out the fenced code block need to be in it own paragraph ,chore
13555,upgradengcomponentadapter make binding available on scope in controller link function delay ng directive controller instatiation where possible and prelink function always to the ngoninit lifecycle hook this way binding are always available on scope in both the controller and the link function ,fix
13556,security allow url style value allows sanitized url for cs property these can be abused for information leakage but only if the cs rule are already set up to allow for it that is an attacker can not cause information leakage without controlling the style rule present or a very particular setup fix ,feat
13557,security allow data url for image and video allows knowntobesafe medium type in data uris part of ,feat
13558,compilercli normalize used directive eg needed for content projection close ,fix
13559,security expose the safe value type this allows user to properly type their safehtml safestyle etc value fix ,feat
13560,security support transform cs function for sanitization fix part of ,feat
13561,build release compilercli package along with rest of angular package and use angularversion for package version and peer dependency ,fix
13562,npm shortcircuit npm install if nodemodules are healthy close ,build
13563,developermd state that gitclangformat must be in path to use git clangformat your have to make sure that gitclangformat is in your path close ,docs
13564,changelog add missing breaking change for testing provider close ,docs
13565,build fix an error in package publishing step where the script error when a umd bundle is not found for compilercli package ,fix
13566,build declare the secure githubtokenangular for package publishing from travis ,fix
13567,build fix broken ee test travis task by running the right variation of sed on travis ,fix
13568,build hook up publishbuildartifacts to travis ,fix
13569,compiler test schema generation only in chrome close ,test
13570,build reenable optional job in sl and b close ,chore
13571,build change publishbuildartifactssh to work with new packaging system ,fix
13572,compiler allow noimplicitany ,fix
13573,compiler allow decorator defined in the same file ,fix
13574,codegen codegen all file in the program not just root fix ,fix
13575,pullrequesttemplatemd reorganize and improve the pull request template close ,docs
13576,tsickle remove redundant jsdoc type tsickle doesnt like them and anyway they are bound to get outofsync with the inline t type ,chore
13577,security document sanitization breaking change sanitizing style and url value break specific pattern see for an example this document and acknowledges the breaking change while we work on improving cs sanitization to allow more value through ,chore
13578,security warn user when sanitizing in dev mode this should help developer to figure out whats going on when the sanitizer strip some input fix ,feat
13579,parsing change internal usage of to for namespaced value close ,chore
13580,security add test for url sanitization ,feat
13581,security add test for style sanitisation ,feat
13582,build run security test in nodejs too ,chore
13583,security add an html sanitizer this is based on angular s implementation parsing an html document into an inert dom document implementation and then serializing only specifically whitelisted element it currently doe not support svg sanitization all svg element are rejected if available the sanitizer us the template html element a an inert container sanitization work client and serverside reviewer rjamet tbosch molnarg koto differential revision ,feat
13584,security strip xssi prefix from xhr response ,feat
13585,security fill in missing security context reviewer koto rjamet molnarg differential revision ,feat
13586,core don ’ t detach nested view container when destroying a view when a view is destroyed we destroy all view in view container and should not detach them however previously we also detached them which lead to problem during the iteration loop close close introduced by ccfebffafdeaead ,fix
13587,router clangformat ,chore
13588,router reuse existing segmentes when constructing new route tree ,refactor
13589,router provide a toplevel route segment for injection ,fix
13590,router update link to reuse url segment when possible ,refactor
13591,router make name consistent ,refactor
13592,core add a component resolver that can load component lazily using systemjs ,feat
13593,router update router to support lazy loading ,feat
13594,compiler emit correct type for literal array and map ,fix
13595,compiler support lifecycle hook in compilercli ,fix
13596,metadata emit all method this is needed to detect lifecycle hook ,feat
13597,changelog add changelog for rc ,docs
13598,compilercli allow to use builtin directive like ngif … related to close ,fix
13599,compilercli move it into modulesangular and integrate properly into the build this also doe no more depend on a version on npm for the compilercli also run the test for toolsmetadata ,refactor
13600,tsickle put the tsickle support code at eof ,fix
13601,compiler update readme following package move ,chore
13602,testing check for pending macrotasks in componentfixturewhenstable and componentfixtureisstable close ,fix
13603,doc upgrade deprecated ngforsyntax ,fix
13604,compiler use rootdirs compileroption to affect gendir layout also update packagejson to something releasable ,fix
13605,router add api doc ,docs
13606,router fix ee test ,cleanup
13607,router make routerlink accept single value ,feat
13608,router make name consistent ,cleanup
13609,router add support for ,fix
13610,compiler fix where pipe live impure pipe need to live on the view that used them and need a new instance for each call site impure pipe need to live on the component view cached across all child view and need a new pure proxy for each for each call site that life on the view of the call site fix this bug wa introduced not long ago by adcedbddffdbc ,fix
13611,compiler use absolute path for comparing module url ,fix
13612,compiler don ’ t emit metadata for generated file ,fix
13613,compiler run compilercli test in new ci also update docspeer deps display error from running jasmine use the right location of cjsjasmine ,chore
13614,staticreflector remove unnecessary check ,refactor
13615,compiler calculate the right moduleurl ,fix
13616,changelog document rc ,docs
13617,compiler support cs stylesheets in offline compiler ,fix
13618,offline compiler add metadata emit also add a configuration switch to disable the codegen so we can still use the metadata emit and tsickle preprocessing in the build pipeline for angular itself ,feat
13619,core support the decorator data that tsickle produce ,feat
13620,tsc use angulartemplatecompiler in place of tsc this let u downlevel decorator with tsickle and produce metadatajson file for user to reference when offlinecompiling their app ,build
13621,tsc use angulartemplatecompiler in place of tsc this give u tsickle preprocessing of decorator and produce metadatajson file for user to consume in their offline compilation ,build
13622,router set routerlinkactive when routerlink is active close ,feat
13623,router implement support for routerlinkactive ,feat
13624,offline compiler package the compilercli for user close ,build
13625,router create a route tree when creating the router service close ,fix
13626,router add routetree and urltree a alias to treeroutesegment and treeurlsegment ,feat
13627,router add support for wildcards ,feat
13628,typescript strip abstract keyword from property in dts fix angularsrcaltroutermetadatametadatadts close ,fix
13629,compiler fix cross view reference and provider with usevalue before we would create all field in the generated view with visibility private this doe not work if an embedded view reference a directive element in a parent view in dart this wa no problem so far a it doe not have a private modifier before usevalue in a provider did not work when doing offline compile a so far the metadataresolver wa only used for jit mode now usevalue support any kind of value that the static reflector can return eg primitive array string map … close ,fix
13630,compilercli make sure the generated code get compiled via tic ,fix
13631,core type componentref componentfactory and componentfixture by the component type breaking change componetref componentfactory componentfixture now all require a type parameter with the component type close ,refactor
13632,router listen to location change close ,feat
13633,router candeactivate should not change the url when return false close ,fix
13634,test add routerfakeproviders to angularaltrouterroutertestingproviders this change add provider for fake router dependecies this allows testcomponentbuilder to create component with routerlink and routeroutlet directive without the test writer needing to override them ,feat
13635,compiler project using the right directive a component close ,fix
13636,core return the changedetectorref of the component also for embedded view ,fix
13637,core use functionbind for referring to event listener instead of a closure ,refactor
13638,core check component if an event handler inside of an embedded view fire breaking change viewrefchangedetectorref wa removed a using changedetectorrefs for embeddedviewrefs doe not make sense use componentrefchangedetectorref or inject changedetectorref instead fix ,fix
13639,compiler support empty array and map literal this wa broken after adcedbddffdbc fix ,fix
13640,router create altrouter bundle ,build
13641,router add candeactivate ,feat
13642,router implement relative navigation ,feat
13643,compiler support referenced opaquetokens correctly in offline compiler ,refactor
13644,compiler support hash syntax for provider ,refactor
13645,di support map literal a provider ,feat
13646,perf don ’ t use trycatch in production mode the previous code that had trycatch statement in method could not be optimized by chrome this change separate appview no trycatch form debugappview always trycatch our codegen will use appview in production mode and debugappview in debug mode close ,fix
13647,core deprecate dynamiccomponentloader and debugnodeinject breaking change dynamiccomponentloader is deprecated use componentresolver and viewcontainerref directly debugnodeinject is deprecated use debugnodeinjectorget instead ,refactor
13648,core introduce template context breaking change before a embeddedviewref used to have method for setting variable now a user ha to pas in a context object that represents all variable when an embeddedviewref should be created viewcontainerrefcreateembeddedviewref now take a context object a nd argument embeddedviewrefsetlocal and getlocal have been removed use embeddedviewrefcontext to access the context debugnodelocals ha been removed use the new method debugelementreferences to get the reference that are present on this element or debugelementcontext to get the context of the embeddedviewref or the component to which the element belongs close ,feat
13649,build fix formatting and test close ,chore
13650,offline compiler a replacement for tsc that compiles template see ,feat
13651,compiler add dependency on tsickle this tool let u rewrite typescript source before entering the emit pipeline for example we lower decorator to the treeshakable annotation form ,chore
13652,compiler refactoring for offline compiler cli pas a baseurl for asset resolution from static symbol fix in staticreflector to work with a pathaware host see ,chore
13653,metadata expose provider in metadata these worked in dart because they were effectively exported even without the export keyword without exporting these symbol they are not produced in metadatajson file which leaf dangling reference from the decorator that use them ,fix
13654,codegen event handler ha boolean return type ,fix
13655,preserve provider expression preserve constructor call in addition to function call introduced a special case for forwardref similar to constexpr ,fix
13656,router make analyzer happy close ,cleanup
13657,router add an example app using the new router ,feat
13658,router change location when navigating ,feat
13659,router add routerlink ,feat
13660,router add link that support only absolute url ,feat
13661,router update recognize to handle matrix parameter ,feat
13662,router add routerurlserializer ,feat
13663,router add router and routeroutlet to support aux route ,feat
13664,router update recognize to support aux route ,feat
13665,router update url parser to handle aux route ,feat
13666,changelog fix breaking change description add more info and example about how ngfor is affected by the change ,chore
13667,compiler make static reflector work also adjust runtimemetadataresolver to be able to use it also rename runtimemetadataresolver into compilemetadataresolver close ,refactor
13668,testing use ngzone in testcomponentbuilder instantiating the test component within an ngzone will let u track async task in event handler and change detection we can also do auto change detection when triggering event through dispatchevent and not have to do fixturedetectchange manually in the test new api componentfixtureautodetectchanges this put the fixture in auto detect mode that automatically call detectchanges when the microtask queue is empty similar to how change detection is triggered in an actual application componentfixtureisstable this return a boolean whether the fixture is currently stable or ha some async task that need to be completed componentfixturewhenstable this return a promise that is resolved when the fixture is stable after all async task are complete close ,feat
13669,build resolve dart analyzer issue with the dart dev channel close ,fix
13670,changelog update change log to beta ,docs
13671,release bump version to beta ,chore
13672,metadata do not attach module name to metadata the filename contains the module name a resolved by user so the toplevel module name is uneeded module name on reference are replaced by capturing the import syntax from the module this allows reader of the metadata to do the module resolution themselves fix fix close ,fix
13673,testing refactor test method to have a uniform interface remove functionwithparamtokens all test wrapper async fakeasync and inject now return just a function instead of functionwithparamtokens this make them directly consumable by the test framework also the test framework code doe not have to handle a union of function and functionwithparamtokens everywhere the function returned by the above method are considered asynchronous by the test framework if they return a promise synchronous otherwise close ,chore
13674,core separate ref from var introduces ref to give a name to an element or a directive also work for template element and let to introduce an input variable for a template element breaking change now always mean ref template abc now defines a reference to the templateref instead of an input variable used inside of the template inside of a ngif … directive is deprecated use let … instead var is deprecated replace with let for template element and ref for non template element close close ,feat
13675,testing allow test component builder to override directive from list when a component us a list of directive such a routerdirectives make testcomponentbuilderoverridedirective work properly for member of the list close close ,fix
13676,compiler elementschema now ha explicit dom schema information this make the schema available for offline compile compiler a well close ,feat
13677,core properly evaluate expression with conditional and boolean operator fix fix close ,fix
13678,compiler allow template to access variable that are declared afterwards fix ,fix
13679,changelog fix changelog script one charecter missing from ,fix
13680,global group multiple import from same module close close ,style
13681,changelog regenerate changelog for beta including refactor the script explicitly take input for the starting tag the script only prepends change ,chore
13682,npm update rxjs to beta close close ,build
13683,changelog fix changelog with message about testing zone deps close ,chore
13684,changelog update change log to beta ,docs
13685,release bump version to beta ,chore
13686,router add router and routeroutlet close ,feat
13687,router add router metadata ,feat
13688,router implement recognizer ,feat
13689,router implement routerurlparser ,feat
13690,router add urlsegment routesegment and tree ,feat
13691,core support importuri in staticreflector close ,refactor
13692,release fix the packagejson zonejs requirement to ,fix
13693,release release the metadata collector close ,chore
13694,templatesyntax rename elvis operator close ,docs
13695,cheatsheet add directive to cheatsheet close ,docs
13696,codegen add explicit any to class field fix close ,fix
13697,compiler use di order for change detection order close ,fix
13698,compiler properly implement pure pipe and change pipe syntax pure pipe a well a array and map are implemented via proxy function this is faster than the previous implementation and also generates le code breaking change pipe now take a variable number of argument and not an array that contains all argument ,fix
13699,form ensure select model update in firefox and ie close close ,fix
13700,compiler only call pure pipe if their input changed ,fix
13701,test implement fakeasync using the fakeasynctestzonespec from zonejs update the version of zonejs to that contains the new fakeasynctestzonespec the new fakeasync zone handle error better and clearpendingtimers is no longer required to be called after handling an error and is deprecated the fakeasync test zone will now throw an error if an xhr is attemtped within the test since that can not be controlled synchronously in the testneed to be mocked out with a service implementation that doesnt involve xhrs this commit also allows fakeasync to wrap inject to make it consistent with async test zone breaking change inject can no longer wrap fakeasync while fakeasync can wrap inject so the order in existing test with inject and fakeasync ha to be switched a follows before inject fakeasync after fakeasyncinject close ,feat
13702,compiler support string token with inside ,fix
13703,transformer support queryread close ,fix
13704,core various minor compiler fix close ,fix
13705,metadata emit metadata rooted at angular fix close ,fix
13706,form number input should report null when blank close close ,fix
13707,form improve error message when ngformmodel is missing a form close close ,fix
13708,core support non reflective bootstrap this change angular so that it can be used without reflection assuming a codegen for injector breakikng change drop appcomponent provider instead inject applicationref and read it componenttypes property long form bootstrap ha changed into the following var platform createplatformreflectiveinjectorresolveandcreatebrowserproviders var appinjector reflectiveinjectorresolveandcreatebrowserappproviders appproviders platforminjector coreloadandbootstrapappinjector myapp ,refactor
13709,core separate reflective injector from injector interface breaking change injector wa renamed into reflectiveinjector a injector is only an abstract class with one method on it injectorgetoptional wa changed into injectorgettoken notfoundvalue to make implementing injector simpler viewcontainerrefcreatecomponent now take an injector instead of resolvedproviders if a reflective injector should be used create one before calling this method eg via reflectiveinjectorresolveandcreate… ,refactor
13710,core add queryread and remove dynamiccomponentloaderloadintolocation this add the feature for viewchildviewchildrencontentchildcontentchildren to define what to read from the queried element eg viewchildsomevar read viewcontainerref will locate the element with a variable somevar on it and return a viewcontainerref for it background with this change angular know exactly at which element there will be viewconainerrefs a the user ha to ask explicitly of them this simplifies codegen and will make converting angular template into server side template simpler a well breaking change dynamiccomponentloaderloadintolocation ha been removed use viewchild ‘ myvar ’ read viewcontainerref to get hold of a viewcontainerref at an element with variable myvar dynamiccomponentloaderloadnexttolocation now take a viewcontainerref instead of an elementref appviewmanager is renamed into viewutils and is a mere private utility service ,refactor
13711,codegen produce ngfactorydartts file instead of templatedartts file this is needed a we will soon store other thing into the generated file not only the template ,refactor
13712,core introduce componentfactory each compile template now expose a compnamengfactory variable with an instance of a componentfactory calling componentfactorycreate return a componentref that can be used directly breaking change compiler is renamed to componentresolver compilercompileinhost ha been renamed to componentresolverresolvecomponent componentrefdispose is renamed to componentrefdestroy viewcontainerrefcreatehostview is renamed to viewcontainerrefcreatecomponent componentfixture ha been removed the class componentfixture can now be created directly a it is no more using private apis ,refactor
13713,build ignore dart warning for external code ,fix
13714,ngtemplateoutlet add ngtemplateoutlet directive this commits add a new ngtemplateoutlet directive that can be used to create embeded view from a supplied templateref close close ,feat
13715,location out of router and into platformcommon close breaking change location and other related provider have been moved out of router and into platformcommon browserplatformlocation is not meant to be used directly however advanced configuration may use it via the following import change before import platformlocation location locationstrategy hashlocationstrategy pathlocationstrategy appbasehref from angularrouter import browserplatformlocation from angularsrcrouterlocationbrowserplatformlocation after import platformlocation location locationstrategy hashlocationstrategy pathlocationstrategy appbasehref from angularplatformcommon import browserplatformlocation from angularsrcplatformbrowserlocationbrowserplatformlocation close ,refactor
13716,set responseok based on given status code close ,fix
13717,markdown add missing space between markdown and text turn h into h remove bold close ,docs
13718,fix a typo patform platform close ,docs
13719,upgrade clean up scope when element is destroyed close ,fix
13720,angularrouter removed arrow function from module template close ,fix
13721,test remove payload size check ,fix
13722,test manage asynchronous test using zone instead of using injectasync and returning a promise use the async function to wrap test this will run the test inside a zone which doe not complete the test until all asynchronous task have been completed async may be used with the inject function or separately breaking change injectasync is now deprecated instead use the async function to wrap any asynchronous test before itshould wait for returned promise injectasyncfancyservice service return servicegetasyncvaluethenvalue expectvaluetoequalasync value itshould wait for returned promise injectasync return somepromisethen expecttruetoequaltrue after itshould wait for returned promise asyncinjectfancyservice service servicegetasyncvaluethenvalue expectvaluetoequalasync value note that if there is no injection we no longer need inject or injectasync itshould wait for returned promise async somepromisethen expecttruetoequaltrue close ,feat
13723,fix broken link close ,docs
13724,perf return perf metric from angularprofiler close ,chore
13725,in add support for nested expansion form close ,feat
13726,htmlparser cleanup to fix analyzer warning ,cleanup
13727,in support plural and gender special form ,feat
13728,htmlparser support special form used by in exp plural ,feat
13729,htmllexer support special form used by in exp plural ,feat
13730,core fix some grammar close ,docs
13731,in add custom placeholder name close close ,feat
13732,dart reverts protobuf to last working version close ,fix
13733,viewcompiler codegen di and query breaking change renderer rendercomponent method is removed form renderer only present on rootrenderer renderersetdebuginfo is removed renderercreateelement createtext createtemplateanchor now take the debuginfo directly query semantics query dont work with dynamically loaded component eg for routeroutlet loaded component cant be query via viewquery but routeroutlet emits an event activate now that emits the activated component exception class and the context inside changed renamed field debugelementattributes is an object and not a map in j any more changedetectorgenconfig wa renamed into compilerconfig appviewmanagercreateembeddedviewincontainer appviewmanagercreatehostviewincontainer are removed use the method in viewcontainerref instead change detection order changed dirty check component input dirty check content child update render node close close ,refactor
13734,changelog update changelog to beta ,docs
13735,release bump version to beta ,chore
13736,test remove unused import close ,cleanup
13737,metadata add more doc of viewchild and viewchildren close ,docs
13738,webworker fix textarea value not being sent to the worker close close ,fix
13739,staticreflector return empty result instead of undefined reflector always return either an empty object or an empty list if no metadata is recorded for the class staticreflector match this behavior close ,fix
13740,in add support for custom placeholder name close close ,feat
13741,typescript update to nightly to workaround we must remove the readonly keyword from generated dts file this solution will not scale but will probably buy enough time to require our user move to a beta close ,feat
13742,travis enable the typescriptnext build fix ,chore
13743,build ignore dart warning the name … is shown but not used see close ,fix
13744,format revert choreformat update to latest formatter this reverts commit aadffddfbfdfeaa ,revert
13745,format update to latest formatter close ,chore
13746,transformer special case profiler ,feat
13747,ngfor support convenience view local in ngfor close ,feat
13748,router fix wording of hashchange explanation close ,docs
13749,viewquery fix typo in documentation fix typo that confusingly refers to query rather than viewquery close ,docs
13750,gulpfile turn off mangle for prod close ,chore
13751,incremental build work with new tree close ,fix
13752,transformer change transformer to collect information about provider and resolve identifier during linking ,feat
13753,build fix error reported using close ,chore
13754,select set value individually from ngmodel close close ,fix
13755,broccoli cleanup typescript build the typescript parser now only reference file that are in broccoli tree close ,build
13756,broccoli angularbuilder compiles with typescript beginning with if a module ha both a t and dts file the j file is not written close ,build
13757,compiler add an implementation for xhr that us a template cache to load template file useful for avoiding doing an actual xhr during testing part of the solution for other part is a karma plugin that will create the template cache close ,feat
13758,gesture allow override of hammer default configuration close ,feat
13759,darttransform remove deprecated angularbootstrap breaking change remove the deprecated angularbootstrapts angularbootstrapstaticts library browser entry point should import angularplatformbrowser which supply the bootstrap function close ,refactor
13760,tslint reenable linter and fix violation fix close ,build
13761,parser templateparsertryparse return both the ast and error the language service always need the ast even if there are error in the template close ,feat
13762,metadatacollector take no parameter for the constructor metadatacollector no longer requires a tslanguageservice parameter it didnt use close ,fix
13763,cheatsheetdart fix import close ,docs
13764,upgrade make upgradeadapter upgrade angular component correctly with this fix the oninit function of an upgraded angular component is called and input binding are created close ,fix
13765,routerlink ignore optional parameter when checking for active route fix close ,fix
13766,payload increase payload size limit temporarily ,fix
13767,changelog update change log to beta ,docs
13768,release bump version to beta ,chore
13769,select update name from ngvalue to ngvalue close ,fix
13770,darttransform avoid print in transformer code replace direct us of print in the transformer with explicit us of stderr add a few override annotation for clarification of other print implementation clarify error message on incorrect customannotations value close ,feat
13771,router allow forward slash in query parameter close ,fix
13772,form support both value and ngvalue ,fix
13773,upgrade leak when angular destroys element fix close ,fix
13774,select support object a select value close close ,fix
13775,transformer change transformer to collect information about provider and resolve identifier during linking close ,feat
13776,core remove injectable a only class that are instantiated via di need it ,refactor
13777,form extract validatorsrequired into a variable a transformer can not resolve static ,refactor
13778,staticreflector added staticreflector added a static reflector that us metadta produced during build or additionally directly from typescript to produce the metadata used by angular code generation compiler ,feat
13779,changelog fix formatting ,docs
13780,changelog update change log to beta ,docs
13781,release bump version to beta ,chore
13782,codegen stringify using an opaque id when tostring contains parens using tostring result in function arg arg when using closure compiler for to close ,fix
13783,script log out of npm ,chore
13784,pubspec clean up pubspec file add a direct dependency on packagepath remove dependency on packagequiver ,build
13785,router handling of special char in dynamic segment close ,fix
13786,dart add a devmode check for undeclared lifecycle interface add a check in reflectioncapabilitiesinterfaces which determines if the passedin type implement a lifecycle interface but doe not declare that it doe so see for detail close ,feat
13787,in update transformer to read a xmb file when provided and use inhtmlparser in this case close ,feat
13788,in reexport inhtmlparser through the in barrel ,feat
13789,in update inhtmlparser to accept parsed message ,feat
13790,in implement xmb deserialization ,feat
13791,in rename serialize into serializexmb ,refactor
13792,compiler resolvers now use di to create reflector also introduced reflectorreader when only readonly access to the reflector is needed close ,feat
13793,router improve the example for routeronactivate ,doc
13794,form update the doc to reflect the current behavior close ,docs
13795,build metadatacollector correctly collect property metadata fix close ,fix
13796,build produce dts file for build tool close ,chore
13797,upgrade make ngupgrade work with testability api close ,fix
13798,in implement an inaware html parser close ,feat
13799,in remove utility function into a separate file ,refactor
13800,htmlparser change htmlelementast to store both the start and the end position ,feat
13801,facade add listwrapperflatten ,feat
13802,facade add regexpwrapperreplaceall to replace all match using the provided function ,feat
13803,compiler allow overriding the projection selector fix breaking change for static content projection element with directive are now matched against the element itself v the template before p ngifcondition foop before use the implicit template for projection ngcontent selecttemplatengcontent after use the actual element for projection ngcontent selectpfoongcontent close ,feat
13804,testtypings instrument against example folder choretypingspec delete unused typingspec file close ,chore
13805,example fix implied import in example for testing built typing ,chore
13806,refactor refactored metadata collector renamed metadataextractor to metadatacollector reorganized to split src from test close ,chore
13807,build added test for metadata extractor add unit test to metadata extractor class fix issue found while testing ,chore
13808,build persisting decorator metadata this allows determing what the runtime metadata will be for a class without having to loading and running the corresponding j file ,feat
13809,compiler assert that componentstyle is an array part of effort to improve error message close ,feat
13810,ngfor give more instructive error when binding to noniterable before youd get an error like exception can not find a differ supporting object ‘ object object ’ in user in userscmp now you get exception can not find a differ supporting object ‘ object object ’ of type object did you mean to bind ngfor to an array in user in userscmp ,fix
13811,ddc add ee test infra first test ,chore
13812,ngzoneimpl ensure zone spec is available trace could be true in dev mode while there is no long stack trace spec close ,refactor
13813,angularrouter check that link generation work with basehref close ,test
13814,angularrouter support link generation with custom hashprefixes ,fix
13815,angularrouter nglink is generating wrong hrefs at the moment nglink is generating htmlmode url for hrefs instead it should check whether or not htmlmode is enabled and create the hrefs accordingly the renaming in the getlink function is aligning it to routerlinks updatelink close ,fix
13816,angularrouter tighten up the build regex replacement ,chore
13817,darttransform migrates test to use packagetest pt of migrating from packageguinness packageunittest packagetest this pr migrates deferredrewriter directivemetadatalinker unit test close ,refactor
13818,bundlesoverviewmd fix typo close ,docs
13819,npm bump angular version in our shrinkwrap file ,build
13820,packagejson remove espromise from the peerdependency list a of zonejs we no longer require an espromise polyfill the polyfill is only needed on browser that dont have native promise support ,fix
13821,publish run router publish with additional memory close ,chore
13822,angularrouter bump version to v ,chore
13823,script publish angular router to latest tag in npm ,chore
13824,darttransform use angularplatformbrowser a bootstrap lib update the angular transformer to recognize packageangularplatformbrowserdart a the library which export the bootstrap function update playground example benchmark test to import bootstrap from platformbrowser close ,feat
13825,common remove internal annotation on switchview close ,fix
13826,in add a simple dart script extracting all in message from a package close ,feat
13827,in create in barrel ,feat
13828,in implement xmb serializer ,feat
13829,in move message and id into a separate file ,refactor
13830,changelog update change log to beta ,docs
13831,release bump version to beta ,chore
13832,router routeroutlet load component twice in a race condition close close ,fix
13833,remove all angularmaterial code ,chore
13834,core remove view annotation close ,chore
13835,in implement a simple version of message extractor close ,feat
13836,compiler change html parser to preserve comment ,feat
13837,facade add value to stringmapwrapper ,feat
13838,shadowcss support deep and fix close ,feat
13839,core introduce a cs lexerparser ,feat
13840,testing clean up public api spec change the old public api spec to check only the exported toplevel symbol this will make sure that dart and j do not diverge the new public api spec verifies the t api close ,cleanup
13841,core update content to ngcontent ,docs
13842,fix typo ,docs
13843,build disable broken firefoxbeta on saucelabs see ,chore
13844,core introduce a cs lexerparser ,feat
13845,in add ngplural directive ,feat
13846,darttransform use targeted transformer tldr modify pubspecyaml file to use the recommended targeted transformer the unified simple angular transformer still work a always but we want to encourage use of the targeted transformer whereever possible see the wiki for detail about targeted transformer see ,refactor
13847,matcher add support for tomatchpattern in test ,test
13848,facade add enum index lookup support ,chore
13849,router handle url that doe not match a route close close ,fix
13850,changelog update change log to beta ,docs
13851,changedetection fix a memory leak ,fix
13852,closure dont throw from toplevel workaround for ,fix
13853,routerinstruction ensure tolinkurl includes extra params close ,fix
13854,release bump version to beta ,chore
13855,angularrouter apply annotation to controller constructor until angular is released the routeconfig and routercanactivate annotation for component must live on the controller constructor in angular it will automatically copy these annotation across from the component definition file close ,test
13856,angularrouter fix routerspec test these test were registering new component after the application had been bootstrapped which is not a valid use case for synchronous route in angular in particular it wa registering the root component which caused the rootrouter to blow up when it wa instantiated pointing to a root component that did not yet exist ,test
13857,angularrouter remove directiveintrospector the directiveintrospector wa a bit of a hack to allow the router to read the routeconfig annocation and routercanactivate hook from directive when they were registered it turn out that if we put these property on the component controller constructor function ie a static class method then we can simply use the injector to access it a required currently people put the property directly on their component definition object in angular we will copy these property onto the controller constructor to maintain a simple migration path but going forward it may be better to encourage people to add the property directly to the controller constructor ,refactor
13858,darttransform migrates test to use packagetest pt of migrating from packageguinness packageunittest packagetest this pr migrates directiveprocessor inlinerfortest unit test close ,refactor
13859,tagdefinitions include meta and base needed to parse indexhtml a a component template close ,feat
13860,darttransform annotationmatcher test these were previously not being run bring them up to modern usage move them to packagetest and include them in transformserverspecdart close ,refactor
13861,transformer change missing identifier to be an error close ,feat
13862,publishbuildartifactssh skip all the work for build other than upstreammaster close ,ci
13863,travis publish artifact only from the upstreammaster job ,ci
13864,travis simplify job status reporting ,ci
13865,contributingmd clarify the difference between build and ci commit message scope ,docs
13866,travis fix typo in webhooks config ,ci
13867,travis fix indentation in of the travisyaml ,ci
13868,travis clean up matrix environmental variable remove all unnecessary one ,ci
13869,travis clean up reorganize and document beforeinstall and install script functionally this should be a noop change ,ci
13870,travis remove bogus environmental variable ,ci
13871,travis better document beforecache script ,ci
13872,travis use gcc v to compile npm native module on node v and v ,ci
13873,analytics allow build analytics to take previous exit code a the first argument ,build
13874,analytics correctly report ci job error a error ,ci
13875,analytics report travis id without the build number prefix we need to track latency of individual job over time but dont care to know whats the build id that these job are associted with ,ci
13876,analytics fix travispullrequest reporting processenvtravispullrequest contains a string and not a boolean value so we need to compare it to a string literal rather than do boolean arithmetic ,ci
13877,router added method to get current instruction this method delegate to the root router to get the current complete instruction ,feat
13878,darttransform create standalone transformer for phase create transformer that allow specifying transformer action on specific library angulartransformcodegen generates all necessary code angulartransformreflectionrewriter replaces bootstrap call in application entry point to remove transitive dartmirrors import resulting in smaller code size faster execution angulartransformdeferredrewriter rewrite deferred import and loadlibrary call to initialize angular and preserve deferred operation proper configuration of these three transformer can replace the single angular transformer resulting in significant performance gain for build of large angular apps update angular itself to declare the codegen transformer since it ha neither deferred import nor application entry point remove the undocumented unused quicktransformer ,feat
13879,angularrouter renamed require statement after typescript file are transpiled the require function wa causing failure when bundled using browserify and systemjs close ,fix
13880,angularrouter add nglinkactive class to active nglink close ,feat
13881,transformer collect provider information ,feat
13882,test migrate dart test to packagetest instead of running with karma and the karmadart shim run dart test directly using the new packagetest runner this migrates away from packageunittest fix a couple test mostly associated with depending on absolute url or editing the test provider after an injector had already been created remove karmadart and associated file change gupfiles to run test via pub run test instead ,chore
13883,dart update dev dependency on codetranformers close ,chore
13884,compiler added span to html parser error allows using the html parser in context error are reported in a development tool such a an editor ,feat
13885,dart add a devmode check for undeclared lifecycle interface add a check in reflectioncapabilitiesinterfaces which determines if the passedin type implement a lifecycle interface but doe not declare that it doe so see for detail close ,feat
13886,iterablediffer support immutable list close ,feat
13887,build remove circular dependency in angular e output remove couple of circular dependency between module in angular e output caused by exceptionhandlerts and routerprovidersts fix the buildcheckcirculardependency gulp task to call madge properly to detect the circular deps close ,chore
13888,router support outlet within dynamic component fix internal b ,fix
13889,router add regex matcher petebacondarwin deserves credit for most of this commit this allows you to specify a regex and serializer function instead of the path dsl in your route declaration routeconfig regex az serializer params paramsaparamsb component mycomponent class component close close ,feat
13890,angularrouter rename router component binding to router the current router is passed to the current component via a binding to indicate that this is an angular provided object this commit renames the binding to router breaking change the recently added binding of the current router to the current component ha been renamed from router to router so now the recommended set up for your binding in your routed component is j binding router ,fix
13891,angularrouter support templateurl component ,fix
13892,angularrouter rename router component binding to router the current router is passed to the current component via a binding to indicate that this is an angular provided object this commit renames the binding to router breaking change the recently added binding of the current router to the current component ha been renamed from router to router so now the recommended set up for your binding in your routed component is j binding router ,fix
13893,build use fixed version of chromium canary that will be updated manually instead of automatically using the latest chrome canary ,fix
13894,changelog update change log to beta ,docs
13895,release bump version to beta ,chore
13896,webworker make messagebus eventemitter synchronous ,fix
13897,webworker fix postmessagebussink and source undefined error close ,fix
13898,test fix a broken test ,fix
13899,transformer collect information for compiledidependencymetadata ,feat
13900,core drop changedetectionstrategyonpushobserve breaking change onpushobserve wa an experimental feature for dart and had conceptual performance problem a setting up observables is slow use onpush instead ,feat
13901,test lengthen timeout for templateurl test this wa flaking on travis occasionally because the testcomponentbuilder is actually doing an xhr and it wa slow on the edge browser close ,chore
13902,build use chromium in travis for j test ,chore
13903,darttransform migrates test to use packagetest our transformer unit test currently use packageguinness which us packageunittest under the cover packageunittest ha been updated and renamed packagetest so for simplicity migrate test to use packagetest syntax ,refactor
13904,dartpayload fix runtime error in helloworld payload app the helloworld app used to measure dart payload size wa broken by a change in this breakage doe not materially affect the size of the generated code before fix after fix and since it wa a runtime error it wa not noticed not a problem update the app to work again close ,fix
13905,transformer make the map of resolved identifier configurable close ,feat
13906,in added inplural and inselect pipe close ,feat
13907,core add more debug apis to inspect the application form a browser add windowgetallangularrootelements add ngcoretokensapplicationref add ngcoretokensngzone close close ,feat
13908,di drop support for injecting type with generic in dart breaking change in dart we used to support injecting type with generic a this feature is hard to implement with the upcoming codegen we are dropping it merge cl in g with this change close ,feat
13909,dart uncomment dartdev build and make it required workaround for remove the input parameter to dartdoc close close ,ci
13910,transformer replace an error with a warning when can not resolve a symbol ,fix
13911,transformer record reflection info about abstract class close ,fix
13912,router query string are copied for hashlocationstrategy b p close ,fix
13913,changedetection allow to destroy onpush component inside of a host event close ,fix
13914,transformer special case type some builtin type so they can be resolved ,fix
13915,webworker wait for binding in kitchen sink spec ,fix
13916,transformer collect data needed for the template compiler close ,feat
13917,core support ngfor that ha an ngif a last node fix close ,fix
13918,pipe add replacepipe for string manipulation add commonly used pipe that is missing from framework featpipes add replacepipe for string manipulation add commonly used pipe that is missing from framework featpipes add replacepipe for string manipulation add commonly used pipe that is missing from framework featpipes add replacepipe for string manipulation add commonly used pipe that is missing from framework featpipes add replacepipe for string manipulation add commonly used pipe that is missing from framework featpipes add replacepipe for string manipulation add commonly used pipe that is missing from framework featpipes add replacepipe for string manipulation add commonly used pipe that is missing from framework featpipes add replacepipe for string manipulation add commonly used pipe that is missing from framework featpipes add replacepipe for string manipulation add commonly used pipe that is missing from framework featpipes add replacepipe for string manipulation add commonly used pipe that is missing from framework featpipes add replacepipe for string manipulation add commonly used pipe that is missing from framework featpipes add replacepipe for string manipulation add commonly used pipe that is missing from framework featpipes add replacepipe for string manipulation add commonly used pipe that is missing from framework featpipes add replacepipe for string manipulation add commonly used pipe that is missing from framework ,feat
13919,formsvalidators pattern validator adding static pattern validation method to validators adding a directive for the pattern validator applying clangformat rule to modified file updating public api spec for new pattern validator adding pattern validator to public api guard tool for close ,feat
13920,webworkers make waitforelementtext function more stable ,fix
13921,build fix jsserve not to throw ,cleanup
13922,test fix broken test from using the wrong xit also run clangformat ,chore
13923,testing add a test to ensure fakeasync work with angulartesting ,test
13924,router disable a flaky test ,test
13925,travis do not cache npm module ,build
13926,differ clean up stale identity change ref close ,fix
13927,angularrouter make the router binding onetime this binding is never going to change so we can make it a onetime binding close ,refact
13928,angularrouter rename route service to rootrouter the singleton service that represents the top level router wa called router but this is confusing since there are actually lot of router which depend upon where you are in the dom this is similar to the situation with scope this commit clarifies this singleton by renaming it to rootrouter breaking change the router injectable service ha been renamed to rootrouter ,fix
13929,angularrouter rename router component binding to router the current router is passed to the current component via a binding to indicate that this is an angular provided object this commit renames the binding to router breaking change the recently added binding of the current router to the current component ha been renamed from router to router so now the recommended set up for your binding in your routed component is j binding router ,fix
13930,angularrouter support templateurl component ,fix
13931,core add querylistforeach to public api ,feat
13932,core add querylistforeach ,feat
13933,test add withproviders for per test provider close ,feat
13934,domrenderer correctly handle namespaced attribute ,fix
13935,travis remove problematic chromebeta target for now ,chore
13936,changedetection allow to destroy onpush component inside of a host event ,fix
13937,changelog update changelog to beta ,docs
13938,release bump version to beta ,chore
13939,travis add an integration hook for the angular hubot daemon ,chore
13940,npm bump zonejs version to ,build
13941,package bump rxjs to beta close ,build
13942,material disable problematic ee test lgtm from victor and jeff in person ,test
13943,typescript add typescriptnext build install typescriptnext before buildjs and testtypings restore the regular version before travis cache nodemodules fix ,ci
13944,typing remove reexport of the promise builtin type instead tsdart can add the dartasync import whenever promise is used fix ,fix
13945,tsdart update tsdart to ,chore
13946,angularrouter added di string token close close ,fix
13947,changelog update changelog to beta ,docs
13948,release bump version to beta ,chore
13949,zonejs update to ,chore
13950,zonejs update to ,chore
13951,build publish typing directory to our npm snapshot branch ,fix
13952,typing publish e typing rather than postinstall despite local testing multiple user failed to run the postinstall to install typing instead we can distribute the typing we installed locally this is an alternative to this also reverts rxjs to beta since we have error using beta being addressed in fix ,fix
13953,changelog update change log to beta ,docs
13954,release bump version to beta ,chore
13955,release need to depend on latest rxjs and zonejs the version in our packagejson get copied to the one we publish and user need the latest of these ,fix
13956,changelog update change log to beta ,docs
13957,release bump version to beta ,chore
13958,darttransform simplify deferred rewriting simplify the deferredrewriting and move packagequiver to a dev dependency close ,refactor
13959,svg provide support for svg foreignobject by adding xhtml namespace close ,feat
13960,domrenderer correctly handle namespaced attribute close ,fix
13961,typing install esshim typing to a location user can reference this make the upgrade to beta a simple a adding one reference tag only when targetes implement option from ,feat
13962,form use strict runtimetype check instead of instanceof currently validators extending builtin validators are treated a builtin this can result in an error when both a real builtin validator and a custom one are applied to the same element close ,fix
13963,form add radiobuttonvalueaccessor to the list of default value accessors ,fix
13964,router added route data to normalized async route close ,fix
13965,ngfor update view local if identity change close ,fix
13966,router fix url path for star segment in path recognizer url path of star segment should equal the original path if you register the route applocation and invoke a url like appfoobar the pathrecognizer should return a url path equal to the invoked url before this patch everything after foo wa ignored which resulted in a redirect to appfoo which wa probably not intended at least in the angular component router close ,fix
13967,compiler use event name for matching directive close ,fix
13968,form add support for radio button close ,fix
13969,angularrouter license year updated close ,style
13970,angularrouter add missing wrapper method close close close ,fix
13971,upgrade fix infinite rootscopedigest fix close ,fix
13972,core add detail to dehydrated detector exception at least i know what component is causing the error with this without it the exception is so generic that it not useful close ,fix
13973,core mute mode printing in console in prod mode close ,fix
13974,mock update variable name in directiveresolvermockts close ,refactor
13975,di throw if a token us more than dependency fix close ,fix
13976,router fixed the location wrapper for angular in angular locationpath return the complete path including query string in angular the query parameter are missing similar to this locationgo doe accept two parameter path and query close ,fix
13977,angularrouter test that location handle query string see ,test
13978,angularrouter allow component to bind to router ,feat
13979,router dont prepend unnecessarily to location path close close ,fix
13980,angularrouter add support for using the component helper in angular there is a new helper method for creating component directive see for more information about component these kind of directive only match the e element form and the previously component router only created html that matched directive that matched the a attribute form this commit change the ngoutlet directive so that it generates custom html element rather divs with custom attribute to trigger the relevant component to appear in the dom going forward angular user are encouraged to create their router component using the following style mymodulecomponnetcomponentname component definition object close angularangularjs close close breaking change the component router now creates custom element html rather than custom attribute html in order to create a new component so rather than html div customcomponentdiv it now creates html customcomponentcustomcomponent if you defined you router component using the directive helper and specified the restrict property such that element matching wa not allowed eg restrict a then these component will no longer be instantiated by the component router and the outlet will be empty the fix is to include e in the restrict property restrict ea note that this doe not affect directive that did not specify the restrict property a the default for this property is already ea ,fix
13981,cheatsheet fix dart cheatsheet also deletes an extraneous period from the j cheatsheet close ,docs
13982,hostbindingmetadata removed bracket from host binding in hostbindingsmetadata example close ,docs
13983,router updated inconsistency in router doc close ,docs
13984,transformer collect information about di dependency and provider ,feat
13985,build dont try to copy dts file into the npm distro fix ,fix
13986,typing dont expose typing dependency to user this resolve duplicate identifier issue seen by many user at the expense of more typing installation required in some case remove the quickstart hack of placing all needed dependency typing file in our distribution remove dependency on nodejs from angularcore fix fix fix angular now depends on espromise and escollections and a handful of manual typing rather than all of esshim fix we previously had an undocumented breaking change this is now documented in this commit fix breaking change transitive typing are no longer included in the distribution you may need to install typing in your project using user now must rely on getting typing from one of the peerdependencies such a rxjs which expose typing via the moduleresolutionnode mechanism see this happens automatically using target e now requires manual installation of espromise and escollections typing using some angular apis may introduce a dependency on eg nodejs or jasmine and those typing need manual installation a well close ,fix
13987,typing use mainline definitelytyped repo rather than a fork the upstream jasmine typing dont define a type for the global object with jasmine method polluting it so just use any also zonejs ha a different name upstream ,chore
13988,deps update tsdart and zonejs ,chore
13989,changelog add missing breaking change for beta ,docs
13990,changelog changelog for beta ,docs
13991,release bump version to beta ,chore
13992,compiler fix interpolation regexp fix the interpolation regexp to match newline character ie n and r close ,fix
13993,router fix incorrect url param value coercion of to true seriliazeparams is coercing a value of to true which cause the value to be completey dropped change the test from double equal to triple equal to prevent this from happening close close ,fix
13994,header serializable tojson fix close ,fix
13995,fix mockbackend example using backendconnections observer properly format observer example ,docs
13996,fix example usage of mockbackend ,docs
13997,make all typing explicit ,chore
13998,webworkers fix flaky webworker test close ,fix
13999,reflectioncapabilities ziptypesandannotations not ziptypesandannotaions i wa stepping through the reflector and came across this little guy close ,style
14000,async handle synchronous initial value in async pipe close ,fix
14001,validators fix validatorsrequired marking number zero a invalid close ,fix
14002,core update querylists onchange to changessubscribe ,docs
14003,ngfor add custom trackby function support make it possible to track item in iterables in custom way eg by id or index rather than simply by identity close ,feat
14004,darttransform error in name convert funcs on unexpected input issue raised in pr previously the transformer name conversion function could return the input string on unexpected input which is almost certainly an error throw in this case instead so we know early that something ha likely gone wrong close ,refactor
14005,darttransform only process deferred libs when necessary previously every dart file in a package wa processed to ensure proper initialization of deferred loaded library update the transformer to avoid processing library which we know do not import any deferred library close ,perf
14006,router make the buildjs script portable to g ,build
14007,router refactor angular router build script ,build
14008,upgrade support bindtocontroller with binding definition since angular we can also pas controller binding directly to bindtocontroller making this syntax more convenient close ,feat
14009,added base request option for test example ,docs
14010,cheatsheet change a to name in routing section ,docs
14011,changelog fix header for beta ,docs
14012,developer add linting instruction ,docs
14013,doc rxjsaddoperatorsmap rxjsaddoperatormap no s wa it with s before ,fix
14014,karma fix running karma via gulp a described below the karma server showdown process can crash if the done function provided by gulp is referenced directly instead of wrapped in a closure function reformat the gulpfilejs squashing the two commits ,fix
14015,darttransform handle edge case in reflectionremover handle some case which would previously result in broken code importing bootstrapdart deferred using combinators when importing bootstrapdart importing bootstrapdart with a prefix close ,fix
14016,zonejs update to close ,chore
14017,zone correct incorrect call to zone ,fix
14018,darttransform update unit test to expect code in filetemplatedart close ,test
14019,darttransform generate all code into filetemplatedart previously we generated the code to initialize the reflector into the filengdepsdart and the compiled template and change detector code into filetemplatedart update the transformer to generate all code into filetemplatedart to avoid the additional http request necessary when debugging application in dartium ,feat
14020,dart comment out dartdev build see ,ci
14021,circle predependencies npm install npm fix ,fix
14022,build revert builddart make dart dev build required this reverts commit aafdadbdddfc ,fix
14023,dart make dart dev build required previously we allowed the dart dev build to fail presubmit test make it a required build from now on close ,build
14024,changelog improve breaking change description for beta ,chore
14025,test fix broken linker integration test and fix debugnode export fix two small issue introduced with pr ,chore
14026,debug replace debugelement with new debug dom now using ngprobeelement in the browser console return a debugelement when in dev mode componentfixturedebugelement also return a new debugelement breaking change this is a breaking change for unit test the api for the debugelement ha changed now there is a debugelement or debugnode for every node in the dom not only node with an elementref componentviewchildren is removed and childnodes is a list of elementnodes corresponding to every child in the dom query no longer take a scope parameter since the entire rendered dom is included in the childnodes before componentfixturedebugelementcomponentviewchildren after depending on the dom structure of your component the index may have changed or the first component child may be a subchild componentfixturedebugelementchildren before debugelementquerybycssdiv scopeall after debugelementquerybycssdiv before componentfixturedebugelementelementref after componentfixtureelementref ,feat
14027,bundle add angularplatformtestingbrowser to systemjs testing bundle ,fix
14028,query don ’ t cross component boundary close ,fix
14029,query update view query that query directive in embedded view fix ,fix
14030,changelog update change log to beta ,docs
14031,release bump version to beta ,chore
14032,ci deflake test and turn on saucelabsrequired fix close ,chore
14033,circleci use a github token when running tsd also increase the heap size limit a a workaround for fix ,chore
14034,ci turn off saucelabsrequired reenable once fixed ,chore
14035,ci bump up the error count for dart ddc ,chore
14036,webworkers add support for transitionend event close ,fix
14037,webworker add router support for webworker apps close ,feat
14038,ddc make ddc build nonexperimental ,chore
14039,changedetection allow all legal program in the dev mode before the following would throw in the dev mode because f would return a new array when called by checknochanges component template f class a f return after the checknochanges function compare only primitive type for equality and deeply compare iterables other object can not cause checknochanges to throw this mean that the dev mode would never fail given a legal program but may allow some illegal program ,feat
14040,ddc router compiler web worker fix for ddc also enable ddc check across all nonweb worker playground apps we are now down to ddc error across all of them the remaining two need to be fixed in packageanalyzer not in angular breaking change there a chance of breakage a router instruction constructor signature changed close ,fix
14041,contributingmd add doc for ci commit typescope ,docs
14042,core always remove dom listener and stream subscription this is needed to prevent memory leak the dom listener don ’ t need to be removed for simple example but a big internal app show memory leak because of them breaking change rendererlisten now ha to return a function that remove the event listener ,fix
14043,darttransform ensure template codegen is completed sync previously template codegen wa done asynchronously which could result in reflector state being overwritten and leading to compile error update the codegen to run synchronously to ensure this doe not happen close ,fix
14044,ddc reduce ddc warning cap a we fixed a bunch close ,chore
14045,ddc type fix necessary to bring ddc severe count to ,fix
14046,core deactivate the test that use dart isolates these are broken with dart stable and will soon be obsolete see ,chore
14047,bundle testing bundle should include browser platform close ,fix
14048,gulp fail hard w legacy node version and provide clear upgrade instruction close ,build
14049,developermd update framework developer instruction ,docs
14050,node upgrade to node ,build
14051,npm update to karmabrowserstacklauncher ,build
14052,npm bump angulars version number in shrinkwrap file to beta ,build
14053,npm update to karma mark say that karmarunnerkarma is resolved in ,build
14054,npm update to minimatch ,build
14055,npm update to semver ,build
14056,npm lock karma at due to karmarunnerkarma ,build
14057,npm update to yargs ,build
14058,npm update to proxymiddleware ,build
14059,npm remove googleapis it wa previously used by benchpress see dcaccbbbcbfdaff but thats no longer the case i also removed a bunch of extranous dependency that should never have been part of nodemodules npm bug ,build
14060,npm update to gulpconnect ,build
14061,npm update gulpconnects dependency ,build
14062,npm lock broccolislowtrees to the xx range ,build
14063,npm update to lodash ,build
14064,npm remove del devdependency use fsextra instead ,build
14065,npm add toolsnpmreshrinkwrap script and update doc ,build
14066,npm update to mockfs ,build
14067,npm update to fsextra ,build
14068,npm update to minimist ,build
14069,npm update to jasmine ,build
14070,npm upgrade to broccoli ,build
14071,npm upgrade to broccolifunnel ,build
14072,npm upgrade to protractor ,build
14073,npm downgrade to karma due to rangeerror bug ref ,build
14074,npm upgrade to karmasaucelauncher ,build
14075,npm revert clangformat upgrade there are too many reformatting change require that would add noise to the upgrade commit ,build
14076,npm update all npm dependency reshrinkwrap ,build
14077,tool npmcopynpmshrinkwrap should gracefully handle situation when shrinkwrap file is missing this situation occurs during ma update of all dependency so we should not throw error when this happens ,build
14078,npm upgrade to npm v close ,build
14079,darttransform promote missing directive warning to error close close ,feat
14080,testing remove test zone for now and rely on returned promise add test for public dart and t framework to make sure that component with templateurl can be created by the testcomponentbuilder close close ,fix
14081,darttransform directiveprocessor do not process generated file prevent directiveprocessor from processing file which were generated by the angular dart transformer close ,feat
14082,htmllexer fix for unicode char fix close ,fix
14083,coreapplicationref allow asyncronous app initializers close close ,feat
14084,transformer record hostbinding annotation applied to getters close ,fix
14085,perf faster looseidentical implementation remove string type check in looseidentical in jsmode it is not necessary a dartjs already compiles identical to which compare string content inline call site this improves change detection of plain field by on a large internal app the improvement is close ,fix
14086,dart make some playground sample run with dart dev compiler resolve all invalid field override error workaround current reflection limitation in dart dev compiler todo helloworld and keyevents sample now work with dart dev compiler breaking change remove templaterefelementref setter close ,fix
14087,node split test and src compilation unit ,build
14088,ddc use dynamic type in reflection typedefs close ,fix
14089,build fix race condition for the bundlesjsdocs task ,chore
14090,templateparserts typo ,docs
14091,circle config add a circle ci config this only run the j build no test a an easy place to start green build on my branch note we are just experimenting with circle at this point close ,ci
14092,test remove unnecessary nosuchmethod remove trivial implementation in many spy object which just call the parent nosuchmethod close close ,refactor
14093,dartanalyzer ignore todos during build the newest version of the analyzer emits hint when it encounter todos in code which is breaking the dart dev version of our build ignore todos for the purpose of build health see ,build
14094,travis update name of sync branch to be ignored close ,chore
14095,change packagejson license field to mit align the packagejson license with the license file from the repo close ,doc
14096,developer fix saucelabs gulp task name task is testunitjssauce not testunitjssaucelabs close ,docs
14097,templatecompiler fix erroneous cycle detection before the check for cycle wa wrong and lead to false positive fix close ,fix
14098,darttransform update dependency fix dart test widen version dependency for packageangular packagecodetransformers and packageobserve packageguinness us packageunittest while the newest version of packagecodetransformers use packagetest this cause our endtoend dart transformer test which use testing code in packagecodetransformers to be skipped to fix this move ee test to run in a separate file run gulp testserverdart test serially close close ,test
14099,webworker rename workerrenderapp to workerrenderapplication breaking change workerrenderapp is now deprecated use workerrenderapplication instead workerrenderappcommon ha been replaced by workerrenderapplicationcommon close close ,refactor
14100,darttransform avoid using packagecodetransformers replace us of packagecodetransformers which is only used to convert from uri to assetid with call to the utility method in srctransformcommonurlresolverdart close ,refactor
14101,build make experimental dart build useful previously we grepped all handwritten dart code and ran analyzer in strong mode against it now we run it against transformed playground apps which doe not analyze unnecessary code we primarily care about stuff that run in the browser analyzes generated code which doe run in the browser and which we failed to analyze in the previous version of the build close ,chore
14102,webworkers support angularentrypoint in web worker and enable transformer on all playground apps close ,fix
14103,test allow test to specify the platform and application provider used with provider split into bundle the test injector is now able to use provider for a given bundle suggested provider list for test are available in angularplatformtestingplatform change the provider for a test suite using setbasetestproviders this should be done once at the start of the test suite before any test case run breaking change test are now required to use setbasetestproviders to set up assuming your test are run on a browser setup would change a follows before j somewhere in test setup import browserdomadapter from angularsrcplatformbrowserbrowseradapter browserdomadaptermakecurrent after j somewhere in the test setup import setbasetestproviders from angulartesting import testbrowserplatformproviders testbrowserapplicationproviders from angularplatformtestingbrowser setbasetestproviderstestbrowserplatformproviders testbrowserapplicationproviders close close close ,feat
14104,changedetection chain expression evaluate to the last expression codegen fix close ,fix
14105,directive throw if output the same event more than once close ,fix
14106,cheatsheet fix pipe name in an example close ,docs
14107,testability expose function frameworkstabilizers close ,feat
14108,npm update to tsdart close ,build
14109,cheatsheet fix bootstrap t namespace fix close ,docs
14110,changelog update change log to beta ,docs
14111,release beta catamorphicinvolution ,chore
14112,darttransform avoid unnecessary read for file with no view in the templatecompiler phase avoid reading in the ngmetajson file of imported library when we can determine that the file we are processing doe not define any view close ,perf
14113,core speed up view creation via code gen for view factory breaking change platform pipe can only contain type and array of type but no binding any more when using transformer platform pipe need to be specified explicitly in the pubspecyaml via the new config option platformpipes compilercompileinhost now return a hostviewfactoryref component view is not yet created when component constructor is called use oninit lifecycle callback to access the view of a component viewrefsetlocal ha been moved to new type embeddedviewref internalview is gone use embeddedviewrefrootnodes to access the root node of an embedded view renderersetelementproperty setelementstyle setelementattribute now take a native element instead of an elementref renderer interface now operates on plain native node instead of renderelementrefs or renderviewrefs close ,feat
14114,build allow to run example and benchmark without bundle the bundle will only be used if the flag usebundles is passed to gulp buildjs ,chore
14115,ci cleanup artifact upload this is no longer needed for gsync close ,chore
14116,saucebs make some browser required in ci close ,build
14117,form fix selectcontrolvalueaccessor not to call onchange twice close ,fix
14118,router preserve specificity for redirects previously when comparing which of multiple possible route to choose in an ambiguous case we looked at the specificity of the target of redirect match rather than the original match this meant that if a redirect used a whilecard but redirected to a target that wa a static path wed cound the static path specificity instead of the wildcard this change store the specificity of the redirect on the redirectinstruction close ,fix
14119,benchpress fix flake memory wa not allocated to be high enough resulting in partial result to be clipped and therefore failing the assertion close ,fix
14120,changelog typo fix close ,fix
14121,templateparser do not match on attrs that are binding close ,fix
14122,broccolitypescript check for map file before deleting them fix close ,build
14123,cheatsheet fix typo in template syntax description close ,docs
14124,doc update the merge process doc use caretaker rather than onduty close ,chore
14125,router correctly sort route match with child by specificity this change the way we calculate specificity instead of using a number we use a string so that combining specificity across parentchild instruction becomes a matter of concatenating them fix close ,fix
14126,testing move common testing logic into testinjector before all test framework wrapper internal for dart and jsts angulartest for dart and testing for jsts had similar logic to keep track of current global test injector and test provider list this change wrap that logic into one class managed by the test injector close ,refactor
14127,core ie only support parentnode close ,fix
14128,build tighten up code size check now that regression is fixed our code size sla is kb gzipped and kb minified our target is kb gzipped we are currently under kb gzipped let keep it that way while looking for way to improve the situation further were not kb minified yet so we should be stricter here too close ,chore
14129,code size revert previous devmode change to restore size target this commit reverts addbf that introduced a code size regression kb gzipped kb minified in dart effect on the hello world app gzipped kb kb minified kb kb breaking change this is very unlikely to be breaking but im still marking just in case the only change to the user should be that dev mode is driven by dart checked mode like it wa in the past ,fix
14130,core improve noannotationerror message close close ,feat
14131,core improve stringify for dart to handle closure ,feat
14132,doc fix an import in toolsdartmd close ,fix
14133,router support link with just auxiliary route close ,feat
14134,changelog fix typo in somnambulant ,docs
14135,readme remove angular j dart link they are confusing now that we are in beta ,docs
14136,readme update readme no longer alpha ,chore
14137,release cut beta sonambulentinauguration ,chore
14138,changelog release note for beta sonambulentinauguration ,docs
14139,release cut alpha ,chore
14140,changelog add release note for alpha ,docs
14141,router export routerlinkdslprovider and hide mockpopstateevent ,fix
14142,publish add rx bundle to codeangularjsorg publish step close close ,chore
14143,core enable dev mode by default breaking change before previously angular would run in dev prod mode by default and you could enable the dev mode by calling enabledevmode after now angular run in the dev mode by default and you can enable the prod mode by calling enableprodmode ,feat
14144,publishsh uncomment prepare step for existing tmp repo i tested these step manually and they seem to work well ,build
14145,release cut alpha rxjs bundle separation ,chore
14146,changelog add alpha release note ,docs
14147,bundle rename the testingjs bundle breaking change systemregister testing bundle wa renamed testingjs testingdevjs close close ,fix
14148,bundle rename umd bundle breaking change umd bundle were renamed angularumdjs angularallumdjs angulartestingumdjs angularalltestingumdjs close ,fix
14149,cheatsheet fix the e snippet for service ,docs
14150,gulp remove obsolete insertrxlicense bundle transform ,build
14151,bundle update rxjs info in bundlesoverviewmd post ,docs
14152,docsbenchmarks remove invalid input closing tag closing ,fix
14153,cheatsheet adding j specific syntax to cheatsheet close ,docs
14154,bundle make rxjs an external dependency in umd bundle close close ,refactor
14155,package update rxjs to beta ,chore
14156,bundle use rxjs bundle ,chore
14157,bundle dont include rxjs in systemregister bundle breaking change rxjs used to be bundled with angular code and this is not the case any more rxjs need to be loaded explicitly ,fix
14158,testing reenable injectasync checking for return value before injectasync would check the return value and fail if it wa not a promise to help user remember that they need to return a promise from an async test removed that with the introduction of the testing zone this undeprecates injectasync until we can resolve to be clear this mean that inject and injectasync are now identical except that injectasync will fail if the test doe not return a promise and inject will fail if the test return any value close ,refactor
14159,publishsh do not error when tmpcodeangularjsorg already exists im not sure whats the best way to update the shallow repo and im in a state where there is nothing to be updated so ill revisit the proper fix the next time im doing a release unless someone beat me to it close ,build
14160,linker remove vestigial componenturlmapper close ,cleanup
14161,document a lot more symbol that are missing comment in our generated doc ,docs
14162,directive drop moduleid moduleid is only used by component to resolve url directive have no template and do not need moduleid close ,refactor
14163,bundle document existing bundle and their usage close close ,docs
14164,changelog fix rxjs operator import path close ,fix
14165,testing move common testing logic into testinjector before all test framework wrapper internal for dart and jsts angulartest for dart and testing for jsts had similar logic to keep track of current global test injector and test provider list this change wrap that logic into one class managed by the test injector close ,refactor
14166,contributingmd improve submit issue instruction close ,docs
14167,bundle remove polyfills from angularjs bundle breaking change previously angularjs angularminjs and angulardevjs bundle would have zonejs and reflectmetadata preappended new bundle dont contain zonejs nor reflectmetadata those external dependency can be easily loaded into a browser using angularpolyfillsjs close ,fix
14168,zonejs update to close ,chore
14169,webworker make webworker bootstrap synchronous breaking change from the app thread in both typescript and dart you bootstrap the app using application instead of asyncapplication before typescript platformworkerappplatform asyncapplicationsetupwebworker optionalproviders thenref refbootstraprootcomponent now typescript platformworkerappplatform applicationworkerappapplication bootstraprootcomponent close close ,refactor
14170,bundle align content of systemregister and umd bundle close ,chore
14171,bundle properly clean the distbuild folder the distbuild folder is created a part of the bundling process but it wa never cleaned up in the clean task close ,chore
14172,htmllexer process carriage return in one pas close ,refactor
14173,bundle add http and router mock to angulartesting close ,chore
14174,changelog fix formatting for alpha close ,chore
14175,bundle remove ngupgrade from the angularjs bundle close breaking change ngupgrade related symbol are no longer part of the angularjs bundle ngupgrade ha a dedicated upgradejs bundle now close ,fix
14176,release cut alpha no more angularangular ,chore
14177,changelog changelog for alpha ,docs
14178,facade do not reexport observable from angularcore breaking change before import observable from angularcore after import observable from rxjsobservable ,feat
14179,webworkers remove unnecessary setup module and approoturl since approoturl is removed the logic for extending and emitting the root url a part of the setup seems unnecessary breaking change the setupwebworker function exported from angularplatformworkerapp no longer return a promise of provider but instead synchronously return provider related to close ,fix
14180,compiler remove approoturl related to this should not break anything because approoturl wasnt actually being used by the compiler anymore ,fix
14181,core replace angularangular with the right barrel import related to close ,docs
14182,angular remove angularts module close close breaking change angularangular wa removed use the correct import from one of the barrel eg angularcore angularplatformbrowser angularcommon … note this only applies to javascript dart is not changed ,fix
14183,angular dont export compiler bit a public api close close breaking change the following symbol are not exported from angularangular any more urlresolver approoturl geturlscheme defaultpackageurlprovider use import from angularcompiler instead ,fix
14184,bundle dont use angularangular in config of systemregister bundle related ,fix
14185,publicspec check export of barrel instead of angularangular this change the public api spec to check each public barrel individually to make sure it api ha not changed the previous api spec ha been preserved but split into respective barrel the compiler barrel ha been added to the spec along with all of it public export previously angularangular wa only exporting a handful of symbol from compiler so there are now many more symbol being tested in the spec for compiler than previously part of close supercedes ,fix
14186,tool remove unused performance import close ,chore
14187,style escape r character in compiled text close close ,fix
14188,header implement tojson ,feat
14189,upgrade allow directive with empty template ,fix
14190,animate ensure transition property are removed once the animation is over ,fix
14191,cheatsheet copyedit fixed a few little thing ill probably have more change to make later once i understand everything better also added a missing syntax line close ,docs
14192,testing limit import of barrelprivate apis close ,refactor
14193,benchmark remove import from angularangular close ,refactor
14194,core remove import from angularangular close ,test
14195,htmlparser allow ngcontent element regardless the namespace relates to close ,fix
14196,templateparser match element and attribute regardless the namespace ,fix
14197,core myriad of documentation change including lot of new example code ,docs
14198,test disable flaky firefox test tracking issue is close ,chore
14199,async support behaviorsubjects in async pipe ,fix
14200,async improve rx support in observablewrapper ,fix
14201,playground remove import from angularangular part of close ,refactor
14202,example remove import from angularangular close ,refactor
14203,material remove import from angularangular close ,refactor
14204,domrenderer movenodeaftersiblings should not detach the reference node fix close ,fix
14205,parse support comment node with gettext and settext in the browser calling elementtextcontent cause child comment node to be ignored while getting textcontent directly on a comment node will return the comment this change make parseadapter consistent with this behavior by adding a nd argument to gettext telling if it being called recursively close ,fix
14206,renderer use a comment instead of an element when stamping out template element originally authored by tbosch this reverts the revert commit effacaebdeaeef close ,feat
14207,domrenderer add setbindingdebuginfo method this is used for setting property binding value a attribute on element when running in dev mode this implementation will also serialize binding information to template placeholder comment node close ,feat
14208,benchpress add receiveddata requestcount to perflogmetric close ,feat
14209,gulpfilejs cleanup obsolete file reference close ,refactor
14210,kebabcasemd more fix and cs migration instruction close ,docs
14211,kebabcase fix typo on property close ,docs
14212,changelog fix ngfor on template close ,fix
14213,core workaround for typescript breakage i dont understand why i need to declare the typehere but it resolve the issue look like a bug in tsc fix ,fix
14214,changelog add link back to a packagejson close ,docs
14215,release cut alpha the new beginning ,chore
14216,changelog add changelog for alpha ,docs
14217,kebabcasemd fix indentation add link and other small change ,docs
14218,kebabcasemd add link to the design doc ,docs
14219,changelog add breaking change note about peerdependencies close ,docs
14220,camelcase angular legacy template transformer ,feat
14221,camelcase angular migration guide ,doc
14222,npmpublishsh run gulp via node maxoldspacesize to workaround ,build
14223,changelog release note for alpha ,docs
14224,release cut alpha the last release of angular a we know it ,chore
14225,npm update to tsdart resolve regression in close ,build
14226,npm update to typescript fix broccolitypescript fix src ,build
14227,npm update to gulptypescript ,build
14228,npm bump tsdart to ,build
14229,core provide support for relative asset for component asset defined for templateurl and styleurls can now be loaded in relative to where the component file is placed so long a the moduleid is set within the component annotation close ,feat
14230,cheatsheet add dartspecific syntax heading close ,docs
14231,core provide support for relative asset for component asset defined for templateurl and styleurls can now be loaded in relative to where the component file is placed so long a the moduleid is set within the component annotation close close ,feat
14232,changelog fix formatting for alpha close ,chore
14233,upgrade remove import from angularangular related ,refactor
14234,bundle add angulartesting umd bundle close close ,feat
14235,observable add documentation for observable and operator close close ,docs
14236,cheatsheet update to new syntax see close ,docs
14237,angularentrypoint add missing backticks ,docs
14238,release update packagejson and changelog to alpha ,chore
14239,testing package angulartesting to prepare it for publishing close ,feat
14240,use any for resjson return fix close ,fix
14241,testing remove symbol dummy shim close close ,fix
14242,package update rxjs dependency to alpha close close ,chore
14243,package add missing comma in nghttp packagejson close ,fix
14244,release update packagejson and changelog to alpha ,chore
14245,contributingmd add doc for build commit type our build system is pretty complicated and we have many commits that touch it for this reason these kid of change warrant it own type close ,docs
14246,bundle remove sfx bundle close breaking change the existing sfx bundle angularsfxdevjs is replaced by umd bundle angularumdjs and angularumddevjs the new umd bundle dont have polyfills zonejs reflectmetadata preappended those polyfills can be easily loaded by including the angularpolyfillsjs bundle close ,fix
14247,dynamiccomponentloader leave the view tree in a consistent state when hydration fails close ,fix
14248,bootstrap fix the configuration of exceptionhandler ,fix
14249,pipe improve the error message of invalidpipeargumentexception ,cleanup
14250,bundle rename angularpolyfills to angularpolyfills ,chore
14251,bundle rename externaldependencies to angularpolyfills close breaking change the externaldependenciesjs bundle wa removed use angularpolyfillsjs instead close ,fix
14252,router set correct redirectdefault url from hashchange currently hashchange event outside of angular that cause navigation do not take into account case where the initial route url change due to a redirect or a default route close close ,fix
14253,bundle cleanup and reorganize umd bundle fix part of breaking change number and content of umd bundle have changed we only publish one bundle that contains core common platformbrowser router instrumentation and upgrade exported name have changed and now core is exported a ngcore common is exported a ngcommon platformbrowser is exported a ngplatformbrowser http is exported a ng router is exported a ngrouter instrumentation is exported a nginstrumentation upgrade is exported a ngupgrade close ,fix
14254,form form directive are exportedas ngform wa form fix breaking change before form fform after form fngform close ,fix
14255,broccoli convert dependency to peerdependencies in all packagejson template this is more correct and resolve the issue of having dupe within the same project this change ha no impact on our shrinkwrap since peerdeps and deps are merged into one within the shrinkwrap file breaking change rxjs reflectmetadata zonejs and esshims now must be specified a explicit dependency of each angular app that us npm for package management to migrate please add the following into the dependency section of your packagejson dependency espromise esshim reflectmetadata rxjs alpha zonejs close close ,build
14256,npm dedupe espromise dependency ,build
14257,npm add espromise a a dependency this is actually an inherited dependency that come from zonejs see related issue it would be better to make this one an optionalpeerdependency but npm currently doesnt support making peerdependencies optional see ,build
14258,npm move esshim from devdependencies to dependency to be later used a a peerdependency in the generated packagejson it would be better to make this one an optionalpeerdependency but npm currently doesnt support making peerdependencies optional see ,fix
14259,observable implement topromise and frompromise without side effect breaking change topromise is no longer an instance method of the observable returned by angular and frompromise is no longer available a a static method the easiest way to account for this change in application is to import the autopatching module from rxjs which will automatically add these operator back to the observable prototype import rxjsaddoperatortopromise import rxjsaddobservablefrompromise close close ,refactor
14260,templateparser allow template element regardless the namespace close ,feat
14261,htmlparser ignore lf immediately following pre textarea listing fix close ,fix
14262,htmllexer tag name must follow without space see ,fix
14263,htmllexer allow in text token fix ,feat
14264,htmlparser do not add parent element for template child fix ,fix
14265,htmllexer handle cr in input stream per html spec fix close ,fix
14266,compiler support property on svg element have domelementschemaregistry support namespaced element so that it doe not fail when directive are applied in svg or xlink without this fix directive or property binding can not be used in svg related to close ,fix
14267,htmlparser mark source element a void fix close ,fix
14268,changelog correct import path close ,fix
14269,router updated documentation for router generate method close ,docs
14270,build lock down version of packagecodetransformers a new verion is causing build issue perhaps due to an undeclared dependency on packagetest for now lock down the version to the last known working one ,fix
14271,changelog add rxjs import breaking change close ,fix
14272,parser add test for conditional expression close ,chore
14273,fix mockbackend import fix close ,docs
14274,package relock rxjs to alpha fix close ,fix
14275,changelog mention http mockbackend close ,chore
14276,testlinker fix typo in directive name ,refactor
14277,testlinker remove unused directive in test ,refactor
14278,changelog update change log to alpha ,chore
14279,release increment version to alpha ,chore
14280,sourcemaps use inline source map and inline source in nodetree close ,feat
14281,typing import globalesdts in core currently importing from angularangular in addition to providing angular token brings in globalesdts since we are deprecating angularangular we need to do the same in angularcore ,feat
14282,htmlparser enforce only void foreign elts can be self closed breaking change whatever used to be expanded to whateverwhatever the parser now follows the html spec more closely only void and foreign element can be self closed close ,feat
14283,htmlparser enforce no end tag for void element breaking change end tag used to be tolerated for void element with no content they are no more allowed so that we more closely follow the html spec ,feat
14284,rename enums to be singular readystates readystate requestmethods requestmethod responsetypes responsetype fix breaking change before import readystates requestmethods responsetypes from angular after import readystate requestmethod responsetype from angular close ,refactor
14285,changelog remove reverted template element change close ,docs
14286,validators rename maxlength validator parameter close ,refactor
14287,tool fix import statement in the example close ,docs
14288,webworker add angularentrypoint to workerapp bundle close ,fix
14289,router implement router link dsl close close ,feat
14290,htmlparser ngcontent is not a void element fix close ,fix
14291,testinjector provide separate method for creating test injector with and without runtime compiler breaking change createtestinjector doe not more include the runtime compiler use createtestinjectorwithruntimecompiler instead close ,refactor
14292,dartreflection fix noreflectioncapabilities interface make noreflectioncapabilities conform to the platformreflectioncapbilities api which prevents some confusing error message close close ,fix
14293,coreforms inputtypetext valuechanges fire unexpectedly close close ,fix
14294,broccolicheckimports allow import from self by default close ,refactor
14295,build enforce import check for the http module close ,chore
14296,angularrouter added value for router root component close close ,refactor
14297,test add config for pub serve testing close close ,chore
14298,webworker use the new generic bootstrap breaking change you can no longer bootstrap a webworker or isolate using bootstrap or bootstrapwebworker instead you have to do the following in typescript typescript indexjs import workerrenderplatform workerrenderapplication workerscript from angularplatformsworkerrender import platform from angularplatform platformworkerrenderplatform applicationworkerrenderapplication new providerworkerscript usevalue loaderjs javascript loaderjs importscripts angularwebworkerworkerjs systemimportapp typescript appts import component view from angularcore import workerappplatform setupwebworker from angularplatformsworkerapp import platform from angularplatform component selector helloworld view template hhello nameh export class helloworld name string jane platformworkerappplatform asyncapplicationsetupwebworker optionalproviders thenref refbootstraprootcomponent in dart dart indexdart import angularplatformdart import angularplatformsworkerrenderdart main platformworkerrenderplatform asyncapplicationinitisolatemyworkerdart dart backgroundindexdart import angularplatformdart import angularplatformsworkerappdart import packageangularsrccorereflectionreflectiondart import packageangularsrccorereflectionreflectioncapabilitiesdart component selector helloworld view template hhello nameh class helloworld string name jane mainliststring args sendport replyto reflectorreflectioncapabilities new reflectioncapabilities platformworkerappplatform asyncapplicationsetupisolatereplyto thenref refbootstraprootcomponent you should no longer import from the angularwebworkerworker and angularwebworkerui path instead you can now import directly from core directive etc the webworkerapplication class ha been removed if you want to use servicemessagebroker or clientmessagebroker on the render thread you must inject their factory via di if you need to use the messagebus on the render thread you must also obtain it through di close close close ,refactor
14299,test add angulartesting dart library angulartesting is a userfacing dart test library built on top of the packagetest dart unittest framework and runner for usage see modulesdartangulartestingreadmemd close ,feat
14300,htmlparser add most common named character reference fix close ,feat
14301,remove stale spyobserver close ,test
14302,mock mark mock object injectable make mock object injectable to allow using them in compiled test close ,feat
14303,testing export useful property from componentfixture the component fixture returned from the test component builder now export nativeelement and componentinstance member directly they are also still available on the debugelement see ,feat
14304,async clean up unused promise import ,chore
14305,remove mockbackend export from angularhttp barrel ,refactor
14306,update http example to include map operator ,chore
14307,facade use rxjs package move to new rxjs distribution breaking change rxjs import now are via rxjs instead of reactivexrxjs individual operator can be imported import rxjsoperatorsmap ,refactor
14308,async use ultralight observable close ,refactor
14309,test remove deprecated roottestcomponent us of roottestcomponent should be migrated to componentfixture ,chore
14310,playground use single quote consistently ,style
14311,build make the unit test campaign to run again in edge ,chore
14312,build split browser between provider ,chore
14313,changelog add lifecycle breaking change ,chore
14314,build fix flakiness of the element probe global test ,chore
14315,htmlparser better error message when a void tag ha content ,feat
14316,htmlparser close void element on all node type fix ,fix
14317,test rename beforeeachbindings beforeeachproviders change beforeeachbindings to beforeeachproviders but preserve the deprecated method beforeeachbindings in order to keep a working deprecation warning ,refactor
14318,playground rename binding to provider ,refactor
14319,core remove typing from packagejson to disallow import a n from angular the typing property is being removed because angularts is deprecated and the developer should import from angularcore and angularplatform so aliasing angular to angularangular doe not make sense breaking change before import a ng from angular after import a core from angularcore ,feat
14320,htmlparser do not add a tbody parent for tr inside thead tfoot fix ,fix
14321,core make naming concrete i think people new to promise angular etc will find this example easier to understand with concrete identifier from a simple usecase the existing naming could be confused with promiseangular functionality promise in the template resolved etc also i made resolve private a then it clear what were exposing for the template ,docs
14322,api remove extra the ,docs
14323,test remove deprecated angulartest and angulartestlib these have been deprecated for a while instead of angulartest use angulartesting instead of angulartestlib use angulartestinginternal ,chore
14324,bundle use angularcore in bundle arithmetic ,chore
14325,packagejson add range of supported node version a engine close ,chore
14326,changelogmd fix duplication close ,docs
14327,darttransform add quicktransformer add an implementation of the transformer which run only the phase which replace asset rather than generate them close ,feat
14328,browsertree fix formatting ,chore
14329,darttransform inject initreflector at angularentrypoint detect the angularentrypoint annotation on method andor function and add a call to initreflector there see ,feature
14330,darttransform introduce angularentrypoint ,feat
14331,schema fix test name ,test
14332,build change npm publish script not to remove angular folder when building benchpress ,fix
14333,build include benchpress into browsertree ,fix
14334,changelog update change log to alpha ,chore
14335,playgroundrouting remove unused bind import close ,chore
14336,darttransform remove reflectpropertiesasattributes remove deprecated reflectpropertiesasattributes a an option it ha been renamed reflectpropertiesasattributes close close ,refactor
14337,pipe use angular lifecycle hook instead of pipeondestroy breaking change previously pipe that wanted to be notified when they were destroyed would implement the pipeondestroy interface and name the callback ondestroy this change remove the pipeondestroy interface and instead us angulars lifecycle interface ondestroy with the ngondestroy method before import pipe pipeondestroy from angularangular pipepure false export class mypipe implement pipeondestroy ondestroy after import pipe ondestroy from angularangular pipepure false export class mypipe implement pipeondestroy ngondestroy ,refactor
14338,lifecycle prefix lifecycle method with ng breaking change previously component that would implement lifecycle interface would include method like onchanges or afterviewinit given that component were at risk of using such name without realizing that angular would call the method at different point of the component lifecycle this change add an ng prefix to all lifecycle hook method far reducing the risk of an accidental name collision to fix just rename these method oninit ondestroy docheck onchanges aftercontentinit aftercontentchecked afterviewinit afterviewchecked router hook onactivate onreuse ondeactivate canreuse candeactivate to ngoninit ngondestroy ngdocheck ngonchanges ngaftercontentinit ngaftercontentchecked ngafterviewinit ngafterviewchecked router hook routeronactivate routeronreuse routerondeactivate routercanreuse routercandeactivate the name of lifecycle interface and enums have not changed though interface have been updated to reflect the new method name close ,refactor
14339,router fix a typing issue close ,fix
14340,test move facade test out of testscore close ,refactor
14341,core move eventmanager from core to platformdom close ,refactor
14342,testing use zone to avoid the need for injectasync use a zone counting timeouts and microtasks to determine when a test is finished instead of requiring the test writer to use injectasync and return a promise see ,feat
14343,gulp lazyrequire module in order to improve startup time close ,build
14344,bundle add source map to umd dev bundle source map are inlined to follow the same convention a for nonbundled file close ,chore
14345,transformer use barbackmode instead of assertionenabled to enable debug info generation close close ,fix
14346,compiler dedup directive in template compiler close close ,fix
14347,router improve recognition and generation pipeline this is a big change matsko also deserves much of the credit for the implementation previously componentinstructions held all the state for async component now we introduce several subclass for instruction to describe each type of navigation breaking change redirects now use the link dsl syntax before routeconfig path foo redirectto bar path bar component barcmp after routeconfig path foo redirectto bar path bar component barcmp name bar breaking change this also introduces useasdefault in the routeconfig which make case like lazyloading and encapsulating large route with subroutes easier previously you could use redirectto like this to expand a url like tab to tabposts routeconfig path tab redirectto tabusers path tab component tabscmp name tab appcmp now the recommended way to handle this is case is to use useasdefault like so routeconfig path tab component tabscmp name tab appcmp routeconfig path post component postscmp useasdefault true name post path user component userscmp name user tabscmp in the above example you can write just tab and the route user is automatically selected a a child route close close close close close close close ,refactor
14348,bundle dont distribute sfx bundle for http currently the main sfx bundle already contains http and router and the http sfx bundle duplicate all core additionally modifies our strategy for individual bundle close ,chore
14349,parser do not crash on untokenizable quote prefix close ,fix
14350,router add support for appbasehref to hashlocationstrategy close close close ,feat
14351,template introduce quoted expression to support rdparty expression language a quoted expression is quoted expression prefix uninterpretedexpression prefix identifier uninterpretedexpression arbitrary string example routesomeroute quoted expression are parsed into a new ast node type quote the prefix part of the node must be a legal identifier the uninterpretedexpression part of the node is an arbitrary string that angular doe not interpret this feature is meant to be used together with template ast transformer introduced in the transformer would interpret the quoted expression and convert it into a standard ast no longer containing quoted expression angular will continue compiling the resulting ast normally ,feat
14352,test fix public api test in some browser fix close ,chore
14353,build increase memory limit ,fix
14354,bundle publish umd bundle close ,feat
14355,bundling prepare bundle with all external dependency currently zonejs reflectmetadata could contain shim in the future ,chore
14356,web worker remove usage of deprecated zone api close ,fix
14357,eventemitter resolve onerror and oncomplete asynchronously close ,fix
14358,parser cleanup unused import close ,chore
14359,build fix source map close ,fix
14360,testing create top level file for mock close ,cleanup
14361,tooling move tooling to the browser platform and rename profile into instrumentation breaking change before import a p from angularprofile import a t from angulartools after import a p from angularinstrumentation import a t from angularplatformbrowser ,cleanup
14362,darttransform improve logging ensure that where possible log message include an assetid close ,refactor
14363,form scope value accessors validators and async validators to self close ,fix
14364,build remove io from ci close ,chore
14365,core rename classname to classname close ,chore
14366,core proper camelcasing for stylename and stylevalue ,chore
14367,matcher add support for tohavecssstyle matcher ,test
14368,fix all request defaulting to get honor method parameter passed to close close ,fix
14369,return url in response attach reponseurl or xrequesturl to response close ,fix
14370,return response header properly parse and add response header to response close ,fix
14371,error on non status code breaking change previously http would only error on network error to match the fetch specification now status code le than and greater than will cause http observable to error close ,fix
14372,analytics include all of angular in helloworld import dependency from angularangulardart in helloworld to ensure that any size regression are caught by our check update to avoid regression like close ,chore
14373,analytics travis job testing dart payload size add a job to the travis build matrix that check the size of the helloworld app against target hardcoded in the gulpfile close ,chore
14374,analytics build helloworld check constraint create gulp target to build helloworld and check it gzipped size against size constraint see ,chore
14375,analytics generalize file size analytics move file size analytics code into a reusable module see ,chore
14376,core view annotation are no longer mandatory view is now optionalangularbdb close ,docs
14377,build increase timeout of the most flaky test close ,chore
14378,build do not reexport compiler from angularangular close ,fix
14379,ci allow failure in dart dev channel test until dartdoc bug is fixed ,chore
14380,router improve recognition and generation pipeline this is a big change matsko also deserves much of the credit for the implementation previously componentinstructions held all the state for async component now we introduce several subclass for instruction to describe each type of navigation breaking change redirects now use the link dsl syntax before routeconfig path foo redirectto bar path bar component barcmp after routeconfig path foo redirectto bar path bar component barcmp name bar breaking change this also introduces useasdefault in the routeconfig which make case like lazyloading and encapsulating large route with subroutes easier previously you could use redirectto like this to expand a url like tab to tabposts routeconfig path tab redirectto tabusers path tab component tabscmp name tab appcmp now the recommended way to handle this is case is to use useasdefault like so routeconfig path tab component tabscmp name tab appcmp routeconfig path post component postscmp useasdefault true name post path user component userscmp name user tabscmp in the above example you can write just tab and the route user is automatically selected a a child route close close close close close ,refactor
14381,router remove view decorator in router link fixture ,test
14382,router allow linking to auxiliary route close ,feat
14383,parser allows user install custom ast transformer close ,feat
14384,async adding type to eventemitter now that it is generic close ,docs
14385,build use chrome by default for all j test fix close ,chore
14386,core stop reexporting angularcommon from angularcore all common directive form and pipe have been moved out of angularcore but we kept reexporting them to make transition easier this commit remove the reexports breaking change before import ngif from angularcore after import ngif from angularcommon close ,cleanup
14387,compiler case sensitive html parser close close ,feat
14388,compiler case sensitive html parser ,feat
14389,darttransform omit bootstrapdart in ngdeps specialcase to avoid copying the bootstrapstaticdart import when creating ngdepsdart file close close ,fix
14390,bootstrap add platform and app initializers often some init logic need to run when a platform or an application is boostrapped for example boostraping a platform requires initializing the dom adapter now it can be done a follows new providerplatforminitializer usevalue initdomadapter multi true all platform initializers will be run after the platform injector ha been created similarly all application initializers will be run after the app injector ha been created close ,feat
14391,eventemitter rename next to emit breaking change eventemitternextvalue is deprecated use eventemitteremitvalue instead close close ,refactor
14392,router add test for interaction between routerouter and viewchild close ,chore
14393,bundle properly publish routerminjs bundle fix close ,chore
14394,publish use pubnpmpreparesh script to prep published build close ,chore
14395,build spin off pubpreparesh from pubpublishsh ,chore
14396,build spin off npmpreparesh from npmpublishsh ,chore
14397,build move publishbuildartifactssh to scriptspublish ,chore
14398,saucelabs update browser version close ,chore
14399,core move renderdom from core currently core depends on domrenderer which depends on the browser this mean that if you depend on angularcore you will always pull in the browser dom adapter and the browser render regardless if you need them or not this pr move the browser dom adapter and the browser renderer out of core breaking change if you import browser adapter or dom renderer directly not via angularcore you will have to change the import path ,refactor
14400,build git config prior to committing ,chore
14401,cleanup fix bad h markup and normalize heading close ,docs
14402,build revert presubmitqueuesetupsh fix git login in publishbuildartifactssh ,chore
14403,router apply appbasehref when using pathlocationstrategy correctly initializes appbasehref and fall back to the base tag in the absence of an appbasehref provider close ,fix
14404,example dont generate dart code for t example in nested directory ,fix
14405,darttransform consider of line number in inlinerfortest ensure that line number arent changed by inlinerfortest fix close ,fix
14406,refactor require statement to import declaration for rx look like this is some old leftover code from the time when rx didnt distribute typing via npm close ,fix
14407,core run component disposal before destroyroothostview to avoid crash if change detection is triggered close ,fix
14408,ngswitch update api doc close ,doc
14409,build add an option to disable type check when running test since editor and ides do typechecking and show error in place often there is no benefit to running type checking in our test pipeline this pr allows you to disable type checking gulp testunitjs notypechecks this commit also make e generation optional fixbuild remove unnecessary circular dependency close ,feat
14410,pipe add example for all angular pipe close ,docs
14411,dart fix the staticbrowser platform not to include compiler close ,fix
14412,cheatsheet add missing bootstrapping section close close ,docs
14413,browserstack add window phone to ci close ,build
14414,build print command in presubmitqueuesetupsh ,chore
14415,analytics track bundle size this will send bundle size before and after gzip to google analytics so that we can track bundle size over time for every bundle we produce close ,build
14416,gulp remove unnecessary dependency duplication ,build
14417,compiler case sensitive html parser close close ,feat
14418,compiler case sensitive html parser ,feat
14419,publish syntax fix ,fix
14420,renderer use a comment instead of an element when stamping out template element close close ,feat
14421,build deploy build artifact to build branch use orphan branch use upstream gitignore use short sha in commit message tag commits with source sha close ,chore
14422,build fix npm install not to depend on minimist close ,fix
14423,browserstack deactivate failing android browser close ,chore
14424,oncontentinit aftercontentinit close ,docs
14425,analytics fix bug that prevented u from collecting o info ,build
14426,analytics keep track of project value via a custom dimension ,build
14427,diffingpluginwrapper ignore nullundefined input tree this is handy to conditionally create build graph but keep mergetree declarative any input tree passed into mergetree that is null or undefined will simply be ignored ,build
14428,developermd update info about clangformat setup there is no need to recommend installing clangformat globally ,docs
14429,gulp add gulpfilejs to file formatted by clangformat ,build
14430,build clang format gulpfilejs ,style
14431,analytics start tracking gulp startup latency this measure how long doe it take for gulp to start the first task up after being invoked from command line im suspecting that we can optimize this significantly but let start tracking it first ,build
14432,package update karmabrowserstacklauncher to close ,chore
14433,core extract platform out of core currently core depends on the browser which mean that other platform eg nativescript or webworker can not use the bootstrapping logic core provides this pr extract make bootstrapping logic in core completely platformindependent the browserspecific code wa moved to angularplatformsbrowser breaking change a few private helper eg platformcommon or applicationcommon were removed or replaced with other helper look at platformcommonproviders applicationcommonproviders browserproviders browserappproviders to see if they export the provider you need close close ,feat
14434,transformer fix inputoutput annotation with settersgetters fix input annotation to work with setter method in dart and fix output annotation to work with getter method in dart when using transformer close close ,fix
14435,typing two error not reported by our build thirdpartyjavascriptangulargithubmodulesangularsrccoreplatformbindingsts exported variable exceptionprovider ha or is using name provider from external module thirdpartyjavascriptangulargithubmodulesangularsrccorediprovider but can not be named thirdpartyjavascriptangulargithubmodulesangularsrccoreplatformbindingsts exported variable exceptionbinding ha or is using name provider from external module thirdpartyjavascriptangulargithubmodulesangularsrccorediprovider but can not be named thirdpartyjavascriptangulargithubmodulesangularsrcmockanimationbuildermockts return type of public method from exported class ha or is using private name mockcssanimationbuilder ,fix
14436,darttransform bail early for file with no deferred library in deferredrewriter if we can determine that there are no deferred library imported bail early to avoid parsing the entire file ,feat
14437,darttransform do not reprocess generated file in the deferredrewriter phase do not process file which were generated by the transformer since these will never need to be rewritten ,feat
14438,core extract platform out of core currently core depends on the browser which mean that other platform eg nativescript or webworker can not use the bootstrapping logic core provides this pr extract make bootstrapping logic in core completely platformindependent the browserspecific code wa moved to angularplatformsbrowser breaking change a few private helper eg platformcommon or applicationcommon were removed or replaced with other helper look at platformcommonproviders applicationcommonproviders browserproviders browserappproviders to see if they export the provider you need close ,feat
14439,ngclass allow multiple class per expression close ,feat
14440,more cheatsheet doc ,docs
14441,more cheatsheet doc ,docs
14442,move cheatsheet stuff into it own file ,docs
14443,add initial cheatsheet tag ,docs
14444,changelog update change log to alpha ,chore
14445,core various dartspecific fix for core and facade for some reason these showed up only now in internal dart analyzer output ,fix
14446,core reexport platformdirectives and platformpipes in dart look like we missed this in the original pr ,fix
14447,renderer apply host element encapsulation also if the parent component is not encapsulated close ,fix
14448,core export dev mode api in dart close ,fix
14449,benchmark fix tracing category to work with dartium close ,fix
14450,core unload component when individually disposed ,fix
14451,renderer make glyph not an svg element this is required because of a conflict with an internal project this will go away soon a we are working on a proper svg support ,patch
14452,build reorder bundling step close ,fix
14453,test fix public api test failure when no support of symbolfor observable is the token used in rxjs to define symbolobservable close ,chore
14454,core renam ambientdirectives and ambientpipes into platformdirectives and platformpipes after discussing it we decided that platform is a better prefix for directive available everywhere in the app breaking change ambientdirectives platformdirectives ambientpipes platformpipes close ,feat
14455,npm release script for router artifact close ,chore
14456,listwrapper drop filter find reduce any close ,refactor
14457,compiler make all command const close ,refactor
14458,setup set tsconfig so that it work in editor ,fix
14459,dart support forcing dev mode via enabledevmode in dart close ,feat
14460,form fix typo of indent close ,docs
14461,developermd add missing link for build command close ,docs
14462,tsdart update tsdart to close ,chore
14463,core move facade out of core this is part of ongoing work to make core platformindependent breaking change all private export from angularsrccorefacadelangcollectionexceptionhandler should be replaced with angularsrcfacadelangcollectionexceptionhandler ,refactor
14464,compiler don ’ t lowercase attribute to support svg this reverts commit bcbccebbaafd and add an additional test close ,fix
14465,changedetect guard checknochanges behind assertionsenabled always generate checknochanges test but guard them behind assertionsenabled test close ,feat
14466,ngfor allow default template with ngfortemplate close ,fix
14467,build remove esbuildjs fix close ,chore
14468,stringwrapper remove useless method close ,refactor
14469,browserstack use patched karma launcher close ,chore
14470,router dont import public apis from internal path close ,refactor
14471,test enable dev mode in all angular test close ,chore
14472,material disable mdgridlist test until is fixed ,fix
14473,core provide setdevmode to enabledisable development mode in javascript ,fix
14474,form remove controlserrors breaking change previously the controlserrors getter of controlgroup and controlarray returned the error of their direct child this wa confusing because the result did not include the error of nested child controlgroup controlgroup control making controlserrors to include such error would require inventing some custom serialization format which application would have to understand since controlserrors wa just a convenience method and it wa causing confusing we are removing it if you want to get the error of the whole form serialized into a single object you can manually traverse the form and accumulate the error this way you have more control over how the error are serialized close ,feat
14475,facade add support for async validators returning observables close ,feat
14476,facade add a way to convert observables into promise ,feat
14477,facade add a way to detect if an object is a promise ,feat
14478,core move directive pipe and form into common breaking change all private export from angularsrccoredirectivespipesforms should be replaced with angularsrccommondirectivespipesformis close ,refactor
14479,core move compiler out of core breaking change all import from angularcorecompiler should be changed to angularcompiler ,chore
14480,ci turn on debugging output for ci script close ,build
14481,npm cleanup update npm dependency reshrinkwrap in the previous commit i removed unused dependency from packagejson but in order for the change to take effect i needed to update npm shrinkwrap a well that got complicated because of how npm dedupes package long story short to clean up the mess i did the following deleted npmshrinkwrapjson and npmshrinkwrapcleanjson ran npm install ran npm shrinkwrap dev toolsnpmcleannpmshrinkwrap this mean that our npmshrinkwrap now correctly reflects the constraint in packagejson but it also mean that some package got updated within the version constrain specified in packagejson some dependency were intentionally not updated eg mudge due to ,build
14482,npm lock systemjs at due to regression in future version otherwise in distjsdevesbenchmarkssrcnaiveinfinitescrollindexhtml defaultextension j is ignored for angularsrctestingbenchmarkutil which result in test failure well need to investigate this maybe upgrading to x will make this issue go away ,build
14483,npm bump gulpclangformat to this is due to ,build
14484,npm freeze madge at due to ,build
14485,npm update all gulp dependency ,build
14486,npm remove unused npm dependency ,build
14487,darttransform simplify dependency import store dependency import information in a dedicated list in ngdepsmodel rather than a a boolean field on importmodel an importmodel should not care whether it is a ngdepsdart import or not this information belongs in ngdepsmodel this simplifies some of the logic around how ngdepsmodel import are processed and eventually output ,feat
14488,form use the defaultvalueaccessor for control with an ngdefaultcontrol attribute third party control require a controlvalueaccessor to function with angular form many of them like polymer paperinput behave like the input native element and thus can use the defaultvalueaccessor adding an ngdefaultcontrol attribute will now allow them to use that directive close ,feat
14489,form export the ngvalueaccessor binding token this is needed to allow component author to implement custom controlvalueaccessors for their input component ,fix
14490,changedetector add support for shortcircuiting ,feat
14491,changedetector misc minor update ,refactor
14492,changedetector use viewshadowdom contentlightdom consistently ,refactor
14493,darttransform separate log zone code move zonerelated code out of loggerdart and into zonedart rename logger log add the ability to specify a zonelocal templatecompiler ,refactor
14494,core add support for ambient directive to dart transformer close ,feat
14495,example update the zippy example to rely on ambient directive ,refactor
14496,browserstack add a gulp task to use browser stack locally close ,build
14497,querylist update highlight language close ,docs
14498,compiler remove style when stylefooexp evaluates to null fix close ,fix
14499,routerlink do not prevent default behavior if target set on anchor element if the anchor element on which the routerlink directive is present ha a target attribute other than self the handler will not prevent default behavior of the browser close close ,fix
14500,use observableresponse on http method use correct type definition for http response close ,fix
14501,use response for jsonp error return response when jsonp backend error ,fix
14502,ondestroy fix broken backticks close ,docs
14503,browserstack add all supported browser close ,build
14504,darttransform remove generatechangedetectors the template compiler update removed the option to run the transformer without generating change detector and deprecated the generatechangedetectors transformer parameter now that it ha been deprecated for several week remove it from the transformer code forward reflectpropertiesasattributes reflectpropertiesasattributes and add a deprecation warning to reflectpropertiesasattributes close ,refactor
14505,test rename roottestcomponent to componentfixture breaking change before testcomponentbuildercreateasyncmycomponentthenroot roottestcomponent after testcomponentbuildercreateasyncmycomponentthenfixture componentfixture close ,chore
14506,test failure in browser which do no support symboliterator close ,chore
14507,build dont create unused folder for npm distribution related to febe and close ,chore
14508,playground fix the inbox example ,fix
14509,core add support for ambient directive ambient directive can be configured when bootstraping an application ambient directive can be used in every component of the application without needing to explicitly list them ,feat
14510,build more clean up for legacy typing bundle creation related to febeaebcefbced close ,chore
14511,bundle unify workflow for router bundle close ,chore
14512,bundle dont duplicate reflectmetadata in http bundle since http cant be used on it own there is no reason for duplicating reflectmetadata in the http bundle ,chore
14513,bundle unify padding with dependency ,chore
14514,bundle unify router bundle creation with other bundle ,chore
14515,core make transformer handle inputoutputhostbindinghostlistener close ,feat
14516,playground update zippy to use input and output ,refactor
14517,playground update the order management example to use the recommended apis ,refactor
14518,playground update zippy to use input and output ,refactor
14519,playground update the order management example to use the recommended apis ,refactor
14520,metadata provide deprecation message ,docs
14521,form update formbuilder to support async validation close ,feat
14522,form add support for adding async validators via template example directive selector uniqloginvalidator provider providengasyncvalidators useexisting uniqloginvalidator multi true class uniqloginvalidator implement validator validatec return somefunctionreturningpromiseorobservable ,feat
14523,form implement a combinator for composing async validators ,feat
14524,facade add observablewrapperfrompromise ,feat
14525,build npm install fails on window after analytics feat close ,chore
14526,browserstack initial setup close ,build
14527,browserstack add npm dependency ,build
14528,ngupgrade move into angular this is moving ngupgrade into the main repository per the ngupgrade is published from the main import consistent with close ,chore
14529,travis upload dist folder anytime the j and dart build succeed close ,chore
14530,router provide routeconfig object for auxroute close ,feat
14531,router properly serialize aux route previously route would be generated with a leading slash after the parens examplecomfoobar this fix remove the trailing slash when generating the url so now we have examplecomfoobar this change is not breaking because we still recognize both form we just normalize without the slash ,fix
14532,shadowcss strip comment and fix logic for parsing rule close close ,fix
14533,router respond to hashchange event previously if the url changed in hashlocation mode the router would not pick up the change this add a listener in hashlocationstrategy for hashchange event to fix the problem close ,fix
14534,example explain the purpose of these example ,chore
14535,gulp rename serveexamples to serveplayground ,chore
14536,typing add routerspec to testtypings close ,chore
14537,darttransform restrict visibilitymutability of codegen for exported generated template declare with final so dartjs know they will never be reassigned for nonexported generated change detector class prefix the classname with to mark them a internal close ,perf
14538,http add type annotation to clarify api imho this tiny example is easier to read when some type annotation are added and the parameter name are more concise close ,docs
14539,assert that url is present when creating new request close ,chore
14540,build emfile error on window when executing j unit test fix close ,fix
14541,linker expose viewresolver to public api fix close ,refactor
14542,analyzer fix dart analyzer error close ,fix
14543,form update compose to handle null validators ,fix
14544,form add support for async validation ,feat
14545,ngcontent wildcard ngcontent ha to go last this wa the case before the new compiler landed and should be preserved related to close ,fix
14546,core add an error state for changedetectors that is set when binding or lifecycle event throw exception and prevents further detection change the alreadychecked flag of abstractchangedetector to a new state flag change all check of alreadychecked to check that the state is neverchecked set state to errored if an error is thrown during detection skip change detection for a detector and it child when the state is errored add a test to validate this fix issue close ,fix
14547,build add rxjs to typing spec close ,chore
14548,async fix observablewrapperisobservable make observablewrapper and asyncpipe work with observable subject and eventemitter ,refactor
14549,package update rxjs version ,chore
14550,async refactor eventemitter refactor eventemitter and async facade to match e observable semantics properly use rxjs typedefs make eventemitter inherit from rxjs subject close breaking change consumer of eventemitter no longer need to call torx eventemitter is now generic and requires a type eg eventemitterstring eventemitter and observable now use the subscribegeneratorornext error complete method instead of observergenerator observablewrapper us callnextcallerrorcallcomplete instead of callnextcallthrowcallreturn ,refactor
14551,core move lifecycle functionality into applicationref breaking change before constructorinjectlifecycle lifecycle lifecycletick after constructorinjectapplicationref appref appreftick close ,refactor
14552,form document the rest of the form module close ,docs
14553,compiler don ’ t rely on external cs parser we used to use different external cs parser depending on the domadapter this lead to inconsistent behavior and environment specific error close close ,refactor
14554,dgeni clean up legacy typing bundle creation fix close ,chore
14555,router updated example for hash location strategy close ,docs
14556,darttransform gracefully handle empty ngmetajson file fix the templatecompiler step to gracefully handle null empty ngmetajson file ,fix
14557,router rename a to name in routeconfig breaking change this is a rename to make routing concept easier to understand before routeconfig path component mycmp a home after routeconfig path component mycmp name home close close ,refactor
14558,router use new provide api in example ,chore
14559,darttransform run reflectionremover after codegen phase move the reflectionremover phase to execute after the codegen phase ,refactor
14560,webworker fix bug causing multi browser demo to crash close ,fix
14561,test android browser doe not support calc a cs unit value close ,fix
14562,test integration test svg should support svg element fails in nonchrome browser fix close ,fix
14563,vscode add jsconfigjson and remove setting dir vscode recognizes jsconfigjson for e code in the same way a it recognizes tsconfigjson for t code close ,chore
14564,analytics track travisjobnumber a a custom dimension ,build
14565,analytics add basic ci job tracking ,build
14566,analytics add support for tracking npm installs since the very first npm install is called while nodemodules is empty we need to ignore it but we can track the start timestamp and record the install even once the installation is completed ,build
14567,router use relative import close ,refactor
14568,webworkers correct typo typo in code block on line angukar angular close ,docs
14569,build avoid publishing dart file to npm repo close close ,chore
14570,applicationcommon fix typo and improves doc for bootstrap close ,docs
14571,webworker dont send message when the buffer is empty close ,fix
14572,directive fixed the mistake of leading number the leading number with a dot and space in the markdown will be compiled to ol li the and in the doc mistakenly add a new line before the cause a misunderstand by the markdown engine close ,typo
14573,core document ngfor close ,docs
14574,changelog update change log to alpha ,chore
14575,pipe integrate review feedback close ,refactor
14576,pipe assert date json slice are non pure ,test
14577,pipe mark date slice a nonpure ,fix
14578,pipe pure is an optional argument ,fix
14579,jsonpipe mark json pipe a not pure marked json pipe a not pure so that it run all the time reflecting change on the object close ,fix
14580,form minor cleanup close ,cleanup
14581,form mark abstract class a abstract ,cleanup
14582,form add support for validator currently the only way for a directive to export a validator is by providing a function this make it ackward to write validators that depend on directive input in addition to supporting function a validators class implementing the validator interface are supported too ,feat
14583,use instead of close ,docs
14584,benchpress increase sampling frequency the previous sampling frequency didnt capture fast event of the time causing flake close ,fix
14585,lint enforce that moduleprivate member have internal this is needed to prevent leaking internal apis to user via our published dts typing fix close ,fix
14586,typing mark underscoreprefix member internal i still havent made a tslint check for this so new occurrence leaked in see close ,chore
14587,elementinjector fix comment for elementinjectordynamicstrategy close ,docs
14588,benchmark update react and polymer benchmark and get tree update number for all of the benchmark a well close ,fix
14589,lang avoid infinite loop when calling assert the current code doesnt function properly assert are never activated even if activated would result in infinite loop since the code is broken and block other usecases this commit turn assert into noop a proper solution for asserts will be part of fix close ,fix
14590,tslint disallow variable name that look like keywords weve had issue such a the one i documented this tslint check prevents this happening again this change also update to the newest tslint which get typing from npm close ,chore
14591,form export numbervalueaccessor export numbervalueaccessor from formsdirectivests ,feat
14592,slicepipe fix ngfor example close ,docs
14593,darttransform match runtime semantics for template value match viewresolvers semantics for reading template and style value from component and view annotation we now warn if template andor style value appear on an component annotation and a view annotation is present viewresolver ,feat
14594,darttransform rename dumbeval to naiveeval ,refactor
14595,darttransform fix potential import collision previously importing a library twice using different prefix could cause the template compiler step to incorrect omit directive dependency provided by that library ,refactor
14596,darttransform parse directive dependency from the dart ast previously we parsed dependency out of a the stringified value of directive which is brittle and errorprone move this parsing into directiveprocessor where we have the full dart ast to help ,feat
14597,darttransform avoid overwriting asset for easier debugging avoid overwriting asset in dart transform step where possible ,feat
14598,darttransform have deferredrewriter run in parallel previously deferredrewriter checked for the existence of ngdepsdart file to determine which deferred library it needed to rewrite requiring that those asset exist at the time it wa run update to check for ngmetajson file instead which exist after the directiveprocessor phase this allows the deferredrewriter which only process dart file to run in parallel with templatecomplier which only process ngmetajson file and stylesheetcompiler which only process cs file have deferredrewriter to check existence of ngmetajson asset rather than ngdepsdart asset ,refactor
14599,darttransform delete unused bindgenerator all getters setter generated by bindgenerator are now generated in the directiveprocessor or templatecompiler stage ,refactor
14600,darttransform update test for new codegen update unit test for bindgenerator responsibility move ,test
14601,darttransform fold bindgenerator into other phase update directiveprocessor and templatecompiler to generate the getters setter and method currently generated in bindgenerator update directivemetadatalinker to output ngmetajson file instead of ngdepsdart file avoiding full codegen until the last phase this allows u to dedupe codegen logic and remove an additional phase from the transformer ,refactor
14602,darttransform add getters setter method to ngdepsmodel add liststring getters setter and method which will be used to generate code that register those closure with the reflection system ,feat
14603,darttransform create common dumbeval function ,refactor
14604,darttransform remove unused test file remove directivemetadatalinker test file which are no longer used a of bcecbbbadf ,refactor
14605,di minor cleanup ,refactor
14606,di allow dependency a flat array ,fix
14607,facade reduce node count by in assertionsenabled ,fix
14608,typing dont expose esshim typing also clean up unused typing generation we publish the node tree not browser tree fix close ,chore
14609,changelog add link to the issue that give more info about the release close close ,chore
14610,provider fix formatting close ,docs
14611,changedetector support for nan close ,fix
14612,form support adding validators to controlgroup via template close ,feat
14613,form make validatorsgroup and validatorsarray private ,refactor
14614,querymetadata fix wrong selector and improve syntax highlighting close close ,docs
14615,di fix selfmetadata example close ,docs
14616,http fix parameter name close ,docs
14617,pipetransform added pure parameter close the documentation wa outdated since alpha when the pure parameter wa added to the pipemetadata ,docs
14618,renderer support xlinkhref attribute in svg close ,fix
14619,application rename binding into provider while creating the server version i noticed binding are still mentioned close ,refactor
14620,render create svg element with the right namespace temporary fix for close ,fix
14621,compiler load style url in runtime mode correctly close ,fix
14622,form implement a way to manually set error on a control example var login new controlsomelogin cseterrorsnotunique true expectcvalidtoequalfalse expectcerrorstoequalnotunique true cupdatevaluenewlogin expectcvalidtoequaltrue breaking change before controlgrouperrors and controlarrayerrors returned a reduced value of their child control error after controlgrouperrors and controlarrayerrors return the error of the group and array and controlgroupcontrolserrors and controlarraycontrolserrors return the reduce value of their child control error close ,feat
14623,webworkers fix some typo and adjusts formatting close ,doc
14624,gulpfile fix link to clang formatting seems like the anchor tag wasnt updated here close ,chore
14625,router routedata a a type breaking change the routedata token ha been removed and replaced with a type routedata allowing a type injection like we do with routeparams before constructorrouteparams routeparams injectroutedata routedata let id routeparamsgetid let name routedataname after constructorrouteparams routeparams routedata routedata let id routeparamsgetid let name routedatagetname fix close ,refactor
14626,node update node from to this is just a maintenance upgrade to keep u close to the latest release no known bug are being fixed by this upgrade i also removed the npm override in travisyaml since node ship with a recent version of npm and usually this version is preferred it might contain custom patch close ,build
14627,router move example into own file and add test close ,docs
14628,karma exclude ee example from unit test ,chore
14629,package bump reflectmetadata version close ,chore
14630,compiler dead code cleanup dead code that uglifyjs found close ,chore
14631,gulp rename angularbuildermock to angularbuilderuninitialized to prevent confusion with testing mock close ,build
14632,gulp dont exit prematurely during cleanup before this change we would exit while there were cleanup micro task scheduled for execution this caused tmp file to be left over and consume a lot of space fix ,build
14633,saucelabs update to safari close ,chore
14634,router respect locationstrategy when constructing hrefs in link note that this introduces more behavior for locationstrategy which need yet more refactoring to test see close ,fix
14635,router fix error message text ,fix
14636,router add support for route link with no leading slash close ,feat
14637,test bump jasmine timeout to m ,chore
14638,build update node version in nvmrc file the node version wa updated in developermd due to but nvm still us v if not specified otherwise update nvmrc file to v which is the last node version close ,chore
14639,developermd add pubcache variable to setup instruction if pubcache is not set the pub dependency are downloaded to a default folder during the build because gulp build also run pub get running the test locally pubcache is set to a subdirectory of the sdk when the envdartsh script is sourced therefore buildpubbuilddart fails a it cant find the dependency close ,docs
14640,runtimemetadataresolver simplify the code close ,refactor
14641,runtimemetadata annotation metadata ,refactor
14642,compiler misc minor update ,refactor
14643,dynamiccomponentloader update api doc ,doc
14644,styleurlresolver include asset url into precompiled stylesheets close ,fix
14645,debugelement don ’ t descend into merged embedded view on componentchildren close ,fix
14646,form deprecate the old query api the old api ha been replaced with contentchildren and viewchildren close ,chore
14647,router make rootrouter disposable to allow cleanup of location subscription routerproviders now automatically disposes of the rootrouter when the application is disposed close ,feat
14648,router support unsubscription from location by returning the subscription ,feat
14649,core platformref and applicationref support registration of disposal function these function will be called whenever the platform or application are being disposed ,feat
14650,compiler create literal property binding for empty … directive close ,fix
14651,ngclass support set correctly previously ngclass threw in dart checked mode close ,fix
14652,form add missing test ,cleanup
14653,validators allow error at both the grouparray level or their child allow controlgroups and controlarrays to contain error from their level and error from their child design doc breaking change error format ha changed from validators now error from a control or an array child are prefixed with control while error from the object itself are left at the root level example given a control group a follows var group new controlgroup login new control required password new control required passwordconfirm new control required before grouperrors login required true password required true passwordconfirm required true after grouperrors control login required true password required true passwordconfirm required true ,feat
14654,validators add a pending state to abstractcontrol add a pending state to abstractcontrol and a function to set that state on themselves and their parent this will be used for both individual async validators and when the imperitive mode is used design doc ,feat
14655,appviewlistener prefix listener with on for consistency close ,refactor
14656,form clean up ngformcontrol close ,cleanup
14657,form handle control change in ngformcontrol when a new control instance is bound to the directive use the new instance not the old one ,fix
14658,core fix typo arithemtic should be arithmetic close ,fix
14659,compiler support event on a template element that are consumed via a direct expression close ,fix
14660,defaultvalueaccessor support custom input element that fire custom change event close ,fix
14661,typo fix invalid typescript synatx in example close ,docs
14662,webworker serialize scroll event close close ,fix
14663,remove double var in http spec close ,chore
14664,darttransform do not declare output experience show that for large project declaring transformer output can cause x slowdown remove output declaration to avoid this ,feat
14665,darttransform simplify logging class use transformlogger for the transformer rather than buildlogger which ha additional funtionality and complexity that is unused ,refactor
14666,parser associate pipe right to left close breaking change before pipea pipeb wa parsed a pipea pipeb after pipea pipeb is parsed a pipea pipeb close ,feat
14667,compiler do not match directive to variable name breaking change you can no longer use a foo or a varfoo to apply directive foo although it didnt work properly anyway this commit is fixing breakage caused by the switch to precompiler exact sha unknown ,fix
14668,changedetection fix a typo close ,refactor
14669,change detection remove support for if breaking change remove if statement support from action close ,feat
14670,dart format dart code use the dart formatter to clean up all pure dart code close ,refactor
14671,darttransform fix issue with deferred in ngdeps fix an issue in the linking step which prevents library from being imported a deferred ,fix
14672,ngupgrade simple example ,feat
14673,darttransform update protobuf dependency update libprotoc to dartprotocplugin to pkgprotobuf close ,refactor
14674,chore make style consistent for api doc heading close ,docs
14675,broccolitypescript add support for moduleresolutionnode close ,build
14676,broccoli make broccolitypescript consume tsconfig style option previously it supported a weird mixture of tsconfig and internal option ,build
14677,router updated documentation for router outlet deactivate method close ,docs
14678,typing dont expose roottestcomponent fix close ,fix
14679,urlresolver always replace package in dart even if it came from baseurl close ,fix
14680,package update rxjs dependency version ,chore
14681,packagejson remove typing bundle this wa used for but now that our typing are laid out in the nodemodule user should no longer need that also fix the project name in root packagejson there is a risk that someone run npm publish in this directory which will create a new version of angular and contain a scary source tree so this packagejson may a well have a name that doesnt exist on npm and if we did publish by accident it would be a package name that match the content ,chore
14682,ngupgrade add support for upgradedowngrade of injectables close ,feat
14683,ngupgrade document public method ,docs
14684,ngupgrade faster ngng adapter by only compiling ng once the adapter only compiles ng template this mean that we need to reimplement emulate all of the ng ’ s api on the host element interface idirective compile idirectivecompilefn not supported controller any implemented controlleras string implemented bindtocontroller booleanobject implemented link idirectivelinkfn idirectiveprepost implemented prelink only name string na priority number not supported replace boolean not supported require any implemented restrict string working scope any implemented template any implemented templateurl any implemented terminal boolean not supported transclude any implemented ,feat
14685,ngupgrade renames and doc breaking change change the terminology to adapter and upgradedowngrade remove the module from the public api to prevent confusion ,refactor
14686,testing let dom adapter dictate xhr implementation for test the test injector now us an xhr implementation based on domgetxhr which allows the current dom adapter to dictate which xhr impl should be used to prevent the change to dom adapter from introducing undesired new dependency into the benchmark separate the async facade into a promise facade which is reexported by facadeasync see ,fix
14687,form add inputtypenumber value accessor close close ,feat
14688,saucelabs add edge close ,chore
14689,stylecompiler don ’ t resolve absolute url that start with a during compilation close ,fix
14690,compiler explicitly support event binding also on template element although these event don ’ t fire event themselves there might be directive on them that fire event close ,fix
14691,compiler attribute case in ie close ,fix
14692,stylecompiler don ’ t touch url in stylesheets and keep stylesheets with absolute url in template we can ’ t resolve relative url eg for image in the compiler a these url are meant to be loaded in the browser unless we would inline image a base… also keep link rel “ stylesheet ” in template that reference absolute url with eg this behavior wa already present for import rule within stylesheets close ,fix
14693,travis reenable lasted dart dev channel build close close ,chore
14694,test fix dart annotation for integrationdartspecdart ,fix
14695,form emit value change after error and status are set close ,fix
14696,transformer show nice error message when an invalid uri is found close ,fix
14697,darttransform parse directive agnostic of annotation order now that we can specify directive in either view or component we will try to parse from both previously we would trash any directive parsed in the first annotation upon encountering the second annotation this ensures that we maintain that list of directive regardless of annotation ordering ,fix
14698,changelog document the breaking change of including typing ,chore
14699,darttransform handle empty ngdepsdart file handle the situation where a dart file generates a ngmetajson file but doe not register any reflective information an example of this would be a file that defines a const list that look like a directive alias the transformer keep track of this and creates a ngmetajson file but never creates a ngdepsdart file which can result in other file being linked to it and it not defining an initreflector method ,fix
14700,darttransform allow inlining only using inlineviews remove the inlinerfortest standalone transformer and make inlining available via the inlineviews parameter to the main angular transformer ,refactor
14701,query add filter and reduce to querylist close ,feat
14702,changelog update changelog to alpha ,chore
14703,release bump angular version to alpha ,chore
14704,publish emit type declaration with cjs build close close ,fix
14705,form add minlength and maxlength validators close ,feat
14706,build add task to watch and recompile j and dart ,feat
14707,build fix servejsdev to build bundle close ,fix
14708,test command compiler attr merge test in ie ,fix
14709,doc minor link fix close ,fix
14710,changelog add a note about how we changed the dts file distribution ,docs
14711,changelog update changelog to alpha ,chore
14712,release bump angular version to alpha ,chore
14713,router add testing code for querystring serialization ,test
14714,example extend inbox example code to include sorting ,chore
14715,router add missing test for the url parser ,test
14716,router properly read and serialize query params this split out path and query into separate params for locationgo and related method so that we can handle them properly in both pathlocationstrategy and hashlocationstrategy this handle the problem of not reading query params to populate location on the initial page load close close close ,fix
14717,facade add fromisodate method ,feat
14718,test rename testlib to testing old testlib is now testinginternal testlibpublic is now testing ,refactor
14719,bundle use proper bundle arithmetic for all http bundle close ,chore
14720,test add an external version of the test library add test adapter for typescript and javascript only exported a part of the testlib module these work with the jasmine test framework and allow use of the test injector within test block via the inject function see this includes the testcomponentbuilder it allows using the test injector with jasmine binding and wait for returned promise before completing async test block ,feat
14721,doc copy decoratormetadata doc to the decorator this allows editor to show the doc when user navigate to definition see close ,chore
14722,di change the params of provider and provide to start with use close ,feat
14723,router use compiler public api in import close ,refactor
14724,router use di import from public api this allows u to create smaller cjs bundle for router where the bundle doesnt duplicate code from angular core ,refactor
14725,testlib dont mock out xhr via mockxhr by default in test this is useful for the compiler test but otherwise it not useful additionally if an application ha external template a is common then we should actually fetch these template in test fix close ,fix
14726,compiler merge class and style attribute from the element with the host attribute close close ,fix
14727,analytics add basic buildanalytics to the project this is pretty experimental but the goal is to track the performance of our build over time so that we can more easily track perf regression currently it integrated only with gulp task but id like to expand it to tracking travis job protractorbenchpress test run npm installs etc no pii is being collected and the data is collected via a google analytics property owned by the angular team account close ,build
14728,compiler shadow cs import test in some browser close ,fix
14729,doc remove view decorator from example in doc close ,chore
14730,core fix link in core doc ,docs
14731,di fix link di doc ,docs
14732,lifecyclehooks change property for input close ,doc
14733,use shared code from public angularangular namespace close ,refactor
14734,di rename binding into provider close close ,feat
14735,core desugar to prop and propchange breaking change before cmp propfield wa desugared to cmp propfield propfieldevent after cmp propfield is desugared to cmp propfield propchangefieldevent close ,feat
14736,ngclass update doc add example close ,docs
14737,router use applicationref to provide the first bootstrapped component a routerprimarycomponent automatically this remove the routerbindings function a it is no longer necessary routerbindings will automatically pick the first bootstrapped component to satisfy routerprimarycomponent breaking change before bootstrapmycomponent routerbindingsmycomponent after bootstrapmycomponent routerbindings close ,refactor
14738,ngupgrade transclude content from ngng close ,feat
14739,ngupgrade cleanup t error ,chore
14740,ngupgrade support for content project from ngng ,feat
14741,typing mark underscore method internal this allows typescript to produce an api surface which match the dart semantics i found these with gulp buildjsdev find distjsdevesangularsrc name dts exec grep h n close ,chore
14742,ngzone improve type close ,refactor
14743,ngfor support a custom template part of close ,feat
14744,mapwrapper drop delete get foreach and size close ,refactor
14745,typing add more missing typing this is the same bug pattern i reported in close ,fix
14746,typing fix typing which were previously unchecked close ,fix
14747,typing missing type in listwrapper typing ,fix
14748,ngoutlet using some typescript feature close ,refactor
14749,ngoutlet move to typescript ,refactor
14750,router removed some redundant code ,refactor
14751,router route alias ha to be written in pascalcase close ,docs
14752,doc updated doc for default router location strategy close ,fix
14753,changelog update change log to alpha ,chore
14754,package update package version for alpha ,chore
14755,webworkers fix binding ,fix
14756,core remove ngzone and use ngzone instead ,fix
14757,analyzer fix dart analyzer error ,fix
14758,test fix public api spec ,fix
14759,test fix test ,fix
14760,typing update testtypings for abstract superclass ,fix
14761,typing extract abstract superclass to replace private constructor ,chore
14762,router allow async route to be defined with loader ,feat
14763,render recurse into componentsembedded template not until all element in a view have been visited fix close ,fix
14764,bundle use proper bundle arithmetic for http close ,chore
14765,remove torx from http call close ,docs
14766,cs when compiling cs leave absolute import alone close ,fix
14767,xhrbackend setrequestheader take a string arg close ,fix
14768,pub upgrade observe dependency close ,chore
14769,darttransform run deferredrewriter in the correct phase deferredrewriter depends on the presence of ngdepsdart file which do not yet exist in the phase where it wa previously run update the transformer phase to fix this and add an integration test to prevent regression ,fix
14770,ci update protractor version remove custom wait the latest protractor version support waiting for angular application so remove custom waiting logic close ,chore
14771,darttransform generate input setter in templatecompiler step move generation of setter for input from bindgenerator into templatecompiler ,refactor
14772,darttransform write correct ngdeps without deferred import previously the presence of a deferred import would cause u to output incomplete ngdepsdart code close ,fix
14773,changelog mention breaking test api change ,chore
14774,darttransform track timing of transform task ,feat
14775,listwrapper drop foreach and removelast close ,refactor
14776,approoturl simplify the code close ,refactor
14777,ngstyle update doc add example close ,docs
14778,listwrapper get ride of listwrappermap ,refactor
14779,listwrapper get ride of listwrapperjoin ,refactor
14780,bundle fix angulartestlib bundle to reexport testlib rather than test close ,build
14781,location improve the no base href set error message ,fix
14782,core making view optional close ,cleanup
14783,core update hellow world example to use component without view ,example
14784,transformer update transformer to handle component without view ,feat
14785,core add syntax sugar to make view optional ,feat
14786,test make ee test use the bundle after this change only webworker thread in it ee test is not using the bundle close ,chore
14787,doc rename private to internal the latter is understood by typescript stripinternal option so this let u rely more on the tooling provided by typescript team ,chore
14788,core make torx return subject this wa broken in the original great rxnext migration fix close ,fix
14789,darttransform sanitize generated library name sanitize generated library name by removing unsafe character and ensuring that dart keywords do not appear a library segment ,fix
14790,darttransform compose ngdepsmodel ngmeta phase link ngdeps ngmeta data in the same phase to avoid unnecessary asset creation reading remove ngmetaexports and instead use ngdepsexports to link ngmeta file in ngmetalinkerdart ,refactor
14791,saucelabs fallback from firefox dev to beta close ,chore
14792,dart remove unused dart benchmark ,build
14793,changelog update change log to alpha ,chore
14794,upgrade support binding of ng form ng close ,feat
14795,gulp simplify dart transformer task now that modulesdart contains only transform code simplify it gulp rule ,build
14796,zonejs update to fix ,chore
14797,build copy bundle so they can be used with ee test ,chore
14798,shim dont rely on prefixed requestanimationframe the m moz prefix are not needed m wa never available in a public ie release ie ha an unprefixed version and firefox ha unprefixed raf since v current version is even more firefox version below dont have cancelanimationframe so it better to not use the prefixed version at all to avoid surprise the o prefix is also useless opera presto never had raf and the chromiumbased opera doesnt use the o prefix also switched from new dategettime to datenow a it supported everywhere even in android except ie and it avoids a useless date object construction see for more info ref fabbacedfebaaec close ,fix
14799,bundle publish minified router bundle close ,chore
14800,build minify bundle in parallel ,chore
14801,typing repair broken typechecks we had the typechecker disabled by accident and many problem snuck in fix close ,fix
14802,typing reenable typechecking on the browser tree ,chore
14803,developermd update node version in setup instruction close ,docs
14804,darttransform ee test inlinerfortest add an ee test for the inlinerfortest transformer ,test
14805,changelog add breaking change for the ngnonbindable directive close close ,docs
14806,upgrade support binding of ng form ng close ,feat
14807,core move viewencapsulation and viewtype to the right place close ,refactor
14808,core keep style for viewencapsulationnative isolated per component breaking change rendererregistercomponent now take an additional argument fix close ,fix
14809,core set viewencapsulationemulated a the default again fix ,fix
14810,render keep binding of component in content and view in the right order binding in the component view have to be first before binding of component in the light dom ie have the same order a used in the viewmanagerutilscreateview method fix close ,fix
14811,ci update sauce connect to from close ,chore
14812,gulp use the new karmaserver api close ,fix
14813,travis add travis log folding for verbose task ,build
14814,gulp make code more readable ,style
14815,tool temporarily disable test that depend on mockfs mockfs is currently incompatible with node x but a fix is in progress since we are currently not actively developing the affected broccoli plugins the risk of disabling these test is low especially in the light of improvement we get from node x ,test
14816,karma socketio x transport is now called polling instead of xhrpolling and we really need it only when using sauce so im making the condition more strict ,fix
14817,karmadartevalcache make the code compatible with karma x ,fix
14818,tslint fix dts file path for nodemodules dependency ,fix
14819,npm resolve shrinkwrap conflict after rebase ,build
14820,npm upgrade gulpsass to v ,build
14821,npm update chokidar and karma dependency these dependency required upgrade in order for u to run on node vx chokidar karma karmachoromelauncher karmacli karmadart karmasaucelauncher ,build
14822,gulp bump checkenvironment node version to and npm to ,build
14823,travis bump node version to and npm to ,build
14824,add missing semicolon ,fix
14825,typing repair broken typechecking for stringmap note that the previous type of stringmap wa overly permissive and didnt catch error also we have to explicitly type empty object which is explained here close ,fix
14826,typing remove stringmap this wa a poorly typed attempt to mimic typescript index signature which we can use instead this eliminates a very strange type that we were exposing to user but not reexporting through our public api fix ,chore
14827,npmpublish update transitive typing provided in npm distribution ,fix
14828,package bump version to alpha ,chore
14829,changelog update changelog to alpha ,chore
14830,darttransformer correctly handle const object annotation previously annotation which were const object a opposed to const instance creation expression were incorrectly output a instance creation expression before const override a const instance creation expression after override a const instance close ,fix
14831,use observables in http remove observablewrappereventemitter from http temporarily use complete rx build w all operator ,chore
14832,core support property and event in addition to input and output to make transition easier close ,feat
14833,darttransform remove reflectionentrypoints reflectionentrypoints wa deprecated on aug and is no longer used by the transformer remove it deprecation message close ,refactor
14834,compiler const is not supported in ie and ie close ,fix
14835,benchpress update build step read and config close ,fix
14836,core move di binding of compiler into corecompilercompilerts close ,refactor
14837,core move appid from renderdomdomtokens into applicationtokens ,refactor
14838,core adjust import for move file to the right place renderxhr compilerxhr rendereventconfig linkereventconfig renderdomschema compilerschema renderdomcompiler compiler renderdomviewsharedstyleshost renderdomsharedstyleshost ,refactor
14839,core move file to the right place renderxhr compilerxhr rendereventconfig linkereventconfig renderdomschema compilerschema renderdomcompiler compiler renderdomviewsharedstyleshost renderdomsharedstyleshost servicesurlresolver compilerurlresolver servicesapprooturlo compilerapprooturl ,refactor
14840,add support for string a http method name close ,feat
14841,lifecyclehooks update api doc close ,doc
14842,core adjust import for rename angularsrccompiler angularsrccorecompiler ,refactor
14843,core rename angularsrccompiler angularsrccorecompiler ,refactor
14844,core move corecompiler to corelinker adjust import ,refactor
14845,core move corecompiler to corelinker ,refactor
14846,build lock dart dev version related to ,fix
14847,compiler remove unused code breaking change remove changedetection use a binding for changedetectorgenconfig instead to configure change detection renderelementrefrenderboundelementindex wa renamed to renderelementrefboundelementindex remove viewloader use xhrimpl instead ,refactor
14848,analyzer remove analyzer code this now life under ,refactor
14849,compiler use the new compiler everywhere close breaking change we dont mark an element a bound any more if it only contains text binding eg divhellodiv this change the index when using debugelementcomponentviewchildren debugelementchildren directivecompilechildren wa removed ngnonbindable is now builtin and not a directive any more angular no more add the ngbinding class to element with binding directive are now ordered a they are listed in the viewdirectives regarding change detection previously they had an undefined order the renderer interface ha new method createprotoview and registercomponenttemplate see domrenderer for default implementation reprojection with ngcontent is now all or nothing per ngcontent element angular transformer cant be used in test that modify directive metadata use angularsrctransforminlinerfortest transformer instead ,refactor
14850,transformer apply propertiesevents rename ,refactor
14851,transformer precompile stylesheets part of ,refactor
14852,transformer use the new compiler part of ,refactor
14853,upgrade assert correct interleaving of evaluation close ,fix
14854,upgrade inline the test for better readability ,chore
14855,core add doc to hostbinding and hostlistener ,docs
14856,coredirectives improve doc for coredirectives close ,docs
14857,core renames property into input and event into output breacking change before directiveproperties one event two after directiveinputs one output two before componentproperties one event two after componetinputs one output two before class a property one event two after class a input one output two ,feat
14858,build use angulars testability api to wait for end of ee test close ,fix
14859,form make ngcontrol ngvalueaccessor dependency unidirectional close ,feat
14860,form extract ngcontrolstatus ,refactor
14861,changedetection throwerror should not mask the original exception ,fix
14862,saucelabs fix badge close ,chore
14863,saucelabs add latest safari close ,chore
14864,query make querylist notify on change via an observable breaking change before queryonchange after querychangessubscribeiterable close ,feat
14865,typing remove traceurruntimedts fix close ,chore
14866,zonejs update to fix close ,chore
14867,saucelabs add matrix badge to readmemd close ,chore
14868,saucelabs update browser list close ,chore
14869,t fix todos that were pending on upgrade close ,chore
14870,compiler don ’ t require id in metadata and use appid the output of the compiler ha to be the same given the same input requiring a unique id for every type already during compilation make it hard to parallelize compilation part of close ,refactor
14871,zonejs update zonejs to close ,chore
14872,form documentation and example for control controlgroup and controlarray close ,docs
14873,form formbindings and formdirectives ,docs
14874,remove useless constant close ,refactor
14875,add language annotation and fix method value to enum close ,docs
14876,service export title service signedoffby cexbrayat cedricninjasquadcom close ,fix
14877,form avoid issue with null checking on validation status and other form state close ,fix
14878,darttransform fix transformer output declaration ensure that the transformer are properly declaring all consumed output in particular when a transformer overwrites an output make sure the transformer call consumeprimary followed by addoutput for that file prevent directivelinker from consuming ngdepsjson file when we do this barback incorrectly calculates the available asset for that phase resulting in broken build ,fix
14879,use observables in http backends breaking change http now return rx observables directly so calling torx is no longer necessary additionally http call are now cold so backend request will not fire unless subscribe is called close and close close ,refactor
14880,tsdart remove handwritten tsdart typing now that we are on t we can use the new node module resolution strategy close ,chore
14881,transformer record setter for query field close ,feat
14882,darttransform handle export cycle currently an export cycle in dart input will cause the transformer to hang indefinitely on the directivemetadataextractor step close ,fix
14883,compiler compilerview related api doc close ,docs
14884,type improve api doc ,docs
14885,compiler compiler related api doc ,docs
14886,binding improve error fix close ,feat
14887,typescript fix dart failure and linter close ,chore
14888,typescript upgrade fix buildjs and doc ,chore
14889,typescript upgrade fix buildtools ,chore
14890,render add generic view factory based on the template command part of close ,feat
14891,compiler minor cleanup and fix part of ,fix
14892,test stylecompiler test failing in android browser close ,fix
14893,compilerbenchmark simplify by using bootstrap and di close ,refactor
14894,change detection export simplechange close ,feat
14895,form add documentation and live example for ngform ngformcontrol ngformmodel and ngmodel close ,docs
14896,di fix incorrectly fomatted code block ,docs
14897,query remove the queryperelement limit close ,feat
14898,core add doc to property and event ,docs
14899,bundle add explicit format cjs for empty file ,fix
14900,changedetection make local private close ,cleanup
14901,changedetection add doc to changedetectorref ,docs
14902,changedetection add doc to change detection exception ,docs
14903,compiler various cleanup use implicit variable value correctly handle ngnonbindable correctly add some more assertion to templatecompiler make compiledtemplate const fix default value for directivemoduleid add new compiler to application binding breaking change compilercompileinhost and all method of dynamiccomponentloader don ’ t take binding any more only type this is in preparation for the new compiler which doe not support this part of close ,refactor
14904,animate crossbrowser compatibility close ,feat
14905,shim add requestanimationframe shim for ie and android fix ,fix
14906,saucelabs mdbutton test time out close ,chore
14907,example add empty example directory for api doc example this is a place for api doc example hand written in an idiomatic way close ,docs
14908,travis make sauce connect process query a bit more specific ,build
14909,travis block travis while we are shutting down the tunnel this is to prevent travis from prematurely shut down the vm while we are still waiting for the sauce connect client to tear down the tunnel close ,build
14910,travis gracefully shut down the sauce connect tunnel after the test are done running this is to prevent tunnel leak which cause u to run out of allocated tunnel close ,build
14911,upgrade allow including ng component in ng close ,feat
14912,upgrade infrastructure to allow running upgrade module spec ,chore
14913,router improve doc for instruction and related class close ,docs
14914,change http interface to type type were previously not handled correctly by the type definition generation process so a couple of thing in http had to be changed to interface this issue ha been fixed so now theyre type again close ,fix
14915,router improve doc for location and related class close ,docs
14916,router improve documentation for router binding ,docs
14917,router improve doc for lifecycle hook close ,docs
14918,router improve doc for routedefinition class ,docs
14919,fix missing variable from baserequestoptions example ,docs
14920,add doc and example for baseresponseoptions close ,docs
14921,add doc and example for responseoptions ,docs
14922,add doc and example for baserequestoptions ,docs
14923,improve doc and add example for requestoptions ,docs
14924,router do not export url class close ,chore
14925,router do not export rootrouter breaking change it unlikely that any apps were explicitly referencing rootrouter but if they were they should prefer to use the routerbindings helper or the routerbindings const exported from angularrouter ,refactor
14926,api align dartjs apis ,fix
14927,bug reflect dart interface from superclass a well fix close ,fix
14928,npm update shrinkwrap with the missing hashfiles dependency ,build
14929,di add missing doc close ,docs
14930,di make keyregistry private ,cleanup
14931,di make dependencyprovider private ,cleanup
14932,darttransform use protos to run test directivelinker use the proto ngdeps model object internally and while testing the directive linker rather than reading comparing dart code ,refactor
14933,compiler cleanup and preparation for integration rename directivemetadata into compiledirectivemetadata merge with normalizeddirectivemetadata and remove changedetectionmetadata store change detector factory not a array but directly at the compiledtemplate or the embedded template to make instantiation easier later on already analyze variable value and map them to directiveexportas keep the directive sort order a specified in the view annotation allow to clear the runtime cache in stylecompiler and templatecompiler ignore script element to match the semantics of the current compiler make all component dynamically loadable and remove the previously introduced property componentdynamicloadable for now until we find a better option to configure this don ’ t allow to specify binding in viewdirectives and viewpipes a this wa never supported by the transformer see below for the breaking change breaking change dont support di binding in viewdirectives and viewpipes any more in preparation of integrating the new compiler use directivebindings to reexport directive under a different token instead part of close ,refactor
14934,build temporarily test dart with dartjs instead of pub serve should be changed back when is resolved ,fix
14935,add documentation for request close ,docs
14936,improve doc for header ,docs
14937,add doc and example for jsonpbindings ,docs
14938,add doc and example for httpbindings ,docs
14939,di add doc to injector close ,docs
14940,di make typeliteral private close ,docs
14941,di add doc to opaquetoken ,docs
14942,di add doc to key ,docs
14943,angularrouter add ngrouteshim module this module attempt to provide a shim for routeprovider to aid in migrating from ngroute to component router close ,feat
14944,angularrouter use directive for route target breaking change previously route configuration took a controller constructor function a the value of component in a route definition routeconfig route component mycontroller based on the name of the controller we used to use a componentmapper service to determine what template to pair with each controller how to bind the instance to the scope to make the x router more semantically alligned with angular we now route to a directive thus a route configuration take a normalized directive name routeconfig route component mydirective breaking change in order to avoid name collision lifecycle hook are now prefixed with before mycontrollerprototypeonactivate after mycontrollerprototypeonactivate same for canactivate which now life on the directive factory function candeactivate canreuse and ondeactivate hook ,refactor
14945,router use stringwrapperstartswith ,fix
14946,router move assertcomponentexists into facade this is to make way for a refactor to the ng x router directive which will use string rather than controller function in route configs ,refactor
14947,router remove unused dependency in ngoutlet ,refactor
14948,core add support for contentchild and viewchild close ,feat
14949,core add sugar to use contentchildren and viewchildren a prop decorator close ,feat
14950,core add support for contentchildren and viewchildren ,feat
14951,query edit and extend query and view query doc ,docs
14952,throw if url is not string or request close close ,fix
14953,typing dont emit private member during the dts generation some of our classinterface member are package private typescript doesnt have this concept so we need to hide them via the private doc annotation close close ,docs
14954,sfx include nghttp in sfx bundle fix close ,fix
14955,facade workaround for lack of symboliterator in esshim close fix ,fix
14956,browser make firefox to work with esshim esshimjs must be loaded first ,fix
14957,remove unused property from request this remove property mentioned in close close ,chore
14958,darttransform declare transformer output update transformer to declare a superset of their output this help barback compute the asset graph and can lead to faster transformation ,feat
14959,core add plnkr example for ngif ,docs
14960,core document the new bootstrap apis also rename rootbindings to platformbindings to be more clear about what it is close ,fix
14961,compiler cleanup method and property name close ,refactor
14962,di add doc to forwardref ,docs
14963,di add doc to di exception ,docs
14964,di add doc for binding ,docs
14965,dist dont distribute the html dart api doc fix close ,fix
14966,compilerelementinjector fix typo close ,docs
14967,sharedservicemessagebroker fix typo typo fix on line suggested by patrickjs close ,docs
14968,chore fix bad link in the api doc ,docs
14969,docgen filter unwanted decorator from angulario doc close ,chore
14970,docgen make the module of the export original declaration available ,chore
14971,docgen add doctype info into datajson file ,chore
14972,docgenangulario sort export alphabetically ,chore
14973,compiler add templatecompiler templatecompiler is the entry point to the new compiler related to close ,feat
14974,exception noannotationerror message is not displayed close close ,fix
14975,docgen fix blank line trimming for jade doc close ,chore
14976,docgenangulario add id to member so they can be linked to close ,chore
14977,code size make assertionsenabled statically computable by dartjs our existing implementation prevented dartjs from statically deducing the return value this fix doe not yet result in better treeshaking due to the following dartjs bug close ,feat
14978,pipetransform make example header consistent ,docs
14979,core add doc for pipeondestroy interface ,docs
14980,core add doc for pipetransform interface ,docs
14981,ngzone add public api doc ,docs
14982,debug make debug tool take componentref the debug tool used to take applicationrefs which are the old return type of bootstrap now bootstrap return componentref so the debug tool should be updated close ,fix
14983,pipetransform remove extra backticks ,docs
14984,darttransform record property metadata update the transformer to generate code registering annotation on class property getters and setter close ,feat
14985,docgen fix incorrect description field in class template close ,chore
14986,corefacadecollection correct typo add correct spelling of the word statically close ,docs
14987,form misc minor refactoring close ,refactor
14988,ngclass ignore empty and blank class name fix close ,fix
14989,example remove dynamic version of example apps close ,chore
14990,async replace rxjs with rxnext close close ,refactor
14991,pipe add triple tick around asyncpipe code sample close ,fix
14992,darttransform test directive processor using protos directly test the ngdepsmodel object created by the directiveprocessor rather than string comparing output dart code ,refactor
14993,compiler remove attribute when expression in attrfooexp evaluates to null fix close ,fix
14994,pipe clean up import ,cleanup
14995,pipe remove limitto pipe in favor of slice pipe ,refactor
14996,pipe add slice pipe that support start and end index ,feat
14997,stringwrapper add support for j slice method to string ,feat
14998,listwrapper make list slice in dart return empty list if start and end are inverted like j ,fix
14999,api remove domrenderer from public api close ,fix
15000,api remove recordviewtuple cleanup ngfor ,fix
15001,api remove undefined ,fix
15002,api remove animation from public api ,fix
15003,router typo close ,docs
15004,gulp properly exit task that dont use broccoli pipeline when ctrlc is hit close ,build
15005,gulp add docsangulariowatch and docsangulariocopy task ,build
15006,coredirectives add ngstyle to coredirectives fix close ,feat
15007,ngfor add even and odd variable to ngfor add even and odd local variable to ngfor to allow developer to style table row differently and other feature close ,feat
15008,build improve reliability of the saucelabs job close close ,chore
15009,test do not set ngprobe when ng is null or undefined ,fix
15010,test angularprofiler should check before using modern apis ,fix
15011,test postmessagebussink test failing in slow browser ,fix
15012,test stylecompiler test failing in android browser ,fix
15013,test android browser doe not support elementclick ,fix
15014,shim functionname to return empty string when no name ,fix
15015,darttransform use a protobufs representation during transform to simplify processing and testing in the future use protobufs to represent of ngdepsdart file rather than always dealing directly in dart code this update doe not actually use the protobuf representation but this is a step towards moving all phase to parse and use protobufs rather than dart code ,refactor
15016,darttransform integrate protoc into gulp build this change detects if the user ha protoc available and if so us it to generate pbdart file if not prebuilt file are used instead ,chore
15017,router enforce convention of camelcase name in route alias close ,feat
15018,router use camelcase alias for route ,refactor
15019,core add a longform syntax for angular bootstrapping this change add a syntax for bootstrapping angular on a page that allows more finegrained control of the hierarchy created platform creates a platform injector of which there can only be one from the platform application creates an angular application including a zone and all specified application binding eg for the dom http compiler renderer etc at the application level bootstrap will bootstrap the given component into that application close ,feat
15020,router switch from using appcomponent binding to a manual routerprimarycomponent binding with the coming bootstrapping change a single application and thus router can have multiple root component one of these need to be identified a the primary component from which the router will load it configuration this is now done by providing a routerprimarycomponent binding to the primary component type ,refactor
15021,core support multiple changedetectors in a single lifecycle this allows a single lifecycle to be shared among multiple root component since each root component ha it own changedetector configured ,feat
15022,code size do not rely on uri in browserdomadapter close ,fix
15023,build lazyrequire esshim in the a router to prevent npmgulp issue we should really remove this shim from the angular bundle ill create an issue for that ,fix
15024,material add unit test for mdbutton ,chore
15025,router remove unused pipeline ,refactor
15026,build replace traceurruntime with esshim this remove traceur a a dependency for the t push f angular build close ,chore
15027,router recognize child component with empty segment previosly recognition ended when a parent captured all the parsed url segment this caused route that delegated from a parent to a child with an empty segment to never be recognized close ,fix
15028,changedetection allow triggering cd form changedetectorref close ,feat
15029,doc typo ,chore
15030,hook change to intrefaces ,refactor
15031,animate add basic support for cs animation on enter and leave close ,feat
15032,metadata fix some minor typo close ,docs
15033,directivemetadata fix some minor typo ,docs
15034,directivemetadata fix typo close ,docs
15035,typing remove public export added in bafcfefedbdccbbc close ,fix
15036,compiler support creating template command close ,feat
15037,compiler allow to serialize and deserialize directivemetadata ,refactor
15038,test make evalmodule faster by caching spawned module in the browser ,fix
15039,router introduce new navigate method previously routernavigate took a string representing the url now it accepts an array that mirror the link dsl close breaking change the old method ha been renamed to routernavigatebyurl either change your navigation call to use the dsl preferred or call routernavigatebyurl instead close ,feat
15040,router rename navigate and navigateinstruction method ,refactor
15041,router load route config from async instruction previously async route generated from link would not load the configs of their resolved component which led to broken link in the child of the async instruction component this commit fix the bookkeeping in the router to correctly load the configs fix internal b close ,fix
15042,packagejson update karmajasmine close ,chore
15043,bundle switch bundler tool input from e to e http sfx bundle wa not regenerated when bundlesjs task wa called the new bundle are a bit bigger angularminjs byte part of it is because t inlines class shim v defering to traceurruntime breaking change traceurruntime is no longer need when consuming the angular bundle shim or native support for e map set and symbol are still needed can be provided by esshimjs or corejs close ,chore
15044,benchmark enable the transformer on the statictree benchmark close ,chore
15045,fix http documentation close ,docs
15046,developermd add detail for configuring dart on window follows close ,chore
15047,di fix typo before before close ,docs
15048,core fixed typo in rendercompiler comment just a small typo fix close ,docs
15049,angularangularsfx correct typo add correct spelling of the word arithmetic close ,docs
15050,webworkers fix typo close ,docs
15051,compilepipeline correct compiliation to compilation close ,docs
15052,webworkerssharedmessagebusts correct typo close ,docs
15053,messagebustschange initilialized to initialized close ,docs
15054,webworkersworkerrendererts correct typo close ,docs
15055,protoviewmergertschange seprate to separate close ,docs
15056,webworkersuidibindings correct typo close ,docs
15057,webworkerssharedmessagebusts correct typo messsage to message corrects the typo messsage to message on line close ,docs
15058,corerenderdomcompilerpropertybindingparserts correct typo identifier wa misspelled close ,docs
15059,coredibindingts correct typo close ,docs
15060,webworkerssharedapplicationts correct typo close ,docs
15061,corepipesdatepipets configurable typo close ,docs
15062,forwardref typo close ,docs
15063,dibinding typo close ,docs
15064,corerender view typo close ,docs
15065,compilerelementinjector typo beneficial close ,docs
15066,codegenlogicutil typo close ,docs
15067,dibindingts typo on line close ,docs
15068,pipe add missing parenthesis in asyncpipe example close ,docs
15069,router add integration test for async route with child ,test
15070,exceptionhandler fix error message of wrapped exception close ,fix
15071,exceptionhandler move exceptionhandler into facade ,refactor
15072,tool remove rtts from the repo close ,chore
15073,webworker fix typo in webworker doc ,docs
15074,changelog update change log to alpha ,chore
15075,core export bootstrap from core export for j close ,fix
15076,typing output public constructor in dts file close close ,fix
15077,compiler add change detector generation runtime and codegen part of close ,feat
15078,webworkers add overview of webworker design close ,docs
15079,pipe improve doc for async pipe close ,docs
15080,benchpress fix benchpress overreporting in chrome close close ,fix
15081,router do not reuse common child with different parent ,fix
15082,router throw when generating nonterminal link close close ,fix
15083,testcomponentbuilder add overridebindings and overrideviewbindings close ,feat
15084,testcomponentbuilder add test for overriding child component directive ,test
15085,angularrouterbuild correct typo close ,docs
15086,benchmark rename statictree to statictreeperf close ,chore
15087,developer describe how to generate serve api doc close ,doc
15088,perf change detection profiler close ,feat
15089,darttransform make implementation detail private ,refactor
15090,webworker add zone support to messagebus close ,fix
15091,compiler implement tokentostring for operator include a case for tokentypeoperator close ,fix
15092,pipe add support for pure pipe by default pipe are pure this mean that an instance of a pipe will be reused and the pipe will be called only when it argument change breaking change before pipename date class datepipe defines an impure pipe after pipename date class datepipe defines a pure pipe pipename date pure false class datepipe defines an impure pipe close ,feat
15093,changelogmd remove duplicate alpha note remove duplicate note for alpha release to fix formatting issue no issue to close close ,docs
15094,form also update viewmodel in ngformcontrol ,fix
15095,form update ngmodels viewmodel when model change close ,fix
15096,core move more module into core ,refactor
15097,annotationmatcher fix typo with directive matcher ,fix
15098,directiveresolver synced with latest change close ,fix
15099,lifecycle hook move the hook to their own module lifecyclehooks breaking change lifecycle hook now live in the angularlifecyclehooks module they previously lived in the metadata module ,refactor
15100,transformer extract lifecycle hook from the interface ,refactor
15101,lifecycleevent remove lifecycleevent fix breaking change the lifecycle configuration for directive ha been dropped before dart componentlifecycle const lifecycleeventonchanges class mycomponent implement onchanges void onchanges typescript componentlifecycle lifecycleeventonchanges class mycomponent implement onchanges onchanges void e var mycomponent ng componentlifecycle lifecycleeventonchanges class onchanges function after dart component class mycomponent implement onchanges void onchanges typescript component class mycomponent implement onchanges onchanges void e var mycomponent ng component class onchanges function ,refactor
15102,benchpress make benchpress fit for chrome close close ,fix
15103,benchmark enable transformer on the benchmark close ,chore
15104,reflector merge prop metadata from getters and setter close ,fix
15105,doc document change detection profiler ,feat
15106,build switch to cjs output for e system output doe not work at the current version of t and systemjs will revisit after upgrading t remove unused traceur tooling close ,fix
15107,build remove traceur from build this remove traceur from the compilation step in broccoli broccoli now transpiles to e using the typescript compiler ,chore
15108,core add support for hostbinding and hostlistener example directiveselector mydirective class mydirective hostbindingattrmyattr myattr string hostlistenerclick eventtarget onclicktarget thistarget target close ,feat
15109,eventmanager use multi binding to configure eventmanager close ,refactor
15110,query implement query update mechanism based on view instead of working with finer grained element injector query now iterate through the view a static unit of modification of the application structure view already contain element injector in the correct depthfirst preorder this allows u to remove child linked list on element injector and a lot of book keeping that is already present at the view level query are recalculated using the aftercontentchecked and afterviewchecked hook only during init and after a view container ha changed breaking change viewquery no longer support the descendant flag it query the whole component view by default close ,feat
15111,docgen add space when removing linebreaks for jade datajson file close close ,chore
15112,docgen convert private class to interface in the doc close ,chore
15113,docgen move the private class converter into a helper service this will allow it to be reused in other doc gen configuration ,chore
15114,ngfor last property support make a new last property available during the loop with a boolean showing if it the last item in the iteration close close ,feat
15115,compiler add stylesheet compiler part of close ,feat
15116,test add helper to eval a module needed later for unit test for code gen and runtime code in ,feat
15117,core add support for property and event decorator example directiveselector myselector class mydirective property prop propertyelprop prop event event eventelevent event close ,feat
15118,util fix typo close ,docs
15119,dts generation add support for type alias close ,fix
15120,dts generation rewrite the dts file code generator to fix bug and apply type remap correctly previously the type remap wa not being applied to comment and free floating function the nunjucks template wa becoming unreadable so rather than making a tweak there i rewrote it into imperative code that is much easier to follow the output wa diffed against the old output the diff contained only the expected change ,fix
15121,testlib add missing type ,fix
15122,build add config for outputting the missing testlibdts file ,fix
15123,testlib reexport fakeasync via angulartest previously fakeasync wa not being publically exported at all ,fix
15124,fakeasync remove unused variable ,fix
15125,collectionts simplify listwrapperclear implementation ,refactor
15126,di fix a variable name typo ,style
15127,webworker fix todo server demo and add test to ensure the demo can bootstrap close ,fix
15128,di fix dart analyzer error close ,cleanup
15129,form update example apps to use the new way of registering validators ,refactor
15130,form use multibindings instead of query to get a list of validators breaking change before directiveselector creditcard binding new bindingngvalidator toalias forwardref creditcardvalidator class creditcardvalidator get validator return creditcardvalidatorvalidate static validatec stringmapstring boolean after function creditcardvalidatorc stringmapstring boolean directiveselector creditcard binding new bindingngvalidators tovalue creditcardvalidator multi true class creditcardvalidator ,refactor
15131,di add support for multi binding breaking change previously a content binding of a component wa visible to the directive in it view with the host constraint this is not the case any more to access that binding remove the constraint ,feat
15132,compiler allow to create changedetectors from parsed template part of close ,feat
15133,query add a test for view query with var binding close close ,test
15134,query cleanup queryref during dehydration the queryref object persists during dehydration but need to be cleanedup by removing callback and previous element close close ,fix
15135,testlib do not execute jasmine test a async if not required fix ,refactor
15136,doc document unused reflection info tracking ,feat
15137,webworker expose messagebroker api close ,feat
15138,doc document code size management tool for dart ,feat
15139,di do not double export di ,chore
15140,have http properly reexport core type ,chore
15141,componenturlmapper support relative template url in dartium when running in dartium without using transformer ie with a normal static web server handle relative template url this work by using mirror to get the url of the library where the component class is defined close close ,fix
15142,build delete unreferenced typing on npm install fix close ,fix
15143,core remove the syntax and make all dom event bubbling breaking change before div clickoneventhandler buttonbutton div after div clickoneventhandler buttonbutton div close ,feat
15144,packagejson remove unused esmoduleloader dependency close ,chore
15145,gulpfilejs fix some hint issue in gulpfilejs close ,chore
15146,router rename outlet integration spec to navigation spec the new name better reflects the behavior under test ,refector
15147,changelog update change log to alpha ,chore
15148,package bump up the version alpha ,chore
15149,routeregistry initialize routeparamsparams fix a bug caused by routeregistrygenerate not initializing routeparamsparams to a stringmap close ,fix
15150,wtf rename scope to follow coding convention ,refactor
15151,viewencapsulation rename to pascalcase breaking change viewencapsulationemulated viewencapsulationemulated viewencapsulationnative viewencapsulationnative viewencapsulationnone viewencapsulationnone close ,refactor
15152,tsdart replace list with array close ,chore
15153,ngprobe rename to ngprobe breaking change close ngprobe ngprobe ,refactor
15154,chandedetection rename changedetectorrefmarkforcheck breaking change close changedetectorrefrequestcheck changedetectorrefmarkforcheck ,refactor
15155,router reexport of type close close ,fix
15156,core fix type error ensure that value passed to domrenderersetelementattribute are string currently booleans can be passed to this method resulting in failure when running in dart checked mode ,fix
15157,transform remove reflectionentrypoints parameter remove the now unnecessary reflectionentrypoints parameter from the angular transformer support glob syntax for entrypoints ,refactor
15158,docgen use updated dartdoc tool use the new dartdoc tool which shipped with update the sdk constraint to ,chore
15159,webworker webworkerrenderer remove view after theyre destroyed close close ,fix
15160,router improve doc for routeroutlet method close ,docs
15161,router move setting reuse flag from routeroutlet to router ,refactor
15162,router fix typo in spec name ,test
15163,router routerlinkactive cs class support the routerlink directive now applies the routerlinkactive cs class to the associated element whenever the link is active close ,feat
15164,router implement routerisrouteactive ,feat
15165,router hashcons componentinstructions ,feat
15166,router add description for url class ,docs
15167,core added aftercontentinit afterviewinit and afterviewchecked hook close ,feat
15168,compiler add full directive metadata and validation logic with this the new templateparser ha featuredata parity with the protoviewdto of the rendercompiler part of close ,feat
15169,compiler simplify metadata ,refactor
15170,build add webworker bundle close close ,chore
15171,testlib browserdetection util close ,refactor
15172,lifecycleevent change to pascalcase rename breaking change close lifecycleeventoninit lifecycleeventoninit lifecycleeventondestroy lifecycleeventondestroy lifecycleeventonchange lifecycleeventonchanges lifecycleeventoncheck lifecycleeventdocheck lifecycleeventonallchangesdone lifecycleeventaftercontentchecked oncheckoncheck docheckdocheck onchangeonchange onchangesonchanges onallchangesdoneonallchangesdone aftercontentcheckedaftercontentchecked close ,chore
15173,view remove hostactions breaking change close replacement either direct dom access or renderer in webworkers ,refactor
15174,cjs make async test fail faster ,chore
15175,changedetection introduce enum changedetectionstrategy breaking change close change detection strategy type change from string to changedetectionstrategy checkonce changedetectionstrategycheckonce checked changedetectionstrategychecked checkalways changedetectionstrategycheckalways detached changedetectionstrategydetached onpush changedetectionstrategyonpush default changedetectionstrategydefault onpushobserve changedetectionstrategyonpushobserve ,refactor
15176,exceptionhandler changed exceptionhandler to use consoleerror instead of consolelog close ,feat
15177,typing emit spread parameter close ,fix
15178,transform move registration test to modulesdart this move test which were created in aeefedeaaead and were not moved in abdafbbacfabfc ,chore
15179,build fail experimental dart build but allow travis failure ,chore
15180,bundle dont include systemconfig in dev bundle fix close ,fix
15181,test error in karma when systemjs import fail close ,fix
15182,remove requestmethodsmap this class wa only added to do a reverse lookup of requestmethods enum to get it name ie get for dart since dart is no longer supported by http method name can just be retrieved with typescript support for enum name lookup ie requestmethodsrequestmethodsget get making the requestmethodsmap utility obsolete close ,chore
15183,build improve reliability of the saucelabs job close ,chore
15184,webworkers add websocket messagebuses for debugging apps close ,feat
15185,compile add htmlparser templateparser componentmetadataloader first bit of new compile pipeline close ,feat
15186,test removed implement ,refactor
15187,webworker return boolean from dispatchrenderevent update webworker dispatchrenderevent to return a boolean which viewts expects ,fix
15188,transform remove reflectionentrypoints from example pubspec specifying reflectionentrypoints is no longer necessary for most angular apps close ,chore
15189,change type declaration to interface and export eventemitter ,fix
15190,shrinkwrap update tsdart version ,chore
15191,build fix flaky build caused by doc generation close ,chore
15192,build fix testunitdart and testunitdartvm transformer load error close ,chore
15193,build do not run buildpubbuilddart twice close ,fix
15194,build make ee test faster close ,fix
15195,urlresolver allow a developer to customize their package prefix allow a developer to specify a package prefix where the package dart url will be resolved by default this will be package keeping the current behavior but allows for flexibility of different environment where a developer may not control their directory structure close ,feat
15196,typing include static member fix close ,fix
15197,build error when running npm test locally close ,fix
15198,webworker abstract message passing and serialization to uimessagebroker close close ,refactor
15199,router reorganize x test ,refactor
15200,router split x test into separate file ,refactor
15201,doc export type info for var and const export close ,feat
15202,router rename htmllocationstrategy to pathlocationstrategy html is a bit confusing we want to differentiate between persisting location state to the url path and the url hash hence pathlocationstrategy breaking change htmllocationstrategy pathlocationstrategy close ,refactor
15203,build change comment to indicate the temporary fix is permanent fix close ,chore
15204,build add mode safari version to ci close ,chore
15205,dartanalyzer plugin update to latest version of plugins close ,refactor
15206,allow using jsonpinjectables and httpinjectables in same injector fix close ,fix
15207,transform move transform module to modulesdart the buildpurepackagesdart gulp task ha also been updated to move the file into the angular tree close ,chore
15208,injector support getrootinjectors on dehydrated injector close ,fix
15209,build add android to ci close ,chore
15210,wtf fix ngzonerun instrumentation close ,fix
15211,build remove reference to emoduleloader i believe that it is no longer necessery after migration to a newer version of systemjs close ,chore
15212,parser detect and report interpolation in expression fix close ,fix
15213,coredirectives documentation update after renames close ,docs
15214,viewmetadata use viewmetadata consistently in test close ,test
15215,compiler detect and report error for view with empty templateurl fix close ,fix
15216,viewloader provide componentid in missing template templateurl error befor this change it wasnt clear which component is faulty ,fix
15217,changedetection added support for observable component and directive ,feat
15218,build added a temporary fix to make testunitdart work ,feat
15219,changedetection fixed reflect property a attribute close ,fix
15220,changedetection replaced devmode with changedetectorgenconfig ,refactor
15221,applicationref move applicationref to it own file close ,refactor
15222,build add ie to ci close ,chore
15223,doc added more readable link follows i hope this work ,fix
15224,changedetection do not reparse ast when using generated detector ,feat
15225,build add ie to ci ,chore
15226,build add ie to ci ,chore
15227,build add firefox to ci ,chore
15228,build add io to ci ,chore
15229,changedetection update the right change detector when using onpush mode previously in a case where you have a mix of onpush and default detector angular would update the status of a wrong detector ,fix
15230,dts show unknown field a ‘ any ’ not ‘ void ’ close ,fix
15231,benchmark disable broken benchmark remove once is resolved ,chore
15232,dart bad export in coredart ,fix
15233,router add reuse support for angular x router close ,feat
15234,router add angular x router ,feat
15235,router move routedata token into own file this change is to accomodate the router in angular x ,refactor
15236,dgeni fix a dgeni link error due to ambiguous link ,docs
15237,cleanup remove extra heading from nav and var template ,docs
15238,webworker add channel support to messagebus close and ,feat
15239,darttransform remove unnecessary gettersetter codegen currently the transformer generates all getters and setter even when creating pregenerated change detector which remove the need for them generate getters and setter via the model provided by protoviewdto which contains enough information to allow omitting unnecessary getters and setter from code output allow generating getters setter and method name which are dart pseudo keywords close ,refactor
15240,core create reusable recursiveastvisitor in astts ,refactor
15241,publish dont try to publish the http module into npm we bundle it into the angular package and currently dont plan to make it a separate package ,build
15242,publish uncomment pub publish section in pubpublishsh it seems that this got commented out by accident in the past ,build
15243,typing make routerdts depend on angulardts if this is not done definitelytyped test fail because of missing definition for list map and other apis that are part of router public api ,build
15244,build add safari to ci close ,chore
15245,metadata correct e annotation example close ,docs
15246,release bump version to alpha and add changelog ,chore
15247,test disable test based on intl api in nonchrome browser close ,chore
15248,ngstyle fix missing close ,doc
15249,karma corrected race condition with rx loading rx wa loaded twice once by karma and once by systemjs this seemed to create a race condition and rxsubject wa not available serving but not loading seems to fix the issue ,fix
15250,router allow routerlink to link to redirects close close ,fix
15251,facade add maximum method for listwrapper ,feat
15252,router subscribe should return subscription close close ,fix
15253,xhr error listener invokes throw on eventemitter close ,feat
15254,allow for commonjs a nghttp when using the commonjs build for node the module nghttp can not find module currently close ,fix
15255,doc fix typo in protoviewref class changed foctary to factory i wanted to change link appviewmanagercreateviewincontainer to link appviewmanagercreateviewincontainercreateviewincontainer and link appviewmanagercreateroothostview to link appviewmanagercreateroothostviewcreateroothostview for readibility see it show appviewmanager and appviewmanager but im not sure if thatll work so im just going with the typo close ,fix
15256,browser support edge close ,feat
15257,build enable saucelabs job close ,chore
15258,example modifies web worker example to be compatible with systemjs add the rx path to each respective web worker loader close ,fix
15259,npm upgrade systemjs dependency to ,chore
15260,build modifies replace script to reflect new change in systemjs ,chore
15261,npm upgrade systemjs to ,chore
15262,injector reset the construction counter in dynamic strategy add test for hydrate dehydrate in cycle close ,fix
15263,doc export bootstrap in corets but not in coredart ,fix
15264,browseradapterts baseelementgetattribute currently throwing an error error error during instantiation of locationstrategy routerlink router location locationstrategy original error typeerror baseelementattr is not a function close ,fix
15265,changedetection added an example demonstrating how to use observable model close ,feat
15266,changedetection added an experimental support for observables ,feat
15267,router user metadata in route configs provide the ability to attach custom data onto a route and retrieve that data a an injectable routedata inside the component close close ,feat
15268,propertybindingparser support onbubbleevent a an alternate syntax for event fix close ,feat
15269,changedetection request a change detection check when an event happens close ,feat
15270,changedetection generate handleevent only when necessary ,refactor
15271,query do not visit dehydrated injector ,fix
15272,changedetector made change detection responsible for processing event close ,refactor
15273,annotation replaces old syntax for hostlisteners with host close ,docs
15274,queryintegration remove duplicated change detection call close ,test
15275,testability properly throw when no testability available ,fix
15276,webworkers run xhr request on the ui fix issue in dart where darthtml is not available in isolates and allows for better profiling of xhr request close ,fix
15277,directive minor cleanup refactoring close ,refactor
15278,di minor fix close ,doc
15279,router fix regression with generating link to async route close ,fix
15280,query add a view query test in presence of a long ngfor close close ,test
15281,querylist delegate tostring to result array close ,feat
15282,dgeni fix an extra newline in the markdown for type ,docs
15283,router increase the timeout for the back button test the test would fail on ubuntu chrome with the standard timeout ,test
15284,di visibilityprivatepublicpublicandprivate breaking change rename private visibilityprivate public visibilitypublic publicandprivate visibilitypublicandprivate ,refactor
15285,test find testabilities across dart j application find angular testability object across different dart j context by registering each application in a global array and interrogating each for testabilities close ,feat
15286,pipe removed basepipetrasnform close ,refactor
15287,pipe changed pipetransform to make ondestroy optional breaking change before angular called ondestroy on all pipe after angular call ondestroy only on pipe that have the ondestroy method ,feat
15288,typescript update to typescript with fixed system emit close ,fix
15289,darttransform support part directive allow user to split library using the part directive close ,feat
15290,benchmark remove reference to stringprototypecontains removed stringprototypecontains from standard and is not implemented in most runtimes spidermonkey still being an exception close ,fix
15291,npm add typescript block to packagejson this make it simple to run the tsd link command in a project to automatically include path to typing file the definition also include transitive dependency of rxdts and espromisedts close close ,feat
15292,npm publish bundle and their typing in npm distribution the same bundle that are published to are now included in a bundle folder inside the npm distribution close ,feat
15293,testability option to disable tree walking ,feat
15294,ngclass take initial class into account during cleanup close ,fix
15295,compiler allow binding to classname using class alias close ,feat
15296,doc ngnonbindable close ,fix
15297,testability throw if no testability available this implement the same behavior for dart that is already implemented in the typescript version ,fix
15298,ngclass remove code duplication in test ,test
15299,query view query is properly updated when dom change fix a bug in view manager util where sibling injector is not correctly calculated viewquery no longer includes the view initiating component injector includes some refactoring of view method and a removal of a polymorphic map call close close ,feat
15300,query allow to query for templateref part of close ,feat
15301,pipe added the pipe decorator and the pipe property to view breaking change instead of configuring pipe via a pipe object now you can configure them by providing the pipe property to the view decorator pipe name double class doublepipe transformvalue args return value view template double pipe doublepipe class customcomponent close ,feat
15302,move http file to toplevel module close close ,refactor
15303,build use pub upgrade instead of pub get close ,chore
15304,doc explain the process for merging change to master close ,chore
15305,router throw when component in route config is not defined close close ,fix
15306,build do not run analyzerplugin test ,chore
15307,serialize search parameter from request option extends urlsearchparams api to include operation for combining different urlsearchparams object these new method include setallotherparams performs thissetkey value for each keyvaluelist pair in otherparams appendallotherparams performs thisappendkey value for each keyvaluelist pair in otherparams replaceallotherparams for each keyvaluelist pair in otherparams replaces current set of value for key with a copy of the list of value requestoptions do not merge search params automatically because there are multiple way to do this instead they replace any existing search field if search is provided explicit merging is required if merging is desirable some extra test coverage added close close ,feat
15308,typing allow defining custom namespace for bundle allows declaring a bundle namespace in generated typing file which should correspond to the global object representing the module inside it bundle breaking change the router wa previously exported a ngrouter in the angularsfxdevjs bundle but now it is exported a ngrouter close close ,feat
15309,typing allow declaration of reference path without this feature each bundle would have to create it own typing template to include reference to dependent typing now the reference can be declared in j along with other meta information about the bundle typing close ,feat
15310,build dont use global module format in router bundle empty e file are detected a global module format by default which mean that we end up with module format in a bundle e and global this make module loading more complex and make break with certain systemjs builder loader combination fix close ,chore
15311,coredirectives add ngclass to coredirectives close ,feat
15312,urlresolver encode url before resolving this commits make j implementation to behave like dart one fix close ,fix
15313,transformer be more specific in the import to rewrite instead of just matching on the filename match on the full uri close close ,fix
15314,router add documentation for lifecycle hook close ,docs
15315,router auxiliary route close ,feat
15316,presubmit us proper branch instead of hard coded close ,fix
15317,ci presubmitpr add close on merge close ,chore
15318,matcher add support for tohaveclass in test ,test
15319,testability fix type error in getallangulartestability dart this fix the following type error that is thrown when calling getallangulartestability while running dartium in checked mode type mappedlistiterable is not a subtype of type listpublictestability of publictestabilities ,fix
15320,pipe use injector instead of pipe factory for pipe instantiation breaking change pipe factory have been removed pipe name to pipe implementation are to instead of to before class dateformatter transformdate args class dateformatterfactory supporstobj return true createcdref return new dateformatter new pipesdate new dateformatterfactory after class dateformatter transformdate args new pipesdate dateformatter ,refactor
15321,di added resolveandinstantiate and instantiateresolved to injector these two method can be used to create object in the context of the injector without storing them in the injector ,feat
15322,cssclass change selector to ngclass breaking change the selector for the cssclass directive wa changed from class to ngclass the directive itself wa renamed from cssclass to ngclass close ,fix
15323,compiler strip script tag from template fix close ,fix
15324,compileelement remove unused method close ,refactor
15325,testlib run unit test in default documnent close fix ,fix
15326,fixdocgen fix docgen issue with some recent update to core ,docs
15327,docgen render enum doctypes correctly ,chore
15328,docgen render enum doctypes correctly ,chore
15329,refactor replaced observablepipe and promisepipe with asyncpipe ,feat
15330,material clean up old workarounds with new feature ,chore
15331,release update version changelog to alpha ,chore
15332,build enable typechecking for typescript e emit this requires delicate handling of type definition which collide because we use typescriptprovided libdts for targetes and libesdts for targetes we need to include our polyfill typing only in the targetes case and the usage have to be consistent with libesdts also starting with this change we now typecheck additional module so this fix a bunch of wrong typing which were never checked before fix ,chore
15333,darttransform do not format generated code by default formatting code requires time and memory during the build do not do it unless explicitly requested via a parameter to the transformer add an entry to the wiki describing the added parameter ,style
15334,darttransform show friendly message for transform failure previously the error message coming out of the dart transformer were opaque when those error came from the analyzer for example analyzer parse error log more useful error when they are caught by the transform code ,refactor
15335,exceptionhandler log error that are thrown by the compiler ,fix
15336,dart proxy is a value not a factory previously i added parens everywhere to make this proxy because our typing indicated it wa a function that returned a decorator but this break dart instead the typing need to be changed fix ,fix
15337,dart format with dartfmt v format all pure dart code with packagedartstyle v command find type f name dart xargs dartformat w ,style
15338,router add test for routerdts close ,test
15339,browser fix failing test in ie close ,chore
15340,ditests remove unecessary forloop close ,refactor
15341,contributing sync with the change of angularangularjs close ,docs
15342,changedetect share more codegen logic move more logic in our codegen into a shared util which is called by the jit prege change detector code ,refactor
15343,pipe replaces iterable and key value diffing pipe with service breaking change directive that previously injected pipe to get iterablediff or keyvaluediff now should inject iterablediffers and keyvaluediffers ,feat
15344,compiler allow component to use any style of selector fix ,fix
15345,parser detect empty expression in string to interpolate fix close ,fix
15346,injector remove unused consts close ,refactor
15347,router router config close ,docs
15348,xhrconnection normalize responsetext and response normalize xhrresponsetext and xhrresponse x test close ,test
15349,xhrconnection use xhr status code close x test ,fix
15350,router ensure navigation via back button work the router will now navigate and respect the current address value accordingly whenever a popstate event is handled close ,fix
15351,router add back support to mocklocationstrategy ,feat
15352,fixdocgen fix docgen issue with some recent update to core ,docs
15353,transformer add more information to factory debug reflection add the symbol information to debugreflectioncapabilities when asking for a factory to make finding the type easier in large codebases ,feat
15354,view correct templateurl and template definition fix close ,docs
15355,collection mapiteratornext is not supported safari fix close ,fix
15356,browser fix failing test in firefox close ,chore
15357,docgen render enum doctypes correctly ,chore
15358,link fix the link to an enum for viewencapsulation ,docs
15359,travis upload artifact for all branch we want to get the presubmit branch artifact for further testing ,chore
15360,mdbutton enhance button focus appearance ,feat
15361,example manual encoding of data url is no longer necessary ,chore
15362,type export type so that we can link to it in our doc close ,docs
15363,docgen export interface over var if a symbol is declared a an interface and a var then we should export it a an interface rather than a var ,chore
15364,core made directive shadow native element property breaking change previously if an element had a property angular would update that property even if there wa a directive placed on the same element with the same property now the directive would have to explicitly update the native elmement by either using hostproperties or the renderer ,feat
15365,build upgrade to typescript this change also make u compliant with dev compiler so we can do some experiment with apps that use feature and compile against angular we should probably add a travis build for so we stay compatible with both version ,chore
15366,webworkers add webworker todo example add support for more dom event fixed breakage caused by previous di commit in webworker todo example ,feat
15367,changedetection do not generate onallchangesdone when not needed ,perf
15368,render allow to configure when template are serialized to string introduces the injectable templatecloner that can be configured via the new token maxinmemoryelementspertemplatetoken also replaces documentadoptnode with documentimportnode a otherwise custom element are not triggered in chrome close close ,fix
15369,webworkers add webworker todo example add support for more dom event ,feat
15370,di renamed viewinjector and hostinjector breaking change replace viewinjector with viewbindings replace hostinjector with binding ,cleanup
15371,browseradapter fix clearnodes in ie fix close ,fix
15372,integration minor test cleanup close ,test
15373,di clean up visibility decorator breaking change replace ancestor with host skipself replace unbounded wwith skipself replace ancestorselftrue with host replace unboundedselftrue with nothing replace new ancestormetadata with new hostmetadata new skipselfmetadata replace new unboundedmetadata with new skipselfmetadata replace new ancestorselftrue with new hostmetadata ,cleanup
15374,di added a doc describing advanced di topi ,docs
15375,di updated di doc ,docs
15376,button dramatically cleanup button cs ,chore
15377,testability expose function getallangulartestabilities ,feat
15378,changedetection removed the currentproto property ,perf
15379,benchmark remove unnecessary style setter remove style setter that is no longer used necessary close ,refactor
15380,protoviewbuilder host property binding to unknown prop when binding a host property we shouldnt try to bind to any directive property that might exist on a host element close ,tests
15381,release release alpha ,chore
15382,doc add viewdefinition directivemetadata to public api close ,fix
15383,core export lifecycle at toplevel module lifecycle can now be imported via angularangular or angularcore so that end user can inject it without having to use the full source path close ,fix
15384,render don ’ t store dom node but store string for big protoviews also insert comment node beforeafter projected node so that text node don ’ t get merged when we serializedeserialize them close first part of ,refactor
15385,build faster feedback for broken lint originally we ran gulp enforceformat at the beginning of the build this wa annoying because you came back from lunch to find that no test ran so you have to start your pr over then we changed it to run the linters at the end this is annoying because you might be ready to merge to master and could have fixed the lint issue immediately but now much wait for another pr the solution is to run the lint check in another build this mark your pr red very early but you still get the feedback of whether the test are passing ,chore
15386,transfomer code style in rewriter ,chore
15387,bootstrap fix expression containing bootstrap fix ,fix
15388,testing fixed race condition in webworker and routing test ,fix
15389,doc fix bad link syntax for viewencapsulation enums ,chore
15390,docgen fix jade whitespace error ,chore
15391,darttransform remove malfunctioning zone error handler remove onerror zone callback which is consuming exception thrown by the transformer and can cause pub to become unresponsive close ,fix
15392,webworkers add dom event support close ,feat
15393,changelog update to new changelog package regened the changelogmd for consistency seems like some old commits are not present in new the changelogmd but it doesnt seem worthy of further investigation close ,chore
15394,query view query should not be updated when subviews are attached ,fix
15395,changedetection do not check intermediate result ,perf
15396,decorator stop directive inheriting parent class decorator fix ,fix
15397,changedetect move dehydrate method into superclass move the implementation of dehydrate hydrated and detectchangesinrecords into abstractchangedetector add comment clarifying the contract between abstractchangedetector and it subclass close ,refactor
15398,styleurlresolver fix data url resolution ,fix
15399,changedetect move common field to abstractchangedetector move field common to dynamic jit and pregen change detector into the abstractchangedetector superclass to save on codegen size and reduce code duplication update to close ,refactor
15400,compiler introduce schema for element close ,feat
15401,elementbinderbuilder remove unused code close ,refactor
15402,shadowdom remove shadowdomstrategy in favor of viewencapsulation breaking change shadowdomstrategy wa removed to specify the encapsulation of a component use viewencapsulation viewencapsulationnone viewencapsulationemulated viewencapsulationnative the default encapsulation strategy is now viewencapsulationemulated if a component contains style and viewencapsulationnone if it doe not before this wa always none viewloader now return the template a a string and the style a a separate array ,refactor
15403,presubmit corrected useremail for git push ,fix
15404,routing adding routing example and ee test ,example
15405,build copy json file for dart example ,chore
15406,transformer fix generation of annotation argument when registering function ,fix
15407,changedetect move dehydrate logic into dedicated method call new dehydratedirectives method from dehydrate add a null implementation in abstractchangedetector and only override if necessary for the specific change detector update to ,refactor
15408,changedetect create use loosenotidentical create loosenotidentical looseidentical which will save a lot of unnecessary character in generated change detector update to ,refactor
15409,core provide an error context when an exception happens in an error handler ,feat
15410,query the view should not be visible to query viewquery is the correct way to query the view template ,fix
15411,chore delink type because there no doc for dgeni to find ,docs
15412,docgen trim leading blank line from markdown content harp doe not allow blank line to appear between filter and their content this change ensures that any blank line that could appear have been trimmed inside nunkjucks close ,chore
15413,docgen add var to jade variable declaration harp requires that jade variable are declared correctly close ,chore
15414,dart run dartfmt v on all pure dart code update formatting for all pure dart code in the repo ,style
15415,call complete on request complete close ,feat
15416,docgen fix when decorator ha no argument list ,chore
15417,ngfor add whitespace to directive annotation ,style
15418,docgen render decorator annotation for exported class close close ,chore
15419,changedetect make changedetectionutiluninitialized a var previously uninitialized wa a method requiring a call a well a two extra character everywhere it wa used make this value a variable saving the character and avoiding the method call to get it value this change also remove the export of uninitialized from changedetectts which is technically a breaking change however uninitialized is an implementation detail and nobody should be using it in app logic by convention apps should not be importing from file under src update to ,refactor
15420,export browserxhr needed for replacing browserxhr binding with mockserver version etc close ,feat
15421,lowercaseuppercase make stateless pipe same problem a json previously of transforming only on reference check close close ,fix
15422,build initial saucelabs setup close ,feat
15423,gulp move bundle to distjsbundles renames bundlejsdeps to bundlesjs make all other bundle task private close ,chore
15424,typo ngzone referencing misspelled api close ,docs
15425,core fix type error in setelementproperty convert propertyvalue to string when calling setelementattribute close ,fix
15426,dts correct new type interface return type close close ,fix
15427,changedetection generate checknochanges only in dev mode ,feat
15428,build add trend for travis time we discussed last week that our build ha been steadily getting longer we should track the time so we can easily notice that it went up and find the culprit this hook u up to which seems capable and very quick to setup we can easily gather the data and then evaluate the dashboard note that we want to have two different webhooks and only notify gitter on transition but we want to have timing for all build since a series of passing build might have a big jump in build time in the middle i dont see how to do this with travisyml so ive overnotified gitter ,chore
15429,async unify t and dart promisecompleter naming also add explicit typing wherever we use promisecompleter ,refactor
15430,class allow class name with mixed case fix breaking change view renderer used to take normalized cs class name ex foobar for foobar with this change a rendered implementation get a calss name a specified in a template without any transformation normalization this change only affect custom view renderers that should be updated accordingly close ,fix
15431,api cleaned up top level import render ,chore
15432,doc added more doc for corets ,chore
15433,changedetect abstract name logic into nameregistry create nameregistry responsible for understanding how name are generated for change detector field and variable use nameregistry for both j jit dart pregenerated detector making progress on ,refactor
15434,darttransform handle mixed lifecycle spec update the transformer to handle class which both have a lifecycle value and implement lifecycle interface close ,fix
15435,form value accessors inject ngcontrol only from self ,cleanup
15436,urlresolver in dart make package url relative to approoturl ,fix
15437,changedetection provide error context for change detection error ,feat
15438,exceptionhandler print originalexception and originalstack for all exception ,feat
15439,lexer idiomatic typescript close ,style
15440,diinjector fix typo in injectorstrategy interface close ,refactor
15441,query add a test for query in the presense of projection query us only the logical structure of the application so it is not affected by projection which only the rendering structure close ,test
15442,transformer dont throw on annotation that dont match a descriptor close ,fix
15443,transformer use class for reflection info instead of a map close ,chore
15444,testability hook zone into whenstable api with async support close ,feat
15445,typing test our dts with noimplicitany this match how definitelytyped test it so we are one step closer to publishing the same file we generate see ,fix
15446,changedetection convert interpolated null value to empty string fix close ,fix
15447,integrationtest remove unused import ,refactor
15448,annotation remove reference to parent annotation this annotation wa removed in facfaddaacee ,docs
15449,link change bad link for type renderviewref renderfragmentref oneventdonefn and renderer api ,docs
15450,urlresolver support package url fix ,feat
15451,webworkers add webworker renderer allows angular apps to be rendered from the webworker close and ,feat
15452,release fix pub publish release script relevant so tldr bash doe not really have booleans true and false are just string ,chore
15453,class correctly clean up on destroy fix close ,fix
15454,transformer directive alias in dart transformer fix ,feat
15455,projection allow more bound render element than app element fix close ,fix
15456,projection allow to project to a non text node we already had a test for this but too low level that it did not catch this null value in hasnativeshadowroot fix close ,fix
15457,compiler prevent race condition previously the compiler would detect cycle where there were none just because of other component that were compiled in parallel furthermore the way protoview merging wa triggered could result into early exit resulting in error when trying to instantiate protoviews fix close ,fix
15458,build dont trigger travis on gsync branch ,fix
15459,build add experimental dart build that us ddc for code analysis ,chore
15460,elementinjector do not throw when can not find element when trying to report an error ,fix
15461,exceptionhandler unified all exception handling breaking change previously it wa possible to pas a custom error reporter to bootstrap which wa used only during the construction of injector this had limited utility so this capability ha been removed ,refactor
15462,exceptionhandler change exceptionhandler to output context ,feat
15463,transformer logger now are per zone and each transform run in it own zone ,fix
15464,dart logging only print relevant message in debug mode ,chore
15465,docgen add processor to check for unbalanced code fence backticks see ,chore
15466,docgenangulario check for not private rather is public in eaaea we removed the public tag but the addjadedatadocsprocessor wa still relying upon them being there to identify whether a doc should be included in the public doc instead we should just check for the doc not being marked with the private tag close ,chore
15467,bootstrap remove the need for explicit reflection setup in bootstrap code breaking change dart application and typescript application meant to transpile to dart must now import packageangularbootstrapdart instead of packageangularangulardart in their bootstrap code packageangularangulardart no longer export the bootstrap function the transformer rewrite import of bootstrapdart and call to bootstrap to bootstrapstaticdart and bootstrapstatic respectively ,feat
15468,changelog add a changelog for alpha release ,chore
15469,release release alpha ,chore
15470,router use querystring params for toplevel route close ,feat
15471,di added context to runtime di error ,feat
15472,lang added context to baseexception ,feat
15473,darttransform populate lifecycle from lifecycle interface when a directive implement a lifecycle interface eg onchange or oninit populate it lifecycle property if not already populated close ,feat
15474,benchmark add statictree benchmark static binary component tree of depth ie component current number for purescripttime are javascript baseline ng ng dart baseline ng ng ie in j we are same speed a baseline right now some background we had a recent change in the compiler that merges component into their parent already during compilation this made ng x faster in this benchmark before the ng j time wa m close ,feat
15475,build make pr m faster dont precompile dartjs for pull request instead serve the dart source with pub serve we were already testing with dartium so all we lose is some test coverage of defect exposed only by the dartjs transpiler this still run the dart transformer fix ,chore
15476,router refactor integration test to use testcomponentbuilder close ,test
15477,di removed parent breaking change the parent annotation ha been removed use ancestor instead parent wa used to enforce a particular dom structure eg a pane component is a direct child of the tab component di is not the right mechanism to do it we should enforce it using schema instead ,refactor
15478,contentprojection allow to project text node to a place without binding fix close ,fix
15479,compiler speed up proto view merging dont create intermediate merge result only merge embedded protoviews that contain ngcontent tag close close ,refactor
15480,build require parameter type fix ,feat
15481,build upgrade tsdart to ,chore
15482,changedetect sort directivemetadata property during processing the angular render compiler can get out of sync between it transformer execution and it runtime execution leading to incorrect change detector with outoforder property value stable sorting solves this problem temporarily ,fix
15483,pipe changed append to extend breaking change pipesappend ha been renamed into pipesextend pipesextend prepends pipe factory instead of appending them ,feat
15484,compiler support baseurl in html attribute when loading a template angular fetch template html file outside of the browser normal parsing flow a a result url in template file are interpreted relative to the root application when the component defined by the template file are inserted into the dom this change enables a template author to prefix url with the string baseurl which will be replaced with the relative base path of the template file so for an example template loaded from componentfootemplatehtml img srcbaseurllogopng becomes img srccomponentfoologopng address ,feat
15485,darttransform remove chatty formatter message remove informational formatter message that is very chatty and not actually useful ,refactor
15486,darttransform add warning about issue add a more descriptive warning about the lack of support for directive dependency alias and a pointer to more information ,refactor
15487,dom only send value for existing property to j interior due to we have to check whether a property exists on a dom element not before runtime of the application previously we did this check in javascript making all property value go through dart j interop however this is slow for complex object this commit change this behavior to first check whether the property exists before sending the property value to the dom element via j interop close ,perf
15488,di fixed dynamic component loading of component created in child injector ,fix
15489,changedetect minor readability update ,style
15490,form export ngselectoption directive make the ngselectoption directive visible from toplevel form module ,feat
15491,router improve error for missing base href close ,fix
15492,facade use base element to get base href previously call to getbasehref used documentbaseuri which default to the current path in the absence of a base element in the document this lead to surprising behavior with this change getbasehref return null when a base element is not present in the document ,fix
15493,transformer cleanup unneeded todepsuri function cleanu unneeded todepsuri function in favor of the common todepsextension ,chore
15494,transformer implement initializing deferred library implement deferred library to work with dependency injection and other angular codegen this is done by not initializing the library in the parent ngdeps file when it is declared a deferred rewriting the import and chaining a future that initializes the library in any file that are using deferred library which need angular codegen ,feat
15495,di fixed type ,fix
15496,form removed iterabletolist ,refactor
15497,router throw when reserved character used in route definition close ,fix
15498,build fix dts generation error caused by invisible type of exported declaration fix ,chore
15499,view split viewmanagerviewcontainerrefcreateview into method breaking change viewmanagercreateview viewcontainerrefcreate have been split into method createhostview which take dynamically created binding createembeddedview which take the newly introduced templateref the new type templateref is the combination of a protoviewref and and elementref from the same place use templateref when working with embedded view in ngif ngfor instead of protoviewref also protoviewref is no more injectable but templateref is first part of to clean up manual content projection close ,refactor
15500,transformer fix sort order for reflective import fix sort order for reflective import in reflectionremoverrewriterdart currently there is only one import so the sort order happens to be correct but if another one is added the rewrite code will break ,fix
15501,form default the initial value of control to null ,fix
15502,router add interface for route definition in routeconfig close ,feat
15503,renderer handle empty fragment correctly close ,fix
15504,viewmanager allow to create host view even if there is an embedded view at the same place ,fix
15505,protoviewbuilder improve error message for dangling binding close ,refactor
15506,title add documentation for the title service close ,docs
15507,build remove traceur from nodetree cjs build fix ,chore
15508,di do not rely on the fact that type are canonicalized ,fix
15509,transformer remove reflector parameter from initreflector signature remove reflector parameter from initreflector method to simplify ngdeps for reflection initialization it wasnt used and wa added for testability but wasnt used this keep the interface simplier ,chore
15510,apidocs slightly more accurate description of dart overrideoneventdone ,fix
15511,apidocs slightly more accurate description of t overrideoneventdone ,fix
15512,changedetect handle in change detector string in dart indicates the beginning of an interpolation escape in string when generating change detector class add a unit test to cover this case ,fix
15513,publish add force flag for pub publish script the pub publish process wa not following through with publishing package because the f flag wa not be provided to pub publish causing the process to prompt for confirmation before publishing which wa causing the pubpublishsh script to skip publishing close ,fix
15514,domrenderer test that property on the root element can be changed close close ,test
15515,form do not reset the value of the input when it came from the view ,fix
15516,compiler attach component and project light dom during compilation close breaking change shadow dom emulation no longer support the content tag use the new ngcontent instead work with all shadow dom strategy removed domrenderersetviewrootnodes and appviewmanagergetcomponentview use domrenderergetnativeelementsyncelementref and change shadow dom directly the renderer interface ha changed createview now also ha to support sub view the notion of a container ha been removed instead the renderer ha to implement method to attach view next to element or other view a renderview now contains multiple renderfragments fragment are used to move dom node around internal change design change introduce notion of view fragment on render side domprotoviews and domviews on render side are merged appprotoviews are not merged appviews are partially merged they share array with the other merged appviews but we keep individual appview instance for now domprotoviews always have a template element a root needed for storing subviews we have le chunk of dom to clone now remove fake elementbinder bound element for root text binding and model them explicitly this remove a lot of special case we had appview share data with nested component view some method in appviewmanager create hydrate dehydrate are iterative now now possible a we have all child appviews elementrefs already in an array ,feat
15517,changedetection added support for observablelist from packageobserve ,feat
15518,ngfor fixed ngfor to pas a change detector ref to the pipe registry ,fix
15519,elementinjector inject the containing change detector ref to directive ,fix
15520,query refactor querylist and basequerylist close ,chore
15521,example add a couple entrypoints adjust pubspec fix change detector bug in dart ,fix
15522,build add material cs to dart build ,chore
15523,core add ability to reflect dom property a attribute by binding the token domreflectpropertiesasattributes provided by the domrenderer module to true in the root injector ie bootstrap all element whose property are set by angular will be reflected a attribute with the prefix ngreflect fix ,feat
15524,build clangformat ,fix
15525,lint require semicolon relying on asi automatic semicolon insertion is allowed in typescript because javascript allows it however when we run clangformat it doesn ’ t understand that these statement are terminated with a newline and change the indentation in bad case even breaking the code fix ,chore
15526,webworkers add messagebus broker and serializer ,feat
15527,router fix formatting ,chore
15528,build upload disttgz for j build ,chore
15529,router improve error message for route with no config close ,fix
15530,facade add gettypenamefordebugging function ,feat
15531,ee fix error setting style property of dom element fix the following error in ee test can not set property style of htmlelement which ha only a getter close ,test
15532,add support for jsonp request close close ,feat
15533,facade make normalizeblank le nonsensical ,chore
15534,di instatiate service lazily ,fix
15535,transformer expose di transformer for use by package expose the di transformer for package that have injectable object but do not contain the application or angular view close ,feat
15536,lifecycleevent change from oninit to lifecycleoninit breaking change close ,refactor
15537,benchmark use issupported rather than isjsobject seems more accurate and would allow isjsobject to handle typical literal in dart which could be useful close ,chore
15538,htmladapter implement hasattribute and getattribute fix the template compiler when running on the server ,fix
15539,process add corewebworker component to triageandlabelsmd ,chore
15540,packagejson bump version to alpha ,chore
15541,ngzone idiomatic dart ,refactor
15542,router introduce matrix params close close ,feat
15543,router export lifecycle hook in bundle ,fix
15544,di removed default visibility breaking change directive will use the unbounded visibility by default whereas before the change they used self ,fix
15545,transformer add a test that generated change detector dont call notifyonbinding for template variable ,chore
15546,compiler keep domhasproperty in sync between browser and transformer right now we always return true until we have property schema support fix close ,fix
15547,query initial implementation of view query viewquery is a new api that allows a component to query it view close ,feat
15548,license include license file in dev and devsfx bundle ,feat
15549,transformer event getters now use property name not event name ,fix
15550,router lifecycle hook close ,feat
15551,utildecorators fix typo in classdefinition interface close ,docs
15552,docgen add some test for typescriptdefinitionpackage ,chore
15553,docgen convert heritage for private constructor class when we are creating a type definition file for a class ha a private constructor we convert it to a combination of an instance of a concrete type with no constructor and an interface that contains the other method when this happens we must also convert the class heritage from implement to extends since interface can not implement other interface or class fix a problem with close ,chore
15554,docgen update dgenipackages to ha fixed the private tag so this is not needed locally any more ,chore
15555,docgen remove unnecessary public and exportedas tag ,chore
15556,docgen put typescript stuff into it own package this mean that we can now run just the dts file generation by running bash gulp docstypings in addition the type definition generation wa messing with the other doc task so separating it also fix problem there ,chore
15557,docgen dont use string module to striptags this module writes a file called string containing the text testtest to the file system when it initialize see ,chore
15558,zone add on event done zone hook ,feat
15559,pipe add static append method to pipe this change allows creation of a new pipe binding with new pipe appended to pipe of an inherited pipe instance close ,feat
15560,pipe rename piperegistry to pipe breaking change this change renames all instance of piperegistry to pipe a part of this change the former defaultpipes export is now a pipe instance instead of a map the map that wa previously called defaultpipes no longer exists but may be accessed via defaultpipesconfig ,refactor
15561,pipe rename piperegistryts pipests this is it own commit so that tool have an easier time of preserving history of the file by keeping the diff between pipests and piperegistryts minimal also moved piperegistryspects ,chore
15562,example add missing todo ,fix
15563,transformer fix pub build in example ,fix
15564,cssshim fix multiple us of polyfillunscopedrule ,fix
15565,di do not use exception to detect if reflection is enabled ,fix
15566,test add test bundle create a bundle for the test library testcomponentbuilder testinjector and debugelement internal test use a superset of the bundle ,feat
15567,di hostinjector and viewinjector support nested array ,fix
15568,pipe add date pipe close ,feat
15569,pipe add number decimal percent currency pipe ,feat
15570,router fix broken hashlocationstrategy string issue for dart ,fix
15571,packagejson move some deps into dev deps close ,fix
15572,build upload dart artifact to gc second attempt after rollback of after each successful build in the dart stable variant this uploads just enough of the dart artifact to mirror what we would push to pub by uploading the file instead of a zip this let dart user depend on an unreleased snapshot of angular and let u easily fetch the dart artifact for sync into google without having to rebuild potentially in a subtly different environment this doesnt upload anything for pull request ,chore
15573,regexp use to create regexp literal fix ,refactor
15574,build clangformat ,fix
15575,example fix dart issue with router example ,chore
15576,build remove the travis deploy step which is broken i need to test this on a forktravis rather than break the angular build ,fix
15577,build reduce the deploy upload travis is currently stalling presumably it take too long to upload this many file also it pick up the dart directory when deploying j which look like a bug with multiple gc provider so just do dart for now ,fix
15578,example fix broken router example code for dart ,chore
15579,build clangformat ,fix
15580,build add gc upload of build artifact this copy the dist folder for each successful travis run to a google cloud storage bucket under the sha of the commit we only upload for submitted change not pr we can use this to fetch the dart source for each sha without having to rebuild them which is hard to reproduce since the environment might differ eg different dart sdk ,chore
15581,ngstyle add documentation close ,docs
15582,build allow building in window without admin priviledges close ,feat
15583,cssclass add documentation close ,docs
15584,cssclass verify that class from string exp are cleared properly close close ,test
15585,tsconfig target should be lower case close ,fix
15586,transform handle multiple interface in directive processor comma separate the list of interface in the directive transformer close ,fix
15587,router change substr to substring ,chore
15588,changelog add support for to and from flag in changelogjs this commit add support for tosha and fromsha when running the script at scriptspublishchangelogjs to override default fix ,chore
15589,routing adding routing example and ee test close ,example
15590,router ensure that page refresh with hash url work this patch fix the hashlocationstrategy to always return a string path value without a hash symbol a the starting value close ,fix
15591,form changed all form directive to have basic control attribute ,feat
15592,viewref fix typo close ,docs
15593,elementref fix typo ,docs
15594,directiveparser improve code readability close ,refactor
15595,dts remove private compiler deps close ,chore
15596,docgen fixup private constructor declaration close ,chore
15597,packaging bump version to alpha ,chore
15598,dts remove args file ,chore
15599,doc adding doc to corets and annotationsts ,chore
15600,dts correct componentannotation inheritance close ,fix
15601,docgen stop crash in gulp publicdocs this change prevents the doc generation from crashing due to a missing module but perhaps we need to think of a way of being able to generate the angulardts file correctly in gulp publicdocs perhaps by removing the need for angularangularapi ,chore
15602,docgen include type parameter in dts file close ,chore
15603,form remove cyclic dependency correctly resolve renderer by removing cyclic dependency close ,fix
15604,ngstyle export ngstyle in angulardirectives close ,feat
15605,module fix typo close ,docs
15606,packagejson upgrade zonejs to ,chore
15607,router support deeplinking to sibling close ,feat
15608,router allow generating link with numeric params ,fix
15609,docgen fix spacing in heritage clause ,chore
15610,transformer support prefixed annotation in the transformer close ,fix
15611,di added support for custom dep provider ,refactor
15612,changedetection throw changedetectionerror in jit mode ,fix
15613,changedetection do not coalesce record with different directive index ,fix
15614,typing move comment to decorator args the property of the annotation class are not really the public api user will interact with these via a decorator and the decorator take a single arg typed with the args class thus the comment is more useful on the arg class this also fix the problem of intellisenseautocomplete not showing the important doc a you fill in the property in a decorator declaration ,chore
15615,angulardts show typing for component etc we had the same symbol exported a the interface for component decorator a well a the class for component annotation and dgeni only showed the latter rename the interface for decorator with an ‘ i ’ prefix so they are retained in the dts output ,fix
15616,typing mark void method in angulardts previously when a return type wa missing it could have been any but following we require return type so remaining untyped return must be void ,feat
15617,transformer put paramater data in the same order a the reflected version previously it would be injectthing thing but it should be thing injectthing ,fix
15618,transformer support injectable on static function ,feat
15619,transformer fix string interpolation for binding previously it did not stringify property and used instead of ,fix
15620,protoviewbuilder correct duplicate test close ,test
15621,build reenable dev build for dart this reverts commit bfcaeadecbeefabafc close ,chore
15622,http add support for header ,fix
15623,docgen render call and new member of interface correctly partially close ,chore
15624,docgen render optional member correctly partially close ,chore
15625,docgen generate router typing file close ,chore
15626,broccoli concat all typescript error message into the message of thrown exception this allows u to to do better error handling and for cli this mean that we can show typescript error in the output of the webserver ,build
15627,router child router should delegate navigation to the root router there is an ee test in the examplesrouting app testing this behavior ,fix
15628,routelink add missing unit test ,test
15629,router fix doc ,docs
15630,protractor dont require benchpress bundle for all protractor test by moving the benchpress init into the function we make it possible to run other protractor test without having bechpress bundle around ,build
15631,gulp remove the tmp cleanup code this is no longer necessary and if anyone run two gulp process in parallel can actually cause issue because once one of the process end it delets the tmp dir which can affect the remaining process ,build
15632,compiler detect and strip data prefix from binding fix close ,fix
15633,di injecting null cause a cyclic dependency ,fix
15634,packaging bump version to alpha ,chore
15635,compiler dont trigger duplicated directive fix close ,fix
15636,pipe add limitto pipe ,feat
15637,pipe support argument in transform function ,feat
15638,di removed app injector breaking change the appinjector property ha been removed instead use viewinjector or hostinjector ,feat
15639,change detector fix deduping of protos in transformed dart mode in nontransformed mode the funcorvalue check wa enough but once transformed these all use the same function for getters so we need to also check the name ,fix
15640,transformer provide a flag to disable inlining view add a flag to allow a user to disable inlining csshtml content into the view close ,feat
15641,http add doc about breaking change with eventemitterobservable breaking change the http module previously would return rxjs observables from method call of the http class in order to support dart the module wa refactored to return the eventemitter abstraction instead which doe not contain the same combinators or subscription semantics a an rxjs observable however the eventemitter provides a torx method which will return an rxjs subject providing the same subscription and combinator convenience a were available prior to this refactor this is temporary until issue is resolved when observables will again be returned directly from http class method ,docs
15642,typing use type for dom api this is possible now that tsdart special case these for dart fix ,chore
15643,npm dont rely on fsextra when purging nodemodules travis creates an empty nodemodules directory when the cache is empty which confuses our current script into thinking that it ok to require fsextra while this is rare it better not to depend on anything in nodemodules when purging it so i reimplemented recorsive delete that we use to purse nodemodules ,build
15644,gulp add a task to print dart pub version ,chore
15645,injector remove unused function close ,refactor
15646,typing restore some defns now that dgeni is fixed close close ,chore
15647,router support deeplinking to anywhere in the app close ,feat
15648,facade add listwrappertojson method ,feat
15649,build temporarily deactivate dev build for dart please revert when is closed ,chore
15650,remove default setting from requestoptions constructor the baserequestoptions class is responsible for declaring default value while the requestoptions class is merely responsible for setting value based on value provided in the constructor ,refactor
15651,http remove httpfactory breaking change httpfactory is no longer available this factory provided a function alternative to the request method of the http class but added no real value the additional factory required an additional ihttp interface an odd way to inject while preserving type information injecthttpfactory and required additional documentation in the http module close ,refactor
15652,refactor library to work in dart mostly internal refactoring needed to make tsdart and dartanalyzer happy fix ,feat
15653,doc to run j test gulp doc is needed the doc processing generates the angularangulardts file which is needed by the typingspec close ,fix
15654,build reduce rx typing to what we actually require this should help a lot with github rate limiting by removing about of the dependency ,fix
15655,build record the version of node we expect the nvmrc file is used by nvm if you dont specify a version this let u type found usersalexeagleprojectsangularnvmrc with version now using node v it doesnt check that you are using the node version from the file however so this wont prevent version skew see close ,chore
15656,broccoli dont set stored diffresult to null on use doing this would break tree which are used multiple time ,build
15657,broccoli store diffresult for reuse only if diffresult one of the nonangular broccoli plugins return a weird object we cant assume that all tree meet the contract that we expect them to meet so we do a typecheck before storing the result of the rebuild close ,build
15658,developermd fix file suffix also related to close ,docs
15659,build add missing return type now enforced by linter ,fix
15660,build add tslint to the build the first enabled rule enforces return type declared on nonprivate underscoreprefix method that return something ,feat
15661,bundle don ’ t bundle traceurreflect into benchpress amended change don ’ t need to bundle them a they are already present in g ie the benchpress bundle only includes benchpress and angular bit also remove adding license header for now a we only have one license ,fix
15662,test remove testbed instead use testcomponentbuilder close ,chore
15663,test upgrade form test to testcomponentbuilder part of ,chore
15664,router reuse resolved promise instance ,refactor
15665,router idiomatic t ,refactor
15666,router mark pipeline and routeregistry a injectable fix ,fix
15667,dynamiccomponentloader check whether the dynamically loaded component ha already been destroyed fix close ,fix
15668,bundle don ’ t bundle traceurreflect into benchpress don ’ t need to bundle them a they are already present in g ,fix
15669,di changed instantiationerror to print the original stack ,feat
15670,lang added originalexception and originalstack to baseexception ,feat
15671,test move ngstyle test to testcomponentbuilder part of ,chore
15672,test migrate router test to testcomponentbuilder part of ,chore
15673,npm correct generated package json file ,chore
15674,benchpress add browserify bundling use browserify to bundle benchpress and it dependency ,chore
15675,doc link to clangformat ,fix
15676,di unified di injector and core injector breaking change injectasync and injectlazy have been removed toasyncfactory ha been removed ,refactor
15677,async added promisewrapperwrap ,feat
15678,transformer add getters for event close ,fix
15679,transformer dont hang on bad url and log better error close ,fix
15680,transformer fix annotationmatcher for ngform directive the ngform directive import directive from a previously unlisted import ,fix
15681,ngstyle add new ngstyle directive close ,feat
15682,window fix the testserverdart task close ,chore
15683,window fix the dart eebenchmark task ,chore
15684,window fix the j eebenchmark task ,chore
15685,window fix the testtranspilerunittest task ,chore
15686,window fix the testunittools task ,chore
15687,window fix the builddart task ,chore
15688,window fix the testunitdart task close ,chore
15689,compiler do not resolve binding for cached protoviews ,perf
15690,benchpress initial support for firefox close ,feat
15691,typing minor issue preventing angulardts from working in t this remove some but not all of the manual work needed to patch up our dts for pushing to definitelytyped remaining manual step are some type still missing declaration of decorator remove destructuring args see ,fix
15692,directive correct property binding example close ,docs
15693,ngswitch simplify test with static value ,test
15694,test migrate directive test to testcomponentbuilder part of ,chore
15695,test migrate remaining core test to testcomponentbuilder also add a small utility function to debug element to get an array of native element which work smoothly with the tohavetext matcher ,chore
15696,build fix path in testtypings task ,fix
15697,packaging bump version to alpha ,chore
15698,templateresolver rename to viewresolver ,refactor
15699,templateloader rename to viewloader ,refactor
15700,refactor cleanup test to use the new urlmapper ,test
15701,parse do not try to insert empty text node ,fix
15702,compiler inline style before compiling the template ,refactor
15703,urlresolver move away from the anchor link fix fix ,refactor
15704,urlresolver extract app url resolution into approoturl fix ,refactor
15705,cssclass add support for string and array expresions close ,feat
15706,testbed migrate compiler integration spec to testcomponentbuilder part of ,chore
15707,injector sync injector tree with dom element tree change add creategrowablesize method to allow for growable list with fixed start close ,fix
15708,typing add typing spec add test in gulpfile which will compile a basic t file with generated angulardts to ensure generated dts is valid syntactic t add support for enums in dts generation pipeline remove renaming reexports in http module ,feat
15709,render fix failing test in dynamiccomponentloaderts ,fix
15710,render cleanup access to native dom element breaking change rename elementrefdomelement to elementrefnativeelement add renderergetnativeelementsync to make the app side le dependent on the dom renderer don ’ t use elementrefnativeelement in directive but use the method on renderer directly removed elementrefsetattribute use renderersetelementattribute instead close last part of close ,refactor
15711,testbed migrate dynamic component loader spec to testcomponentbuilder part of ,chore
15712,render use renderelementref in all renderer method breaking change almost all method in renderer now take a renderelementref instead of a viewref boundelementindex these method can be called with the elementref from the app side directly close related to ,refactor
15713,gulptravis move circular check and style check to before preposttest task in order to speedup the startup time of testunitjs task we are moving the circular dependency check into a pretest check that executes only on travis similarly we are moving the style check to a posttest check that executes on travis this way if a circular dependency issue occurs we find it before running test on ci and if the code is not formatted we fail the build only if all the test pas related to related to ,build
15714,router add support for hashbased location close ,feat
15715,render don ’ t use the reflector for setting property breaking change host action dont take an expression a value any more but only a method name and assumes to get an array via the eventemitter with the method argument renderersetelementproperty doe not take style prefix any more use the new method renderersetelementattribute instead part of close ,feat
15716,mock add mock module and bundle close ,feat
15717,router refactor browserlocation into locationstrategy this make it easy to mock browser location and pave the way to implementing hash routing ,refactor
15718,benchpress document frame time metric close close ,docs
15719,benchmark add wait for naive scrolling benchmark to ensure loading also simplify selector close ,fix
15720,host limit host property to renames ,feat
15721,shadowdomstrategy remove redundant field styleinliner ,chore
15722,example add zippy example ,chore
15723,docgen refactor versioninfo logic to new git dgenipackage close ,chore
15724,compiler detect dangling property binding breaking change compiler will throw on binding to nonexisting property till now it wa possible to have a binding to a nonexisting property ex div fooexp from now on this is compilation error any property binding need to have at least one associated property eaither on an html element or on any directive associated with a given element directive properites need to be declared using the property field in the directive component annotation close ,feat
15725,shadowdomstrategy fix mapwrapper usage demourlresolver ,chore
15726,shadowdomstrategy always inline import rule fix ,fix
15727,broccoli allow rebuild to return diffresult plugins may opt to return a diffresult themselves and avoid the need to calculate a diff close ,build
15728,broccoli make nodetrees produce strictmode script close close ,build
15729,router enforce usage of syntax for parent to child component route ,feat
15730,pipe removed pipe from property breaking change this pr remove an ability to use pipe in the property config instead inject the pipe registry ,refactor
15731,ngclass remove pipe from property binding ,refactor
15732,elementinjector support multiple injectables with the same token ,feat
15733,form cleanup ,cleanup
15734,form refactored form to user query to get html validators ,refactor
15735,build add a task to watch and render example and ee test for production you can now run gulp serveeeprod to instantiate a task that watch and compiles example and module file into the prod directory in dist and then allows the code to be run via protractor close ,chore
15736,transformer throw unimplemented error in htmladapter close close ,fix
15737,docgen ignore param tag at the moment we are not parsing param tag this commit ignores them completely todo hook up param description with the actual param data in the doc close ,chore
15738,docgen remove redundant processor from angulario generation ,chore
15739,docgen clean distangulario folder when generating those doc ,chore
15740,transformer inline styleurls to view directive while creating the ngdepsdart file for a view inline the styleurls attribute this copy the pattern used for templateurl aleviating the need to make an xhr request for those resource close ,feat
15741,changedetection made changedetector and protochangedetector interface list of change make changedetector and protochangedetector interface assigns a unique id to every detector ,refactor
15742,pub add angularmaterial to pub ,chore
15743,compiler make text interpolation more robust allows to add or remove previous sibling of text interpolation eg by added script tag for content reproduction or by removed style tag also calculates correctly whether an element is empty fix ,fix
15744,router return promise with error handler see ,fix
15745,benchpress do not throw on unkown frame timestamp event close ,fix
15746,change detection preserve memoized result from pure function ,fix
15747,query added support for querying by var binding ,feat
15748,elementinjector renamed querydirective into queryselector ,refactor
15749,build overwrite tsd file on npm install ,chore
15750,annotation swap directiveargs componentargs ,fix
15751,view remove dynamic component view free host view free embedded view close close breaking change compilercompile ha been removed the only way to compile component dynamically is via compilercompileinhost dynamiccomponentloaderloadintoexistinglocation ha changed renamed into loadintolocation will always create the host element a well requires an element with a variable inside of the host component view next to which it will load new component dynamiccomponentloaderloadnexttoexistinglocation wa renamed into dynamiccomponentloaderloadnexttolocation dynamiccomponentloaderloadintonewlocation is removed use dynamiccomponentloaderloadnexttolocation instead and then move the view node manually around via domrenderergetrootnodes appviewmanagercreatedestroyfreehostembeddedview wa removed use appviewmanagercreateviewincontainer and then move the view node manually around via domrenderergetrootnodes rendererdetachfreeview wa removed use domrenderergetrootnodes to get the root node of a view and detach them manually ,fix
15752,rendercompiler minor change to propertybindingparser close ,refactor
15753,di idiomatic t ,style
15754,lexer switch token type to an enum ,refactor
15755,doc fix doc for directivecompilechildren ,fix
15756,xhrimpl file and ie bug ,fix
15757,release release alpha ,chore
15758,http add doc for http lib fix ,docs
15759,http rename request option interface ,refactor
15760,http implement request object parameter for fix ,refactor
15761,http add http class fix ,feat
15762,baserequestoptions add merge method to make copy of option ,feat
15763,doc order class member in order of declaration previously class member were ordered alphabetically this change leaf it up to the class author to determine the order in which they would like property and method to appear in class documentation without having to create method like zunimportantmethod fix ,fix
15764,benchpress more smoothness metric benchpress now print out the best and worst frame time in addition to the percentage of frame that hit the target of fps it also renames meanframetime to frametimemean that way all frametime metric start with a common suffix and will be grouped together in the console reporter part of ,feat
15765,changedetection idiomatic t ,style
15766,facade refactor type check function is ,refactor
15767,broccoli improve overwrite error in mergetrees modified the error message to include the relative duplicate path to help in diagnosing the cause of the error message close ,chore
15768,view remove unused const close ,refactor
15769,shadowdomstrategy remove unused import in test ,refactor
15770,shadowdom fix emulation integration spec to test all strategy fix ,fix
15771,compiler fix text node after content tag fix ,fix
15772,testcomponentbuilder fix a typo in the spec ,style
15773,view local variable override local variable set by ngfor ,fix
15774,propertysetterfactory add more test there are upcoming change to the way we generate and verify setter so more test are needed to cover all the corner case that are being handled today close ,test
15775,router allow configuring app base href via token ,feat
15776,docgen ensure github link have the correct text ,chore
15777,docgen fix versioninfo population ,chore
15778,form updated form example to contain select element ,fix
15779,form fixed the handling of the select element ,fix
15780,selector select by attribute independent of value and order close ,fix
15781,query notify on change ,feat
15782,router ensure that root url redirect doesnt redirect nonroot url close ,fix
15783,router alias should be a ,docs
15784,view add support for styleurls and style fix ,feat
15785,shadowdomstrategy remove an extra semicolon ,style
15786,stringwrapper add missing type ,refactor
15787,material use static string for aria role close ,refactor
15788,asttranformer add support for missing node ,feat
15789,parser support if statement in action fix ,feat
15790,render idiomatic t ,style
15791,compiler idiomatic t ,style
15792,changedetection fix clang error line too long ,style
15793,changedetection fix link to pregeneratedchangedetection ,docs
15794,doc update link path in annotation partial fix to close ,fix
15795,docgen fix id and alias generation for export and member this help to ensure that link to export are not confused with link to member which wa causing some missing link issue help ,chore
15796,docgen include enum in the export doc type fix error about missing path template such a warn no path template provided doc viewtype enum from file angularsrcrenderapits warn no output path template provided doc viewtype enum from file angularsrcrenderapits ,chore
15797,bootstrap temporary disable jit change detection because of a bug in handling pure function ,fix
15798,ee added ee test for form ,feat
15799,router rethrow exception close ,fix
15800,elementinjector changed visibility rule to expose hostinjector of the component to it shadow dom ,fix
15801,dynamiccomponentloader fix for tsdart issue fix a build break by declaring a type for local see for some context ,fix
15802,change detect fix bug in jit change detector fix the ifchangedguard code in the jit change detector which wa incorrectly refactored in acaaaccfabfb ,fix
15803,darttransform use the best available change detector enable pregenerated for dart and jit for j change detector when possible previously we would always use dynamicchangedetectors but these cause megamorphic call and are therefore much slower close ,feat
15804,dynamiccomponentloader implemented dispose for dynamicallyloaded component ,fix
15805,router avoid two slash value between the basehref and the path ,fix
15806,router do not prepend the root url with a starting slash ,fix
15807,benchpress add mean frame time metric this is useful to measure the smoothness of animation and scrolling action part of close ,feat
15808,ci remove nonexistent gulp task from testeedart the build task wa removed from gulp and replaced by another task but a reference to the task wa not removed from testeedartsh fix ,fix
15809,shrinkwrap restore fsevents dependency fix ,fix
15810,directivemetadata add support for event changedetection ,fix
15811,directivemetadatavisitor simplify the code fix ,refactor
15812,lifecycle event document the call order ,doc
15813,form fixed the selector of ngrequiredvalidator ,fix
15814,form updated form doc to cover new apis ,docs
15815,form made directive name consistent ,refactor
15816,form geterror doe not work without path ,fix
15817,benchmark do not apply the angular transformer to ee test fix ,fix
15818,dartjs remove helpless warning ,chore
15819,packagejson bump dgenipackages version ,chore
15820,doc ensure no duplicate in alias name of doc having multiple identical name in a doc alias would cause ambiguous link warning for each reference to one of the alias related to ,fix
15821,build rename e file to j change e source file in npm distribution to use j extension close ,chore
15822,test setup a gulp task for quickly running ee test against the dev server ,chore
15823,build ensure that asset file are copied over to example directory ,fix
15824,query add support for descendant and more list apis additional clean up of query code close breaking change by default query only query direct child ,feat
15825,render only create lightdom instance if the element ha child ,perf
15826,render dont create property setter if not needed ,perf
15827,render precompute bound text node and root node in domprotoview ,perf
15828,render don ’ t create an intermediate element array in renderer ,perf
15829,benchmark add view cache param to largetable benchmark ,refactor
15830,build minify file for angularminjs bundle uglify file related to angularminjs bundle in one task include reflectjs in the bundle which wa previously missing minify reflectjs zonejs and angularminjs using uglify ,fix
15831,transform update for directivehost ,feat
15832,directive update doc for directivehost ,doc
15833,directive have a single directivehost which mimic html fix breaking change before directive hostlisteners event statement hostproperties expression hostprop hostattributes attr value hostactions action statement after directive host event statement hostprop expression k v swapped attr value action statement ,feat
15834,directive fix the inline doc for lifecycle event ,doc
15835,parser parse pipe in argument fix ,fix
15836,docgen move typeparams and heritage rendering to template partially solves ,chore
15837,darttransform allow absolute url in template allow templateurl to be specified a an absolute package import ,feat
15838,darttransform rename parserdart ngdepsdart rename the file that defines ngdeps from parserdart to ngdepsdart remove the parser class and replace with the static ngdepsparse method ,refactor
15839,protorecord switch to enum ,refactor
15840,protoviewdto switch to enum ,refactor
15841,lifecycle throw when recursively reentering lifecycletick ,fix
15842,ngzone updated zone not to run onturndown when invoking run synchronously from onturndone ,fix
15843,window fix testunitjskarmarun and testunitdartkarmarun task close ,chore
15844,package add matias to author list ,chore
15845,parser implement unparser fix close ,feat
15846,routerlink use hostlisteners for click with a routeroutlet and lot of routerlink you start to see noticeable lag since we ’ re not removing the listener close ,perf
15847,formsts forminjectables with formbuilder close ,feat
15848,change detect clean up change detector test layout rename simplewatchconfig changedetectorconfig add a bunch of comment explaining whats going on with the change detector test close ,refactor
15849,change detect port remaining unit test move all remaining unit test for change detector to exercise dart pregenerated change detector a well a dynamic and jit change detector see ,test
15850,darttransform add oninit and oncheck hook in dart implement oninit and oncheck hook in pregenerated dart change detector this mirror the change made to the jit change detector in ccebcdaabad ,feat
15851,shadowdom move the imported node into the correct location ,fix
15852,dartfmt dont break win command line limit close close ,fix
15853,broccoli remove unneded reference path from broccolitsdart ,build
15854,broccoli add support for diffresultaddedpaths some plugins want to explicitly know of new path so we need to distinguish them from changed path ,build
15855,docgen autogenerate angular version in angulardts file ,chore
15856,docgen add typealias export doc type see ,chore
15857,change detect port change detect test for mode more the change detect test that exercise various detection mode to use the dart pregenerated change detector in addition to the dynamic and jit change detector see ,test
15858,annotationsimpl fix invalid code block ,docs
15859,docgen ensure log is injected into getexportdoctype see ,chore
15860,broccoli implement diffing lodashrenderer plugin close ,chore
15861,analzyer removed unused import ,fix
15862,form removed old form example ,example
15863,form added an example of using modeldriven form ,examples
15864,form added an example of using templatedriven form ,examples
15865,form set exportas to form for all form related directive ,feat
15866,form export validator directive a part of formdirectives ,feat
15867,form changed form to capture submit event and fire synthetic ngsubmit event ,feat
15868,form added haserror and geterror method to all control ,feat
15869,npm update script and readme for npm package replaces atscript with typescript close ,fix
15870,xhr move render xhr implementation to render the existence of this module in the service folder led some to believe xhr is meant to be a generalpurpose http library fix ,refactor
15871,add basic http service this implementation only work in javascript while the observable transpilation story get worked out right now the service just make a simple request and return an observable of response additional functionality will be captured in separate issue fix ,feat
15872,bower remove moot version property from bowerjson per bowerbowerjsonspecada close ,build
15873,change detect port more change detect test move more change detector unit test to exercise the dart pregenerated change detector in addition to dynamic and jit change detector see ,test
15874,diffingbroccoliplugin wrapped tree are always stable ,fix
15875,broccoli replace broccoliflatten with diffing flatten implementation once we add support for addedpaths then this implementation will be significantly faster than the original in the meantime we benefit from having stable output directory which solves issue with certain file disappearing during rebuild of a tree that contains flatten and mergetree plugins close ,build
15876,broccoli remove unused import from broccolireplace ,build
15877,gulp dont double build during init of servejsdev ,build
15878,broccoli replace stewmap with diffing replace this fix issue with broken symlinks that occur due to some weird interaction between stewmvbroccolifunnel and our diffing plugins close ,build
15879,broccoli log the build tree after each build into tmpbuildlog this log can then be used to visualize the build tree and map path in the tmp dir to individual node in the build tree ,build
15880,build only pas t file to tsdart transpilation originally we had j a transpilation target but all those file have been converted ,fix
15881,bundle make interfacests nonempty when transpiled systemjs seems detect an empty file a global and choke on exporting symbol from angularangular possibly a bug in systemjs a temporary measure we make sure that the file ha some fake runtime code left close ,fix
15882,jsonpipe always transform to json breaking change no longer cache ref ,fix
15883,change detect throw on attempt to use dehydrated detector modify change detector to throw when attempting to detect change on a dehydrated detector modify dynamicchagnedetector to use null for the context of a dehydrated detector ,feat
15884,router add routing to async component note that this also remove the component option from routeconfig this functionality will be reintroduced with the more general routing see for more detail ,feat
15885,facade add ismap method ,feat
15886,change detect port local test to pregenerated cd move existing unit test exercising local to also test dart pregenerated change detector see ,test
15887,gulp dont try to run cleanupbuilder task if builder were not initialized ,build
15888,elementinjector test that hostinjector ha priority over viewinjector ,test
15889,elementinjector throw if multiple directive define the same host injectable relates to ,feat
15890,test remove explicit call to flushmicrotasks flushmicrotasks is now called at after the fakeasync callback return see ,refactor
15891,change detect remove unnecessary param from test ,refactor
15892,event allow a different event v field name close close ,feat
15893,lexer refactor scancomplexoperator ,refactor
15894,darttransform dont set reflectioncapabilities over an async gap update the transformer templatecompiler phase to avoid setting reflectorreflectioncapabilities allowing asynchronous operation and restoring the original value which allows reflectorreflectioncapabilities to get into a bad state ,fix
15895,clangformat skip formatting of spec file until angularclangformat is fixed otherwise checking format and reformatting take second or more ,build
15896,doc working generated angulardts this requires some hack documented in change include subtyping info in angulardts by adding extends supertype export missing symbol needed transitively by angularangular because of decoratorannotation mismatch we cant export these to application so ive added a separate angularapits file to reexport specifically to dts generation hack to remove alias introduced by import a alias syntax hack to deal with error still an interface note that we require user to install the transitive dependency this is how tsd work ,fix
15897,broccoli disable logging in diffingbroccoliplugin it is very noisy especially when multiple tree are used since the tree differ is fairly quick it not measuring the real cost of a plugin anyhow close ,chore
15898,broccoli ensure that inputtrees are stable ,fix
15899,broccoli improve mergetrees plugin and add overwrite option ,feat
15900,tsd update jasmine ,chore
15901,tsd update fsextra ,chore
15902,broccoli add diffing mergetrees plugin close close ,feat
15903,diffingbroccoliplugin support multiple inputtrees close close ,feat
15904,transformer add test for property binding and multiple execution ,chore
15905,render don ’ t use a global cache for property setter related to ,refactor
15906,build add testunitdartvm for a faster roundtrip of dartvm test ,feat
15907,dartchangedetect add type to changedetector context add a type for the context field in dart pregenerated change detector this requires slight change to set the dehydrated value of context to null rather than changedetectionutiluninitialized which wa it former dehydrated state mirror these chagnes a closely a possible in the changedetectionjitgenerator to allow easier maintenance close ,feat
15908,dart run dartfmt format dart code using dartfmt update pubspec to require dartstyle ,refactor
15909,darttransform record type interface to support interfacebased lifecycle method we need to be able to query for the interface a class support record implemented interface to allow mirrorless querying at runtime close ,feat
15910,transformer updated transformer ,feat
15911,view added support for exportas so any directive can be assigned to a variable ,feat
15912,local improved an error message ,fix
15913,render add domelement replaces the multiple array of domview by a single array with domelements note this commit doe not show a performance regression tested against the tree benchmark locally ,refactor
15914,npm update gulpclangformat to v close ,build
15915,tsd update tsd to v which is shrinkwrappable without fuss ,build
15916,shrinkwrap update npmshrinkwrapreadmemd with info about deleting dependency ,docs
15917,shrinkwrap remove minichain reference from the npmshrinkwrapreadmemd ,docs
15918,benchamrksexternal tsify benchmarksexternal translates benchmarksexternal to typescript ,refactor
15919,karma remove a link to an unexisting file ,chore
15920,packagejson add karmasaucelauncher to dev dependency close ,chore
15921,fakeasync check pending timer at the end of fakeasync in dart made possible with quiver ,feat
15922,visibility fix inline doc ,doc
15923,triage update to triage doc for new label name ,docs
15924,rttsassert tsify rttsassert translate rttsassert to typescript ,refactor
15925,release release alpha ,chore
15926,type parametrize querylist ,fix
15927,deps bump up deps on tsd and tsdart ,chore
15928,build remove nonexistant dart format task from gulpfile ,fix
15929,form added support for status class ,feat
15930,form handle dirtypristine explicitly ,refactor
15931,build make dart formatter error more readable truncates the output to just the interesting part ,fix
15932,gulp prevent duplicate error message close ,fix
15933,view introduce free embedded view free embedded view are view instance that are created logically in the same wa a view of a viewcontainer but their dom node are not attached breaking change rendererdetachfreehostview wa renamed to rendererdetachfreeview domrenderergethostelement wa generalized into domrenderergetrootnodes ,feat
15934,process document triage process for angular ,chore
15935,darttransform more change detector unit test port some change detector unit test which formerly ran only on dynamic jit change detection to run for pregenerated dart change detector a well ,test
15936,darttransform add support for the safe navigation operator add support for to pregenerated dart change detector close ,feat
15937,benchpress support nested interval chrome sometimes report nested functioncall interval in the timeline which should be ignored for measuring the script metric might solve ,fix
15938,test disable mobile emulation so benchmark run on current chrome workaround for ,fix
15939,angularview tsify viewjs translates angularview to typescript ,refactor
15940,angularangularsfx allows nomodule integration of angular translates angularangularsfx to typescript in order to allow angular integration without module ,refactor
15941,testmock tsify angulartestmock translates the last test directory angulartestmock to typescript ,refactor
15942,fakeasync flush the microtasks before returning fix ,feat
15943,form added touched and untouched to control ,feat
15944,doc remove private member from angulardts ,chore
15945,form renamed control controlgroup into ngcontrol and ngcontrolgroup ,feat
15946,form changed the selector of templatdrivenformdirective to match form ,feat
15947,form implemented an imperative way of updating the view by updating the value of a control ,feat
15948,form added ngmodel ,feat
15949,dartdocs hide duplicate export from guinness duplicate export were breaking dartdoc build close ,fix
15950,benchpress add ff extension test to ci close ,chore
15951,render only look for content tag in view that might have them largetable benchmark with interpolationattr and row column time for destroycreate pair dropped from about m to about m related to but doe not really fix it a we are still slow if people are using content close ,fix
15952,chore missing reformats to make clangformat ,docs
15953,ngif fix some missed occurrence of if for switch in doc ,docs
15954,doc fix another link broken by clangformat ,chore
15955,docgen add template for const doctypes ,chore
15956,clang format update ,docs
15957,docgen tell dgeni to use t file and fix some bad link ,docs
15958,doc improve whitespace and semicolon in angulardts ,chore
15959,doc generate dts file only for angularangular ,fix
15960,travis update firefox to in travis ci close ,chore
15961,exampleseetest tsifying examplesetest translate atscript in exampleseetest to typescript close ,refactor
15962,tool move file out of dartjsweb fix bug that only allowed src and package to be moved out of dartjsweb glob all file in dartjsweb and move them one directory up ,fix
15963,global srcfacade protractor allows list to be imported allows the list type to be imported from angularsrcfacadecollection ,fix
15964,srcreflection srctestlib fix bug that caused benchmark to fail adjusts srctestlib file to adhere to common t module practice fix bug with all file that cause benchmark to fail ,fix
15965,langspec add missing s and clangformat ,refactor
15966,dartanalyzer show source for analyzer error when showing analyzer feedback display the source line that caused the feedback to be generated close ,chore
15967,build watch logger should honor ignoreinitial option it wa confusing because the testunitdart task doe ignore the initial and the logger wa hardcoded to always ignore the first task leading to the appearance that a run wa happening twice for no reason also fixed the fake ignoreinitial handling to not rely on a fake event which is not necessary close ,chore
15968,router convert to typescript fix ,refactor
15969,shadowcss keyframes test failing in safari close ,fix
15970,keyevents workaround a bug in chrome driver close see ,test
15971,compiler improve the error message on component load error by adding the fetched url relates to ,refactor
15972,docgen improve github link to point to the correct tagged url close ,chore
15973,elementinjector add interface for strategy ,refactor
15974,injector use t iodioms ,refactor
15975,injector add an interface for strategy ,refactor
15976,renderdomrenderer documenttoken use opaquetoken breaking change no longer a const string now a const opaquetoken ,feat
15977,corecompiler appviewpool use opaquetoken breaking change no longer a const string now a const opaquetoken ,feat
15978,opaquetoken now a const constructor breaking change now a const constructor ,feat
15979,dartchangedetect fix testunitdart gulp target include change detector generation in the testunitdart gulp task to fix the change detection unit test close ,chore
15980,changedetectionts export pipefactory close ,feat
15981,shrinkwrap add shrinkwrap for firefoxprofilejpm and update packagejson for benchpress close ,chore
15982,selector support multiple not clause fix ,fix
15983,tsconfigjson fix invalid json ,chore
15984,facade make promisewrapperall semantics equivalent the semantics between e promiseall and dart futurewait are different for value that are not promisefutures in e nonpromise value are immediately completed to their current value in dart nonfuture value cause an error updated dart promisewrapperall implementation to conform to the e spec ,fix
15985,form disabled form test on cjs until fakeasync is fixed ,fix
15986,form implemented templatedriven form ,feat
15987,fakeasync fixed fakeasync to throw instead of crashing on cjs ,fix
15988,test added nottobenull ,feat
15989,material move dialog to typescript ,chore
15990,shrinkwrap correct directory path ,docs
15991,transformer added support for lifecycle event ,feat
15992,gulp remove unnecessary stream merging in buildtools also remove the reporter config which is wrong and ha no effect close ,build
15993,broccoli add incremental dartfmt plugin close ,feat
15994,di added a test verifying hierarchical injection ,test
15995,darttransform fix directivemetadata read test ,fix
15996,darttransform generate changedetector class use the protoviewdto created by the render compiler to create a changedetectordefinition from there generate a subclass of abstractchangedetector for each changedetectordefinition run some basic unit test for the dynamic and jit change detector on pregenerated change detector ,feat
15997,benchpress add index to root of module this is necessary when using requirebenchpress in node ,fix
15998,benchpress convert src and test to typescript fix ,refactor
15999,test add element probe usage bootstrap the app with the special binding elementprobeconfig from angulardebug this will provide a global method ngprobeelement that will expose a debugelement with directive instance on it during test that use angulars test injector the probe is enabled by default the debugelement can be retrieved via the function inspectdomelement of angulardebug note that the testcomponentbuilder already return debugelement s close ,feat
16000,render don ’ t store a document fragment a bound element when a template contains bound text node a root node we used to store the document fragment that we got from cloning templatecontent however this fragment will be empty a soon a the view get attached now we store null instead of the document fragment in this case also group the case in createview so they are easier to understand ,fix
16001,dom allow to correctly clone document fragment ,fix
16002,dom queryselectorall should only query child node ,fix
16003,dom add setdata method ,feat
16004,facade add readwrite access to global variable ,feat
16005,view add appviewlistener interface basic functionality how element probe is hooked into the system ,feat
16006,dart format dart source with dartstyle ,style
16007,corejs export ngzone export ngzone so it can be used in application where large data stream should be processed outside of angular ,refactor
16008,routerjs export router injectables exporting rootrouter routeregistry browserlocation location and pipeline ,feat
16009,binding unbalanced curly bracket in documentation ,fix
16010,annotation stricter type ,refactor
16011,transformer update in property syntax ,refactor
16012,directive convert property to an array fix breaking change before directiveproperties samename samename directiveprop elprop pipe after directiveproperties samename directiveprop elprop pipe ,feat
16013,ast fix the size of a list in evallistcache ,fix
16014,changedetection added oninit and oncheck hook ,feat
16015,darttransform improve constant evaluation use packageanalyzers constantevaluator to read from the ast this cleanly build value for u from adjacent string interpolation etc ,feat
16016,binding throw on binding to a blank alias fix ,feat
16017,test clang formatting error ,fix
16018,broccoli reorder treediffer spec ,build
16019,build reorder import ,style
16020,broccoli improve error messaging from treediffer ,build
16021,broccoli treediffer should log associated plugin name rather than inputpath usually we dont care what we are diffing but why we are diffing it with this change we see what is causing build slowdown due to diffing ,build
16022,gulp remove obsolete watchjsdev build task ,build
16023,broccoli update broccolidts doc ,build
16024,broccoli add treestabilizer plugin to deal with unstable tree previously we assumed that all input and ouput path for broccoli tree are immutable that turned out to be incorrect by adding a tree stabilizer plugin in front of each diffing plugin we ensure that the input tree are stable the stabilization is done via symlinks which is super cheap on platform that support symlinks on window we currently copy the whole input directory which is far from ideal we should investagate if using move operation on window is ok in the future to improve performance close ,build
16025,changedetection convert change detection test to typescript ,refactor
16026,di added optional self parameter to parent ancestor and unbounded ,feat
16027,darttransform remove unnecessary ngdepsdart file remove ngdepsdart file which do not register any injectable class do not call initreflector on any other ngdepsdart file close ,feat
16028,facade fix bug in t indexof startindex default to which in chrome result in returning regardless of the other parameter added regression test ,fix
16029,test add testcomponentbuilder add a testcomponentbuilder for use in component level test for usage example see testcomponentbuilderspec close ,feat
16030,core added support for detecting lifecycle event based on interface ,feat
16031,core added missing interface for ondestroy and onallchangesdone lifecycle event ,feat
16032,reflector added a method to get type interface ,feat
16033,changedetect flatten j change detector template update the changedetectionjitgenerator for clarity and similarity with the upcoming dart generated changedetector class ,refactor
16034,di allow inject… to work in dartjs and dynamic reflection note we can ’ t write a unit test for this a our unit test are running in dartium where the error doe not occur however we previously had a failure in our ee test in helloworldindexdynamichtml when removing the todos in applicationts close ,fix
16035,packagejson add reflectmetadata to packagejson fix ,fix
16036,injectable add missing injectables annotation close ,fix
16037,testlib add method to compare stringified dom element close ,feat
16038,test solve cs discrepancy across browser close ,fix
16039,example unused event ,fix
16040,ngforts for ngfor ,docs
16041,form remove self closing wrap label html doesnt have self closing tag break stringifyelement from also an error with submit form and wrap with label ,refactor
16042,benchpress add extension for ff metric reporting close ,feat
16043,core t ’ ify test ,refactor
16044,testlib add containsregex ,feat
16045,material migrate most component to typescript ,chore
16046,shadowcss add test for keyframe rule ,test
16047,regexpwrapper implement a test method ,feat
16048,render t ’ ify test ,refactor
16049,spy support spyobject in typescript a well allow implement a a decorator implement empty nosuchmethod ,fixed
16050,docgen fixed a typo that wa breaking dgeni ,docs
16051,di fix missing export for dgeni docgen ,docs
16052,render reexport render and export directiveresolver close ,feat
16053,di moved test to typescript ,chore
16054,reflection tsfy test ,chore
16055,core resurrect onchange interface ,fix
16056,form moved testsforms to typescript ,chore
16057,build also run t test in node ,fix
16058,build improve messaging when using clangformat ,chore
16059,deps update clangformat to ,fix
16060,gulp turn off dartfmt log by default close ,build
16061,form example tsify ,refactor
16062,example t ’ ify relates to ,refactor
16063,collection iterator on map key is not supported safari close ,fix
16064,collection new mapiterable is not supported safari ,fix
16065,keyevent alias esc to escape fix ,feat
16066,fakeasync renable a test blocked on jasmine ,test
16067,router add the router bundle to the bundle task ,feat
16068,collection new setiterable is not supported ie safari close ,fix
16069,elementinjector support an arbitrary number of binding fix ,feat
16070,test use a not expandable cs rule in shadowcss spec firefox close ,fix
16071,browseradapter htmlstyleelementinnertext doe not trigger creation of cs rule firefox ,fix
16072,test add longer timer for ngzone and promisepipe test ie close ,fix
16073,browseradapter event creation fails ie firefox ,fix
16074,browseradapter elementgetboundingclientrect fails when element not in dom ie ,fix
16075,browseradapter elementmatches only available with prefix ie ,fix
16076,browseradapter assigning null to documenttitle set the title to null ie firefox ,fix
16077,test native shadow dom is required ie firefox ,fix
16078,router eventdefaultprevented is not reliable ie ,fix
16079,test functionname is not available ie ,fix
16080,routerjs export routerdirectives ,feat
16081,example update form example to use ngif ,fix
16082,observablepipe ondestroy shouldnt throw ,test
16083,doc update npmshrinkwrapreadmemd instruction close ,chore
16084,gulp fix testunitdart format code for the first run dont run test if first build fails close ,build
16085,test t ’ if compiler integration test ,refactor
16086,release bump version to alpha ,chore
16087,form changed form to create only one value accessor instead of always creating defaultvalueaccessor ,fix
16088,transformer remove bindproperty hack ,chore
16089,tsify t ’ ify mock directive and testlib also clean up global type ,refactor
16090,expression add explicit test for map v property access ,chore
16091,form migrated form to typescript ,feat
16092,injector support forwardref in toalias ,feat
16093,di changed host and view injector to respect visibility ,fix
16094,di changed tofactory to support dependency annotation ,feat
16095,testing update karmajasmine and jasmine jasmine to jasminecore update tool test using minijasminenode to directly use jasmine see ,chore
16096,elementinjector fixed element injector to inject view dependency into it component ,fix
16097,testing update protractor to version ,chore
16098,core t ’ ify core ,refactor
16099,promisepipe remove ref ondestroy ,feat
16100,gulp fix typo in the npm version warning message ,build
16101,broccolitypescript refactor output removal this is just to make the code a bit more easier to follow ,build
16102,broccolitypescript do full rebuild after we recover from incremental failure this is to ensure that we are not reporting success if unchanged file still contain error ,build
16103,router router link should navigate to nonbase url while still displaying full base custom part of url in the href ,fix
16104,testlib fix nested beforeeach ,fix
16105,elementinjector fixed element injector to resolve dependency of regular service ,fix
16106,browser template element should have content imported instead of the element itself ,fix
16107,gulp watcher should not trigger more than once during init close ,build
16108,docgen dgenerate the type definition file for angular close close ,chore
16109,xhrimpl fix error add a spec fix ,fix
16110,test remove unecessary require in karmaconf ,build
16111,annotation fix ,docs
16112,gulp exec karma run in a new process to avoid duplicate output this is not an ideal solution but i couldnt find another way to supress the output from the runner close ,build
16113,gulp fix cleanupbuilder task wait for the cleanup to finish it async before exiting on ctrlc wait for the cleanup to finish it async onbeforeexit remove tmp directory during onbeforeexit to cleanup past leak close ,build
16114,gulp dont throw exception on exit when angularbuilder wa not initialized ,build
16115,gulp refactor existing cleanup task the current complexity is unjustified necessary ,build
16116,cd add support for and relates to ,feat
16117,async extract timer related function into a timerwrapper ,refactor
16118,reflection improved error message ,refactor
16119,broccolitypescript do a global emit during the first run reduces the time spent in tsc for the initial build to sec down from sec ,build
16120,broccolitypescript add missing semicolon ,build
16121,nodetree fix broken testunitcjs task which break on rebuild ,build
16122,nodetree fix formatting the formatting wa messed up due to i replaced the fat arrow function with regular function expression to resolve the formatting issue ,style
16123,gulp continue watching when task throw close ,fix
16124,build don ’ t include export var esmodule true in every file but do it during the build process for cjs right now we only need this when we transpile from t directly to e this is only the case in our ci build a for our browser build we only transpile from t to e via t and then use traceur to do the rest ,chore
16125,render t ’ ify render api ,refactor
16126,build bump tsdart version to ,chore
16127,build add tsconfigjson to modulesangular this allows to use tsc directly on angular eg nodemodulesbintsc w p modulesangular ,chore
16128,packaging bump version to alpha ,chore
16129,router use approotcomponenttoken to get root route configs close ,fix
16130,error require passing stack trace explicitly in ng own code ,fix
16131,deps bump tsdart version ,chore
16132,docgen fix up test to work on linux ,chore
16133,docgen fix path for link to module and export ,chore
16134,docgen path now start with a slash ,chore
16135,docgen include interface in the possible export from a module ,chore
16136,docgen get compilerhost to return the sourcefiles with the correct filename now that we are not changing the working directory we needed to update how getsourcefiles work to ensure that it worked relative to the basedir ,chore
16137,docgen fix text mock code ,chore
16138,docgen speed up class member sorting ,chore
16139,docgen use actual typescript symbolflags enum rather than magic number ,chore
16140,docgen speed up class member sorting ,chore
16141,docgen formatting ,chore
16142,docgen remove unused signature ,chore
16143,docgen improve error handling for missing declaration params ,chore
16144,docgen allow class member sorting to be configured ,chore
16145,docgen clarify and improve matching of export to ignore previously this wa a bit cryptic a we just had a hidespecialexports flag now it ignores export that match an array of regexes with the default case being those export called esmodule ,chore
16146,docgen choredocgen add typescript parsing ,chore
16147,docgen relax link matching ,chore
16148,docgen relax link matching ,chore
16149,docgen relax link matching ,chore
16150,docgen add typescript parsing ,chore
16151,docgen relax link matching ,chore
16152,docgen add typescript parsing ,chore
16153,docgen remove traceur bit ,chore
16154,docgen move inline link matching to dgenipackage ,chore
16155,diinjector remove invalid tab char these tab were breaking the jade syntax generation ,docs
16156,directivesjs remove invalid asterisk this character wa breaking the docgen ,docs
16157,docgen fix path to module on angulario ,chore
16158,build npm shrinkwrap to pick up changed sha tsdarts nodesourcemapsupport dependency wa updated to match the main line patch but this changed the sha in the existing repo breaking angulars shrink wrapped dependency this update change the dependency back to an existing sha ,fix
16159,fakeasync allow simulating the passage of time ,feat
16160,di added hostinjector and viewinjector to the directive annotation ,feat
16161,core renamed injectables into appinjector breaking change before componentinjectables type class mycmp after componentappinjector type class mycmp ,refactor
16162,di removed publishas breaking change remove the publishas property from the component annotation ,feat
16163,pipe reexported pipe to genereate doc ,feat
16164,treediffer treat symlinks to deleted path a removal previously treediffer would not correctly handle symlinks to deleted file resulting in an enoent errno being tossed by libuv this change fix this to ensure that symlinks are safely handled performantly close ,fix
16165,router use dynamiccomponentloader instead of viewcontainer ,refactor
16166,router improve route matching priority ,fix
16167,router improve control flow of descendant route activation ,refactor
16168,router rename helper in test ,test
16169,pipe fix view we all copypasta observablepipe which had the typo close ,docs
16170,changedetection json pipe close ,feat
16171,change detect fix typo unitialized uninitialized close ,style
16172,compiler avoid unnecessary list concats update bindingrecordscreatorgetbindingrecords and protorecordbuilderaddast to avoid unnecessary call to listwrapperconcat close ,perf
16173,benchmark update compile benchmark update the compile benchmark to allow the dart transformer to properly generate the getters setter method needed this also improves the method of duplicating the source template further decreasing runtime from s to s ,refactor
16174,gulp log message when task triggered by watch close close ,chore
16175,material add ee smoke test for a few more component close ,chore
16176,compiler specialcase class attribute in hostattributes close close ,feat
16177,form improved error message close ,feat
16178,ngfor fix inline doc ,doc
16179,di fix inline doc in bindingts fix ,doc
16180,urlresolver inline doc fix ,doc
16181,elementinjector allow optional for protoviewref ,feat
16182,routeregistry optimize recognize ,refactor
16183,router add type ,refactor
16184,protoviewfactory move getchangedetectordefinitions out of protoviewfactory move getchangedetectordefinitions out of protoviewfactory since it doe not depend on any state in that object ,refactor
16185,build fix buildjs and testunitcjs on window close ,chore
16186,bench press added link to chromedriver bug for reference close ,docs
16187,travis bump npm version to this is to remove the warning in log and align the ci with our local environment ,build
16188,error preserve stack trace of user exception in dart ,feat
16189,viewmanager split inplace view into root and free host view breaking change appviewmanagercreateinplacehostview is replaced by appviewmanagercreateroothostview for bootstrap and appviewmanagercreatefreehostview for imperative component the later creates new host element that are not attached anywhere to attach them use domrenderergethostelementhostviewref to get the host element close ,refactor
16190,changedetection uppercase and lowercase pipe because the world need more uppercase madness ✔ clangformat ✔ test ,feat
16191,facade touppercase and tolowercase ,feat
16192,reflector improve type ,refactor
16193,compiler add an error when a directive is null or undefined fix ,fix
16194,tree remove unused import ,build
16195,gulp dont print stack from jasmine handler failure in ci mode jasmine already log all the test failure so that stack is redundant ,build
16196,promisepipets correct async pipe the syntax is now combined with async rather than separate promise ,docs
16197,contributingmd fix grammatical error in refactor description grammar consistency using neither with nor ,docs
16198,annotation correct list for directive for component component take a list of directive annotationsimplannotationsjsl ,docs
16199,watch add some test coverage for watch build plugin close ,test
16200,traceurjasmine accept multiple specfile glob ,chore
16201,packagejson add rewire devdependency ,chore
16202,gulp log test error but suppress error handling within gulp while in watch mode if any task executed by gulp result in an error gulp will try hard to show error these are usually irelevant in the watch mode this is why it ok to supress them except when running in the ci test mode in which case failing task and logging exception is helpful close ,build
16203,brocolli convert brocollitsdart to use treediffer close close ,build
16204,protoviewfactory expose data for generating change detector also consolidates metadata handling in elementinjector breaking change renames directivemetadatareader into directiveresolver and remove srccorecompilerdirectivemetadata fix fix ,refactor
16205,dart improve dart listwrapperconcat improve implementation of listwrapperconcat to take advantage of our knowledge of input list size ,perf
16206,changedetection implemented change detection that can be configured with pregenerated change detector ,feat
16207,changedetector extracted changedetectordefinition ,refactor
16208,packagejson update runsequence to v v includes a patch to prevent manipulating argument passed a array ,chore
16209,gulp use chokidar alone instead of gulpwatch close ,build
16210,packagejson uninstall gulpwatch install chokidar ,chore
16211,compiler added support for syntax ,feat
16212,cleanup remove some unused file ,chore
16213,router generate link for routerlink with basehref ,fix
16214,router sort possible route by cost ,fix
16215,ng benchmark revert ngif to ngif ,fix
16216,example prefix directive with ng ,fix
16217,benchmark change if for ngif ,fix
16218,directive fix import path ,fix
16219,benchmark fix ngif ngfor renaming for template ,fix
16220,npmshrinkwrapreadmemd add info about from property change close ,docs
16221,gulp run beforeexit hook only once this prevents inifinite loop when cleanup task register an additional task that trigger a new beforeexit event fix ,build
16222,facade mapwrappercreatefrompairs close ,fix
16223,gulp bump the required node version to we ran across fatal issue with npm shrinkwrap on node x which dont go away even with npm x upgrading node to fixed the shrinkwrap issue since now we run node on ci a well there is no reason for anyone to use node during development ,build
16224,publishing fix pubspec author field ,chore
16225,test fixed a test ,fix
16226,packaging bump version to alpha ,chore
16227,promisepipe use lexical this inside of transform ,refactor
16228,ngzone use zonejs v from npm ,refactor
16229,vmturnzone renamed to ngzone breaking change vmturnzone ha been renamed to ngzone the public api ha not chnanged the outer zone is now named mount zone private to ngzone ,refactor
16230,vmturnzone outer zone root zone ,refactor
16231,vmturnzone use the browser microtask queue for j ,refactor
16232,vmturnzone rework the implementation to minimize change detection run before this pr there were only zone root zone outer zone inner zone this pr creates the outer zone a a fork of the root zone root outer inner by doing this it is possible to detected microtasks scheduling in the outer zone and run the change detection le often no more than one time per vm turn the pr also introduce a promise monkey patch for the j implementation it make promise aware of microtasks and again allow running the change detection only once per turn ,feat
16233,di support type literal in di ,feat
16234,dart copy cs resource in build include cs resource in the file copied to the distdart directory this fix s occuring when testing the todo app ,chore
16235,form rename formdirectives to formdirectives breaking change a collection of all the form directive is exported under formdirectives while those were previously available under formdirectives close ,refactor
16236,form export directive a const in dart fix ,fix
16237,darttransform inline templateurl value modify directiveprocessor to inline templateurl value to avoid making additional browser request close ,feat
16238,facadelang remove unneded semicolon those were previously enforced incorrectly by clangformat close ,refactor
16239,packagejson update gulpclangformat ,chore
16240,router add baseurl to relative path but not absolute close ,fix
16241,view fixed protoviewfactory to get all property binding ,fix
16242,router reuse common parent component ,fix
16243,facade add equal method to stringmapwrapper ,feat
16244,changedetection rename asyncpipe to observablepipe the async pipe in template will now delegate to both observable pipe or promise pipe whichever first say it can support the input therefore it beneficial to disambiguate the name of the asyncpipeasyncpipefactory constructor to reflect that these actually support only observables ,refactor
16245,promisepipe add pipe for promise ,feat
16246,gulpfile fixed testunitdart to format dart code before running test ,fix
16247,gulpfuile added watchjsdev ,feat
16248,compiler added support for host action ,feat
16249,di use typescript initialization idiom ,cleanup
16250,gulp remove the checkformat step from testunitjs task ,build
16251,router routerlink work without params routerlink attache a listener to prevent default behavior and navigate close ,fix
16252,location dartium doe not like pushstate with null according to the value of the title parameter is irrelevant anyways ,fix
16253,transformer remove classdefparser in favor of hardcoded string to speed up build ,fix
16254,directive export collection of core directive close ,feat
16255,lang support const expression in tsjs and dart close ,feat
16256,packagejson update tsdart to ,chore
16257,developermd update dart sdk version minimal version set to dev close ,docs
16258,view allow to transplant a view into a viewcontainer at another place close ,feat
16259,di expose parent injector ,feat
16260,gulp watch and incrementally compile file for serverjsdev task close ,build
16261,dart use trusttypeannotations and trustprimitives ,chore
16262,di component can selfpublish via publishas ,feat
16263,darttransform reuse readdirectivemetadata in plugin share code for parsing directivemetadata value between the transformer and the analyzer plugin ,feat
16264,ci bump node version to see close ,chore
16265,npmshrinkwrapreadmemd update npm update instruction ,docs
16266,router strip base href from url when navigating ,fix
16267,testlib spy funcs should match null argument ,fix
16268,dom add getbasehref method ,feat
16269,changedetectionjs export null pipe rather then having developer creating their own null pipe close ,feat
16270,modulesdart add readmemd close ,docs
16271,core fix formatters pipe long overdue update close ,docs
16272,material add early version of mdgridlist close ,feat
16273,darttransform handle hostattributes in directivemetadata handle hostattributes in the transformer hostattributes wa introduced in caedeccedcccd close ,fix
16274,darttransform use the render compiler and the directiveparser update the templatecompile step to use the full render compiler provide directivemetadata for viewdefinition object and use it to run the directiveparser step of the render compile pipeline ,feat
16275,build update shrinkwrap doc close ,chore
16276,material early version of mdinput close ,feat
16277,gulp check node and npm version and log a warning if incompatible close ,build
16278,changedetection updated dynamic change detector not to mutate when throwing close ,fix
16279,render remove recursion from renderer the goal is to make implementing a renderer straight forward breakingchange renderer interface wa redone simplified directdomrenderer wa replaced by domrenderer directdomrenderersetimperativecomponentrootnodes is replaced by the following step viewmanagergetcomponentviewelementref viewref domrenderersetcomponentviewrootnodesviewref rootnodes all view annotation need to have a template but the template may be empty previously view that had a renderer property did not have to have a template dynamiccomponentloaderloadintonewlocation doe no more allow to pas an element but requires a cs selector special syntax document can be used a prefix to search globally on the document instead of in the provided parent view part of ,refactor
16280,dart remove unused import these import cause dart analyze error once tsdart remove the implement import ,fix
16281,annotation differentiate between component definition and component instance close ,docs
16282,compiler allow setting attribute on a host element close ,feat
16283,npm bump angular version in the shrinkwrap after today release ,chore
16284,gulp use gulpwatch instead of gulpwatch for watching file gulpwatch us chokidar which us fsevents which is much better than f polling or relying on fswatch fsevents use only one fd per watch invocation a opposed to one fd per watched directory and any subdirectory this should improve the situation with emfile error caused by lack of available file descriptor i also tried the following gulpsane requires watchman installation via brew so i didnt want to request that everyone go throught that yet gulpchokidar didnt work seems to be obsolete ,build
16285,typescript migrated change detection to typescript ,build
16286,release release alpha ,chore
16287,brocolli escape special regexp character when building regexps special regexp token were allowed unchanged previously which incorrectly broke the includeexclude behaviour now theyre escaped first close close ,fix
16288,packagejson bump zone to ,chore
16289,material add simple ee smoke test for component ,chore
16290,decorator export directive decorator close ,fix
16291,formatter point to the newest clangformat the prior version allowed for an older clangformat binary which ha bug ,fix
16292,shrinkwrap update dependency to latest also our packagejson wa outofsync with npmshrinkwrapjson see this includes a fix for the shrinkwrapping of tsdart see ,chore
16293,doc fix broken doc test after addition of t extension to dgeni regex ,fix
16294,brocolli move filename filtering into diffingpluginwrapper close ,build
16295,build build the broccoli tool with correct typescript version by default gulptypescript currently depends on typescript which doesnt work for u for example it doesnt allow let when emitting e along with lot of other error it so happens that npm sometimes make this work a seen by the warning npm warn unmet dependency usersalexeagleprojectsangularnodemodulesgulptypescript requires typescript but will load npm warn unmet dependency usersalexeagleprojectsangularnodemodulestypescript npm warn unmet dependency which is version but when we update our nodemodules in a certain way we lose this setup and it break we should be explicit about using a different version of typescript than gulptypescript depends on ,fix
16296,decorator incorrect annotation to decorator adapter ,fix
16297,benchmark add transform benchmark runner and clean up benchmark output ,chore
16298,docgen include typescript file in the doc generation ,chore
16299,docgen log comment a silly rather than info ,chore
16300,docgen provide alias for jadedata doc ,chore
16301,decorator fixed decorator ,fix
16302,build migrated di to typescript ,chore
16303,darttransform generate directivemetadata for export for all file that export another library include directivemetadata for the exported library in that file associated ngmetajson file ,feat
16304,build update to typescript head we need to pick up some bugfixes for decorator emit this still ha our patch to make error a class ,chore
16305,build remove karma preprocessors custom karma preprocessors are no longer being used after and ,chore
16306,decorator fix decorator reflection the bug appears when there are only type annotation without parameter annotation ,fix
16307,darttransform use render compiler concept update templatecompiler transform step to use abstraction used by the render compiler for example template code is now loaded via an instance of templateloader and external resource are fetched via an instance of xhr ,refactor
16308,render rename renderview and renderprotoview part of close ,refactor
16309,dartanalysis build directivemetadata for libraryspecificunit initial commit for the dart analyzer task ,feat
16310,renderer separate compiler from renderer part of close ,refactor
16311,gulp fix concurrency and caching issue in testunitjs and testunitdart task previously there wa a chance of race condition that could sporadically fail the build additionally runing a task via gulpstart or runsequence always rerun it dependency which meant that we were blowing away the buildtools build and rebuilding everything from scratch even during the interactivewatch mode this meant that the build pipeline cache wa destroyed on every change and we never got the benefit of incremental compilation ,build
16312,broccoli refactor typescript plugin to be incremental via diffingbroccoliplugin ,build
16313,gulp do no rebuild tool during testunitcjs this introduces private buildjscjs task that is to be executed only from other public task ,build
16314,broccoli traceur plugin should react only to jsescjs file removal ,build
16315,broccoli add diffingbroccoliplugin and refactor existing plugins to use it treediffer export both treediffer and diffresult interface diffingbroccoliplugin factory class for wrapping diffingbroccoliplugins and turning them into broccolitrees broccolidestcopy refactor into diffingbroccoliplugin broccolitraceur refactor into diffingbroccoliplugin ,build
16316,broccolidts add treedescription signature ,build
16317,gulp create private buildtools task and use it instead of magic variable this way when gulp print out that it running buildcleantools it really mean that it cleaning up the build directory ,build
16318,build make karma watch broccoli output for dart unit test previously karma used a custom preprocessor instead have karma run built dart from the dist folder and use gulp and broccoli to watch for change ,chore
16319,router fix for leading slash in dart using string string translates to identicalstring string in dart which is incorrect a it is possilbe for dart string to have different reference ,fix
16320,dom add location and history a domlike apis instead of global access method ,feat
16321,darttransform add directivemetadataextractor transform step add a step that read directivemetadata object off annotated class into ngmetadart file these will be used by the templatecompiler step a input to the angular render compiler update one test to avoid unsupported functionality format others ,feat
16322,router add the router to the selfexecuting bundle due to limitation of system build the router can not have it own sfx bundle fix an issue with routeconfig decorator by moving it into it own file ,feat
16323,build change t error type to a class this will be in the next upstream release ,chore
16324,build fix packagejson warning nit the contributor field is defined a an array see ,chore
16325,material add prototype dialog component w demo ,feat
16326,router export decorator version of routeconfig ,feat
16327,benchmark add basic dart transformer benchmark add simple benchmark for various transformation phase a well a helloworld doe not integrate these into any benchmark framework yet ,feat
16328,decorator add decorator version of di annotation in angulardi the symbol inject is a decorator injectannotation is an annotation internally one an get a hold of annotation without annotation appened to make tsdart work without workarounds by importing from angularsrcdiannotationsimpl instead of angulardi this is needed only for user that transpile through t and through tsdart ,feat
16329,router rename alias to a ,refactor
16330,router route redirects ,feat
16331,router sibling outlet ,feat
16332,router navigate on popstate event ,fix
16333,router add router bundle to gulpfile ,chore
16334,router throw if config doe not contain required field ,fix
16335,router rename locationmock to locationspy ,refactor
16336,router export routerinjectables ,feat
16337,router infer toplevel routing from app component close ,fix
16338,router use list for routeconfig annotation ,fix
16339,router add location service ,feat
16340,bundle update the bundle config to point to rxjs ,fix
16341,view moved the logic from protoview to protoviewfactory ,refactor
16342,packaging switch to conventional changelog ,chore
16343,build remove e file which shadow t file this remove e file which are pure duplicate of a t file in the same folder next we need to remove j file a well and remove karma preprocessors for dart ,chore
16344,view changed view manager to hydrate change detector after creating directive ,fix
16345,decorator add support for parameter decorator paramater decorator expect to be called a currently implemented by t ,feat
16346,benchmark added an implementation of the tree benchmark in react ,feat
16347,compiler clone template before compiling them this is needed a the compiler change template during compilation and we are caching template in the templateloader close ,fix
16348,compiler rename decorator directive into directive breaking change previously directive wa the abstract base class of several directive now directive is the former decorator and component inherits from it ,refactor
16349,benchpress report forced gc metric separately ,refactor
16350,exceptionhandler log error via consoleerror this is eg needed a we use this to test for error in our example ,fix
16351,decorator update missing benchmark and fix typo ,fix
16352,core remove dynamiccomponent breaking change a dynamic component is just a component that ha no view annotation… ,refactor
16353,build update clangformat to close ,chore
16354,build update typescript version to unreleased beta also fixup the typing which were broken by change in typescript libdts second attempt to merge this now that bugfix for tsd is in ,chore
16355,compiler remove viewport directive use decorator instead breakingchange the special type of viewport directive is removed in favor of a more general decorator directive viewcontainerref now no more ha a default protoviewref but requires an explicit one when creating view close ,refactor
16356,decorator add decorator to be used by t and babel transpiled apps ,feat
16357,darttransform add directivemetadatatofrommap add utility method to convert renderdomdirectivemetadata to and from map this will allow saving and restoring directivemetadata in the angular transformer we discussed adding this a a member on directivemetadata since this is not necessary for anything except the transformer we decided to put it into a separate file to avoid shipping it with the angular core code ,feat
16358,build karma watch broccoli output this is a prerequisite for switching to typescript we need to remove the traceur preprocessor from karma so we have the build specified in a single place broccoli tree defn ,chore
16359,core introduce viewref and protoviewref breaking change ngelement merged into elementref compilercompile… return protoviewref viewcontainer us protoviewrefs and viewrefs viewrefprotoviewref in renderer were renamed to renderviewrefrenderprotoviewref related to close ,refactor
16360,build use correct tsd command to get typing at requested version ,fix
16361,build revert typescript upgrade which broke the build this reverts commit aafcabeefcc this reverts commit eeebcccfdfcececbf ,fix
16362,build refer to newest version of hammerjs typing ,fix
16363,build update typescript version to unreleased beta also fixup the typing which were broken by change in typescript libdts ,chore
16364,build run form test in node close ,chore
16365,compiler changed the compiler to set up event listener and host property on host view element close ,fix
16366,publishing put malformed commit message to other do not output empty section close ,chore
16367,packaging copy changelogjs from angularjs ,chore
16368,parser remove unused variable close ,refactor
16369,di improve error message for invalid binding fix close ,fix
16370,for fix example to use forof syntax close ,docs
16371,changedetector ensure that local are only used when implicit receiver close ,fix
16372,build add a tsconfigjson file simply to allow atom editor typescript plugin to work without dropping tsconfigjson file and generated j file in the source directory close ,chore
16373,core updating some error in template signedoffby josh kurz jkurzgmailcom close ,docs
16374,core update core directive document signedoffby josh kurz jkurzgmailcom ,docs
16375,darttransform turn on transform for examplestodo tag service with injectable update pubspecyaml to transform examplestodo close ,feat
16376,changedetection removed nochanged and replaced it with wrappedvalue ,refactor
16377,build remove traceurbased dart transpiler ,cleanup
16378,compiler only set viewdefinition absurl if the view ha either a template or templateurl fix close ,fix
16379,fix host property for md component ,chore
16380,readme update for linguistic consistency close ,docs
16381,changelogmd fix correct link to angular close ,docs
16382,docgen only generate angulario module and data doc for public module ,chore
16383,docgen dont show private class member in jade template close ,chore
16384,injector remove unwanted tab character in the example these mess up the jade template that use tab for structuring the output ,docs
16385,docgen generate doc for angulario you can generate doc for comsumption by the angulario website by running bash gulp docsangulario the generated doc can be found in distangulario ,chore
16386,packaging bump version to alpha add changelog ,chore
16387,viewmanager dehydrate view recursively over viewcontainers close ,fix
16388,render return view when destroyed in viewcontainer close ,fix
16389,router add initial implementation ,feat
16390,facade add istype method ,feat
16391,darttransform dedup getters setter method dedup the getters setter and method generated by the transformer when compiling a template run dartformat over the transform code ,feat
16392,changedetection document jitchangedetection and dynamicchangedetection close ,docs
16393,darttransform use var instead of bool in generated file if a source file hide bool explicitly or implicitly via show a generated file using bool may not resolve close ,fix
16394,broccoli add a treediffer workaround to browser tree ,build
16395,gulp fix incremental compilation by reusing angularbuilder across watch rereruns ,build
16396,gulp add testunittools to testjs task ,build
16397,gulp add buildcleantools task prevent testunittoolsci from building on our ci server we currently split each build into the building phase and testing phase this change aligns testunittoolsci with the rest of ci test taskswq ,build
16398,jscjs reenable test that now pas in cjs previously these test were failing but now they pas on master ,build
16399,gulp remove obsolete config ,build
16400,gulp remove gulpjasmine run test in a new process instead otherwise we see occasional failure due to requirecache and other global state collision ,build
16401,gulp rename task buildbroccolitools buildtools testunitbroccoli testunittools ,build
16402,build introduce angularbuilder facade and clean up many thing ,refactor
16403,gulp remove obsolete gulp transformer ,build
16404,gulp use strict mode for gulpfile a variable public wa renamed since it is a reserved keyword in the strict mode ,build
16405,build exclude treedifferts from formatchecking due to a bug in clangformat see ,chore
16406,gulp refactor testunitbroccoli to use task dependency and not die when a compilation error occurs with this change we also stop gulp task queue when an error in buildbroccolitools occurs that way we dont bother testing when transpilation fails ,build
16407,npmshrinkwrapreadmemd update instruction ,docs
16408,broccoli add sourcemaps to our broccoli tool ,build
16409,broccoli convert traceur and broccolidestcopy plugins to use treediffer also adding symlinkorcopy to our npm dependency since our plugins now use it ,build
16410,broccoli add custom broccolidts file ,build
16411,broccoli add treediffer for diffing broccoli tree ,build
16412,broccoli add testing infrastructure for our build plugins component gulp testunitbroccoli task mockfs for mocking our f in unit test jasmine dts file for type checking jasmine lib is provided by minijasmine so we dont need to include it explicitly ,build
16413,build add tsdcachedjson to our gitignore ,chore
16414,build refactor testunitcjs to use the broccoli pipeline this change solves several problem the broccoli pipeline is used to compile the nodecjs tree upon any change to the module directory jasmine test run in a new process removing the need to clean up environment after each test since we transpile only those test file that are actually needed for nodecjs build we transpile le and dont need to filter out test ,chore
16415,benchmark benchmark that measure cost of dynamic component ,perf
16416,benchmark benchmark measuring cost of decorator fix ,perf
16417,core rename viewcontainer to viewcontainerref this also renames internalappviewcontainer into appviewcontainer related to close ,refactor
16418,directive cs selector are used for directive close ,docs
16419,querylistjs fix minor typo typo fixed close ,chore
16420,view introduce appviewmanager to consolidate logic appviewmanager is the single entry point to changing the view hierarchy it is split between the manager itself which doe coordination and helper method so both are easily testable in isolation also viewcontainer is now only a pure reference to a bound element with the previous functionality but doe not contain the list of view any more part of ,refactor
16421,testlib support multi match with deep equality for function call ,fix
16422,form do not export abstractcontrol close ,cleanup
16423,source intro modulesdart move analyzer code there we have dart code in angular module that ought to be in it own package example include dart analysis plugins and potentially the transformer although transformer can not be moved out just yet however this code is dartonly and it doesn ’ t make sense to use j directory layout for it this commit introduces a subdirectory called modulesdart all module in this directory are pure dart package using standard pub directory layout the code in these package never get transpiled it is directly copied to dist unmodified except an adjustment in relative path in pubspecyaml file ,chore
16424,view reimplemented property setter using change detection ,feat
16425,angular export querylist in angularcore close ,fix
16426,piperegistry improve error message close ,refactor
16427,lexer remove unused operator close ,refacor
16428,annotation fix casing in view annotation fix the casing to match key name exposed for templateurl in view annotation close ,docs
16429,parser support and operator close close ,feat
16430,listwrapper follow j semantics ,fix
16431,di removed dead code ,cleanup
16432,directive templateconfig view for close ,docs
16433,benchpress only print the cv when it is meaningful when the mean is the coefficient of variation is calculated to be nan which is not meaningful so instead of printing nan just dont print the cv at all close close ,fix
16434,packagejson upgrade zonejs to v close ,chore
16435,build run event test in node close ,chore
16436,dom remove method is allowed on text node a well fix close ,fix
16437,benchmark wait for end of benchmark ,fix
16438,jsserve serve empty favicon to prevent error in benchmark background our benchmark check whether there were error in the browser log after they executed ,fix
16439,example fix todo example on dart reflection for dart wa not set up properly for the todo example so it wa failing when served on dartium via gulp serveexamplesdart ,chore
16440,di capture original exception in invalidbindingerror fix close ,fix
16441,packaging bump version to alpha ,chore
16442,view add imperative view ,feat
16443,testability rename function to get testability previously getting testability wa windowangulargettestability this wa because the plan wa to export the api to the window a angular however the decision wa changed to make this just angular in to decouple testability from the rest of the angular api just make it one function windowgetangulartestability ,refactor
16444,changedetection added async pipe ,feat
16445,changedetection moved pipesrelated test to the pipe dir ,cleanup
16446,view implemented loading component next to existing location ,feat
16447,darttransform add debug transform parameter add two transform parameter to aid in debugging the transformer mirrormode with value debug none and verbose initreflector with value true false mirrormode debug allow reflective access but log a message if it is used none remove reflective access throw if it is used default value verbose allow reflective access log a stack trace if it is used initreflector whether to generate call to our generated initreflector code these will be useful to reveal area where the transformer is not generating appropriate code and to quickly see where reflective access occur when the pub mode is transformdynamic we run in mirrormodedebug with initreflector false this is used for testing purpose ,feat
16448,darttransform format dart file in reflection run the formatter on some dartspecific reflection file ,style
16449,xref link change link to use dgeni syntax close ,docs
16450,shadowdom remove unused node on redistribute previously light dom node that were not used by any content tag were not removed from a view on redistribute this lead to a bug when reusing a view from the view pool a it still contained stale reprojected node fix ,fix
16451,viewfactory allow empty view cache ,fix
16452,darttransform link to the transform wiki page add a link to the dart transform wiki page to developermd ,docs
16453,docgen fix atscript file reader test close ,chore
16454,event support preventdefault fix close ,feat
16455,build run application test in node close ,chore
16456,docgen add id to member to allow direct linking you can now write a link to a member of a class by appending the member name to the class name joined by a hash sign link controlgroupdirectiveadddirective adddirective by default the link will contain the text of the class rather than the member so you must add it a an inline code text snippet in the link tag close ,chore
16457,docgen read e file a well a j when generating doc close ,chore
16458,compiler make compilerbuildrenderdirective static ,feat
16459,view chagned view factory to keep astwithsource ,fix
16460,view fixed hydrator to pas the right element index when attaching an event listener ,fix
16461,darttransform remove indexstatic from helloworld indexstaticjs indexstatichtml are unnecessary in j and are now essentially generated via the dart transformer the angular transformer is specified in examplespubspecyaml use pub build to create a transformed application that doe not use dartmirrors create indexdynamicjs indexdynamichtml which are used to test that the app run equally well with mirror and without close ,refactor
16462,analysis fix analyzer warning in indexstatic ,chore
16463,format format a t file ,chore
16464,facade fix splice semantics add test ,fix
16465,analysis analyze everything in lib folder recursively fix existing warning ,chore
16466,analysis analyze web folder fix existing warning ,chore
16467,view provide viewcontainers dynamically on any element ,refactor
16468,view fixed hydrator to export the dom element instead of ng element ,fix
16469,vmturnzone inline doc close ,doc
16470,core typo componetref componentref close ,fix
16471,di rename providererror to bindingerror close ,refactor
16472,di edits to di close ,docs
16473,lifecycle mark registerwith a private ,docs
16474,docgen ignore member marked with private ,chore
16475,angularannotations convert link to use link style inline tag this is an example of how to link to other code component using the link inline tag ,docs
16476,docgen add link inline tag this commit enables link to other doc such a class and module via the link codeidentifier style inline tag dgeni identifies what you are linking to by comparing the identifier to the alias for each doc if no alias match the identifier then the dgeni run exit with a missing doc in link error if more than one alias match the identifier then dgeni exit with an ambiguous link error in the future we could build in some heuristic for choosing a preferred doc when the link is ambiguous such a choosing a public doc over a nonpublic doc and choosing a code component that is in the same module a the doc where the link is found currently there are two alias for each api component it name and it identier for example if the directive class is exported from angularannotations so it alias are directive and angularannotationsdirective there is an issue in the nonpublic doc generation which mean that it doe not yet have link tag implemented this is that when we reexport a code component it get cloned into another module this mean that a simple reference to the code component name will always produce an ambiguous link this can be fixed with a heuristic a described above meanwhile you can avoid this by always using the full id of the code component if it is being reexported close close ,chore
16477,build trigger npm postinstall when npm install is skipped we temporarily need this because some of our dependency are being installed via npm postinstall ,chore
16478,travis pin npm used to v since we are currently stuck on node see this will at least help u avoid some of the npm bug present in older version that come with ,chore
16479,travis turn on travis cache for npm dependency ,chore
16480,travis add npminstalldependenciessh step in preparation for caching ,chore
16481,npm add shrinkwrap to our project ,chore
16482,npm remove duplicate fsextra dependency ,chore
16483,npm move tsd update to post install and add tsd version to devdependencies ,chore
16484,changedetection removed global change detection object so it is possible to override pipe registry ,refactor
16485,view changed event emitter to be observables ,feat
16486,benchpress explicitly require navigation to finish before continuing ,fix
16487,view clean up creating view in place and extract viewhydrator major change compilercompilerootel type compilercompileinhosttype viewhydratorhydratehostviewinplaceel view move all hydratedehydrate method out of view and viewcontainer into a standalone class viewhydrator a private method and provide new public method dedicated to the individual use case note this pr doe not change the current functionality only move it into different place see design discussion in in preparation for imperative view ,refactor
16488,di changed an error message to be more descriptive ,cleanup
16489,parser changed parser to parse pipe in the middle of a binding ,feat
16490,darttransform correct dart analyzer warning ,refactor
16491,darttransform add unit test for directivemetadatareader ,test
16492,darttransform add the directivemetadatareader add a class that par and read directive metadata to prepare for running the render compiler in the dart transformer ,feat
16493,darttransform detect annotation which extend injectable or template create a method that recursively walk import from an entry point and determines where class are registered use this information to determine if a particular annotation implement or extends injectable or template ,feat
16494,build run render test in node close ,chore
16495,docgen ignore export marked a private close ,chore
16496,developermd mention building j or dart selectively close ,docs
16497,changedetection updated handling onpush detector so they get notified when their binding change ,feat
16498,changedetection renamed bindingpropagationconfig to changedetectorref ,refactor
16499,view remove dynamic component when the parent view is dehydrated also add a bunch of unit test for affected part fix ,fix
16500,change detection add removeshadowdomchild ,feat
16501,test create default spy for all method on a class ,fix
16502,darttransform ensure consistent ordering of generated import linked import are generated in a consistent order linked import are generated immediately after their associated file ,fix
16503,build remove import of gulptraceur which pull in a different version of traceur this lead to build fails ,fix
16504,benchpress add detail about normalized mobile environment ,docs
16505,material first ng material design component ,feat
16506,bundle add script to push bundle to codeangularjsorg copied over from angular j x ,feat
16507,changedetection cleaned up changedetectionjs ,refactor
16508,changedetection document lifecycle ,docs
16509,darttransform correct dart analyzer warning fix numerous dart analyzer warning we had been ignoring delete unused inprogress dir ,refactor
16510,build remove even more obsolete build config value ,chore
16511,doc edits and addition for form and change detection ,misc
16512,build fail the build for certain t error ,fix
16513,build remove obsolete htmljs copyjs srcfolderinsertion ,chore
16514,build move html copying into the broccoli task this includes all task to construct a dart tree except for formatting and reverse engineersrefactors the various copy tool for added more sanity ,feat
16515,changedetection dont annotate export that are already in public module since dynamicchangedetection and jitchangedetection class are alreadt in the public module they do not need to be annotated with a exportas tag close ,docs
16516,docgen only clone doc that are actually being reexported to a new module close ,chore
16517,view changed componentref to contain elementref instead of extending it ,cleanup
16518,elementinjector added a missing test ,cleanup
16519,pub run buildpubspecdart before buildanalyzerdart ,chore
16520,bundle add a selfexecuting dev bundle sfx ,feat
16521,build better encapsulate the broccoli builder ,refactor
16522,build remove obsolte gulp task ,chore
16523,build move buildtransformcjstests task to broccoli ,chore
16524,packaging bump version to alpha ,chore
16525,build use a filter plugin to write the dest folder this let broccoli keep the dest folder uptodate in watch mode so we should be able to use that for karma ,chore
16526,di move all binding resolution logic into injectorjs ,refactor
16527,doc more doc on binding resolution ,feat
16528,view use preresolved binding for child injector init creating a child injector from preresolved binding if any is an order of magnitude faster ,perf
16529,benchmark measure injector init from resolved binding ,perf
16530,di provide two way to create an injector resolved and unresolved add two factory static function to injector resolveandcreate and fromresolvedbindings we want to avoid resolution and flattening every time we create a new injector this commit allows the user to cache resolved binding and reuse them ,feat
16531,di refactor binding to support dart annotation ,fix
16532,build gulp testunitcjs broken the second run fix close ,chore
16533,event add support for global event fix close ,feat
16534,bundle avoid import in global format if an empty file like angulartemplatejs is imported it is autodetected a the one using global format by the system builder this is incorrect a the entire angular build output is in the e format removing empty import till it ha some content close ,chore
16535,build move more broccoli support inside the typescript boundary ,chore
16536,build inline traceur option just like we do everywhere ,chore
16537,build transpile only ee test code into cjs ,chore
16538,build correct comment ,chore
16539,build create esbuildjs only for file that will become e npm package ,chore
16540,build move dart broccoli tree to makebroccolitree ,chore
16541,developermd add bower install info close ,docs
16542,build refactor broccoli tree to generate them in order to reduce duplication ,chore
16543,benchmark measure cost of injector init with a variety of binding ,perf
16544,shadowdom redistribute light dom when a dynamic component is attached fix close ,fix
16545,build enforce formatting of some file our style guide includes formatting convention instead of wasting time in reviewing pr discussing thing like indenting and to avoid later delta to fix bad formatting in earlier commits we want to enforce these in the build the intent in this change is to fail the build a quickly a possible in travis so those sending a pr immediately know they should run clangformat and update their commit when running locally we want user to know about formatting but they may not want to act on it immediately until they are done working for this reason it is only a warning outside of the continuous build this is done by having a checkformat task which should run on most local build and an enforceformat task only run by travis ,feat
16546,build use broccoli for tsdart transpilation ,feat
16547,build fix checkformat ,chore
16548,developermd update dart sdk version package angular requires sdk version close ,chore
16549,bootstrap changed bootstrap to return componentref ,feat
16550,doc edited api doc ,cleanup
16551,build compile the t broccoli tool this avoids having to check in the compiled j file ,chore
16552,benchmark make view cache a parameter to the tree benchmark ,feat
16553,viewfactory fix caching of view previous implementation had bug and did not cache per protoview ,fix
16554,build add rudimentary t typing for broccoli ,feat
16555,compiler add controlignorecurrentelement to skip the current element relates to ,refactor
16556,build add typescript to the cjs build refactor the file extension logic in traceur plugin to simplify ,chore
16557,testlibtestinjector fix invalid jsdoc type choredocgen capture doc for module from comment close doc add module description jsdoc tag doc add public tag to public module choredocgen fix overviewdump template the template wa referencing an invalid property choredocgen use exportedas and public rather than publicmodule this commit refactors how we describe component that are reexported in another module for example the public module like angularangular and angularannotations are public but they only reexport component from private module previously you must apply the publicmodule tag to a component that wa to be reexported applying this tag caused the destination module to become public now you specify that a module is public by applying the public tag and then you can reexport component to other module by applying the exportedas giving the name of the module from which the component will be reexported tag this tag can be used multiple time on a single component allowing the component to be exported on multiple module doc rename publicmodule to exportedas the publicmodule dgeni tag ha been replaced by the exportedas dgeni tag on component that are to be reexported on another module close ,docs
16558,darttransform use the dart transformer for benchmark remove explicit generation of reflection information in benchmark code and generate it with the transformer ,feat
16559,darttransform fix handling of dart keywords use packageanalyzers list of dart keywords to ensure we are properly reporting usage of dart keywords a runtime error ,feat
16560,darttransform allow multiple transformer entry point allow the user to specify multiple entry point to an app allow the angular transformer to run without explicit entry point to generate necessary setter getters on builtin directive like for and if close ,feat
16561,darttransform gracefully handle log call before init lazily create and use a logger that print instead of throwing use this logger in unit test ,fix
16562,darttransform add stub implementation to htmllibadapter stub out some method used in the compilerpipeline ,feat
16563,darttransform mark compiler a injectable necessary to allow runtime access via the injector ,feat
16564,build move the jsprod build over to broccoli ,chore
16565,rename rename view and template concept for ,chore
16566,build migrate buildjscjs to broccoli this doesnt do the typescript part of the build yet also there is a bit of hackiness left to resolve in a followup change ,chore
16567,keyevents support for div keyupentercallback this commit add a plugin for the event manager to allow a key name to be appended to the event name for keyup and keydown event so that the callback is only called for that key here are some example keydownshiftenter keyupspace keydowncontrolshifta keyupf key name mostly follow the dom level event key value there are some limitation to be worked on cf detail in but for now this implementation is reliable for the following key by reliable i mean compatible with chrome and firefox and not depending on the keyboard layout alt control shift meta those key can be combined with other key tab enter backspace pause scrolllock capslock numlock insert delete home end pageup pagedown arrowup arrowdown arrowleft arrowright latin letter az function key ff number on the numeric keypad but those key are not correctly simulated by chromedriver there is a sample to play with in examplessrckeyevents close close ,feat
16568,view generalized loading of dynamic component ,feat
16569,query add initial implementation of the query api query allow a directive to inject a live list of directive of a given type from it lightdom the injected list is iterable in j and dart it will be observable when observables are support in j for now it maintains a simple list of onchange callback api to support query element injector now maintain a list of child injector in the correct dom order dynamically updated by viewports for performance reason we allow only active query in an injector subtree the feature add no overhead to the application when not used query walk the injector tree only during dynamic view additionremoval a triggered by viewport directive syncs change between viewcontainer on the render and logic side close ,feat
16570,changedetection removed directive and binding memento ,refactor
16571,changedetection removed dead code ,cleanup
16572,benchmark stop working around a traceur bug ,fix
16573,build remove unused done function argument gulp only requires receiving a done argument if a task is not returning a stream doing both is unnecessary and confusing ,fix
16574,tsdart adjust to new tsdart api ,fix
16575,traceur fix a couple of unsupported or incorrect test ,fix
16576,dart use tsdart for transpilation in karma dart ,feat
16577,dart use tsdart for transpilation this switch all transpilation over from using traceur to using tsdart based on the typescript tool chain transpilation is a bit slow due to issue with the gulp integration but that should be easily fixable once we move to broccoli ,feat
16578,build dont include rtts in the dart build the module name actually doe not include a trailing slash so the folder would show up and be included in the dart pubbuild ,fix
16579,build only return directory from subdirs ,fix
16580,changedetection fixed changedetector interface ,cleanup
16581,changedetection removed dead code ,cleanup
16582,build migrate remaining task under buildjsdev to broccoli ,chore
16583,build use patched broccolifunnel version see ,perf
16584,build migrate buildjsdev fully to broccoli the previous change did the e transpile now we add e the sourcemaps are broken but were also broken previously well address that separately ,chore
16585,changedetection updated change detection to update directive directly without the dispatcher ,feat
16586,render use render layer fully introduces angularsrccorecompilerviewfactory which extract protoviewinstantiate and replaces viewpool note this is a work in progress commit to unblock other commits there will be follow ups to add unit test remove todos … ,refactor
16587,build move broccoli support to own module add support for multiple pipeline in different brocfiles ,chore
16588,docgen ensure all public export are rendered in publicdocs close ,chore
16589,repo gitignore the broccoli tmp dir ,fix
16590,docgen improve method signature formatting reuse the preformatting from the source code to layout method signature more cleanly ,chore
16591,docgen html escape method signature close close ,chore
16592,ruler introduce ruler service close close ,feat
16593,bundle remove workaround rxjs module detection update rx to the newest version because a fix is needed close ,fix
16594,render create and store render protoviewref in every app protoview needed to change renderermergechildcomponentprotoviews to not create new protoviews to be able to deal with cyclic reference this commit is part of using the new render layer in angular ,refactor
16595,build add traceur transpiler for broccoli this exactly reproduces the output tree from one of the gulp task which is now removed next step is to migrate another sibling task to broccoli ,chore
16596,build use relative path in file property inside sourcemap ,fix
16597,darttransform create target for serving transformed dart code allow pub buildserve to specify mode update pubbuildjs pubservejs to allow the caller to provide a mode value update setting to allow the di benchmark to be transformed to run statically ,chore
16598,docgen dont show member heading if no member close ,chore
16599,directive add to for directive microsyntax example ,docs
16600,changedetection added a new set of benchmark measuring updating property ,benchmark
16601,dart use map instead of hashmap close ,refactor
16602,directive add inline documentation close ,doc
16603,di allow injecting static attrs without type annotation close ,fix
16604,vmturnzone provide a stub vmturnzone for cjs test ,test
16605,xhr rename xhrmock to mockxhr for consistency ,reafactor
16606,testbed initial implementation ,test
16607,mocktemplateresolver allow directive overriding ,test
16608,annotation fix some typo align doc with code close ,docs
16609,directivesmd foreach for close ,docs
16610,render user render compiler ,refactor
16611,directivesmd fix variable name for visibility in component example ,docs
16612,angular export privatecomponentloaderlocation in angularcore ,fix
16613,darttransform minor renames rename setupreflection initreflector rename templatecomplier templatecompiler close ,refactor
16614,change detection assign thislocals in change detector ctor set thislocals null in the ctor of generated change detector class to prevent the class shape from changing on hydrate ,perf
16615,t duplicate the e file in the facade directory to typescript add a gulp task which build the t file in the cjs build only the new file have extension t since they are now valid typescript unfortunately until typescript can emit systemrequire we have to keep the old e version so traceur work inside the karma preprocessor this should be fixed soon ,chore
16616,changedetection call onchange from the change detector ,refactor
16617,bundle workaround rxalljs bundle issue add longstacktracezone into the dev build turn off source map until proper concatination of them is added ,feat
16618,gulp add systemregister bundle task ,feat
16619,render move service to render folder propertysetterfactory selector styleinliner styleurlresolver shadowcss ,refactor
16620,render delete copy file so we add them via move ,refactor
16621,build require gulptsdart at least at this fix the build by pulling in a later version that correctly ignores the e file ,fix
16622,packagejson update madge to v close ,chore
16623,ie first fix close ,fix
16624,gulp stop copying cjs file to the dist folder theyre already transpiled by the buildtranspilejscjs task ,chore
16625,render misc minor fix ,refactor
16626,darttransform add a di transformer add a transformer for di which generates ngdepsdart file for all dart file it is run on these ngdepsdart file register metadata for any injectable class fix unit test for change introduced by the di transformer when using pub buildserve modengstatic we will also generate getters and setter parse template and remove import of dartmirrors in the angular transform because this is still relatively immature we use the mode to keep it optin for now close ,feat
16627,di mark object injectable allow privatecomponentloader testability and testabilityregistry to be injected ,feat
16628,render move service to right location corecompilerevents renderdomevents corecompilerurlresolver servicesurlresolver corecompilerxhr service ,refactor
16629,render remove duplicate file to prepare for move remove first so github show the file a being moved instead of copied and deleted ,refactor
16630,di allow injecting event emitter fns without specifying type annotation fix close ,fix
16631,build add a tsdrc file for github rate limiting see ,fix
16632,selector add test with multiple attribute fix close ,test
16633,tooling add a clangformat for automated javascript formatting ,feat
16634,travis use testdart for dart test ,test
16635,build don ’ t read out chrome perflogs during ee test we do this a we are seeing flake in chrome with econnrefused also reuses the same browser window also reenables the infinite scroll benchmark close ,fix
16636,render add initial implementation of render layer ,feat
16637,gulp add typescript transpilation task ,chore
16638,testability add an initial scaffold for the testability api make each application component register itself onto the testability api and export the api onto the window object ,feat
16639,t introduce some typescript type declaration this us tsd to fetch the typing from another git repo ive forked the definitelytyped repo because some typing we use are not available upstream we should probably fork it in the angular org so everyone on the team ha commit access to our definitelytyped fork ,chore
16640,t patch traceurs type module only when targetting e output ,chore
16641,test add missing s ,fix
16642,docgen add temporary dump of all api doc remove unwanted character ,chore
16643,changedetection added changedetection to component ,feat
16644,t dont mask the regexp builtin doing so make it impossible to compile with typescript since it conflict with the shape of the regexp global var defined in the standard lib ,chore
16645,view refactored directivememento to expose property in a consistent way ,refactor
16646,form fixed a directive selector ,fix
16647,build actually code in the subset of j that traceurdart support ,fix
16648,docgen add temporary dump of all api doc accessible at angulardistpublicdocsoverviewdumphtml ,chore
16649,docgen add method signature to member and function close ,chore
16650,dart the traceur dart transpiler doesnt support shorthand syntax ,fix
16651,cssclass support binding to classlist close ,feat
16652,lifecycle minor fix ,doc
16653,dart dont instantiate abstract directive directive is an abstract class so it should not be instantiated directly in test ,fix
16654,dom add replacechild to dom adapter ,feat
16655,perf add angular implementation of largetable benchmark from angularjs x ,feat
16656,benchmarkutil remove strict equality check from getstringparameter transpiled dart code wa using identical method to compare which check reference equality even for string ,fix
16657,annotation added new text ,docs
16658,darttransform add unit test for urllinked template test expression and method generation from urllinked template ,test
16659,darttransform parse url value in template when a template annotation declares a url value parse it to generate getters setter and method which will it need to access reflectively ,feat
16660,test add a test for propertysetter on a class with a dash close fix ,fix
16661,annotation fix typo align doc with code close ,docs
16662,directive fix html in an example close ,docs
16663,build add packagejson again to the copy file for j ,fix
16664,release bump version to alpha for doc ,chore
16665,build publish doc a well and correct bench press doc ,fix
16666,release bump version somehow the version bump from alpha wa not submitted to master… ,chore
16667,release bump version ,chore
16668,bench press add initial doc ,docs
16669,bench press replace microiterations with micrometrics ,feat
16670,ci reorganize eeperf test running now running protractor configs by default only run ee test if the benchmark flag is added it run only the perf test and always restarts the browser in between test if the dryrun test is added the perf test are run only once this should make it easier to run perf test versus example ee test and help stabilize the travis build because perf test always run with a clean browser ,chore
16671,changedetector split light dom and shadow dom child ,feat
16672,changedetection added a directive lifecycle hook that is called after child are checked ,feat
16673,packagejson upgrade zonejs to v close ,chore
16674,form added missing type annotation close ,cleanup
16675,cd remove dead code ,refactor
16676,packagejson upgrade traceur to v fix in sourcemap test to follow through the sourcemap chain ,chore
16677,core improved doc on directive lifecycle ,docs
16678,changedetection pas binding propagation config to pipe registry ,feat
16679,build try to eliminate build flake by running dartstyleformat sequentially ,fix
16680,changedetection expose value when detecting change in keyvalue pair fix close ,fix
16681,form added a example of using form ,example
16682,elementbinderbuilder properly bind cs class with in their name fix close ,fix
16683,ci upgrade to new version of protractor and seleniumwebdriver protractor seleniumwebdriver ,chore
16684,t t doesnt like ,fix
16685,form made form work with single control ,feat
16686,test fixed a broken test ,fix
16687,form added support for array of control ,feat
16688,compiler factorize common util code dash camel close fix ,refactor
16689,core attribute annotation close fix ,feat
16690,dgeni set log level to warning ,chore
16691,di add a test for sync binding resolved async dependency ,test
16692,tsdart include srcfolderinsertion in tsdart step ,feat
16693,tsdart tsdart run on all j file update the experimental tsdart task to also read the e file which are the next step ,feature
16694,tsdart remove extra semi this break our tsdart transpilation ,chore
16695,tsdart tsdart doesnt support mixed typeduntyped var decl list ,chore
16696,compiler add support for setting attribute to component host element fix fix close ,feat
16697,privatecomponentloader explicit error message when loading a noncomponent fix ,feat
16698,privatecomponentloader add the loader to the app injector fix ,fix
16699,form added an observable of value change to control ,feat
16700,facade added support for observables ,feat
16701,build include tsdart transpile step in the angular build this only transpiles one package to start with di it ensures that package transpiles without error so no one can introduce nontypescript syntax next step is to widen the task input to cover additional package see design doc for the migration a convenience task tsdart is added for developing tsdart and it run all of the angular code through the transpiler to collect error ,feature
16702,view fixed view instantiation to use the component template change detector when creating bindingpropagationconfig ,fix
16703,docgen ignore nonjsdoc style comment now the visitor will find the last jsdoc style comment eg jsdoc comment before the current code item ignoring any inline style comment eg inline comment in between close ,chore
16704,docgen move publicmodule tagdef to base package this prevents unwanted unknown tag warning when generating the nonpublic doc ,chore
16705,docgen add specific template for displaying variable export close ,chore
16706,test add a comment on why test are disabled ,doc
16707,packaging bump version to alpha ,chore
16708,form added value accessor for inputtext ,feat
16709,formed changed form to use event and property setter instead of ngelement ,refactor
16710,form wrapped all validators into the validator class ,refactor
16711,selector support for multiple target fix close ,feat
16712,elementbinderbuilder properly bind to web component property fix close ,fix
16713,directiveparser remove check for missing directive based on the discussion in we cant reliably check if a given element ha a particular property at the compilation time a such the existing algorithm detecting missing directive cant be used we need to see if there is a different better algorithm or maybe those check need to be moved later in the process runtime leaving integration test in place disabled so we can come back to the topic after unblocking the situation this commit effectivelly reverts ebdfcbbafffcfffe ,refactor
16714,darttransform use packageguinness in test guinness is a dart port of jasmine since the rest of angular us jasmine use it for the transformer too close close close ,refactor
16715,darttransform test directivelinker a a unit formerly it wa tested only a a piece of the transformer pipeline add it own directory and test the linker on it own ,refactor
16716,darttransform minor logging change enable easier testing by providing a null log implementation and a way to use it ,refactor
16717,darttransform remove ngdata now that we have parser ngdata is redundant unnecessary ,refactor
16718,darttransform remove src from library directive conform to angular style by removing src from library directive completed with find name dart xargs sed i e slibrarysrclibrary close close ,style
16719,compiler support binding for any attribute close ,feat
16720,shadowcss support the new deep combinator syntax fix ref close ,feat
16721,installtest single cmd to full installtest test j wo dart npm install now doe a full install auxiliary installation step have been integrated into the postinstall script updated developer doc developermd accordingly also added instruction to dev doc for performing full test via npm test same a those run on travis reorg in test so that j test can run without a dart env partly fix under the assumption that when running j test locally chromecanary is the desired browser to use note that ci test travis still us dartiumwithwebplatform across the board maybe because chromecanary isnt being installed fix close ,chore
16722,viewcontainer removechild called with null parent in viewcontainerjs templateelementparentnode can be null when two template tag are nested in one another accessing the parent node through viewnodesparentnode fix the problem close close ,fix
16723,foreach change to forof with iterable rename foreach for rename array iterable update dartparsetreewriter update naiveinfinitescroll update todo fix test in foreachspec close ,refactor
16724,doc decorator event property a from what i understand shouldnt the event property rather be event close ,
16725,testlib remove isnodejs close ,refactor
16726,test clean test of if directive close ,chore
16727,docgen include exported variable declaration in public doc ,chore
16728,form added pristine and dirty ,feat
16729,form added a test checking support for select ,test
16730,form added support for textarea ,feat
16731,darttransform add simple parsetemplates step generate method in the parsetemplates step add a test for inline template method generation ,feat
16732,darttransform add simple parsetemplates step add a step that par inline template value to generate getters and setter ,feat
16733,darttransform implement htmllibdomadapter method adding support for some additional domadapter method necessary to run complier in the dart transformer ,feat
16734,developer rename ending to suffix ,docs
16735,propertybindingparser detect binding using full attribute name fix close ,fix
16736,test improve testunitcjs task close ,chore
16737,bootstrap report error on bootstrapping noncomponent directive fix test case added to exercise new error reporting also added extra test for when template is missing close ,fix
16738,propertybindingparser properly parse event binding a action fix close ,fix
16739,docgen fix attachcommenttreevisitor in the case that there were more than one comment block preceding a block of code the visitor wa only attaching the first comment really what we should do is to attach the last comment before the code block ,chore
16740,example fix type registration in helloworld fixing registertype call for content in indexstaticjs close ,fix
16741,di modify helloworld to use injectable mark greetingservice a available to injector close ,feat
16742,di add the injectable annotation to compiler mark compiler and it dependency a available to the injector ,feat
16743,di add the injectable annotation add an annotation marking a class a available to injector ,feat
16744,build check circular depencies in nodejs close ,feat
16745,darttransform rename ngdepsdart ngdepsdart update to conform with file naming convention close ,style
16746,applicationjs ensure bootstrap promise so people using something like systemjs wont break the promise chain and at the same time show that it a promise e promiseall app systemimportappthenmodule modulemain app systemimportappthenmodule modulemain app systemimportappthenmodule modulemain thenfunctioninjectors consolelogdem injector injector close ,docs
16747,test make it easier to run all j and dart test performed a slight refactoring of ci script to make it easier for developer to run the same test a those run on travis defined npm script testjs and testdart npm test now run the whole lot close ,chore
16748,developer add developer doc and refactor readme a first edition of developermd inspired from the angulardart version and expanded to include instruction given in this repos ’ readmemd which ha been cleaned up and padded up close ,docs
16749,directivedependency iterate only once over dependency property close ,perf
16750,install cleanup packagejson explicit path to nodemodulesbin isnt needed since npm prepends it to path see nmp script doc bowerrc bower default directory is bowercomponents hence no need to explicitly set it to this value ,chore
16751,doc decorator event typo ok im not sure trying to understand angular but according to what i can see shouldnt the decorator event property be event please correct me if im wrong p ,
16752,test more test in nodejs ,feat
16753,changedetection removed an unused method ,cleanup
16754,elementinjector added privatecomponentlocation ,feat
16755,compiler added the dynamiccomponent annotation ,feat
16756,docsapp remove commented code close ,style
16757,add publicmodule tag initial set of tag to demonstrate the public doc filtering close ,docs
16758,gulpfile duplicate task to generate public doc ,chore
16759,docgen add new public doc configuration ,chore
16760,docgen track module in a dgeni service ,chore
16761,view separate context and local ,refactor
16762,shadow dom do not use injector nor directive this prepares u for the apprender split in the compiler ,refactor
16763,benchmark add polymer j preview benchmark limitation because of preview status see doe not yet use shadowdom doe not use a builtin conditional like if us a temporary bower repository close ,feat
16764,bench press rename metric and adapt them to the feature of the browser rename metric add time suffix to all so that they are more consistent io doe not give u gc metric so they should not be reported rename scriptmicroavg into microscripttimeavg rename previous script metric into purescripttime metric and keep scripttime metric a the overall time so that we still have a shared metric across device independent of the supported browser feature microscripttimeavg is now based on overall scripttime including gc and render time move more shared di token into commonoptions previously sampleoptions close ,refactor
16765,test refactor test to clarify the behavior of onchange ,refactor
16766,view change view to pas all binding to proto change detector at once ,refactor
16767,testinjector reenable jsdoc comment for exported inject function this wa disabled due to a bug in dgeni see ,docs
16768,packagejson upgrade to dgenipackages close ,chore
16769,gulp fix typo htlm to html in a variable name close ,chore
16770,example add todomvc sample application ,feat
16771,directivesforms run test in nodejs close ,feat
16772,testinjector fix a build error with dgeni ,doc
16773,selector add support for not fix close ,feat
16774,darttransform move bindgenerator test to their own dir move existing bindgenerator test to it own directory and to test that phase specificially rather than the whole pipeline add another bindgenerator test ,test
16775,darttransform add a parser for ngdepsdart file and use use the parser in bindgenerator this checkin also remove type from registersetters call since they can cause runtime failure see we will resolve this by generating change detector class in the future ,feat
16776,darttransform add a ngdepsdart file parser create a common reusable ngdepsdart file parser all future transformer phase build on the information in ngdepsdart file ,feat
16777,darttransform change quote character for consistency use a a quote character in generated output instead of ,style
16778,test refactor some test to use the test injector ,refactor
16779,test add a test injector fix asynchronous test should inject an asynctestcompleter before itasync test done done after itasync test injectasynctestcompleter async asyncdone note inject is currently a function and the first parameter is the array of di token to inject a the test function parameter this construct is linked to traceur limitation the planned syntax is itasync test inject async asynctestcompleter asyncdone ,feat
16780,dartlibs add dart suffix only for reserved lib name close ,fix
16781,shadowdom allow conditional content tag distribution is triggered on the host element injector after each new view creation ,fix
16782,injector support binding to null ,feat
16783,propertysetter use the global reflector ,refactor
16784,testlib remove getdistributednodes emulation in nodejs ,fix
16785,service rename service close ,chore
16786,darttransform register parameter metadata information add any metadata attached to a parameter to the parameter value passed in to registertype for example mycomponentinjectfoo foo generates parameter const const const injectfoo also reorganizes the testing code close ,feat
16787,test add v category to server spec ,fix
16788,shadowdom turn on shadowdom emulated mode by default close ,feat
16789,compiler parse dom adapter close ,feat
16790,compiler remove direct access to dom close ,refactor
16791,contributing add contributing instruction a version of contributingmd slighted reworked from a merge of the relevant part of the dart and j version of this file ,chore
16792,darttransform restructure transform to independent phase update summary remove the need for resolution gaining transform speed at the cost of some precision and ability to detect error generates type registration in the package alongside their declaration ensures that line number do not change in transformed user code ,perf
16793,form add form builder ,feat
16794,form make form group responsible for supporting optional control ,refactor
16795,compiler remove direct access to dom in test close ,refactor
16796,compiler workaround for circular dependency in nodejs close ,fix
16797,compilestep use namespace to resolve circular dep issue ,fix
16798,eventhandler have a single instance of event handler per protoview ,refactor
16799,directive add the ability to declaratively bind event relates to ,feat
16800,elementbinderbuilder refactor pipe support ,refactor
16801,zonesmd fix typo and inconsistent capitalization close ,docs
16802,elementinjector implement propertysetter relates to ,feat
16803,compiler asynchronous error reporting ,fix
16804,benchpress add a file reporter ,feat
16805,bench press detect major gc ,feat
16806,build open new window for every benchmark ,fix
16807,bench press add microiterations option ,feat
16808,cssprocessor add support for csstransformers close ,feat
16809,compiler make shadow dom stragegy support more flexible ,refactor
16810,compiler simplify the code close ,refactor
16811,gulpfilejs minor correction removed unnecessary comma and semicolon close ,chore
16812,benchmark prepare publish to pub ,fix
16813,build copy file that are included in html file to the same folder this is eg needed to allow dart benchmark to be served via pub ,fix
16814,build report and fail on error tree benchmark wa broken and we didn ’ t know it… also change reporting to not include message from consoletime … ,fix
16815,form add support for nested form ,feat
16816,test move file from angulareetest to angularsrctestlib the eetest folder in angular never contained ee test but wa used to store utility for writing eeperf test a better place for them is angularsrctestlib close ,refactor
16817,di add support for optional dependency ,feat
16818,domadapter add type close ,feat
16819,browseradapter work around webkit bug with importing template element close close ,fix
16820,changedetection implement hydrationdehydration ,feat
16821,benchpress export webdriver adapter in benchpressbenchpress also add default binding for protractor also remove sync web driver adapter for dart a we don ’ t have test for it yet ,refactor
16822,packaging pub publish script ,chore
16823,doc fix typo in compiler integrationspecjs close ,fix
16824,refactor easier to make sense of attrtoprop map even if a bit reduntant ,chore
16825,compiler dom adapter htmllib implementation misc fix ,feat
16826,build make perf test work again ,fix
16827,di fix typo add some clarification or maybe expose my lack of understanding well see ,docs
16828,protractor fix mistyped argument value for samplesize ,test
16829,build enforce mobile layout during ee test this is important a we run our benchmark on mobile device a web driver test fails if button are not visible overlaid by other content ,feat
16830,compiler properly bind to property that dont have matching attr name fix close ,fix
16831,doc make them run again and integrate into ci ,fix
16832,bench press don ’ t use unicode in console reporter to prevent problem ,fix
16833,shadowdomstrategy implemented emulatedunscopedshadowdomstrategy the new strategy do not scope component style but make them global the former emulatedshadowstrategy ha been renamed to emulatedscopedshadowdomstrategy it doe scope the style ,feat
16834,styleurlresolver add support for medium query in import rule ,fix
16835,styleinliner add support for urlurl format ,fix
16836,build copy cs file ,feat
16837,regexp expose match index in dart ,feat
16838,form cleanup ,clean
16839,form add optional control ,feat
16840,form remove support for declaring form in html ,feat
16841,form add support for validation ,feat
16842,benchpress make test for error case also work in dart also introduces promisewrappercatcherror could not use promisewrappercatch a a name a dart would not allow this method name ,refactor
16843,compiler add a missing ,fix
16844,template loading add support for base url cs rewriting fix ,refactor
16845,componenturlmapper retrieve the base url for component ,feat
16846,shimshadowcss preserve attribute on style element ,fix
16847,styleurlresolver rewrite url in style ,feat
16848,urlresolver combine a base url with an url ,feat
16849,styleinliner styleinliner inlines import cs rule ,feat
16850,testlib support nottobepromise for dart ,feat
16851,completer rename complete to resolve ,refactor
16852,event add support for bubbling native event event refactor move domeventmanager into it own plugin ,feat
16853,viewcontainer fix injection on dynamically added view close ,fix
16854,testlib support a timeout for dart async test ,feat
16855,parser parse pipe in template binding ,fix
16856,darttransform generate setter stub generate call to reflectorregistersetters from the information in provided directivebind value this is only an initial attempt it cover only the most basic value of bind close ,feat
16857,injector fix dependency in static injector close ,fix
16858,directiveparser throw error when expected directive are not present close close ,feat
16859,benchpress support tdur in event ,fix
16860,publish update file to publish to npm ,feat
16861,build add general copymulticopy method ,feat
16862,packaging alpha pubspec cleanup ,chore
16863,rttsassert avoid deep recursion in prettyprint ,feat
16864,directivesmd change the description of bind property also add attribute open to the html close ,docs
16865,readme fix unit test task name close ,docs
16866,darttransform remove import of dartmirrors precede the call to new reflectioncapabilities with our generated code which populates the reflection map statically add the import of our generated code once we are generating all necessary code we will remove the import of reflectioncapabilitiesdart and the instantiation of reflectioncapabilities cutting the dependency on dartmirrors close ,feat
16867,benchpress benchpress fix and a smoke test for dart ,fix
16868,spec add spec argument to the protractor config allows to filter test to run close ,feat
16869,facade listwrappersort should not return the list this is the semantics of the regular arraysort in j so the wrapper should imitate this ,fix
16870,di fix code example close ,docs
16871,darttransform allow ctor stub to be tree shaken change the method used to discover directive annotated class to ensure that the dart code can be tree shaken close close x ,feat
16872,di introduce aliasing close close ,feat
16873,readme fix sample location in dart close ,docs
16874,changedetection handle local when invoking a method close ,fix
16875,changedetection pas the correct previous value when using pipe close ,fix
16876,bench press allow multiple reporter metric and driver extension ,feat
16877,changedetection add support for pipe in the template ,feat
16878,shadowdomemulation handle the case when the array of element injector ha null ,fix
16879,bench press use chrome tracing protocol and initial io support ,feat
16880,treebenchmark use angular if directive ,feat
16881,changedetection change binding syntax to explicitly specify pipe ,feat
16882,viewsplitter change template shorthand syntax from to fix close ,feat
16883,view move node into the live document when cloning close ,fix
16884,darttransform test use actual directive defn instead of mock in the transformer unit test we previously used a mock directive annotation this update substitute the actual angular directive annotation close ,refactor
16885,core workaround for circular dependency in nodejs close ,fix
16886,compiler introduce shimcomponent to shim cs dom in emulated mode close ,refactor
16887,shadowcss make the shim also accept a selector for the host ,feat
16888,shadowcss port implementation from webcomponentjs ,feat
16889,core remove direct access to dom close ,refactor
16890,changedetection remove circular dependency close ,refactor
16891,docgen hide additional export that throw off docgen close ,fix
16892,compiler add integration test for parent and ancestor ,chore
16893,compiler make directive binding optional fix ,feat
16894,build finally publish to rttsassert on npm ,fix
16895,ee upgrade protractor to and remove special case for shadow dom with protractor which installs chromedriver shadow dom is supported ,tests
16896,type add stringmap type ,fix
16897,application move class to the application level injector fix ,feat
16898,changedetection add support for pipe ,feat
16899,darttransformer initial commit of ctor stub annotation register close close close ,feat
16900,bench press wrap measure value into an object with time and iteration number close ,refactor
16901,testlib support deep compare of object with privatestatic field ,fix
16902,facade add support for date also refactors the dart transpilar to expose the type mapping for future change ,feat
16903,coretemplates add pre tag to improve layout close ,docs
16904,protoview use const for domaddclass domaddclassinsertionelement ngbinding domaddclassinsertionelement ngbindingclass close ,refactor
16905,templatesdirectives fix several typo close ,docs
16906,coretemplates fix various typo and grammatical error close ,docs
16907,coreformatters fix typo and grammar close ,docs
16908,core fix some typo ,docs
16909,packaging rename npm package to angular remove ng tag prefix ,chore
16910,packaging bump version to alpha ,chore
16911,build simplify the eeperf config via command line argument ,fix
16912,doc add a processor to get the name of a guide doc from it markdown ,chore
16913,changedetection add explicit name and description this demonstrates how to override the name of a guide doc ,docs
16914,doc use the name rather than the id for the title of guide doc ,chore
16915,directive templateconfig template update doc with new template api and remove previous cssurl api ,docs
16916,readme update prerequisite due to this commit make explicitly clear that version of the pub command line tool is required to run a local build with gulp build ,chore
16917,benchpress rewritten implementation limitation cloud reporter is not yet supported any more ,feat
16918,transpiler support arrow function with complex body in named argument ,fix
16919,packagejson update to dgeni this get rid of the unknown tag error in the dgeni build ,chore
16920,packagejson update to dgeni ,chore
16921,coreformatters add some dummy code to stop marked plugin from bombing ,docs
16922,benchmark fix scrolling benchmark add more test ,fix
16923,build split dart and j build ,chore
16924,compiler multiple template per component fix templateconfig becomes template introduce a templateresolver to pick the cmp template component and template are disociated ,feat
16925,viewport template viewport viewport viewcontainer fix ,refactor
16926,facade remove dependency to rttsassert close ,refactor
16927,templateconfig support array of array in templateconfig directive fix close ,feat
16928,eventmanager implement the eventmanager ,feat
16929,changedetection add an integration test verifying that binding propagation config work ,test
16930,sourcemaps add ee test ,chore
16931,build support transpile to commonjs ,fix
16932,view viewport light should come from the direct parent ,fix
16933,viewspec drop somecomponentwithemulatedshadowdom ,refactor
16934,build use rttsassert instead of ngrttsassert we have the right now ,fix
16935,build add npm publish script also fix gulpfile runsequence need to be called with done callback esbuild should only run when the task executes… ,feat
16936,compiler element with event only create binder but not protoelementinjectors close ,fix
16937,build add packagejson and readmemd for publishing to npm ,feat
16938,build transpile to e transpile all source first to e which we can publish and then to e also merge the generated source map into once map ,feat
16939,form add support for checkbox ,feat
16940,compiler use promise only when strictly required ,perf
16941,shadowdomtransformer create a compiler step to transform the shadow dom ,feature
16942,viewpool add a view pool of dehydrated view per protoview ,feat
16943,templatesmd typo fix spelling error in templatesmd close ,docs
16944,packaging automatically copy license to dist folder ,feat
16945,readme correct path to j example after dir structure reorg ,docs
16946,transpile fix usage of int and reference to assert module ,fix
16947,setup use upstream traceur with explicit patch also correct the transpile to e also support generic correctly all patch are hooked in via toolstranspilerindexjs ,fix
16948,setup don ’ t transpile transpiler source via karma only the spec ,fix
16949,test show stack trace for transpiler unitttests ,fix
16950,compiler add missing support to string literal fix close ,fix
16951,var assignment of component or element instance to var ,feat
16952,changedetection rename group memento into directive memento ,refactor
16953,changedetection rename field name ,cleanup
16954,directive directive use declare that they listen to onchange in the annotation ,refactor
16955,pub update author ,chore
16956,pub add primary author description and homepage to pubspec ,chore
16957,form rename decorator into directive ,refactor
16958,form initial implementation of form declared in html ,feat
16959,di add a test to di checking that child binding are not used when resolving the dependency of a parent binding ,test
16960,directive drop ng prefix from all angular directive and rename ngrepeat to foreach fix close ,refactor
16961,lifecycle remove cyclic dependency fix close ,fix
16962,view remove obsolete hack comment ,chore
16963,benchmark fix infinite scroll benchmark ,fix
16964,compiler shadowdom add templateloader using xhr also add cs shimming for emulated shadow dom and make the shadowdom strategy global to the application ,feat
16965,perf port table scrolling benchmark to angular ,feat
16966,build escape dollar sign in darttranspiled string literal escape dollar sign in string literal dart should not interpolate them close ,fix
16967,packaging update import in tool ,chore
16968,build ignore info analyzer warning ,chore
16969,packaging fix warning in form ,chore
16970,packaging update import in form ,chore
16971,packaging update benchmark import ,chore
16972,merge form compiler ,chore
16973,packaging update import for the new file structure ,chore
16974,packaging move file to match target file structure ,chore
16975,build add nodejsbased unit test for dart transpiler this add a unit test to the transpiler existing test are themselves transpiled to e which make it impossible to do some kind of assertion for example this will be useful to repro in this change the actual issue isnt fixed it only add the reproduction it us the jasmine test runner since it already used by the doc test that us version of jasmine which isnt ideal but i want to be consistent for now i discussed with tobias the possibility of switching to mocha for these nodejsbased test and we might do that sometime later ,feature
16976,template add bang syntax shortcut close ,feat
16977,form initial implementation of form ,feat
16978,zone update to v close ,fix
16979,cleanup remove unused test method ,chore
16980,compiler add bindingpropagationconfig to the list of prebuilt object ,feat
16981,changedetection add mode to changedetector ,feat
16982,changedetection update change detection benchmark ,feat
16983,changedetection do not register a change from switching from null to null ,feat
16984,build explicitly mention src folder in import export file are now directly under the module folder eg corecorejs with this an import like corecore won ’ t need a path mapping eg via systempaths any more this add the src folder to all other import statement a well ,refactor
16985,build auto format the generated dart code fix close ,feat
16986,ngrepeat activate index ,fix
16987,changedetection use object pool not to create unnecessary garbage ,perf
16988,test don ’ t fail on current chrome canary ,fix
16989,testlib support comparing map in nested structure ,fix
16990,changedetection modify change detector to recompute pure function only when their args change ,feat
16991,changedetection change proto change detector to coalesce record ,feat
16992,pipeline fix some inline doc close ,docs
16993,changedetection implement a change detector generator ,feat
16994,perf add angulardart v of table scrolling benchmark ,feat
16995,editorconfig include markdown config ,chore
16996,lightdom refactor the code ,refactor
16997,test make angular compiler perf test use correct param name ,fix
16998,perf use correct param name in compiler benchmark ,fix
16999,ngif remove onchange ,cleanup
17000,packagejson npm no repository field npm install yield a warning bash npm warn packagejson angular no repository field also include bug ,chore
17001,package introduce a catchall package angular modulesangular ha no implementation but depends on all the piece that make angular core di directive etc it is the package that all client apps will depend on ,feat
17002,interpolation switch to new ast api ,fix
17003,ngif replace createelement by el ,refactor
17004,cd special cased interpolation in ast parser and cd ,perf
17005,cd report all change on first cd run null value would not have been reported for dart undefined value would not have been reported for j close ,fix
17006,readme warn that this repo is for angular there are lot of issue being created regarding the version in this repo warning the user that this repo is for angular should avoid this confusion close ,chore
17007,ngif an implementation of ngif close ,feat
17008,gulpfile fix the pubbuild task on window close ,fix
17009,readme add step to start local webserver before running perf test ,docs
17010,test update protractor to x and use jasmine a framework there are no change necessary in the current test code for the update to jasmine framework ,chore
17011,compiler fix a bug with top level template directive ,fix
17012,compiler fix directive registration order fix ,fix
17013,event add support for injectable angular event emitter event emitter can be injected into directive event emitter take over browser event with the same name emitted event do not bubble event emitter can be injected even if there is no corresponding callback in the template use a follows decorator class mydeceventemitterclick clickemitter fireclick var eventdata thisclickemittereventdata ,feat
17014,directive add ngswitch directive ,feat
17015,onchange update message to ease debugging ,refactor
17016,cd add type ,style
17017,listwrapper fix j listwrapperremove ,fix
17018,view add dehydration call to ngrepeat removed view close ,fix
17019,changedetection reimplement change detection ,feat
17020,perf cloud reporter calculate insertid correctly so that we don ’ t loose row ,fix
17021,event add the event local variable to the handler context ,feat
17022,parser make method call aware of contextwithvariablebindings ,feat
17023,perf disable wake lock and cpu freq scaling on android ,feat
17024,ngrepeat enables nested ngrepeat test it wa failing previously because we were using nested li incorrectly ,test
17025,lang add missing type annotation jsdart ,style
17026,gulpfile add buildcleandocs task ,chore
17027,bench press remove check for android this is already covered by initandroidsh ,fix
17028,perf cloud reporter should retry in case of a timeout ,feat
17029,perf cloud reporter more generic table layout ,feat
17030,perf increase default timeout for perf test ,fix
17031,perf fix selector benchmark ,fix
17032,perf autoscale benchmark depending on the browser ,feat
17033,build support multiple configurable browser for ee and perf test also includes browser configuration for android ,refactor
17034,event extract eventhandler to new function scope ,fix
17035,event check hydration before firing event it is unlikely but it can happen that an event is fired on a dehydrated view extra guard asserts the event fire only on hydrated view ,fix
17036,directive notify directive before they get destroyed ,feat
17037,emuldatedshadowdom implement intermediate content tag ,feat
17038,largetable add angularjs x largetable benchmark ,feat
17039,treebenchmark bootstrap only relevant portion to prevent angular from clobbering form ,fix
17040,benchpress add getstringparameter method to support text and radio input ,feat
17041,benchpress add filter for when cloud config is not present ,fix
17042,benchmark add cloud reporter add params add console and cloud reporter via google bigquery make parameter of test explicit and modifiable remove detect and ignoregc mode from benchpress a these can result in unstable number ,refactor
17043,ee add event to hello world static extends ee test to cover event ,fix
17044,test exctract createelement into a helper ,refactor
17045,view add event binding to view instantiation only native nonbubbling event are supported by the commit ,feat
17046,benchmark remove duplicate line ,fix
17047,elementinjector add distance to propertly implement parent ,feat
17048,view code simplification ,refactor
17049,doc module path must have explicit j extension traceur had a breaking change in the path to module previously there wa an implicit j extension added but this must now be explicit ,chore
17050,directive add ngnonbindable directive ,feat
17051,compiler handle compilechildren from decorator ,feat
17052,ngrepeat remove dead code ,refactor
17053,compiler allow ignoring element child ,feat
17054,pipelinespec remove dead code ,refactor
17055,bootstrap change bootstrap not to create a separate injector for the provided binding currently we create a separate injector for the passedin root binding this injector sits below the one creating the application component this mean that the applicaiton component can not access the passedin binding ,fix
17056,component initial implementation of emulated content tag ,feat
17057,test add ee test for benchmark and example disables running the actual benchmark on every commit a well to speed up the build ,feat
17058,benchpress show more metric and make the run mode configurable show the metric script render gcamount gcamountinscript gctime run mode detect auto detect whether to force gc forcegc force a gc before every run and ignores no run nogcinscript ignore run that have gc while a script wa executing plain doe not force gc nor ignore run close ,feat
17059,benchmark rename timebenchmark into benchmark ,refactor
17060,bench press add clarifying comment ,docs
17061,change detection minimized amount of code in protective trycatch ,perf
17062,compiler fix nextsibling iterator in compiler due to dom manipulation happening during compilation it is not correct to call nextsibling after compilation step ,fix
17063,protoview element injector should have either a parent or a host fix ,fix
17064,elementbinderbuilder allow a directive to have mutliple binding fix ,fix
17065,compiler fix a typo in bindnameregexp ,fix
17066,async add missing type annotation jsdart ,style
17067,readme missing project name ,docs
17068,perf ee test and benchpress should be written in e ,refactor
17069,traceur update to fix ,chore
17070,perf introduce benchpress major change make api more reusable format output nicely only force gc if needed regarding forcing gc forcing gc can change script execution time we now dont force gc at first and ignore result where gc happens during script execution when we ignored too many result we switch to forcing gc close ,refactor
17071,compiler fix a dart analyzer warning ,fix
17072,gulpfile fix the dartanalyzer task ,fix
17073,perf move navigation into test file and rename runsimplebenchmark ,refactor
17074,perf measure error and stop automatically when the number are good enough ,feat
17075,di change dijs to declare all exported symbol ,cleanup
17076,changedetection add changedetection library file ,refactor
17077,testlib implement spyobject ,feat
17078,transpiler implement implement ,feat
17079,core fix dart analyzer warning ,cleanup
17080,view add support for component that use shadow dom emulation ,feat
17081,perf use webdriver to execute benchmark use performance log of chromedriver appium to get timeline data for calculating metric for benchmark change all benchmark to be made of a standalone application and a protractor test that collectes timeline data fix and simplify benchmark add dartjs to build remove benchpress close ,refactor
17082,changedetector wrap exception into changedetectionerror changedetectionerror reference the original error and the location where the error happened ,feat
17083,parser align expression language with host language remove enhancement to the language from the parser so the expression language mimic the host language ,refactor
17084,examplesdart initialize the reflector fix ,fix
17085,examplesdart add lifecycle to the reflector ,fix
17086,changedispatcher update the onrecordchange signature ,fix
17087,core add missing type annotation ,style
17088,changedetector add a way to inspect record and record range ,feat
17089,zone add support for long stack trace ,feat
17090,compiler pas compilation unit to the parser ,feat
17091,build disable the analysis of thirdparty libs ,fix
17092,build run dartanalyzer after transpiler and html to avoid race ,fix
17093,zone cleanup ,cleanup
17094,gulpfile add zonejs to the list of deps ,chore
17095,bootstrap use vmturnzone and lifecycle to bootstrap an application ,feat
17096,lifecycle change lifecycle to be able register it with a zone ,feat
17097,zone add initial implementation of vmturnzone ,feat
17098,ngrepeat initial implementaion of ngrepeat add support for content binding via directive module ,feat
17099,analyzer fix a warning about an unused variable ,fix
17100,view inline and refactor view instantiation and hydration don ’ t convert dom array into j array via arrayslice inline static method for instantiation and hydration misc cleanup close ,perf
17101,changedetection ensure that expression do not change after they have been checked ,feat
17102,script make chrome launcher executable ,fix
17103,benchmark tree benchmark baseline ,feat
17104,change detection remove the usage of getterssetters firefox is x faster v m chrome is slower v m chrome is still x faster than firefox ,perf
17105,change detection track the range group on change only x speed improvement with firefox there is no need to track the range group for all the record but only for the record that have changed ,perf
17106,change detection rename watchgroupdispatcher to changedispatcher ,style
17107,benchmark initial version of tree benchmark close ,feat
17108,benchmarksexternal use angular dart transformer ,fix
17109,benchmark use explicit main function and do not reexport otherwise pub would not pick it up eg for dartjs ,fix
17110,build analyze example and benchmark again ,fix
17111,core export viewport in the public export ,fix
17112,application also bind the root component to the injector ,fix
17113,compiler allow recursive component ,feat
17114,build gulp buildjsprod should call benchpressjsprod ,fix
17115,changedetector move enablerecorddisablerecord into the record class ,refactor
17116,changedetector adding new range when disabling the current enabled record ,fix
17117,doc refactor traceur usage ,chore
17118,doc add code prettification close ,chore
17119,doc fix docswatch task name ,chore
17120,view remove unused code ,cleanup
17121,view fix directivepropertygroupmemento to return a new group instead of null ,fix
17122,build simplify and modularize simplify use same html file for dart and j build benchmark automatically when doing gulp build centralize configuration modularize move all build task into separate nodejs module under toolsbuild change the build folder is now the dist folder close ,refactor
17123,gulp dont run pub get in parallel to avoid a race condition ,chore
17124,build replace deprecated gulprimraf by node del see deletefilesfoldermd ,chore
17125,change detection fix merge error ,fix
17126,view add dehydration of view and template var dehydrated view are view that are structurally fixed but their directive instance and viewports are purged support for local binding is added to the view ,feat
17127,recordrange optimize disable there could be no lastenabledchildrecord when there is no firstenabledchildrecord save time by skipping findlastenabledrecord when the result is know to be null save a test a ispresentlastenabledchildrecord ispresentfirstenabledchildrecord ,perf
17128,doc initial dgeni doc generation close ,chore
17129,disrcannotations use triple backticks to codefence code block ,docs
17130,gulp skip dart task when the sdk is not detected fix ,chore
17131,changedetection add baseline to change detection benchmark ,perf
17132,changedetector notify directive on property change ,feat
17133,recordrange fix bug when disabling empty range ,fix
17134,example add static dart hello world example use gulp examplespubserve to start up the server and go to to see the static app ,feat
17135,protorecordrange reuse a protorecordcreator ,perf
17136,protorecord remove the unused prev field ,perf
17137,transpiler transform forof to dart a forin fix ,feat
17138,change detector add support for collection content watch ,feat
17139,change detection remove a useless test only implicit receiver record get their context updated since ,perf
17140,change detection add support for keyed access ,feat
17141,viewport add initial integration test for template directive ,feat
17142,compiler allow identifier with in the template binding a key ,fix
17143,compiler always wrap view into an own template element this is needed to allow view instantiation also in browser that don ’ t support the template element and because of this would return element from the content of template element when using elementqueryselectorall also store the elementbindernestedprotoview correctly when a template directive wa used on a template element ,fix
17144,example correct markup in the hello world example ,fix
17145,dart promise handling ,fix
17146,dart fix analyzer warning ,fix
17147,example fix helloworld example j added missing path mapping for the new reflection module ,fix
17148,parser add support for variable binding ,feat
17149,parser handle empty string ,fix
17150,di add opaquetoken to di using new object a a token cause cryptic error opaquetoken class should be used instead ,feat
17151,compiler add a benchmark measuring view instantiation in angulardart ,benchmark
17152,viewport add initial implementation of viewport viewport is the mechanism backing template directive those directive can use the viewport to dynamically create attach and detach view ,feat
17153,changedetection make recordrange responsible for removing iself ,refactor
17154,changedetector fix issue with handling empty range ,fix
17155,benchmark add the reflection module to benchmark config file ,fix
17156,benchmark rename pathsjs into registersystemjs to match other benchmark ,refactor
17157,reflection update pubspecyaml to add a missing dependency on reflection ,fix
17158,reflection fix a typo ,fix
17159,changedetection add benchmark ,feat
17160,reflection extract reflection capability into a separate module ,feat
17161,recordrange set context for implicit receiver only ,feat
17162,changedetection convert recordmode to a bit field ,feat
17163,example helloworld app on window ,fix
17164,readme add example to readme ,doc
17165,example add comment to the hello world app explains the basic concept a seen in the demo app but it is not a substitute for proper documentation which will come later ,doc
17166,changedetector rename watchgroup into recordrange ,refactor
17167,changedetector implement enablingdisabling watch group ,feat
17168,build don ’ t do pub get until all pub spec have been copied fix close ,fix
17169,compiler support on and ,feat
17170,compiler new semantics for template attribute and view variable support div template “ … ” including parsing the expression within the attribute support template letngrepeat “ row ” add attribute interpolation wa missing previously ,feat
17171,class field handle untyped field ,fix
17172,example add helloworld app the app is writen in e and transpiles to e and dart a part of the usual build the app contains a component a directive and a service wired together through dependency injection before each gulp build for e gulp serve open localhostjsexampleslibhelloworld for dart gulp examplespubserve open localhost ,feat
17173,bootstraping application bootstrapping implementation entrypoint to bootstrapping is a rootcomponent the bootstrapping method us the component selector to find the insertion element in the dom and attache the component in it shadowroot ,feat
17174,changedetector change view to construct a watchgroup hierarchy ,feat
17175,change detection child watch group ,feat
17176,testlib allow equality test for map ,fix
17177,compiler use parenthesis around expression and escape quote ,fix
17178,elementinjector remove stale file and make statickeys private ,refactor
17179,changedetector implement enablingdisabling record ,feat
17180,benchmark simplify writing benchmark add benchmarksbenchpress module and adjusts the compiler benchmark to use it also add the angular benchmark to the compiler benchmark close ,refactor
17181,view add support for instantiation of nested component view include shadowdom creation and integration test for nested component fix accidentally clobbered modulescoretestcompilerviewspecjs by previous commit ,feat
17182,compiler add benchmark compileemptytemplate compileelementsnobindings compileelementswithbindings for the result see the pr close ,feat
17183,changedetectionlexer support production mode the lexer us the global assert function of dart which is not yet available in javascript later on all assert statement should be automatically removed by traceur ,fix
17184,elementinjector add ngelement ,feat
17185,elementinjector change elementinjector so parent and ancestor do not include self ,feat
17186,changedetector pas formatters when instantiating a watch group ,refactor
17187,changedetector cleanup ,feat
17188,changedetector add support for map literal ,feat
17189,changedetector add support for array literal ,feat
17190,changedetector add support for ternary ,feat
17191,changedetector add support for negate ,feat
17192,changedetector add support for method call ,feat
17193,changedetector add support for formatters ,feat
17194,changedetection add support for binary operation and literal ,feat
17195,annotation replace module function with plain list renames elementservices shadowdomservices ,refactor
17196,compiler view centralize templateelement check and fix inconsistency fix close ,fix
17197,elementbinder store componentdirective and templatedirective a well ,refactor
17198,baseexception support stack trace in baseexception ,fix
17199,elementinjector support component allow to access containing component directive instance from the shadow dom allow to access app service of the app level injector of the component when the component is instantiated ,refactor
17200,transilerdart reexport imported var import foo from ‘ foo ’ var localvar true export foo localvar import ‘ foo ’ show foo export ‘ foo ’ show foo var localvar true close ,feat
17201,transpilerdart reexporting only some binding export foo bar from ‘ foo ’ export ‘ foo ’ show foo bar ,fix
17202,compiler initial version of the compiler support bind text node element property and directive property locates decorator component and template directive inline template of component the compiler is built using a pipeline design see coresrccompilerpipeline package integration test to show how the compiler changedetection and di work together coretestcompilerintegrationspecjs ,feat
17203,lang fix small typo ,fix
17204,di simple typo ,docs
17205,transpiler transform template string to triple quoted dart string ,feat
17206,transpiler support optional argument in annotation cleanup move annotaitons out of fixturesannotations since we have the const annotation in the transpiler already ,bug
17207,parser cleanup ,refactor
17208,packagejson correct apache license close ,chore
17209,transpiler class field for dart ,feat
17210,deps update traceur ,feat
17211,key extract keyregistry to remove the need in keyclear ,refactor
17212,protoelementinjector change instantiate to take positional args ,refactor
17213,elementinjector use index instead of the elementinjector field to instantiate element injector ,refactor
17214,parser cleanup ,refactor
17215,parser cleanup ,refactor
17216,parser add support for method invocation ,feat
17217,parser improve error handling ,feat
17218,parser add support for array and map ,feat
17219,parser add support for assignment ,feat
17220,transpiler allow const annotation on class close ,feat
17221,change detection implement map change ,feat
17222,change detection implement collection change ,feat
17223,gulptraceur better error reporting use original filename when printing error instead of the output ,chore
17224,travis fix the build i don ’ t know what the issue really is there is some weird race condition where the task copy the file pubspecyml and then start pub get which read that file and the file is not there or is empty i have no idea why moving this task into a separate process fix the issue but i don ’ t wan na waste more time on it ,chore
17225,karma add karmaconfjs symlink so that i can run karma start instead of karma start karmajsconfjs ,chore
17226,example make it work ,fix
17227,parser clean up test ,refactor
17228,parser add type annotation to all ast class ,cleanup
17229,parser split parse into parsebinding and parseaction ,feat
17230,parser add support for formatters ,feat
17231,parser throw when expected an identifier ,feat
17232,parser change parser to return null when one of the operand is null ,feat
17233,parser add support for ternary operator ,feat
17234,parser add basic expression to the parser mostly copy pasta from angulardart remove getterfactory in favor for closuremap which ha basically the same implementation ,feat
17235,elementbinder introduce element binder it is a plainolddata class to seperate the protoinjector from the textnodes and elementbinding data ,feat
17236,debug add instruction for debugging the test in the readme ,doc
17237,view hook watch group instantiation in the view ,feat
17238,parser implement parser add a simple parser implementation that support only field read ,feat
17239,testlib change testlibdart to structurally compare object ,feat
17240,elementinjector throw when encounter a cyclic dependency ,feat
17241,view add onchange implementation to view ,feat
17242,readme add missing prerequsite karmacli close ,docs
17243,readme add installation of pub a a prerequisite close ,docs
17244,selector initial version of the selector ,feat
17245,facadecollection add stringmap support ,feat
17246,facadelang add math and regexp support ,feat
17247,facadelang use strict equality for performance ,fix
17248,travis cleanup travisyml ,chore
17249,gulp cleanup gulp file remove duplicated path readline deps order dep alphabetically ,chore
17250,changedetector add support for chained property ,feat
17251,pubspec fix a typo ,chore
17252,elementinjector add a benchmark measuring the instantiation of element injector without using reflection ,perf
17253,elementinjector change elementinjector to accept binding or type ,feat
17254,super super now mean call the proto of the current function see compilercommiteeddfaebcfbfaeabfc ,fix
17255,view implement protoviewinstantiate ,feat
17256,elementinjector add support for special object ,feat
17257,elementinjector implement elementinjector ,feat
17258,di add metadata to key ,feat
17259,collection use map instead of object ,refactor
17260,benchmark add a simple benchmark for the di module ,feat
17261,transpiler add support for getters ,feat
17262,di add doc to di module ,docs
17263,injector add support for default binding ,feat
17264,transpiler add support for named params to new expression ,feat
17265,di use boolean instead of bool ,refactor
17266,di cleanup ,refactor
17267,di simplify injector api ,refactor
17268,di cleanup to make dartanalyzer happy ,refactor
17269,di make use of optional parameter ,refactor
17270,injector implement support for nested binding ,refactor
17271,di add new line ,style
17272,injector change tofactory to use reflector to construct dependency ,refactor
17273,injector cleanup ,refactor
17274,injector change injector to recover from error so it can instantiate an object after a failed attempt ,feat
17275,di move dependency from keyjs to bindingjs ,refactor
17276,transpiler instanceof ,refactor
17277,transpiler add spec for instanceof ,test
17278,transpiler show filepath when error happens ,chore
17279,transpiler only call transformvisit when defined our custom parsetree class should not expect that every transformervisitor defines the method to transformvisit them ,fix
17280,transpiler add support for arrow function fix ,feat
17281,transpiler implement optional params ,feat
17282,named parameter mimic original traceur architecture ,refactor
17283,change detection implement barebone changedetector fix ,feature
17284,transpiler add a cycle import spec ,test
17285,karma use chromecanary a the default for j close ,chore
17286,scanner port the rest of the lexer test from angulardart close ,test
17287,reflector cleanup ,refactor
17288,reflector formatting ,style
17289,injector us one instance of reflector instead of creating a new instance every time ,refactor
17290,injector cleanup ,refactor
17291,injector add field annotation to key and dependency ,refactor
17292,injector add bool and int annotation ,refactor
17293,facade add bool type ,feat
17294,injector remove dierror ,refactor
17295,injector change injector to show the full path when error happens in a constructor async ,feat
17296,injector handle async cyclic dependency ,feat
17297,injector implement injectlazy ,feat
17298,injector handle inprogress async construction ,feat
17299,injector handle construction error detect cyclic deps handle initialization error ,feat
17300,injector implement async dependency ,feat
17301,injector use const to create the inject annotation ,refactor
17302,injector change reflector to collect the resolving path only when an error occurs ,refactor
17303,facade instantiate a fixed length array ,refactor
17304,injector rename humanize into stringify ,refactor
17305,injector initial implementaion of dynamic injector ,feat
17306,transpiler constructor and typed field semantics fix constructor and typed field semantics fix should we infer class property type from ctor args fix number j should map to num dart close ,feat
17307,build execute pub get only if a pubspecyaml changed and run dart analyzer on all dart file pub get is now only executed when the pubspecyaml in the module folder is different than the pubspecyaml in the builddart folder generates the file builddartanalyzerdart that import all module to run dart analyzer against all of them the build will fail whenever there are error warning or hint in dart analyzer change the source so that dart analyzer doe not report any error warning or hint close ,chore
17308,transpiler handle named params ,feat
17309,lexer rename to scanner use ints etc ,refactor
17310,facadelang support int ,feat
17311,dartwriter support string interpolation ,feat
17312,lexer initial wip implementation ,feat
17313,dartwriter number j map to num dart ,fix
17314,readme howto debug the transpiler ,doc
17315,transpiler split the monolithic dart transformer fix the new architecture conforms with the traceur architecture ,refactor
17316,readme update instruction ,chore
17317,example make todo example run again ,fix
17318,jsdart make test work again ,fix
17319,jsdart use the parent functionality a mush a possible close ,refactor
17320,jsdart refactor dart library statement fix close ,refactor
17321,build make watch faster only build what is needed ,chore
17322,build update to updated version in jsdart ,chore
